<?php
defined('BASEPATH') OR exit('No direct script access allowed');
ini_set('memory_limit', '4400M');
class Order extends CI_Controller {
    function __construct() {
        error_reporting(0);
        parent::__construct();
        $this->load->model('Admin/Users_model');
        if (isset($this->session->userdata['logged_in'])) {
            $sess_array = $this->session->userdata['logged_in'];
            $userid = $sess_array['userid'];
            $email = $sess_array['email'];
            $sales_id = $sess_array['sales_id'];
            $define_saleshd_id = $sess_array['define_saleshd_id'];
            $define_salesteam_id = $sess_array['define_salesteam_id'];
            $define_driver_id = $sess_array['define_driver_id'];
            $customer_id = $sess_array['customer_id'];
            $username = $sess_array['username'];
            $this->userid = $userid;
            $this->username = $username;
            $this->user_mail = $email;
            $this->sales_id = $sales_id;
            $this->define_saleshd_id = $define_saleshd_id;
            $this->define_salesteam_id = $define_salesteam_id;
            $this->define_driver_id = $define_driver_id;
            $this->customer_id = $customer_id;
            profile($this->user_mail);
        }
    }


      function maxlength($id)
    {


            $lengeth=0;
            $lengeth_array=array();
            $query_profle_get = $this->db->query("SELECT profile as profile,crimp,uom FROM order_product_list_process  WHERE order_id='" .$id ."' AND deleteid=0 AND profile>0 AND categories_id NOT IN ('13','591')");

            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                    $valuess->profile = $valuess->profile+$valuess->crimp;

                   if($valuess->uom=='3')
                    {
                        $lengeth = $valuess->profile;
                    }
                    if($valuess->uom=='4')
                    {

                        $lengeth = $valuess->profile/304.8;
                        $lengeth=round($lengeth,2);

                    }
                    if($valuess->uom=='5')
                    {

                        $lengeth = $valuess->profile*3.281;
                        $lengeth=round($lengeth,2);

                    }
                    if($valuess->uom=='6')
                    {
                         $lengeth = $valuess->profile/12;
                         $lengeth=round($lengeth,2);
                    }
                    $lengeth_array[] = $lengeth;
            }
            
            $lengeth=max($lengeth_array);
           return $lengeth=round($lengeth,2);
    }

   public function edit_log()
    {


            if(isset($this->session->userdata['logged_in']))
            {

                
                
                 $data['admin_users'] = $this->Main_model->where_names('admin_users','deleteid','0');

if($_GET['tablename']=='order_product_list_process')
{

 $data['bill_changes_log'] = $this->Main_model->where_names_two_order_by('bill_changes_log','tablename', $_GET['tablename'],'order_no', $_GET['order_no'],'id', 'DESC');  

}
else
{

if($_GET['order_id'] == '119332' || $_GET['order_id'] == '150133'){

    $data['bill_changes_log'] = $this->Main_model->where_names_three_order_by('bill_changes_log','tablename', $_GET['tablename'], 'order_id', $_GET['order_id'], 'order_no', $_GET['order_no'],'id', 'DESC');  

}else{

     $data['bill_changes_log'] = $this->Main_model->where_names_three_order_by('bill_changes_log_version','tablename', $_GET['tablename'], 'order_id', $_GET['order_id'], 'order_no', $_GET['order_no'],'id', 'DESC');   
 }

}
             


                 $data['order_no']=$_GET['order_no'];
                 $data['active_base']='customer_1';
                 $data['active']='customer_1';
                 $data['title']    = 'Edit Log List '.$_GET['order_no'];
                 $data['top_nav']  = $this->load->view('commen/top_nav', $data, TRUE);
                 $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
                 $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
                 $this->load->view('order/edit_log_list',$data);
            
            
            }
            else
            {

                 $this->load->view('admin/index');

            }


    }



 public function order_overview()
 {




        //$data["locality"] = $this->Main_model->where_names("locality","deleteid","0");
        ///$resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
        //$data["layout_plan"] = $resultmain->result();

        $data[
            "overview_invoice_content"
        ] = $this->Main_model->where_names_order_by(
            "overview_invoice_content",
            "deleteid",
            "0",
            "id",
            "ASC"
        );
        $data["user_group"] = $this->Main_model->where_names(
            "sales_group",
            "deleteid",
            "0"
        );

        $data["sales_team"] = $this->Main_model->where_names_two_order_by(
            "admin_users",
            "access",
            "12",
            "deleteid",
            "0",
            "id",
            "ASC"
        );

        $data["enable_order"] = $_GET["order_id"];
        $data["base"] = $_GET["base"];
        $base = $_GET["base"];
        $neworder_id = base64_decode($_GET["order_id"]);


        $data['Content_view']=0;
        if(isset($_GET['Content_view']))
        {
             $data['Content_view']='d-none';  
        }

        if ($base == 1) {
            $data["old_tablename"] = "orders";
            $data["old_tablename_sub"] = "order_product_list";
            $data["tablename"] = "orders";
            $data["tablename_sub"] = "order_product_list";
            $data["movetablename"] = "orders";
            $data["movetablename_sub"] = "order_product_list";
            $data["order_title"] = "ENQUIRY";
            $data["order_lable"] = "Enquiry Create";
            $data["missed"] = "Enquiry";
            $data["move"] = "Order ";
        }

        if ($base == 2) {
            $data["old_tablename"] = "orders";
            $data["old_tablename_sub"] = "order_product_list";
            $data["tablename"] = "orders_quotation";
            $data["tablename_sub"] = "order_product_list_quotation";
            $data["movetablename"] = "orders_quotation";
            $data["movetablename_sub"] = "order_product_list_quotation";
            $data["order_title"] = "QUOTATION";
            $data["order_lable"] = "Quotation Create";
            $data["missed"] = "Quotation";
            $data["move"] = "Order ";
        }

        if ($base == 3) {
            $data["old_tablename"] = "orders_quotation";
            $data["old_tablename_sub"] = "order_product_list_quotation";
            $data["tablename"] = "orders_process";
            $data["tablename_sub"] = "order_product_list_process";
            $data["movetablename"] = "orders_process";
            $data["movetablename_sub"] = "order_product_list_process";
            $data["order_title"] = "ORDER";
            $data["order_lable"] = "Quotation Create";
            $data["missed"] = "Quotation";
            $data["move"] = "Order ";
        }

        $data["status_base"] = 10;
        $neworder_quotation_id = 1;
        $data["viewstatus"] = 1;

        $resorder = $this->Main_model->where_names(
            $data["tablename"],
            "id",
            $neworder_id
        );
        if (count($resorder) > 0) {
            foreach ($resorder as $data_val) {
                $order_no = $data_val->order_no;
                $data["order_id"] = $neworder_id;
                $data["count_id"] = 0;
                $data["order_no"] = $order_no;
            }
        }

        $order_id = "OR_" . $data["order_id"];
        $data[
            "overview_invoice_content_base_order"
        ] = $this->Main_model->where_names_order_by(
            "overview_invoice_content_base_order",
            "order_id",
            $order_id,
            "id",
            "ASC"
        );

        $data["readonly"] = "readonly";
        $data["active_base"] = "customer_1";
        $data["active"] = "customer_1";
        $data["title"] = "Order Overview " . $data["order_no"];
        $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
        $data["side_nav"] = $this->load->view("commen/side_nav", $data, true);
        $data["footer_copy_rights"] = $this->load->view(
            "commen/footer_copy_rights",
            $data,
            true
        );
        $this->load->view("order/overview", $data);
    }


    
  public function dispatch_unapprovel_list()
    {
        if (isset($this->session->userdata["logged_in"])) {
            $data["user_group"] = $this->Main_model->where_names(
                "sales_group",
                "deleteid",
                "0"
            );
            $data["sales_team"] = $this->Main_model->where_names_two_order_by(
                "admin_users",
                "access",
                "12",
                "deleteid",
                "0",
                "id",
                "ASC"
            );
            $neworder_id = 1;

            $order_last_count = $this->Main_model->order_last_count(
                "orders_process"
            );
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data["neworder_id"] = base64_encode($neworder_id);

            $data["active_base"] = "customer_1";
            $data["active"] = "customer_1";
            $data["title"] = "Dispatch Un-Approvel list ";
            $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
            $data["side_nav"] = $this->load->view(
                "commen/side_nav",
                $data,
                true
            );
            $data["footer_copy_rights"] = $this->load->view(
                "commen/footer_copy_rights",
                $data,
                true
            );
            $this->load->view("order/dispatch_approvel_list", $data);
        } else {
            $this->load->view("admin/index");
        }
    }




     public function order_no_update()
    {
        date_default_timezone_set("Asia/Kolkata");
        $date = date("Y-m-d");
        $time = date("h:i A");
        $form_data = json_decode(file_get_contents("php://input"));
     
        $tablenamemain = 'orders_process';
        $tablename_sub = 'order_product_list_process';
        $order_id = $form_data->order_id;
 



        $neworder_id_new = 1;
        $order_last_count = $this->Main_model->order_last_count_mounth_year("orders_process");
        foreach ($order_last_count as $r) {
         $neworder_id_new = $r->id + 1;
        }


       $orders_data = $this->Main_model->where_names_two_order_by('orders_process', 'id', $form_data->order_id, 'order_no_update_status', '1', 'id', 'ASC');
      if(count($orders_data)==0)
      {

        $point["get_id"] = $form_data->order_id;
        $point["count"] =$neworder_id_new;
        $point["month"] =date("M");
        $point["order_no_update_status"] =1;
        $point["order_no"] =strtoupper(date("M") . "/" . $neworder_id_new);


        $point1["get_id"] = $form_data->order_id;
        $point1["order_no"] =strtoupper(date("M") . "/" . $neworder_id_new);

        $this->Main_model->update_commen($point, $tablenamemain);
        $this->Main_model->update_commen_where($point1,"order_id",$tablename_sub);


        $notes='Order Process '.$point["order_no"];
        $process_by='Order Processed order id'.$point["order_no"];
        $deletemod='ORDER'.$point["order_no"];

        $this->db->query("UPDATE all_ledgers SET order_no='".$point["order_no"]."',reference_no='".$point["order_no"]."',notes='".$notes."',process_by='".$process_by."',deletemod='".$deletemod."' WHERE order_id='" .$order_id . "' AND party_type=1");

     

        $deletelog['userid']=$this->userid;
        $deletelog['all_legers']='OrderID-'.$order_id;
        $deletelog['bank_legers']='Order No UPdate '.$point["order_no"];
        $this->Main_model->insert_commen($deletelog,'deleted_log');

      }

                        
                       
                
        
    }


   public function screw_order_product_list_get()
    {
        $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }
        $userslog="";
        $tablename = $_GET["tablename"];
        $order_base = $_GET["order_base"];
        $order_base_val = $_GET["order_base"];
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $where .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        $where .= " AND a.order_base > '0'";

        if ($search != "") 

        {


                $where .= " AND c.name LIKE '%" . $search . "%'";
           
                $where .=
                    " OR a.order_no='" .
                    $search .
                    "' OR b.company_name LIKE '%" .
                    $search .
                    "' OR op.product_name LIKE '%" .
                    $search .
                    "%' OR b.phone LIKE '%" .
                    $search .
                    "%' OR a.reason LIKE '%" .
                    $search .
                    "%'";
                $where1 .= " AND order_no LIKE '%" . $search . "'";
        }

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

          
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {

            $userslog = " AND  a.user_id IN (" . $this->userid. ")";
          

        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

        
        }
        else
        {
            
        }



            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id JOIN order_product_list_process as op ON a.id=op.order_id  WHERE a.deleteid='0' AND op.deleteid=0 AND op.categories_id IN ('7','9') AND op.product_id>0  $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND op.categories_id IN ('7','9') AND op.product_id>0 $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();



        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 


            if($value->product_id>0)
            {



            $array[] = [
                "no" => $i,
                "finance_status" => $value->finance_status,
                "amount" => $value->amount,
                "tile_material_name" => $value->tile_material_name,
                "qty" => $value->qty,
                "categories_name" => $value->categories_name,
                "product_name" => $value->product_name,
                "rate" => $value->rate,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "payment_mode" => $value->payment_mode,
                 "company_name" => $value->company_name,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];


            }




            $i++;
        }
        $myData = ["PortalActivity" => $array, "totalCount" => $count];

        echo json_encode($myData);
    }




















   public function all_order_product_list_get()
    {
        $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }
        $userslog="";
        $tablename = $_GET["tablename"];
        $order_base = $_GET["order_base"];
        $order_base_val = $_GET["order_base"];
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $where .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        $where .= " AND a.order_base != '0'";

        if ($search != "") 
        {


                $where .= " AND c.name LIKE '%" . $search . "%'";
           
                $where .=
                    " OR a.order_no='" .
                    $search .
                    "' OR b.company_name LIKE '%" .
                    $search .
                    "' OR op.product_name LIKE '%" .
                    $search .
                    "%' OR b.phone LIKE '%" .
                    $search .
                    "%' OR a.reason LIKE '%" .
                    $search .
                    "%'";
                $where1 .= " AND order_no LIKE '%" . $search . "'";
        }

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

          
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {

            $userslog = " AND  a.user_id IN (" . $this->userid. ")";
          

        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

        
        }
        else
        {
            
        }



            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id JOIN order_product_list_process as op ON a.id=op.order_id  WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.profile,op.crimp,op.uom,op.nos,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state, op.sub_product_id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();


              $querySum = $this->db->query(
                "SELECT SUM(CASE WHEN a.create_date > '2024-05-31' THEN op.amount * 1.18 ELSE op.amount END) as totals,
SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts
                 FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND a.reason != 'Cancel Approved' AND op.deleteid=0 AND op.product_id>0   $userslog $where "
            );
            $resultSum = $querySum->row();

$totalValue = $resultSum->totals;




 $querySumDailySales = $this->db->query("SELECT SUM(a.bill_total) as totals,
SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts FROM orders_process as a JOIN customers as b ON a.customer_id=b.id LEFT JOIN sales_member_group as sg ON b.sales_team_id=sg.sales_member_id WHERE 1 AND a.order_base > 0  $userslog $where ");
            $resultSumDailySales = $querySumDailySales->row();

$dailySales = $resultSumDailySales->totals;

$tcsamounts = $resultSumDailySales->tcsamounts;
        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }

if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
             $uom='';
             if($value->uom=='3')
            {

                $uom='FEET';

            }
            if($value->uom=='4')
            {

                $uom='MM';

            }

              if($value->uom=='5')
            {

                $uom='MTR';

            }
            if($value->uom=='2')
            {

                $uom='SQMTR';

            }

            if($value->uom=='6')
            {

                $uom='INCH';

            }

             if($value->uom=='7')
            {

                $uom='KG';

            }


             if($value->product_id>0)
             {

 if($value->deleteid==0)
             {
                $subName = '';

                if($value->sub_product_id != null){
                    $res = $this->db->query("SELECT product_name FROM product_list WHERE id = $value->sub_product_id ")->row();
                    $subName = $res->product_name;
                }

          if($value->create_date > '2024-05-31'){
    $roundAmount = round($value->amount * 1.18,2);
}else{
   $roundAmount =  round($value->amount,2);
}

            $array[] = [
                "no" => $i,
                "finance_status" => $value->finance_status,
                "nos" => $value->nos,
                "crimp" => $value->crimp,
                "profile" => $value->profile,
                "amount" => $roundAmount,
                "tile_material_name" => $value->tile_material_name,
                "qty" => $value->qty,
                "categories_name" => $value->categories_name,
                "product_name" => $value->product_name,
                "sub_name" => $subName,
                "company_name" => $value->company_name,
                "rate" => $value->rate,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "payment_mode" => $value->payment_mode,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "uom" => $uom,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];

        }

            }



            $i++;
        }
        $myData = ["PortalActivity" => $array, 
        "totalCount" => $count, 
        'totalValue'=>$totalValue, 
        'dailySales' => $dailySales, 
        'tcsamounts'=>$tcsamounts];

        echo json_encode($myData);
    }





   public function all_order_product_list_get_test()
     {

        
        $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }
        $userslog="";
        $tablename = $_GET["tablename"];
        $order_base = $_GET["order_base"];
        $order_base_val = $_GET["order_base"];
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";

                     $whereNew .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $whereNew .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";

                         $where .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        $where .= " AND a.order_base > 0 ";
        // $where2 .= " AND a.order_base = '0'";

        if ($search != "") 
        {


                $where .= " AND c.name LIKE '%" . $search . "%'";
                $whereNew .= " OR a.order_no='" . $search . "%'";
           
                $where .=
                    " OR a.order_no='" .
                    $search .
                    "' OR b.company_name LIKE '%" .
                    $search .
                    "' OR op.product_name LIKE '%" .
                    $search .
                    "%' OR b.phone LIKE '%" .
                    $search .
                    "%' OR a.reason LIKE '%" .
                    $search .
                    "%'";
                $where1 .= " AND order_no LIKE '%" . $search . "'";
        }

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

          
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {

            $userslog = " AND  a.user_id IN (" . $this->userid. ")";
          

        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

        
        }
        else
        {
            
        }

$this->db->query("SET SESSION group_concat_max_len = 1000000");

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id JOIN order_product_list_process as op ON a.id=op.order_id  WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.profile,op.crimp,op.uom,op.nos,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state, op.sub_product_id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id > 0  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize "
            );

            // echo "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.profile,op.crimp,op.uom,op.nos,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state, op.sub_product_id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize";
            // exit;
            $result = $query->result();


              $querySum = $this->db->query(
    "SELECT 
    SUM(CASE WHEN a.create_date > '2024-05-31' THEN ROUND(op.amount * 1.18,3) ELSE op.amount END) as totals,
    SUM(op.amount) as totalsWOGST,
SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts
                 FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND a.reason != 'Cancel Approved' AND op.deleteid=0 AND op.product_id>0   $userslog $where"
);
            $resultSum = $querySum->row();
  
// echo "SELECT SUM(  op.amount ) as totals,
// SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
// COUNT(DISTINCT a.id) as total_orders,
// COUNT(DISTINCT op.id) as total_prods
//                  FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND a.reason != 'Cancel Approved' AND op.deleteid=0 AND a.deleteid = 0 AND op.product_id>0   $userslog $whergstvale  ";
//                  exit;

$totalValue = $resultSum->totals;
$totalsWOGST = $resultSum->totalsWOGST;

$detOrders = $resultSum->total_orders;
$detProds = $resultSum->total_prods;
$amountdata = $resultSum->amountdata;


 

 $querySumDailySales = $this->db->query("SELECT 
    SUM(a.bill_total) as totals,
    SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
    SUM(CASE WHEN a.discount > 0 THEN a.discount ELSE 0 END) as discountamounts,
    SUM(CASE WHEN a.roundoffstatus = 1 THEN a.roundoff ELSE 0 END) as roundamounts,
    GROUP_CONCAT(DISTINCT CASE WHEN a.tcs_status = 1 THEN a.id END SEPARATOR ',') AS tcsOrders,
    GROUP_CONCAT(DISTINCT CASE WHEN a.roundoffstatus = 1 THEN a.id END SEPARATOR ',') AS roundOrders,
    GROUP_CONCAT(DISTINCT CASE WHEN a.discount > 0 THEN a.id END SEPARATOR ',') AS discountOrders,
    COUNT(DISTINCT a.id) as total_orders 
FROM 
    orders_process as a 
  JOIN 
    customers as c 
ON 
    a.customer_id = c.id 
WHERE 
    a.create_date BETWEEN '$from_date' AND '$to_date' AND a.order_base > 0
    AND a.deleteid = 0
  " );
            $resultSumDailySales =  $querySumDailySales->row();


//             echo "SELECT SUM(a.bill_total) as totals,
// SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
// SUM(CASE WHEN a.discount > 0 THEN a.discount ELSE 0 END) as discountamounts,
// SUM(CASE WHEN a.roundoffstatus = 1 THEN a.roundoff  END) as roundamounts,
// GROUP_CONCAT(DISTINCT CASE WHEN a.tcs_status = 1 THEN a.id END SEPARATOR ',') AS tcsOrders,
// GROUP_CONCAT(DISTINCT CASE WHEN a.roundoffstatus = 1 THEN a.id END SEPARATOR ',') AS roundOrders,
// GROUP_CONCAT(DISTINCT CASE WHEN a.discount > 0 THEN a.id END SEPARATOR ',') AS discountOrders,
// COUNT(DISTINCT a.id) as total_orders 
//   FROM orders_process as a JOIN customers as c ON a.customer_id=c.id  WHERE 1 $userslog $whereNew    AND a.deleteid = 0 ";
//   exit;
 // $resultDRssOverall = $this->db->query("SELECT SUM(al.credits-al.debits) as rounded FROM all_ledgers al LEFT JOIN orders_process op ON op.order_no = al.order_no WHERE op.deleteid='0' AND al.deleteid='0' AND al.party_type=5 AND al.opening_balance_status='0' AND al.customer_id = '372' AND al.notes LIKE '%AUTOROUND%' ")->row();
// $roundedAll = $resultDRssOverall->rounded;

  $resultDRss = $this->db->query("SELECT SUM(al.credits) as creds, SUM(al.debits) as debts,
 GROUP_CONCAT(DISTINCT CASE WHEN al.credits > 0 THEN op.id END SEPARATOR ',') AS credsOrders,
 GROUP_CONCAT(DISTINCT CASE WHEN al.debits > 0 THEN op.id END SEPARATOR ',') AS debtsOrders
   FROM all_ledgers al LEFT JOIN orders_process op ON op.order_no = al.order_no WHERE op.create_date BETWEEN '$from_date' AND '$to_date' AND op.deleteid='0' AND al.deleteid='0' AND al.party_type=5 AND al.opening_balance_status='0' AND al.customer_id = '372' AND al.notes LIKE '%AUTO%' ")->row();



   $resultGST = $this->db->query("SELECT SUM(al.credits) as gstval FROM all_ledgers al LEFT JOIN orders_process op ON op.order_no = al.order_no WHERE op.create_date BETWEEN '$from_date' AND '$to_date' AND op.deleteid='0' AND al.deleteid='0' AND al.party_type=5 AND al.opening_balance_status='0' AND (al.customer_id = '585' OR al.customer_id = '586') AND al.deletemod LIKE '%GST%'  ")->row();

  // print_r($resultDRss);

//             echo "SELECT SUM(al.credits-al.debits) as rounded FROM all_ledgers al LEFT JOIN orders_process op ON op.order_no = al.reference_no WHERE op.create_date BETWEEN '$from_date' AND '$to_date' AND op.deleteid='0' AND al.party_type=5 AND al.opening_balance_status='0' AND al.customer_id = 372 ";
// exit;



$roundedcreds = $resultDRss->creds;

$roundeddebts = $resultDRss->debts;



$credsOrders = $resultDRss->credsOrders;
$debtsOrders = $resultDRss->debtsOrders;



$gstval = $resultGST->gstval;

// $rounded = $roundedAll - $rounded;




//             echo "SELECT  SUM(oplp.amount) as totals,
// SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
// COUNT(DISTINCT a.id) as total_orders,
// COUNT(DISTINCT oplp.id) as total_prods
//   FROM orders_process as a LEFT JOIN order_product_list_process oplp ON oplp.order_id = a.id JOIN customers as c ON a.customer_id=c.id  WHERE 1 $userslog $whereNew  AND a.create_date BETWEEN  '$from_date' AND '$to_date'  AND a.deleteid = 0 AND a.order_base  > 0   ";
//   exit;

$dailySales = $resultSumDailySales->totals;
$dailySalesOrd = $resultSumDailySales->total_orders;
$dailySalesProd = $resultSumDailySales->total_prods;
$tcsamounts = $resultSumDailySales->tcsamounts;
$discountamounts = $resultSumDailySales->discountamounts;
$roundamounts = $resultSumDailySales->roundamounts;
$roundOrders = $resultSumDailySales->roundOrders;
$discountOrders = $resultSumDailySales->discountOrders;



$tcsOrders = $resultSumDailySales->tcsOrders;
        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }

if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
             $uom='';
             if($value->uom=='3')
            {

                $uom='FEET';

            }
            if($value->uom=='4')
            {

                $uom='MM';

            }

              if($value->uom=='5')
            {

                $uom='MTR';

            }
            if($value->uom=='2')
            {

                $uom='SQMTR';

            }

            if($value->uom=='6')
            {

                $uom='INCH';

            }

             if($value->uom=='7')
            {

                $uom='KG';

            }


             if($value->product_id>0)
             {

 if($value->deleteid==0)
             {
                $subName = '';

                if($value->sub_product_id != null){
                    $res = $this->db->query("SELECT product_name FROM product_list WHERE id = $value->sub_product_id ")->row();
                    $subName = $res->product_name;
                }

          if($value->create_date > '2024-05-31'){
    $roundAmount = round($value->amount * 1.18);
}else{
   $roundAmount =  round($value->amount);
}

            $array[] = [
                "no" => $i,
                "finance_status" => $value->finance_status,
                "nos" => $value->nos,
                "crimp" => $value->crimp,
                "profile" => $value->profile,
                "amount" => $roundAmount,
                "real_amount" => $value->amount,

                "tile_material_name" => $value->tile_material_name,
                "qty" => $value->qty,
                "categories_name" => $value->categories_name,
                "product_name" => $value->product_name,
                "sub_name" => $subName,
                "company_name" => $value->company_name,
                "rate" => $value->rate,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "payment_mode" => $value->payment_mode,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "uom" => $uom,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];

        }

            }



            $i++;
        }
        $myData = ["PortalActivity" => $array, 
        "totalCount" => $count, 
        'totalValue'=>$totalValue, 
        'dailySales' => $dailySales, 
        'tcsOrders' => $tcsOrders,
        'detOrders' => $detOrders, 
        'detProds' => $detProds,
        'dailySalesOrd' => $dailySalesOrd,
        'dailySalesProd' => $dailySalesProd,
        'discount'  => 0,
        'tcsamounts'=>$tcsamounts,
        'discountamounts' =>$discountamounts,
        'roundamounts' => $roundamounts,
        'roundOrders' =>$roundOrders,
        'discountOrders' =>$discountOrders,
        'rounded' => $rounded,
        'amountdata' => $amountdata,
        'gstval' => $gstval,
        'totalsWOGST' => $totalsWOGST,
        'roundedcreds' => $roundedcreds,
        'roundeddebts' => $roundeddebts,
        'debtsOrders' => $debtsOrders,
        'credsOrders' => $credsOrders

    ];

        echo json_encode($myData);
    }



   public function all_order_product_list_get_test_export()
     {
       $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }
        $userslog="";
        $tablename = 'orders_process';
        $order_base = 1;
        $order_base_val = 1;
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $where .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        $where .= " AND a.order_base > 0 ";
        // $where2 .= " AND a.order_base = '0'";

        if ($search != "") 
        {


                $where .= " AND c.name LIKE '%" . $search . "%'";
                $whereNew .= " OR a.order_no='" . $search . "%'";
           
                $where .=
                    " OR a.order_no='" .
                    $search .
                    "' OR b.company_name LIKE '%" .
                    $search .
                    "' OR op.product_name LIKE '%" .
                    $search .
                    "%' OR b.phone LIKE '%" .
                    $search .
                    "%' OR a.reason LIKE '%" .
                    $search .
                    "%'";
                $where1 .= " AND order_no LIKE '%" . $search . "'";
        }

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

          
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {

            $userslog = " AND  a.user_id IN (" . $this->userid. ")";
          

        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

        
        }
        else
        {
            
        }



            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id JOIN order_product_list_process as op ON a.id=op.order_id  WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.profile,op.crimp,op.uom,op.nos,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state, op.sub_product_id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC  "
            );

            // echo "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.profile,op.crimp,op.uom,op.nos,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state, op.sub_product_id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize";
            // exit;
            $result = $query->result();


              $querySum = $this->db->query(
                "SELECT SUM(CASE WHEN a.create_date > '2024-05-31' THEN op.amount * 1.18 ELSE op.amount END ) as totals,
 SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
COUNT(DISTINCT a.id) as total_orders,
COUNT(DISTINCT op.id) as total_prods
                 FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND a.reason != 'Cancel Approved' AND op.deleteid=0 AND a.deleteid = 0 AND op.product_id>0   $userslog $where   "
            );
            $resultSum = $querySum->row();
  
// echo "SELECT SUM(  op.amount ) as totals,
// SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
// COUNT(DISTINCT a.id) as total_orders,
// COUNT(DISTINCT op.id) as total_prods
//                  FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND a.reason != 'Cancel Approved' AND op.deleteid=0 AND a.deleteid = 0 AND op.product_id>0   $userslog $where  ";
//                  exit;

$totalValue = $resultSum->totals;
$detOrders = $resultSum->total_orders;
$detProds = $resultSum->total_prods;
$tcsamounts = $resultSum->tcsamounts;


 

 $querySumDailySales = $this->db->query("SELECT  SUM(a.bill_total) as totals,
SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
SUM(CASE WHEN a.discount > 0 THEN a.discount ELSE 0 END) as discountamounts,
SUM(CASE WHEN a.roundoffstatus = 1 THEN a.roundoff  END) as roundamounts,
GROUP_CONCAT(DISTINCT CASE WHEN a.tcs_status = 1 THEN a.id END SEPARATOR ',') AS tcsOrders,
GROUP_CONCAT(DISTINCT CASE WHEN a.roundoffstatus = 1 THEN a.id END SEPARATOR ',') AS roundOrders,
COUNT(DISTINCT a.id) as total_orders 
  FROM orders_process as a JOIN customers as c ON a.customer_id=c.id  WHERE 1 $userslog $whereNew  AND a.create_date BETWEEN  '$from_date' AND '$to_date'  AND a.deleteid = 0 AND a.order_base  > 0  " );
            $resultSumDailySales =  $querySumDailySales->row();
//             echo "SELECT  SUM(oplp.amount) as totals,
// SUM(CASE WHEN a.tcs_status = 1 THEN a.tcsamount ELSE 0 END) as tcsamounts,
// COUNT(DISTINCT a.id) as total_orders,
// COUNT(DISTINCT oplp.id) as total_prods
//   FROM orders_process as a LEFT JOIN order_product_list_process oplp ON oplp.order_id = a.id JOIN customers as c ON a.customer_id=c.id  WHERE 1 $userslog $whereNew  AND a.create_date BETWEEN  '$from_date' AND '$to_date'  AND a.deleteid = 0 AND a.order_base  > 0   ";
//   exit;

$dailySales = $resultSumDailySales->totals;
$dailySalesOrd = $resultSumDailySales->total_orders;
$dailySalesProd = $resultSumDailySales->total_prods;

        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }

if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
             $uom='';
             if($value->uom=='3')
            {

                $uom='FEET';

            }
            if($value->uom=='4')
            {

                $uom='MM';

            }

              if($value->uom=='5')
            {

                $uom='MTR';

            }
            if($value->uom=='2')
            {

                $uom='SQMTR';

            }

            if($value->uom=='6')
            {

                $uom='INCH';

            }

             if($value->uom=='7')
            {

                $uom='KG';

            }


             if($value->product_id>0)
             {

 if($value->deleteid==0)
             {
                $subName = '';

               if ($value->sub_product_id != null && is_numeric($value->sub_product_id)) {
                    $res = $this->db->query("SELECT product_name FROM product_list WHERE id = $value->sub_product_id")->row();
                    $subName = $res->product_name;
                }


          if($value->create_date > '2024-05-31'){
    $roundAmount =  $value->amount * 1.18;
}else{
   $roundAmount = $value->amount;
}

            $array[] = [
                "no" => $i,
                "finance_status" => $value->finance_status,
                "nos" => $value->nos,
                "crimp" => $value->crimp,
                "profile" => $value->profile,
                "amount" => $roundAmount,
                "real_amount" => $value->amount,
                "tile_material_name" => $value->tile_material_name,
                "qty" => $value->qty,
                "categories_name" => $value->categories_name,
                "product_name" => $value->product_name,
                "sub_name" => $subName,
                "company_name" => $value->company_name,
                "rate" => $value->rate,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "payment_mode" => $value->payment_mode,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "uom" => $uom,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];

        }

            }



            $i++;
        }
        $myData = ["PortalActivity" => $array, 
        "totalCount" => $count, 
        'totalValue'=>$totalValue, 
        'dailySales' => $dailySales, 
        'openOrders' => $openOrders, 
        'tcsamountsInverse' => $tcsamountsInverse,
        'detOrders' => $detOrders,
        'detProds' => $detProds,
        'dailySalesOrd' => $dailySalesOrd,
        'dailySalesProd' => $dailySalesProd,
        'discount'  => 0,
        'tcsamounts'=>0];

           
                       $filename='Order_Detailed_View_report_'.$from_date.'_TO_'.$to_date; 
                       header("Content-Type: application/xls");    
                       header("Content-Disposition: attachment; filename=$filename.xls");  
                       header("Pragma: no-cache"); 
                       header("Expires: 0");

        ?>

                                                                   <table width="100%" border="1"   style="border: #d1d1d1 solid 1px;border-collapse: collapse;width: 100%;line-height: 1.5;" >
                                                                  <thead>


                                  <tr><th colspan="15"><h3>Order Detailed View report <?php echo $from_date; ?> To <?php echo $to_date; ?></h3></th></tr>
                                                                      <tr>
                                                                         <th># </th>
                                                                          <th>Order No</th>
                                                                           <th>Customer</th>
                                                                          <th>Category</th>
                                                                          <th>Product Name</th>
                                                                          <th>UOM</th>
                                                                          <th>Profile</th>
                                                                          <th>Crimp</th>
                                                                          <th>Nos</th>
                                                                          <th>Rate</th>
                                                                          <th>QTY</th>
                                                                          <th>Amount</th>
                                                                          <th>Amount Subtotal</th>
                                                                          <th>Order By</th>
                                                                          <th>Status</th>
                                                                          <th>Delivery Date</th>
                                                                          <th>Create Date</th>
                                                                         
                                                                          
                                                                      </tr>
                                                                  </thead>
                                                                  <tbody>
                                                                      
                                                                      <?php
                                                                         foreach($array as $val)
                                                                         {



                                                                      ?>
                                                                      <tr  ng-repeat="name in namesData" >
                                                                          <td><?php echo $val['no']; ?></td>
                                                                          <td>"<?php echo $val['order_no']; ?>"</td>
                                                                          <td><?php echo $val['company_name']; ?></td>
                                                                          <td><?php echo $val['categories_name']; ?></td>
                                                                            <td><?php echo $val['product_name'];
                                                                        if($val['tile_material_name']){
                                                                            echo '- ('.$val['tile_material_name'].')';
                                                                        }
                                                                        if($val['sub_name']){
                                                                            echo '- ('.$val['sub_name'].')';
                                                                        }
                                                                       ?></td>



                                                                          <td><?php echo $val['uom']; ?></td>
 
                                                                          <td><?php echo $val['profile']; ?></td>
                                                                          <td><?php echo $val['crimp']; ?></td>
                                                                          <td><?php echo $val['nos']; ?></td>

                                                                          <td><?php echo $val['rate']; ?></td>
                                                                          
                                                                       
                                                                          <td><?php echo $val['qty']; ?></td>
                                                                          <td><?php echo $val['amount']; ?></td>
                                                                          <td><?php echo $val['real_amount']; ?></td>
                                                                          <td><?php echo $val['order_by']; ?></td>
                                                                           <td><?php echo $val['reason']; ?></td>
                                                                          
                                                                          <td><?php  

                                                                          if($val['create_date']=='01-01-1970')
                                                                          {
                                                                             echo "NA";
                                                                          }
                                                                          else
                                                                          {
                                                                             echo $val['create_date']; 
                                                                          }

                                                                         


                                                                          ?></td>

                                                                           <td><?php echo $val['create_date_new']; ?><?php echo $val['create_time']; ?></td>
                                                                         
                                                                         
                                                                         
                                                                         
                                                                      </tr>
                                                                      <?php

                                                                          }

                                                                          ?>
                                                                      
                                                                    
                                                                  </tbody>
                                                              </table>
                                                              
                                                                 

        <?php
        


        

        
    }




   public function all_order_product_list_get_export()
    {
        $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }
        $userslog="";
        $tablename = 'orders_process';
        $order_base = 1;
        $order_base_val = 1;
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $where .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        $where .= " AND a.order_base !='0'";

       

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

          
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {

            $userslog = " AND  a.user_id IN (" . $this->userid. ")";
          

        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

        
        }
        else
        {
            
        }



            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id JOIN order_product_list_process as op ON a.id=op.order_id  WHERE a.deleteid='0' AND op.deleteid=0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,op.product_name,op.categories_name,op.product_id,op.profile,op.crimp,op.uom,op.nos,op.rate,op.qty,op.tile_material_name,op.amount,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state, op.sub_product_id, a.create_date FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  JOIN order_product_list_process as op ON a.id=op.order_id WHERE a.deleteid='0' AND op.deleteid=0 AND a.order_base > 0 AND op.product_id>0  $userslog $where ORDER BY a.id DESC "
            );
            $result = $query->result();



        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 

            $uom='';
             if($value->uom=='3')
            {

                $uom='FEET';

            }
            if($value->uom=='4')
            {

                $uom='MM';

            }

              if($value->uom=='5')
            {

                $uom='MTR';

            }
            if($value->uom=='2')
            {

                $uom='SQMTR';

            }

            if($value->uom=='6')
            {

                $uom='INCH';

            }

             if($value->uom=='7')
            {

                $uom='KG';

            }
              
               if($value->product_id>0)
             {
                 $subName = '';

                if($value->sub_product_id > 0){
                    $res = $this->db->query("SELECT product_name FROM product_list WHERE id ='".$value->sub_product_id."'")->row();
                    $subName = $res->product_name;
                }
if($value->create_date > '2024-05-31'){
    $roundAmount = round($value->amount * 1.18,2);
}else{
   $roundAmount =  round($value->amount,2);
}

            $array[] = [
                "no" => $i,
                "finance_status" => $value->finance_status,
                "nos" => $value->nos,
                "crimp" => $value->crimp,
                "profile" => $value->profile,
                "amount" => $roundAmount,
                "tile_material_name" => $value->tile_material_name,
                "qty" => $value->qty,
                "categories_name" => $value->categories_name,
                "product_name" => $value->product_name,
                "sub_name" => $subName,

                "company_name" => $value->company_name,
                "rate" => $value->rate,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "uom" => $uom,
                "payment_mode" => $value->payment_mode,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];
             }
            $i++;
        }               
                       $filename='Order_Detailed_View_report_'.$from_date.'_TO_'.$to_date; 
                       header("Content-Type: application/xls");    
                       header("Content-Disposition: attachment; filename=$filename.xls");  
                       header("Pragma: no-cache"); 
                       header("Expires: 0");

        ?>

                                                                   <table width="100%" border="1"   style="border: #d1d1d1 solid 1px;border-collapse: collapse;width: 100%;line-height: 1.5;" >
                                                                  <thead>


                                  <tr><th colspan="15"><h3>Order Detailed View report <?php echo $from_date; ?> To <?php echo $to_date; ?></h3></th></tr>
                                                                      <tr>
                                                                         <th># </th>
                                                                          <th>Order No</th>
                                                                           <th>Customer</th>
                                                                          <th>Category</th>
                                                                          <th>Product Name</th>
                                                                          <th>UOM</th>
                                                                          <th>Profile</th>
                                                                          <th>Crimp</th>
                                                                          <th>Nos</th>
                                                                          <th>Rate</th>
                                                                          <th>QTY</th>
                                                                          <th>Amount</th>
                                                                          <th>Order By</th>
                                                                          <th>Status</th>
                                                                          <th>Delivery Date</th>
                                                                          <th>Create Date</th>
                                                                         
                                                                          
                                                                      </tr>
                                                                  </thead>
                                                                  <tbody>
                                                                      
                                                                      <?php
                                                                         foreach($array as $val)
                                                                         {



                                                                      ?>
                                                                      <tr  ng-repeat="name in namesData" >
                                                                          <td><?php echo $val['no']; ?></td>
                                                                          <td>"<?php echo $val['order_no']; ?>"</td>
                                                                          <td><?php echo $val['company_name']; ?></td>
                                                                          <td><?php echo $val['categories_name']; ?></td>
                                                                            <td><?php echo $val['product_name'];
                                                                        if($val['tile_material_name']){
                                                                            echo '- ('.$val['tile_material_name'].')';
                                                                        }
                                                                        if($val['sub_name']){
                                                                            echo '- ('.$val['sub_name'].')';
                                                                        }
                                                                       ?></td>



                                                                          <td><?php echo $val['uom']; ?></td>
 
                                                                          <td><?php echo $val['profile']; ?></td>
                                                                          <td><?php echo $val['crimp']; ?></td>
                                                                          <td><?php echo $val['nos']; ?></td>

                                                                          <td><?php echo $val['rate']; ?></td>
                                                                          
                                                                       
                                                                          <td><?php echo $val['qty']; ?></td>
                                                                          <td><?php echo $val['amount']; ?></td>
                                                                          <td><?php echo $val['order_by']; ?></td>
                                                                           <td><?php echo $val['reason']; ?></td>
                                                                          
                                                                          <td><?php  

                                                                          if($val['create_date']=='01-01-1970')
                                                                          {
                                                                             echo "NA";
                                                                          }
                                                                          else
                                                                          {
                                                                             echo $val['create_date']; 
                                                                          }

                                                                         


                                                                          ?></td>

                                                                           <td><?php echo $val['create_date_new']; ?><?php echo $val['create_time']; ?></td>
                                                                         
                                                                         
                                                                         
                                                                         
                                                                      </tr>
                                                                      <?php

                                                                          }

                                                                          ?>
                                                                      
                                                                    
                                                                  </tbody>
                                                              </table>
                                                              
                                                                 

        <?php
        


        

        
    }






      public function screw_order_product_list()
    {
        if (isset($this->session->userdata["logged_in"])) {
            $data["user_group"] = $this->Main_model->where_names(
                "sales_group",
                "deleteid",
                "0"
            );
            $data["sales_team"] = $this->Main_model->where_names_two_order_by(
                "admin_users",
                "access",
                "12",
                "deleteid",
                "0",
                "id",
                "ASC"
            );
            $neworder_id = 1;

            $order_last_count = $this->Main_model->order_last_count(
                "orders_process"
            );
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data["neworder_id"] = base64_encode($neworder_id);

            $data["active_base"] = "customer_1";
            $data["active"] = "customer_1";
            $data["title"] = "Screw Order Product list ";
            $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
            $data["side_nav"] = $this->load->view(
                "commen/side_nav",
                $data,
                true
            );
            $data["footer_copy_rights"] = $this->load->view(
                "commen/footer_copy_rights",
                $data,
                true
            );
            $this->load->view("order/screw_order_product_list", $data);
        } else {
            $this->load->view("admin/index");
        }
    }


        public function all_order_product_list()
    {
        if (isset($this->session->userdata["logged_in"])) {
            $data["user_group"] = $this->Main_model->where_names(
                "sales_group",
                "deleteid",
                "0"
            );
            $data["sales_team"] = $this->Main_model->where_names_two_order_by(
                "admin_users",
                "access",
                "12",
                "deleteid",
                "0",
                "id",
                "ASC"
            );
            $neworder_id = 1;

            $order_last_count = $this->Main_model->order_last_count(
                "orders_process"
            );
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data["neworder_id"] = base64_encode($neworder_id);

            $data["active_base"] = "customer_1";
            $data["active"] = "customer_1";
            $data["title"] = "Order Detailed View";
            $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
            $data["side_nav"] = $this->load->view(
                "commen/side_nav",
                $data,
                true
            );
            $data["footer_copy_rights"] = $this->load->view(
                "commen/footer_copy_rights",
                $data,
                true
            );
            $this->load->view("order/all_order_product_list", $data);
        } else {
            $this->load->view("admin/index");
        }
    }


  public function all_order_product_list_test()
    {
        if (isset($this->session->userdata["logged_in"])) {
            $data["user_group"] = $this->Main_model->where_names(
                "sales_group",
                "deleteid",
                "0"
            );
            $data["sales_team"] = $this->Main_model->where_names_two_order_by(
                "admin_users",
                "access",
                "12",
                "deleteid",
                "0",
                "id",
                "ASC"
            );
            $neworder_id = 1;

            $order_last_count = $this->Main_model->order_last_count(
                "orders_process"
            );
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data["neworder_id"] = base64_encode($neworder_id);

            $data["active_base"] = "customer_1";
            $data["active"] = "customer_1";
            $data["title"] = "Order Detailed View";
            $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
            $data["side_nav"] = $this->load->view(
                "commen/side_nav",
                $data,
                true
            );
            $data["footer_copy_rights"] = $this->load->view(
                "commen/footer_copy_rights",
                $data,
                true
            );
            $this->load->view("order/all_order_product_list_test", $data);
        } else {
            $this->load->view("admin/index");
        }
    }


         public function all_order_product_list_export()
    {
        if (isset($this->session->userdata["logged_in"])) {
            $data["user_group"] = $this->Main_model->where_names(
                "sales_group",
                "deleteid",
                "0"
            );
            $data["sales_team"] = $this->Main_model->where_names_two_order_by(
                "admin_users",
                "access",
                "12",
                "deleteid",
                "0",
                "id",
                "ASC"
            );
            $neworder_id = 1;

            $order_last_count = $this->Main_model->order_last_count(
                "orders_process"
            );
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data["neworder_id"] = base64_encode($neworder_id);

            $data["active_base"] = "customer_1";
            $data["active"] = "customer_1";
            $data["title"] = "Order Detailed View";
            $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
            $data["side_nav"] = $this->load->view(
                "commen/side_nav",
                $data,
                true
            );
            $data["footer_copy_rights"] = $this->load->view(
                "commen/footer_copy_rights",
                $data,
                true
            );

             
             $data['formdate']=$_GET['formdate'];
             $data['todate']=$_GET['todate'];

            $this->load->view("order/all_order_product_list_export", $data);
        } else {
            $this->load->view("admin/index");
        }
    }

  public function above_one_lakh_orders_list()
    {
        if (isset($this->session->userdata["logged_in"])) {
            $data["user_group"] = $this->Main_model->where_names(
                "sales_group",
                "deleteid",
                "0"
            );
            $data["sales_team"] = $this->Main_model->where_names_two_order_by(
                "admin_users",
                "access",
                "12",
                "deleteid",
                "0",
                "id",
                "ASC"
            );
            $neworder_id = 1;

            $order_last_count = $this->Main_model->order_last_count(
                "orders_process"
            );
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data["neworder_id"] = base64_encode($neworder_id);

            $data["active_base"] = "customer_1";
            $data["active"] = "customer_1";
            $data["title"] = "Above 10 lakh Orders ";
            $data["top_nav"] = $this->load->view("commen/top_nav", $data, true);
            $data["side_nav"] = $this->load->view(
                "commen/side_nav",
                $data,
                true
            );
            $data["footer_copy_rights"] = $this->load->view(
                "commen/footer_copy_rights",
                $data,
                true
            );
            $this->load->view("order/above_one_lakh_orders_list", $data);
        } else {
            $this->load->view("admin/index");
        }
    }


     public function fetch_data_table_dispatch_unapprovel_list()
    {
        $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }

        $tablename = $_GET["tablename"];
        $order_base = $_GET["order_base"];
        $order_base_val = $_GET["order_base"];
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.delivery_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $where .=
                        " AND a.delivery_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        $where .=
            " AND a.order_base IN ('1','21','23','20') AND a.finance_status=3 AND a.assign_status=11 AND a.tl_approved_status=0";

        if ($search != "") {
            if ($this->session->userdata["logged_in"]["access"] != 12) {
                $where .= " AND c.name LIKE '%" . $search . "%'";
            }

            $where .=
                " OR a.order_no='" .
                $search .
                "' OR b.company_name LIKE '%" .
                $search .
                "%' OR b.phone LIKE '%" .
                $search .
                "%' OR a.reason LIKE '%" .
                $search .
                "%'";
            $where1 .= " AND order_no LIKE '%" . $search . "'";
        }

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {
            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" .
                    $this->userid .
                    "' $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" .
                    $this->userid .
                    "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();

            if (count($result) == 0) {
                $querycount = $this->db->query(
                    "SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" .
                        $this->userid .
                        "' $where ORDER BY a.id DESC"
                );
                $resultcount = $querycount->result();
                $count = count($resultcount);

                $query = $this->db->query(
                    "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" .
                        $this->userid .
                        "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
                );
                $result = $query->result();
            }
        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC "
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        } else {
            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        }

        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names(
                "driver",
                "id",
                $value->driver_id
            );
            foreach ($driver as $driver_v) {
                $driver_name = $driver_v->name . " | " . $driver_v->phone;
            }

            $order_byd = $driver_name;

            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names(
                "vehicle",
                "id",
                $value->vehicle_id
            );
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number =
                    $vehicle_v->vehicle_name .
                    " | " .
                    $vehicle_v->vehicle_number;
            }

            $array[] = [
                "no" => $i,
                "order_byd" => $order_byd,
                "vehicle_number" => $vehicle_number,
                "finance_status" => $value->finance_status,
                "id" => $value->id,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "payment_mode" => $value->payment_mode,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];
            $i++;
        }
        $myData = ["PortalActivity" => $array, "totalCount" => $count];

        echo json_encode($myData);
    }
 public function fetch_data_above_one_lakh()
    {
         $pagenum = $_GET["page"];
        $pagesize = $_GET["size"];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET["search"];
        if (isset($_GET["page_next"])) {
            $offset = $_GET["page_next"];
        }

        $tablename = $_GET["tablename"];
        $order_base = $_GET["order_base"];
        $order_base_val = $_GET["order_base"];
        $status = $_GET["status"];
        $range = $_GET["range"];
        $where = "";
        $where1 = "";

        if (isset($_GET["from_date"])) {
            if ($_GET["from_date"] != "") {
                $from_date = $_GET["from_date"];
                $to_date = $_GET["to_date"];
                $where .=
                    " AND a.create_date BETWEEN  '" .
                    $from_date .
                    "' AND '" .
                    $to_date .
                    "'";
            } else {
                if ($order_base == 1) {
                    $from_date = date("Y-m-d");
                    $to_date = date("Y-m-d");
                    $where .=
                        " AND a.create_date BETWEEN  '" .
                        $from_date .
                        "' AND '" .
                        $to_date .
                        "'";
                }
            }
        }

        $sqls = "";

        if ($order_base == 110) {
            $where .= " AND a.paricel_mode=1";
            $order_base = 1;
            $where .= " AND a.order_base = '" . $order_base . "'";
        } elseif ($order_base == 111) {
            $where .= " AND a.full_delivery=1";
            $order_base = 1;
            $where .= " AND a.order_base = '" . $order_base . "'";
        } elseif ($order_base == 156) {
            $where .= " AND a.missing_customer=1";
            $order_base = 1;
            $where .= " AND a.order_base = '" . $order_base . "'";
        } elseif ($order_base == 26) {
            $where .= " AND a.md_approved_status = '1'";
            $order_base = 1;
            $where .= " AND a.order_base = '" . $order_base . "'";
        } elseif ($order_base == 27) {
            $where .= " AND a.md_approved_status = '2'";
            $order_base = 1;
            $where .= " AND a.order_base >='0'";
        } elseif ($order_base == 28) {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '0'";
        } 
        elseif ($order_base == 1) {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '0'";
        } 
        elseif ($order_base =='-4') {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base='-4'";
        } 
        else {
            $where .= " AND a.order_base >= '0'";
        }


        if($range=='1000000')
        {
            $where .= " AND  a.bill_total>999999";
        }
        if($range=='500000')
        {
            $where .= " AND  a.bill_total BETWEEN 500000 AND 1000000";
        }
        if($range=='100000')
        {
            $where .= " AND  a.bill_total BETWEEN 100000 AND 500000";
        }
        if($range=='50000')
        {
            $where .= " AND  a.bill_total BETWEEN 50000 AND 100000";
        }
        if($range=='49999')
        {
            $where .= " AND  a.bill_total<=50000";
        }


        if($status!='')
        {

            if($status==0)
            {
                $where .= " AND a.order_base='0'";
            }
            else
            {
                $where .= " AND a.order_base>'0'";
            }
            
        }

        if ($search != "") {
            if ($this->session->userdata["logged_in"]["access"] != 12) {
                $where .= " AND c.name LIKE '%" . $search . "%'";
            }

            $where .=
                " OR a.order_no='" .
                $search .
                "' OR b.company_name LIKE '%" .
                $search .
                "%' OR b.phone LIKE '%" .
                $search .
                "%' OR a.reason LIKE '%" .
                $search .
                "%'";
            $where1 .= " AND order_no LIKE '%" . $search . "'";
        }

        $i = 1;
        $array = [];

        if ($this->session->userdata["logged_in"]["access"] == "17") {
            $sales_team_id = [$this->userid];
            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.entry_user_id IN (" . $sales_team_id . ")";

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        } elseif ($this->session->userdata["logged_in"]["access"] == "20") {
            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" .
                    $this->userid .
                    "' $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" .
                    $this->userid .
                    "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();

            if (count($result) == 0) {
                $querycount = $this->db->query(
                    "SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" .
                        $this->userid .
                        "' $where ORDER BY a.id DESC"
                );
                $resultcount = $querycount->result();
                $count = count($resultcount);

                $query = $this->db->query(
                    "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" .
                        $this->userid .
                        "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
                );
                $result = $query->result();
            }
        } elseif (
            $this->session->userdata["logged_in"]["access"] == "11" ||
            $this->session->userdata["logged_in"]["access"] == "12"
        ) {
            $sales_team_id = [$this->userid];
            $resultsales_team = $this->Main_model->where_in_names(
                "sales_member_head",
                "sales_head_id",
                $sales_team_id
            );
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }

            $poin_to_member = $this->Main_model->where_names(
                "admin_users",
                "mark_sales_member",
                $this->userid
            );
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.user_id IN (" . $sales_team_id . ")";

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        } elseif ($this->session->userdata["logged_in"]["access"] == "16") {
            $sales_team_id = [$this->userid];
            $query = $this->db->query(
                "SELECT id FROM `sales_group`  WHERE sales_group_head='" .
                    $this->userid .
                    "'"
            );
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = " AND  a.sales_group IN (" . $sales_team_id . ")";

            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC "
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        } else {
            $querycount = $this->db->query(
                "SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC"
            );
            $resultcount = $querycount->result();
            $count = count($resultcount);

            $query = $this->db->query(
                "SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize"
            );
            $result = $query->result();
        }

        if ($tablename == "orders") {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == "orders_quotation") {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == "orders_process") {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $order_by = $value->name;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;

            if ($value->reason == 1) {
                $value->reason = "Moved";
            }

            if ($value->reason == "-2") {
                $value->reason = "TL Re-Assigned";
            }
            if ($value->delivery_status == "1") {
                $value->delivery_status = "Client Scope";
            }

            if ($value->delivery_status == "2") {
                $value->delivery_status = "Zaron Scope";
            }

            $le_amount = $value->bill_total;
            $discountfulltotal = $value->bill_total;

            $pending_amount = "";

            $commission =
                $value->commission_check + $value->commission_check_fact;

            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
             
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
  if($value->deleteid==0)
  {



            $array[] = [
                "no" => $i,
                "finance_status" => $value->finance_status,
                "id" => $value->id,
                "pending_amount" => $pending_amount,
                "le_amount" => $le_amount,
                "payment_mode" => $value->payment_mode,
                "payment_mode_re" => $value->payment_mode_reconciliation,
                "delivery_status" => $value->delivery_status,
                "base_id" => base64_encode($value->id),
                "order_no" => $value->order_no,
                "deleteid" => $value->deleteid,
                "reason" => $value->reason,
                "name" => $company_name,
                "email" => $email,
                "phone" => $phone,
                "totalamount" => round($discountfulltotal, 2),
                "commission" => round($commision_value),
                "delivery_charge" => $value->delivery_charge,
                "address" => $address,
                "order_by" => $order_by,
                "order_base" => $value->order_base,
                "create_date" => date(
                    "d-m-Y",
                    strtotime($value->delivery_date)
                ),
                "create_date_new" => date(
                    "d-m-Y",
                    strtotime($value->create_date)
                ),
                "create_time" => $value->create_time,
            ];
            $i++;

 }
            
        }
        $myData = ["PortalActivity" => $array, "totalCount" => $count];

        echo json_encode($myData);
    }



    public function dispatch_approved()
    {
        date_default_timezone_set("Asia/Kolkata");
        $date = date("Y-m-d");
        $time = date("h:i A");
        $form_data = json_decode(file_get_contents("php://input"));

        $order_id = $form_data->order_id;
        $status = $form_data->status;

        $order_id = explode("|", $order_id);
        for ($i = 0; $i < count($order_id); $i++) {
            $resultp = $this->Main_model->where_names(
                "orders_process",
                "id",
                $order_id[$i]
            );
            foreach ($resultp as $valuep) {
                $sql = "";
                if ($status == "1") {
                    $sql = ',reason="TL Dispatch Approved"';
                } else {
                    $sql = ',reason="TL Dispatch Decline"';
                }

                $this->db->query(
                    "UPDATE orders_process SET tl_approved_status='" .
                        $status .
                        "' $sql WHERE id='" .
                        $order_id[$i] .
                        "'"
                );
            }
        }
    }

 public function delivery_note() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            
             $data['DC_id'] = $_GET['DC_id'];
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;



            $data['viewstatus'] = $_GET['viewstatus'];
           



            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            
            
             if($_GET['tablename']=='orders_quotation')
             {
                 $order_id='QC_'.$data['order_id'];
             }
             else
             {
                 $order_id='OR_'.$data['order_id'];
             }
            
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $order_id, 'id', 'ASC');
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Delivery Note ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/delivery_note', $data);
        } else {
            $this->load->view('admin/index');
        }
    }



    public function delivery_note_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;













$formdate=date('Y-m-d');
                                              $todate=date('Y-m-d');
                                              
                                             
                                              $lastmonthfrom= date('Y-m-d', strtotime("-1 days"));
                                              $lastmonthto=date('Y-m-d', strtotime("-1 days"));
                                              



 $sql="";
                                          if($this->session->userdata['logged_in']['access']=='16')
                                          {
                                                                     
                                                            $sales_group_id=array();         
                                                            $sales_group = $this->Main_model->where_names_two_order_by('sales_group','sales_group_head',$this->userid,'deleteid','0','id','ASC');   
                                                            foreach($sales_group as $val)
                                                            {
                                                                $sales_group_id[]=$val->id;
                                                            }
                                                            
                                                            
                                                            $sales_group_idval="'".implode("','",$sales_group_id)."'";
                                                            $sql=' AND a.sales_group IN ('.$sales_group_idval.')';
                                                          
                                                                     
                                          }
                                          
                                          
                                          if($this->session->userdata['logged_in']['access']=='17')
                                          {
                                                                     
                                                            
                                                            $sql=' AND a.user_id="'.$this->userid.'"';
                                                          
                                                                     
                                          }
                                          
                                          
                                          if($this->session->userdata['logged_in']['access']=='11' || $this->session->userdata['logged_in']['access']=='12')
                                          {
                                                                     
                                                                $sales_team_id = array($this->userid);
                                                                $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                                                                foreach ($resultsales_team as $values) {
                                                                    $sales_team_id[] = $values->sales_member_id;
                                                                }
                                                               
                                                                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                                                               
                                                                $sql = ' AND  a.user_id IN (' . $sales_team_id . ')';
                                                            
                                                                     
                                          }
                                     
                                              
                                              



                                              $data['toatalvalue']=0;
                                              $resulttotalsale=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.create_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0   AND a.order_base>0 $sql");
                                              
                                              $resulttotalsale=$resulttotalsale->result();
                                              foreach($resulttotalsale as $totsale)
                                              {
                                                   $data['toatalvalue']=round($totsale->toatalvalue+$totsale->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                         
                                              
                                              
                          
                                              
                                              
                                              
                                              $data['toatalvaluels']=0;
                                              $resulttotalsalels=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.create_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0  AND a.order_base>0 $sql");
                                              
                                              $resulttotalsalels=$resulttotalsalels->result();
                                              foreach($resulttotalsalels as $totsalels)
                                              {
                                                   $data['toatalvaluels']=round($totsalels->toatalvalue+$totsalels->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                               $data['toatalvaluedd']=0;
                                               $resulttotalsaledd=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.trip_end_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0  AND a.order_base>0  $sql");
                                              
                                              $resulttotalsaledd=$resulttotalsaledd->result();
                                              foreach($resulttotalsaledd as $totsaledd)
                                              {
                                                   $data['toatalvaluedd']=round($totsaledd->toatalvalue+$totsaledd->tcsamount);
                                              }
                                              
                                              $data['toatalvaluelsdd']=0;
                                              $resulttotalsalelsdd=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.trip_end_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0   AND a.order_base>0 $sql");
                                              
                                              $resulttotalsalelsdd=$resulttotalsalelsdd->result();
                                              foreach($resulttotalsalelsdd as $totsalelsdd)
                                              {
                                                   $data['toatalvaluelsdd']=round($totsalelsdd->toatalvalue+$totsalelsdd->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                             
                                              $data['totalcount']=0;
                                              $resulttotalcount=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.create_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0  AND a.order_base>0 $sql");
                                              $resulttotalcount=$resulttotalcount->result();
                                              foreach($resulttotalcount as $totcount)
                                              {
                                                   $data['totalcount']=$totcount->totalcount;
                                              }
                                              
                                              
                                              
                                    
                                          
                                              
                                              
                                             
                                             
                                             
                                              $data['totalcountlastmonth']=0;
                                              $resulttotalcountlm=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.create_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcountlm=$resulttotalcountlm->result();
                                              foreach($resulttotalcountlm as $totcountm)
                                              {
                                                   $data['totalcountlastmonth']=$totcountm->totalcount;
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              $data['totalcountdd']=0;
                                              $resulttotalcount=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.trip_end_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcount=$resulttotalcount->result();
                                              foreach($resulttotalcount as $totcount)
                                              {
                                                   $data['totalcountdd']=$totcount->totalcount;
                                              }
                                             
                                             
                                             
                                              $data['totalcountlastmonthdd']=0;
                                              $resulttotalcountlm=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.trip_end_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcountlm=$resulttotalcountlm->result();
                                              foreach($resulttotalcountlm as $totcountm)
                                              {
                                                   $data['totalcountlastmonthdd']=$totcountm->totalcount;
                                              }
                                             
                                             
                                             
                                             
                                               
                                         
                                        
                                             




            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Delivery Note List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/delivery_note_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    




    
    public function sales_complaints()
    {
        
                                      


                                        if(isset($this->session->userdata['logged_in']))
                                        {
                                            
                                            
                                            
                                             
                                             $data['po_number']='PO-'.substr(time(), 5).'/'.date('Y');
                                             $data['user_group'] = $this->Main_model->where_names('user_group','deleteid','0');
                                             
                                             
                                            $neworder_id = 1;
                                            $order_last_count = $this->Main_model->order_last_count('purchase_orders_process');
                                            foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                $data['neworder_id'] = base64_encode($neworder_id);
                                             
                                             
                                             $data['active_base']='customer_1';
                                             $data['active']='customer_1';
                                             $data['title']    = 'Sales Complaints List';
                                             $data['top_nav']  = $this->load->view('commen/top_nav', $data, TRUE);
                                             $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
                                             $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
                                             $this->load->view('order/sales_complaints_list',$data);
                                        
                                        
                                        }
                                        else
                                        {
                                             $this->load->view('admin/index');
                                        }
         

    }
    
    
      public function sales_return()
    {
        
                                      


                                        if(isset($this->session->userdata['logged_in']))
                                        {
                                            
                                            $data['racksetup'] = $this->Main_model->where_names('racksetup', 'id', '1');
                                            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '15', 'deleteid', '0', 'id', 'ASC');
            
                                            $data['standard_remarks'] = $this->Main_model->where_names_order_by('standard_reason_master', 'deleteid', '0', 'id', 'ASC');

                                            $data['alt_remarks'] = $this->Main_model->where_names_order_by('rectification_alt_action_master', 'deleteid', '0', 'id', 'ASC');
                                            //get other option provision
                                            $query = $this->db->query("SELECT a.value 
                                            FROM `common_setting` as a 
                                            WHERE a.name = 'standard_other_option'   ");
                                            $query = $query->row(); // Assuming you expect a single result

                                            //get other option provision
                                            $query1 = $this->db->query("SELECT a.value 
                                            FROM `common_setting` as a 
                                            WHERE a.name = 'detailed_other_option'   ");
                                            $query1 = $query1->row(); // Assuming you expect a single result

                                            //get other option provision
                                            $query2 = $this->db->query("SELECT a.value 
                                            FROM `common_setting` as a 
                                            WHERE a.name = 'rect_alt_other_option'   ");
                                            $query2 = $query2->row(); // Assuming you expect a single result
                                       
                                                $data['standard_other_option'] = $query ? $query->value : "";
                                                $data['detailed_other_option'] = $query1 ? $query1->value : "";
                                                $data['rect_alt_other_option'] = $query2 ? $query2->value : "";
                                           


                                             $data['po_number']='PO-'.substr(time(), 5).'/'.date('Y');
                                             $data['user_group'] = $this->Main_model->where_names('user_group','deleteid','0');
                                             
                                             
                                            $neworder_id = 1;
                                            $order_last_count = $this->Main_model->order_last_count('purchase_orders_process');
                                            foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                $data['neworder_id'] = base64_encode($neworder_id);
                                             
                                             
                                             $data['active_base']='customer_1';
                                             $data['active']='customer_1';
                                             $data['title']    = 'Material return List';
                                             $data['top_nav']  = $this->load->view('commen/top_nav', $data, TRUE);
                                             $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
                                             $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
                                             $this->load->view('order/sales_return_list',$data);
                                        
                                        
                                        }
                                        else
                                        {
                                             $this->load->view('admin/index');
                                        }
         

    }    
    
    
    
    public function fetch_data_complaints_table() {
        
        date_default_timezone_set('Asia/Kolkata');
        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        $sqls1="";
        if ($search != "") {


            $where = " AND a.re_order_no LIKE '%" . $search . "%' OR a.order_no LIKE '%" . $search . "%'  OR b.name LIKE '%" . $search . "%' OR a.customer_id LIKE '%" . $search . "%'";

        }        
        if($this->session->userdata['logged_in']['access']==11 || $this->session->userdata['logged_in']['access']==12)
        {
          
          
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('admin_users','define_saleshd_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sqls = ' AND  a.sales_id IN (' . $sales_team_id . ')';
            $sqls1 = ' AND  sales_id IN (' . $sales_team_id . ')';
             
        }
        
        
        
            $i = 1;
            $array = array();
            
            
            $querycount = $this->db->query("SELECT a.*,b.name FROM $tablename as a JOIN admin_users as b ON a.user_id=b.id  WHERE a.deleteid='0' AND a.order_base='" . $order_base . "' $sqls $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,b.name FROM $tablename as a JOIN admin_users as b ON a.user_id=b.id  WHERE a.deleteid='0' AND a.order_base='" . $order_base . "' $sqls $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
       
        
        
        
        
        foreach ($result as $value) {
         
               
               $createDate = $value->invoice_date;
               $update_date = $value->update_date;
               
               $reOrderNum = $value->re_order_no;
               $order_no = $value->order_no;
                $totalqty=0;
                $totalamountGST = 0;



                $roundoff_val=0;
                $tcsamount=0;

               // if($order_no=='OCT/6159')
               // {
                              

                                 
                                

//exit;
                                   
                    $roundoff = $this->db->query("SELECT * FROM orders_process  WHERE order_no='".$order_no."' AND deleteid=0");
                    $roundoff = $roundoff->result();
                    foreach ($roundoff as $ss)
                    {      
                              
                                 $roundoff_val=$ss->roundoff;
                                 $tcs_status=$ss->tcs_status;
                              
                              
                              
                    }

                //}

              
             //$roundoff_val=0;
             //$tcsamount=0;
              
             
                     
                                                  
                                            
                                    

        $totalamount=0;
        $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."' AND deleteid=0");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess)
                {      
                    
                          $totalqty+=$valuess->qty;
                          $totalamount += round($valuess->qty*$valuess->rate,2);
                          $totalbase= round($valuess->qty*$valuess->rate,2);
                          $totalamountGST += round($totalbase* 1.18,2);
                          
                    
                       
                }
                    
         
             
              $totalamount= round($totalamount,2);


              if($tcs_status==1)
              {
                  $tcsamount=round($totalamountGST*0.1/100); 
              }




              $totalamountGST_ROUND=$totalamountGST;


      
                                                                         $whole = floor($totalamountGST_ROUND); 
                                                                         $decimal1 = $totalamountGST_ROUND - $whole;
                                                                         $totalval= round($decimal1,3);
 
                                                                         // gg changes
 
                                                                         $roundoffstatusval_data="";
                                                                         $getdataminis=0;
 
                                                                         if($totalval!=0)
                                                                                 {
 
 
                                                                                         if($totalval>0.5)
                                                                                         {
                                                                                                 
 
                                                                                                 $getplusevalue=1-$totalval;
                                                                                                 $totalamountGST_ROUND=$totalamountGST_ROUND+$getplusevalue;
                                                                                                 
                                                                                                 if($getplusevalue>0)
                                                                                                 {
                                                                                                     $roundoffstatusval_data=" (+) ".$getplusevalue;
                                                                                                     $autoRoundStat = 'plus';
                                                                                                     $autoRound = $getplusevalue;
                                                                                                 }
 
                                                                                         }
                                                                                         elseif($totalval == 0.5)
                                                                                         {
 
 
                                                                                                 $getplusevalue=$totalval;
                                                                                                 $totalamountGST_ROUND=$totalamountGST_ROUND+$getplusevalue;
                                                                                                 
                                                                                                 if($getplusevalue>0)
                                                                                                 {
                                                                                                     $roundoffstatusval_data=" (+) ".$getplusevalue;
                                                                                                     $autoRoundStat = 'plus';
                                                                                                     $autoRound = $getplusevalue;
                                                                                                 }
 
                                                                                         }
                                                                                         else
                                                                                         {
 
                                                                                                 $totalamountGST_ROUND=round($totalamountGST_ROUND-$totalval);
                                                                                                 if($totalval>0)
                                                                                                 {
                                                                                                     $roundoffstatusval_data=" (-) ".$totalval;
                                                                                                     $autoRoundStat = 'minus';
                                                                                                     $autoRound = $totalval;
                                                                                                 }
                                                                                                 
                                                                                         }
 
                                          
                                                                                 }


                                                                                
                           if($autoRoundStat=='plus')  
                           {
                                  $totalamountGST_ROUND=$totalamountGST+$autoRound;
                           }
                           else
                           {
                                 $totalamountGST_ROUND=$totalamountGST-$autoRound;   
                           }                                                 

              if($createDate > '2024-05-31')
              {



    $this->db->query("UPDATE $tablename SET bill_total='".$totalamountGST_ROUND."' WHERE id='".$value->id."'");
              // echo $reOrderNum;
              // exit;
              if($reOrderNum != '')
              {


if($totalamountGST>0)
{
     $this->db->query("UPDATE all_ledgers SET credits='".$totalamountGST_ROUND."',update_date=payment_date WHERE reference_no = '".$reOrderNum."'   AND account_heads_id_2 = 2 AND account_head_id = 68  AND order_no='RE-".$value->id."'");
}

             
             $withGST = $totalamountGST;
             $withOutGST = $totalamountGST / 1.18;
             $diffrence = $withGST - $withOutGST;
             $ninePerc = round(($diffrence / 2), 2);

 $this->db->query("UPDATE all_ledgers SET debits='".$ninePerc."',update_date=payment_date WHERE deletemod = 'SGST OUT - ".$reOrderNum."'   AND customer_id = 585 AND party_type = 5 AND order_no='RE-".$value->id."' ");
  $this->db->query("UPDATE all_ledgers SET debits='".$ninePerc."',update_date=payment_date WHERE deletemod = 'CGST OUT - ".$reOrderNum."'   AND customer_id = 586 AND party_type = 5 AND order_no='RE-".$value->id."'");


              }

              $totalamount= round($totalamountGST,2);


          }
          else
          {
                        

                        $totalamountGST_ROUND=$totalamount;
              $this->db->query("UPDATE $tablename SET bill_total='".$totalamount."' WHERE id='".$value->id."'");

          }

    //           if($value->re_order_no!='')
    //           {


    // $this->db->query("UPDATE all_ledgers SET return_invoice_date='".$value->invoice_date."' WHERE reference_no='".$value->re_order_no."'  AND notes='Sales Return'  ");
               
    //           }



              
                $res = $this->db->query("SELECT reason,create_date,customer_id,id,user_id FROM orders_process  WHERE order_no='".$value->order_no."' AND deleteid=0");
                $res = $res->result();
                foreach ($res as $valuess)
                {      
                    
                           $reason=$valuess->reason;
                           $user_id=$valuess->user_id;
                           $create_date=$valuess->create_date;
                           $customer_id=$valuess->customer_id;
                           $order_id=$valuess->id;
                           $company_name="";
 
                                         // $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         // foreach ($resultvordervv as  $value2) {
                                                     
                                         //               $company_name=$value2->company_name;
                                                      
                                         // }   

//$this->db->query("UPDATE order_sales_return_complaints SET customer='".$customer_id."',customer_id='".$company_name."',order_id='".$order_id."' WHERE id='".$value->id."'");
// $this->db->query("UPDATE orders_process SET return_id='".$value->id."'  WHERE id='".$order_id."'");
                       
                }


                      

            if($value->deleteid==0)
            {
                                                               
                                                                                        
                       $sales_person="";                                       
                  $queryss = $this->db->query("SELECT b.username as sales_person,b.id  FROM  admin_users as b JOIN customers as c ON b.id=c.sales_team_id WHERE  c.id='" . $value->customer . "'   ORDER BY b.id ASC");
                     $results = $queryss->result();
                     foreach ($results as  $values) 
                     {         
                        $sales_person=$values->sales_person;
                     }
                          
                      $array[] = array('no' => $i, 'roundoff_val'=>$roundoff_val,'id' => $value->id,'reason' => $reason,'driver_delivery_status'=>$value->driver_delivery_status,'amount' => $totalamountGST_ROUND,'order_base' => $value->order_base,'driver_return' => $value->driver_return,'order_by' => $value->name,'qty'=>round($totalqty,2),'customer_id'=>$value->customer_id,'order_no' => $value->order_no,'re_order_no' => $value->re_order_no,'sales_person' => $sales_person, 'remarks' => $value->remarks, 'product_id' => $value->product_id,'create_date' => date('d-m-Y', strtotime($value->update_date)),'invoice_date' => date('d-m-Y', strtotime($value->invoice_date)),'update_date' => date('d-m-Y', strtotime($value->update_date)));
                       if($order_base == 5)
                       {


                        if($tcsamount>0)
                        {

                             $tcsset='RET-TCS-'.$value->id;

                  $tcscheck=$this->db->query("SELECT id  FROM all_ledgers  WHERE deletemod='".$tcsset."' AND order_no='".$value->re_order_no."' AND party_type=5 AND customer_id=166");
                    $tcscheck = $tcscheck->result();
                    if(count($tcscheck)==0)
                    {

                        $data_tcs['order_id'] = 0;
                        $data_tcs['customer_id'] = 166;
                        $data_tcs['user_id'] = $this->userid;
                        $data_tcs['notes'] = 'TCS - Return' . $value->re_order_no;
                        $data_tcs['credits'] =  $tcsamount;
                        $data_tcs['order_no'] = $value->re_order_no;
                        $data_tcs['reference_no'] = $value->re_order_no;
                        $data_tcs['party_type'] = 5;
                        $data_tcs['account_head_id'] = 142;
                        $data_tcs['account_heads_id_2'] = 142;
                        $data_tcs['payment_date'] = $value->update_date;
                        $data_tcs['payment_time'] = date('h:i A');
                        $data_tcs['tcs_status'] = 1;
                        $data_tcs['deletemod'] = $tcsset;
                        $data_tcs['bank_id'] = 0;


                        if($tcsamount>0)
                        {
                            $this->Main_model->insert_commen($data_tcs, 'all_ledgers');
                        }


                    }




                        }



                       }


                $i++;

            }


//                if($value->invoice_date > '2024-05-31' &&  $order_base == 5 && $pagesize == 1000){
//                 $re_order_no = $value->re_order_no;
//                 $withGSTAmount = $value->bill_total;
//                 $withoutGSTAmount = $value->bill_total / 1.18;
//                 $data_address_driver = 'RE-'.$value->id;
//                 // $data_sGst['order_id'] = 0;
//                 // $data_sGst['customer_id'] =585;
//                 // $data_sGst['user_id'] = $user_id;
//                 // $data_sGst['notes'] = 'SGST - Order Process ' . $re_order_no;
//                 // $data_sGst['deletemod'] = 'SGST OUT - '.$re_order_no;
//                 // $data_sGst['debits'] =   ($withGSTAmount - $withoutGSTAmount) / 2;
//                 // $data_sGst['amount'] =   ($withGSTAmount - $withoutGSTAmount) / 2;
//                 // $data_sGst['order_no'] = $data_address_driver;
//                 // $data_sGst['reference_no'] =  $re_order_no;
//                 // $data_sGst['party_type'] = 5;
//                 // $data_sGst['process_by'] = 'Sales Return SGST';
//                 // $data_sGst['account_head_id'] = 142;
//                 // $data_sGst['account_heads_id_2'] = 142;
//                 // $data_sGst['payment_date'] =  $value->update_date;
//                 // $data_sGst['payment_time'] = $value->update_time;
//                 // $data_sGst['deleteid'] = '2024';
//                 //     $data_sGst['bank_id'] = 0;
//                 // $this->Main_model->insert_commen($data_sGst , 'all_ledgers');

//   $data_cGst['order_id'] = 0;
//                 $data_cGst['customer_id'] =586;
//                 $data_cGst['user_id'] = $user_id;
//                 $data_cGst['notes'] = 'CGST - Order Process ' .  $re_order_no;
//                 $data_cGst['deletemod'] = 'CGST OUT - '. $re_order_no;
//                 $data_cGst['debits'] =     ($withGSTAmount - $withoutGSTAmount) / 2;
//                 $data_cGst['amount'] =    ($withGSTAmount - $withoutGSTAmount) / 2;
//                 $data_cGst['order_no'] = $data_address_driver;
//                 $data_cGst['reference_no'] =$re_order_no;
//                 $data_cGst['party_type'] = 5;
//                 $data_cGst['process_by'] = 'Sales Return CGST';

//                 $data_cGst['account_head_id'] = 142;
//                 $data_cGst['account_heads_id_2'] = 142;
//                 $data_cGst['payment_date'] = $value->update_date;
//                 $data_cGst['payment_time'] =  $value->update_time;
//                 $data_cGst['deleteid'] = '2024';
//                     $data_cGst['bank_id'] = 0;
//                 $this->Main_model->insert_commen($data_cGst , 'all_ledgers');
// }     
                                                    
            
            
            
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
        public function purchase_fetch_cp_products()
    {
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                     $array=array();
                     $result= $this->Main_model->where_names('sales_complient_products','c_id',$id);
                     foreach ($result as  $value) {
                         
                         
                     
                     $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id, 
                            'product_name'=>$value->product_name,
                            'notes'=>$value->notes,
                            'qty' =>  round($value->qty,2),
                            'batch_no' =>  $value->batch_no,
                            

                        );
                        
                        
                      
                        

                       $i++;


                     }

                    echo json_encode($array);

    }
    
    
    /*
     public function oder_return_fetch_cp_products()
    {
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                     $array=array();
                     $result= $this->Main_model->where_names('sales_return_products','c_id',$id);
                     foreach ($result as  $value) 
                     {
                        $dataorder_no = $value->order_no;

                        if($value->deleteid==0)
                        {


                         if($value->return_recived_status==1)
                         {
                             $status='Received By Driver';
                         }
                         else
                         {
                             $status='Created To Sales Return';
                         }
                         
                          if($value->rack_info!='')
                         {
                             $instatus='Inwarded';
                         }
                         else
                         {
                             $instatus='';
                         }
                            
                         $results= $this->Main_model->where_names('order_sales_return_complaints','id',$id);
                         foreach ($results as  $values) {

                               $order_no= $values->order_no;
                               $order_id= $values->order_id;
                         }



                         

                      if($value->in_status_val=='Return To Re-Sale')
                      {
                                $bgcolor="bgcolor";
                      }
                      else
                      {
                                $bgcolor="";
                      }
$weight=0;
        $results= $this->Main_model->where_names_row('*','order_product_list_process','id',$value->order_process_product_id);
                       $proddetails= $this->Main_model->where_names_row('*','product_list','id',$value->product_id);

                       if(($proddetails->uom == 'Nos' || $proddetails->uom == 'nos') && $proddetails->categories_id != '1'){
                            $weight =  $value->qty * $proddetails->standard_weight;
                            $value->org_nos = $value->org_qty;
                            $value->edit_nos = $value->qty;

                             if($proddetails->categories_id === 599 || $proddetails->categories_id === "599"){
                                $pp= $this->Main_model->where_names_row('*','product_list','id',$results->tile_material_id);
                                $weight =  $value->qty * $pp->kg_rmtr_weight;
                                }
                       }
                       else{

                          if($value->edit_nos > 0 ){
                                if($results->single_we >0 || $results->single_we < '0' ){
                                      $weight = $results->single_we * $value->edit_nos;
                                  }else{
                                    $single_we = $results->weight/$results->nos;
                                    $weight = $single_we * $value->edit_nos;
                                  }
                          }else{
                                 $weight = $single_we * $value->edit_nos;
                          }

                          if($results->single_we >0 || $results->single_we < '0' ){
                              $weight = $results->single_we * $value->edit_nos;
                          }else{
                            $single_we = $results->weight/$results->nos;
                            $weight = $single_we * $value->edit_nos;
                          }
                      }


                      

                      $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id, 
                            'product_name'=>$value->product_name,
                            'notes'=>$value->notes,
                            'qty' =>  round($value->qty,3),
                            'rate' =>  $value->rate,
                            'nos' =>  $value->edit_nos,
                            'org_nos' =>  $value->org_nos,
                            'total' => round($value->qty*$value->rate,3),
                            'rack_info' =>  $value->rack_info,
                            'status' =>  $status,
                            'in_status' =>  $instatus,
                            'in_status_val' =>  $value->in_status_val,
                            'bgcolor' =>  $bgcolor,
                            'bin_info' =>  $value->bin_info,
                            'batch_no' =>  $value->batch_no,
                            'orderid' =>  $value->order_no,
                            'weight' =>  0,

                        );
                        
                        
                       $i++;

                       }



                     }
                     $myData = ["PortalActivity" => $array, "orderno" => $dataorder_no];

                    echo json_encode($myData);

    }
    */

 
    public function oder_return_fetch_cp_products()
    {
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                     $array=array();
                     //$result= $this->Main_model->where_names('sales_return_products','c_id',$id);

                    // $id = $this->db->escape($id); // Sanitize the input
                     $sql = "SELECT a.*, b.billing_options, c.uom
                             FROM sales_return_products AS a
                             LEFT JOIN order_product_list_process AS b 
                                 ON a.purchase_order_product_id = b.id
                             LEFT JOIN product_list AS c
                                 ON a.product_id = c.id
                             WHERE a.c_id = $id ORDER BY a.id DESC";
                     $query = $this->db->query($sql);
                     $result = $query->result(); // Fetch the result as an array

                     
                                 
                     foreach ($result as  $value) 
                     {



                        if($value->deleteid==0)
                        {


                         
                         if($value->return_recived_status==1)
                         {
                             $status='Received By Driver';
                         }
                         else
                         {
                             $status='Created To Sales Return';
                         }
                         
                          if($value->rack_info!='')
                         {
                             $instatus='Inwarded';
                         }
                         else
                         {
                             $instatus='';
                         }
                            
                         $results= $this->Main_model->where_names('order_sales_return_complaints','id',$id);
                         foreach ($results as  $values) {

                               $order_no= $values->order_no;
                               $order_id= $values->order_id;
                               $createDate= $values->invoice_date;
                         }

                         if($createDate > '2024-05-31'){
                         $newTotal = round(($value->qty*$value->rate) * 1.18);
                         $this->db->query("UPDATE sales_return_products SET amount = $newTotal WHERE id = '".$value->id."'");
                         }else{
                         $newTotal = round($value->qty*$value->rate);

                         }

        // for kg uom restriction
                         $uom_kg=$value->uom;
           
                            if($value->categories_id == 611 || $value->categories_id == 627 || $value->categories_id == 626 || $value->categories_id == 36 || $value->categories_id == 34 || $value->categories_id == 5){
       
                                if($value->billing_options==2)
                                {
                                    $uom_kg= 'Kg';
                                }
                                elseif($value->categories_id == 5)
                                {
                                    $uom_kg= 'Kg';
                                }else
                                {
                                    $uom_kg = 'Qty';
                                }
                
                            }

            
                     $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id, 
                            'product_name'=>$value->product_name,
                            'notes'=>$value->notes,
                            'qty' =>  round($value->weight,2),
                            'rate' =>  $value->rate,
                            'nos' => (!empty($value->edit_nos)) ? $value->edit_nos : $value->org_qty,
                            'org_nos' =>  (!empty($value->org_nos)) ? $value->org_nos : $value->org_qty,
                            'total' => $newTotal,
                            'rack_info' =>  $value->rack_info,
                            'status' =>  $status,
                            'in_status' =>  $instatus,
                            'in_status_val' =>  $value->in_status,
                            'bin_info' =>  $value->bin_info,
                            'batch_no' =>  $value->batch_no,
                            'weight' =>  isset($value->weight)? $value->weight : '',
                            'modify_weight' =>  isset($value->modify_weight)? $value->modify_weight : '',
                            'c_id' => $value->c_id, 
                            'uom_kg'=>$uom_kg

                        );
                        
                       
                      
                        

                       $i++;

                       }


                     }

                    echo json_encode($array);

    }
       // gg changes sales material weight update

       public function update_modify_weight() {

        $form_data = json_decode(file_get_contents("php://input"));
            if($form_data->modify_weight > 0){
                 $this->db->query("UPDATE sales_return_products SET  qty='".$form_data->modify_weight."' , modify_weight='".$form_data->modify_weight."' WHERE id='".$form_data->id."'");
            }
        echo json_encode(array('status' => 'success'));
    }
    
    
    
    
        public function purchase_fetch_cp_remarks_fetch()
    {
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                      $array=array();
                     $result= $this->Main_model->where_names('sales_complaints_remarks','c_id',$id);
                     foreach ($result as  $value) {
                         
                          $order_no="";
                          $resultp= $this->Main_model->where_names('order_sales_complaints','id',$id);
                          foreach ($resultp as  $valuep) {
                             
                             $order_no=$valuep->order_no;
                          }
                          
                        if($value->order_base==1)
                        {
                            $value->order_base='ASSIGN DRIVER';
                        }
                        elseif($value->order_base==4)
                        {
                            $value->order_base='TRIP STARTED';
                        }
                        elseif($value->order_base==5)
                        {
                            $value->order_base='FACTORY INWARD';
                        }
                        elseif($value->order_base==2)
                        {
                            $value->order_base='APPROVED';
                        }
                        elseif($value->order_base==6)
                        {
                            $value->order_base='RESCHEDULE';
                        }
                        elseif($value->order_base==0)
                        {
                           $value->order_base='UN-ASSIGNED';
                        }
                        else
                        {
                            $value->order_base='REJECTED';
                        }

                     $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id, 
                            'order_no' => $order_no, 
                            'order_base'=>$value->order_base,
                            'remarks'=>$value->remarks,
                            'create_date' =>  date('d-m-Y', strtotime($value->create_date)),
                            'create_time' =>  $value->create_time,
                            

                        );
                        
                        
                      
                        

                       $i++;


                     }

                    echo json_encode($array);

    }
    
        public function oder_return_fetch_cp_remarks_fetch()
    {
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                      $array=array();
                     $result= $this->Main_model->where_names('sales_return_remarks','c_id',$id);
                     foreach ($result as  $value) {
                         
                          $order_no="";
                          $resultp= $this->Main_model->where_names('order_sales_return_complaints','id',$id);
                          foreach ($resultp as  $valuep) {
                             if($valuep->re_order_no=='')
                             {
                                    $order_no=$valuep->order_no;
                             }
                             else
                             {
                                    $order_no=$valuep->re_order_no;
                             }
                             
                          }
                          
                       
                        if($value->order_base==1)
                        {
                            $value->order_base='ASSIGN DRIVER';
                        }
                        elseif($value->order_base==4)
                        {
                            $value->order_base='TRIP STARTED';
                        }
                        elseif($value->order_base==5)
                        {
                            $value->order_base='Return To Re-Sale';
                        }
                        elseif($value->order_base==2)
                        {
                            $value->order_base='Return To Re-Sale';
                        }
                        elseif($value->order_base==6)
                        {
                            $value->order_base='RESCHEDULE';
                        }
                        elseif($value->order_base==0)
                        {
                            $value->order_base='UN-ASSIGNED';
                        }
                        elseif($value->order_base==11)
                        {
                            $value->order_base='Return To Sale';
                        }
                        elseif($value->order_base==12)
                        {
                            $value->order_base='Return To Re-Sale';
                        }
                        elseif($value->order_base==13)
                        {
                            $value->order_base='Driver Return to Sales';
                        }
                        elseif($value->order_base==8)
                        {
                            $value->order_base='Return To Extra Sheet';
                        }
                        else
                        {
                            $value->order_base='REJECTED';
                        }



                           $user_name ='';
                             $user_group_team = $this->Main_model->where_names('admin_users','id',$value->user_id);
                             foreach ($user_group_team as  $team) {
                                                $user_name=$team->name;
                                               
                             }

                            $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id, 
                            'order_no' => $order_no, 
                            'order_base'=>$value->order_base,
                            'remarks'=>$value->remarks,
                            'user_name'=>$user_name,
                            'create_date' =>  date('d-m-Y', strtotime($value->create_date)),
                            'create_time' =>  $value->create_time,
                            

                        );
                        
                        
                      
                        

                       $i++;


                     }

                    echo json_encode($array);

    }
    
    public function fetch_product_get_vendor_order_no() 
    {
        $form_data = json_decode(file_get_contents("php://input"));
        $search = $_GET['search'];
        $sql="";
        if($search!='')
        {
            
            $search=explode('-', $search);
            
            $sql=' AND b.customer_id="'.$search[0].'"';
          
        }
        
        $array = array();
        $query = $this->db->query("SELECT b.order_no FROM  orders_process as b   WHERE b.deleteid='0' AND b.order_base>0 $sql  ORDER BY b.id  DESC");
        $result=$query->result();                       
        foreach ($result as $value) {
            $array[] = array('order_no'=>$value->order_no);
        }
        echo json_encode($array);
    }
    
       public function fetch_product_get_customer() 
       {
                        $form_data = json_decode(file_get_contents("php://input"));
                        $search = $form_data->search;
                        $sql="";
                        if($search!='')
                        {
                          $sql=' AND a.company_name LIKE "%'.$search.'%" OR a.phone LIKE "%'.$search.'%"';
                          
                        }
                        
                        $array = array();
                        $query = $this->db->query("SELECT a.company_name,a.id,a.phone FROM customers as a   WHERE a.deleteid='0'   $sql   ORDER BY a.id  ASC");
                        $result=$query->result();                       
                        foreach ($result as $value) {
                            $array[] = trim($value->id.'-'.$value->company_name.'-'.$value->phone);
                        }
                        echo json_encode($array);
     }
    
    
    
    
        public function get_purchase_product_list()
    {
                     
                     
                     $i=1;
                     
                     
                     $order_no=$_GET['order_no'];
                     $array=array();
                     $queryss = $this->db->query("SELECT a.*  FROM order_product_list_process as a  JOIN orders_process as b ON a.order_id=b.id WHERE a.deleteid='0' AND b.order_no='" . $order_no . "' AND b.deleteid='0'   ORDER BY a.id ASC");
                     $result = $queryss->result();
                     foreach ($result as  $value) {
                          
                        $type=0;
                        $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
                        foreach ($product_list as $csval) {
              
                                    $type= $csval->type;
                        }

                         $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id, 
                            'product_name' => $value->product_name, 
                            'qty'=>$value->qty,
                            'nos'=>$value->nos,
                            'amount'=>$value->amount,
                            'categories_id'=>$value->categories_id,
                            'type'=>$type,
                            'profile'=>$value->profile,
                            'crimp'=>$value->crimp,
                            'fact'=>$value->fact,
                            'rate'=>$value->rate,
                            'uom'=>$value->uom,
                            'status'=>1

                        );
                        
                        

                       $i++;


                     }

                    echo json_encode($array);

    }
    
    
    
    
    
    
    
    
    
        public function get_purchase_product_list_by_return()
    {
                     
                     
                     $i=1;
                     
                     
                     $order_no=$_GET['id'];
                     $array=array();
                     $queryss = $this->db->query("SELECT a.*  FROM sales_return_products as a   WHERE a.deleteid='0' AND a.c_id='" . $order_no . "'   ORDER BY a.id ASC");
                     $result = $queryss->result();
                     foreach ($result as  $value) {

                             $nos=$value->org_nos;

                        $results= $this->Main_model->where_names('order_sales_return_complaints','id',$value->c_id);
                         foreach ($results as  $values) {

                               $order_no= $values->order_no;
                               $order_id= $values->order_id;
                         }


                      
                       $purchase_order_product_id= $value->purchase_order_product_id;
                       $results= $this->Main_model->where_names_two_order_by('order_product_list_process_return_temp','order_process_product_id',$purchase_order_product_id,'order_id', $order_id, 'id', 'ASC');
                                             
                      if(count($results)==0)
                      {


                         $results= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id);

                      }

                      foreach ($results as  $values) 
                      {

                         $nos=$values->nos;
                          $profile=$values->profile;
                           $crimp=$values->crimp;
                               $fact=$values->fact;
                                $rate=$values->rate;
                                 $uom=$values->uom;

                      }


                        $type=0;
                        $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
                        foreach ($product_list as $csval) {
              
                                    $type= $csval->type;
                        }
                         
                     

                     $array[] = array(
                            
                            'no' => $i, 
                            'id' => $value->id,
                            'c_id' => $value->c_id, 
                            'product_name' => $value->product_name, 
                            'nos'=>$nos,
                            'qty'=>round($value->qty,3),
                            'rate'=>$value->rate,
                            'total'=>round($value->qty*$value->rate),
                            'notes'=>$value->notes,
                            'type'=>$type,
                            'profile'=>$profile,
                            'crimp'=>$crimp,
                            'fact'=>$fact,
                            'rate'=>$rate,
                            'uom'=>$uom,
                            'status'=>1

                        );
                        
                        

                       $i++;


                     }

                    echo json_encode($array);

    }
    
    
    
    
        public function purchase_complaints_data()
    {
        
        
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                        
                                        
                                      
                                     
                                        
                                         $customer_id=0;
                                       //  $result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);

  $result =$this->Main_model->where_names_two_order_by('orders_process', 'order_no', $form_data->order_no, 'deleteid', '0', 'id', 'ASC');

                                         foreach ($result as  $value) {
                                                     
                                                     $create_date=$value->create_date;
                                                     $order_id=$value->id;
                                                     $customer_id=$value->customer_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                      
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;
                                         
                                         //$data['product_id']="";
                                       
                                        
                                         $data['user_id']=$this->userid;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         $data['update_time']= $time;
                                         
                                         $data['invoice_date']= $create_date;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,$tablename);
                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         for ($i=0; $i <count($purchase_order_product_id) ; $i++) { 
                                        
                                            
                                            $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                            }
                                            $netweight+=$purchase_qty_data[$i];
                                            $datadd['qty']=$purchase_qty_data[$i];
                                            $datadd['c_id']=$insert_id;
                                            $datadd['product_name']=$product_name;
                                            $datadd['notes']=$purchase_notes_data[$i];
                                            $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];
                                            $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_complient_products');
                                            
                                            
                                         }

                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Complaints Created..');
                                         echo json_encode($array);
  
                    


    }
    
    
    
    
                public function purchase_complaints_data_remarks_update()
    {
        
        
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                 
                 
                                         $data['create_date']= $date;
                                         $data['create_time']= $time;
                                         $data['c_id']= $form_data->id;
                                         $data['order_base']= $form_data->order_base;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,'sales_complaints_remarks');
                                         $this->db->query("UPDATE order_sales_complaints SET order_base='".$form_data->order_base."' WHERE id='".$form_data->id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Complaints Remarks Updated..');
                                         echo json_encode($array);
  
                    


    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            public function sales_return_data()
    {
        
        
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));



               
                                        
                          
                                     
                                        
                                         $customer_id=0;
                                         //$result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);
  $result =$this->Main_model->where_names_two_order_by('orders_process', 'order_no', $form_data->order_no, 'deleteid', '0', 'id', 'ASC');

                                         foreach ($result as  $value) {
                                                     
                                                     $create_date=$value->create_date;
                                                     $order_id=$value->id;
                                                     $order_no=$value->order_no;
                                                     $customer_id=$value->customer_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                       $route=$value2->route;
                                                       $locality=$value2->locality;
                                                      
                                         }



                                         $route_id=0;
                                         $resultvordervvw= $this->Main_model->where_names('locality','id',$locality);
                                         foreach ($resultvordervvw as  $value2w) {
                                                     
                                                      
                                                       $route_id=$value2w->route_id;
                                                      
                                                      
                                         }
                                        
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;
                                         
                                         //$data['product_id']="";
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;
                                         $data['route_id']= $route_id;
                                        
                                         $data['user_id']=$this->userid;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         $data['update_time']= $time;
                                         
                                         
                                         $data['invoice_date']= $create_date;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,$tablename);
                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         $totalamount=0;
                                         for ($i=0; $i <count($purchase_order_product_id) ; $i++) { 
                                        
                                            
                                            $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                                     $rate=$value->rate;
                                                     $product_id=$value->product_id;
                                                      $order_id_data=$value->order_id;
                                            }
                                            
                                            $totalamount+=$purchase_qty_data[$i]*$rate;
                                            
                                            $netweight+=$purchase_qty_data[$i];
                                            $datadd['qty']=$purchase_qty_data[$i];
                                            
                                            $datadd['rate']=$rate;
                                            $datadd['c_id']=$insert_id;
                                            $datadd['product_name']=$product_name;
                                            $datadd['notes']=$purchase_notes_data[$i];
                                            $datadd['product_id']=$product_id;
                                            $datadd['order_no']=$order_id_data;
                                            $datadd['categories_id']=$categories_id;
                                            $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];



                                            $checkdata_p = $this->Main_model->where_names_three_order_by('sales_return_products', 'c_id', $insert_id, 'purchase_order_product_id',$purchase_order_product_id[$i],'deleteid', 0, 'id', 'ASC');
                                            if(count($checkdata_p)==0)
                                            {
                                            
                                            $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');
                                            $this->db->query("UPDATE order_product_list_process SET return_status=1,return_id='".$insert_id_data."' WHERE id='".$purchase_order_product_id[$i]."'");

                                            }



                                            
                                            
                                         }

                                         $this->db->query("UPDATE $tablename SET qty='$netweight', order_base='11' WHERE id='$insert_id'");

                                         $this->db->query("UPDATE orders_process SET return_status=1,return_id='".$insert_id."' WHERE id='".$order_id."'");
                                         $totalamount=round($totalamount,2);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                        $balancetotal = 0;
                                        $debitsamount = 0;
                                        $creditsamount = 0;
                                        foreach ($res as $val) {
                                                $payid = $val->id;
                                                $customer_id = $val->customer_id;
                                                $amount = $val->amount;
                                                $debitsamount+= $val->debits;
                                                $creditsamount+= $val->credits;
                                                $balancetotal+= $val->balance;
                                        }
                                        $balancetotal=$creditsamount-$debitsamount;
                                        //$data_address['order_id'] = $insert_id;
                                        $data_address['order_id'] = 0;

                                        $data_address['customer_id'] = $customer_id;
                                        $data_address['user_id'] = $this->userid;
                                        $data_address['notes'] = 'Sales Return';
                                        $data_address['payment_mode'] = '';
                                        $data_address['order_no'] = 'RE-'.$insertid;
                                        $data_address['difference'] = 0;
                                        $data_address['reference_no'] = $order_no;
                                        $data_address['amount'] = $totalamount;
                                        $data_address['account_head_id'] = 68;
                                        $data_address['account_heads_id_2'] = 2;
                                        $data_address['order_trancation_status'] = 0;
                                        $data_address['paid_status'] = 1;
                                        $data_address['credits'] = round($totalamount);
                                        $data_address['balance'] = $balancetotal + $totalamount;
                                        $data_address['collected_amount'] = $totalamount;
                                        $data_address['payment_date'] = $create_date;
                                        $data_address['process_by'] = 'Sales Return';
                                        $data_address['payment_time'] = $time;
                                        $data_address['party_type'] = 1;
                                        $data_address['bank_id'] = 0;
                                        $data_address['return_invoice_date'] = $create_date;
                                        
                                        
                                        $data_address['deletemod'] = 'RE-'.$insert_id;
                                        //$this->Main_model->insert_commen($data_address, 'all_ledgers');
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return  Created..');
                                         echo json_encode($array);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
  
                    


    }































public function sales_return_data_push()
    {
        
        
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                       $customer=explode('-', $form_data->customer);
                                       $customer_id=$customer[0];
                                       $company_name=$customer[1];
                         
                          
                                        $order_id=$form_data->order_no;



                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                       $route=$value2->route;
                                                       $locality=$value2->locality;
                                                      
                                         }



                                         $route_id=0;
                                         $resultvordervvw= $this->Main_model->where_names('locality','id',$locality);
                                         foreach ($resultvordervvw as  $value2w) {
                                                     
                                                      
                                                       $route_id=$value2w->route_id;
                                                      
                                                      
                                         }
                                        
                                        
                                        
                                         
                                         $data['customer_id']=$company_name;
                                         $tablename='order_sales_return_complaints';
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;
                                         $data['user_id']=$this->userid;
                                         $data['order_no']='S-RE'.$form_data->order_no;
                                         $data['update_date']= $form_data->create_date;
                                         $data['update_time']= $time;
                                         $data['invoice_date']= $form_data->create_date;
                                         $data['remarks']= $form_data->remarks;
                                         $data['deleteid']= 0;
                                         $data['route_id']= $route_id;
                                         $data['get_id']= $order_id;
                                         $insert_id=$order_id;
                                         $this->Main_model->update_commen($data, $tablename);










                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         $totalamount=0;
                                         for ($i=0; $i <count($purchase_order_product_id) ; $i++) { 
                                        
                                            
                                            $resultgetprodut= $this->Main_model->where_names('sales_return_products','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                                     $rate=$value->rate;
                                                     $product_id=$value->product_id;
                                                     $order_id_data=$value->order_id;
                                                     $categories_id=$value->categories_id;
                                            }
                                            
                                            $totalamount+=$purchase_qty_data[$i]*$rate;
                                            
                                            $netweight+=$purchase_qty_data[$i];
                                            $datadd['qty']=$purchase_qty_data[$i];
                                            
                                            $datadd['rate']=$rate;
                                            $datadd['c_id']=$insert_id;
                                            $datadd['product_name']=$product_name;
                                            $datadd['notes']=$purchase_notes_data[$i];
                                            $datadd['product_id']=$product_id;
                                            $datadd['categories_id']=$categories_id;
                                            $datadd['order_no']=$order_id_data;
                                            $datadd['get_id']=$purchase_order_product_id[$i];
                                            
                                            $this->Main_model->update_commen($datadd, 'sales_return_products');
                                            
                                            
                                            
                                            
                                         }

                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         $totalamount=round($totalamount,2);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                        $balancetotal = 0;
                                        $debitsamount = 0;
                                        $creditsamount = 0;
                                        foreach ($res as $val) {
                                                $payid = $val->id;
                                                $customer_id = $val->customer_id;
                                                $amount = $val->amount;
                                                $debitsamount+= $val->debits;
                                                $creditsamount+= $val->credits;
                                                $balancetotal+= $val->balance;
                                        }
                                        $balancetotal=$creditsamount-$debitsamount;
                                        //$data_address['order_id'] = $insert_id;
                                        $data_address['order_id'] = 0;

                                        $data_address['customer_id'] = $customer_id;
                                        $data_address['user_id'] = $this->userid;
                                        $data_address['notes'] = 'Sales Return';
                                        $data_address['payment_mode'] = '';
                                        $data_address['order_no'] = 'RE-'.$insertid;
                                        $data_address['difference'] = 0;
                                        $data_address['reference_no'] = 'Old Order Return';
                                        $data_address['amount'] = $totalamount;
                                        $data_address['account_head_id'] = 68;
                                        $data_address['account_heads_id_2'] = 2;
                                        $data_address['order_trancation_status'] = 0;
                                        $data_address['paid_status'] = 1;
                                        $data_address['credits'] = round($totalamount);
                                        $data_address['balance'] = $balancetotal + $totalamount;
                                        $data_address['collected_amount'] = $totalamount;
                                        $data_address['payment_date'] = $create_date;
                                        $data_address['process_by'] = 'Sales Return';
                                        $data_address['payment_time'] = $time;
                                        $data_address['party_type'] = 1;
                                        $data_address['bank_id'] = 0;
                                         $data_address['return_invoice_date'] = $form_data->create_date;
                                        
                                        $data_address['deletemod'] = 'RE-'.$insert_id;
                                        //$this->Main_model->insert_commen($data_address, 'all_ledgers');
                                        $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return  Created..');
                                        echo json_encode($array);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
  
                    


    }









































    
    
        public function sales_return_data_old_customer()
    {
        
        
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                        
                          $customer=explode('-', $form_data->customer);
                          $customer_id=$customer[0];
                          $product=explode('-', $form_data->product);
                          $product_id=$product[0];
                          $create_date=$form_data->create_date;
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                      
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename='order_sales_return_complaints';
                                         
                                         //$data['product_id']="";
                                         $data['customer']=$customer_id;
                                         $data['order_id']=0;
                                         $data['deleteid']=1;
                                         $data['session_id']=$create_date.$customer_id.session_id();
                                         $data['user_id']=$this->userid;
                                         $data['order_no']=$form_data->order_no;

                                         
                                         $data['update_date']= $form_data->create_date;
                                         $data['update_time']= $time;
                                         
                                         $data['invoice_date']= $create_date;
                                         $data['remarks']= $form_data->remarks;



                                         $resultgetprodut= $this->Main_model->where_names_two_order_by('order_sales_return_complaints','session_id',$data['session_id'],'order_id', '0', 'id', 'ASC');
                                        if(count($resultgetprodut)==0)
                                         {


                                         
                                         $insert_id=$this->Main_model->insert_commen($data,$tablename);


                                         }
                                         else
                                         {
                                            foreach ($resultgetprodut as  $value) {
                                                $insert_id=$value->id;
                                            }
                                         }







                                        
                                            
                                            $resultgetprodut= $this->Main_model->where_names('product_list','id',$product_id);
                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                                     $rate=$value->price;
                                            }
                                            
                                         
                                            
                                            
                                            $datadd['qty']='0';
                                            $datadd['rate']=$rate;
                                            $datadd['c_id']=$insert_id;
                                            $datadd['product_name']=$product_name;
                                            $datadd['notes']='';
                                            $datadd['purchase_order_product_id']=0;
                                            $datadd['product_id']=$product_id;
                                            $datadd['session_id']=$data['session_id'];
                                           

                                            $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');


                                            
                                            
                                            
                                         

                                        
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return  Created..');
                                         echo json_encode($array);
                                         
                                         
                                         
                                         
                                        
                                         
  
                    


    }






















    
    /*
    public function sales_return_data_by_driver()
    {
        
        
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                   $randam_id=$form_data->DC_id; 

                                   $result_s =$this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_no', $form_data->order_no, 'randam_id', $randam_id, 'id', 'ASC');
                                         foreach ($result_s as  $valuev) {

                                            $trip_id=$valuev->trip_id;

                                         }     
                          
                                     
                                        
                                         $customer_id=0;
                                         $driver_id=0;
                                         $route_id=0;

                                         //$result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);
                         $result =$this->Main_model->where_names_two_order_by('orders_process', 'order_no', $form_data->order_no, 'deleteid', '0', 'id', 'ASC');
                                         foreach ($result as  $value) {
                                                     
                                                     $create_date=$value->create_date;
                                                     $delivery_status=$value->delivery_status;
                                                     $order_id=$value->id;
                                                     $order_no=$value->order_no;
                                                     $customer_id=$value->customer_id;
                                                     $user_id=$value->user_id;
                                                     $start_reading=$value->start_reading;
                                                     $driver_id=$value->driver_id;
                                                     $bill_total=$value->bill_total;
                                                     $route_id=$value->route_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                      
                                         }


                                         $neworder_id = 1;
                                         $order_last_count = $this->Main_model->order_last_count_mounth_year('order_sales_return_complaints');
                                         foreach ($order_last_count as $r) {
                                            $neworder_id = $r->id + 1;
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;

                                         $km_reading_end=$form_data->km_reading_end;
                                         
                                         $data['order_base']=2;
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;

                                         $data['month'] = date('M');
                                         $data['year'] = date('Y');
                                         $data['count'] = $neworder_id;
                                         $data['driver_id'] = $driver_id;
                                         $data['route_id'] = $route_id;

                                         $data['re_order_no']='RE-'.strtoupper(date('M') . '/' . $neworder_id); 


                                        
                                         $data['user_id']=$this->userid;
                                         $data['sales_id']=$user_id;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         $data['update_time']= $time;
                                         
                                         $data['invoice_date']= $create_date;

                                         $data['start_reading']= $start_reading;
                                         $data['km_reading_end']= $km_reading_end;


                                         $data['trip_end_date']= $date;
                                         $data['trip_end_time']= $time;

                                         $data['remarks']= 'Driver Return to Sales';

                                         $data['driver_return']=2;

                                         




$checkdata = $this->Main_model->where_names_two_order_by($tablename, 'order_no', $form_data->order_no, 'driver_return', '2','deleteid',0, 'id', 'ASC');
foreach($checkdata as $vid)
{
     $insert_id=$vid->id;
}
                                          
if(count($checkdata)==0)
{

   $insert_id=$this->Main_model->insert_commen($data,$tablename);
  // $this->customer_balance_report_pass($customer_id);

}
                                         
                                        










                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         $order_nos_data=explode('|', $form_data->order_nos_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         $totalamount=0;
                                         $gstAmount = 0;
                                         for ($i=0; $i <count($purchase_order_product_id) ; $i++) 
                                         { 
                                        
                                            
                                            $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                                     $product_id=$value->product_id;
                                                     $rate=$value->rate+$value->commission;
                                                     $nos=$value->nos;
                                                     $qty=$value->qty;
                                                     $order_id_data=$value->order_id;
                                                     $categories_id=$value->categories_id;


    $this->db->query("UPDATE order_product_list_process  SET delivery_status='0',return_status='1' WHERE id='".$purchase_order_product_id[$i]."'");  
                                    


                                            }
                                            
                                            $totalamount+=$purchase_qty_data[$i]*$rate;
                                            $gstAmount += ($purchase_qty_data[$i]*$rate) * 1.18;

                                            
                                            $netweight+=$purchase_qty_data[$i];
                                            $datadd['qty']=$purchase_qty_data[$i];
                                            $datadd['edit_nos']=$order_nos_data[$i];
                                            $datadd['org_nos']=$nos;
                                            $datadd['org_qty']=$qty;
                                            $datadd['product_id']=$product_id;
                                            $datadd['categories_id']=$categories_id;
                                            $datadd['rate']=$rate;
                                            if($create_date > '2024-05-31'){
                                            $datadd['amount']=$gstAmount;

                                        }else{
                                            $datadd['amount']=$totalamount;

                                        }
                                            $datadd['c_id']=$insert_id;
                                            $datadd['order_no']=$order_id_data;
                                            $datadd['product_name']=$product_name;
                                            $datadd['return_recived_status']=1;
                                            $datadd['notes']=$purchase_notes_data[$i];
                                            $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];



         $checkdata_p = $this->Main_model->where_names_three_order_by('sales_return_products', 'c_id', $insert_id, 'purchase_order_product_id',$purchase_order_product_id[$i],'deleteid', 0, 'id', 'ASC');

                                            
                                            if(count($checkdata_p)==0)
                                            {


                                            $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');



            $this->db->query("UPDATE order_product_list_process SET randam_id=NULL,loadstatus=0,dispatch_status=0,picked_status=0,delivery_status='0',return_status=1,order_delivery_order_status_load=1,return_id='".$insert_id_data."' WHERE id='".$purchase_order_product_id[$i]."'");

$this->db->query("UPDATE sales_load_products  SET pickedstatus=0,dispatch_load=0,loadstatus=0,randam_id=NULL WHERE  randam_id='".$randam_id."' AND order_product_id='".$purchase_order_product_id[$i]."'");


                                            }




                                            
                                            
                                         }
                                         
                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");

                                           

                                         $datassh['c_id'] = $insert_id;
                                         $datassh['create_date'] = $date;
                                         $datassh['create_time'] = $time;
                                         $datassh['order_base'] = 13;
                                         $datassh['remarks'] = $data['remarks'];
                                         $datassh['user_id'] = $this->userid;
                                         $this->Main_model->insert_commen($datassh, 'sales_return_remarks');





                        $st=0;   
                        $qty1=0;         
                        $querycount = $this->db->query("SELECT a.id,b.qty FROM order_sales_return_complaints as a JOIN sales_return_products as b ON a.id=b.c_id  WHERE b.deleteid='0' AND a.order_no='".$form_data->order_no."' AND a.driver_return=2 ORDER BY a.id DESC");
                        $resultcount = $querycount->result();
                        $count=count($resultcount);
                        foreach ($resultcount as $rc1) {
                           $qty1+= round($rc1->qty);
                        }

                        $qty2=0;
                        $querycount2 = $this->db->query("SELECT a.id,b.qty FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id  WHERE b.deleteid='0' AND a.id='".$order_id."' ORDER BY a.id DESC");
                        $resultcount2 = $querycount2->result();
                        $count2=count($resultcount2);
                        foreach ($resultcount2 as $rc2) {
                           $qty2+= round($rc2->qty);
                        }
 
                        $totalamount=$gstAmount;
                       if($count==$count2) 
                        {


                          

                               if($qty1==$qty2) 
                               {

                                     $st=1;
                                     $totalamount=round($totalamount,2);
$this->db->query("UPDATE orders_process SET assign_status='0',finance_status='11',return_amount='".$totalamount."',return_status='1',reason='Driver Full Return',delivery_date_status='0',seq_status='1',return_id='".$insert_id."' WHERE id='".$order_id."'");


 $this->db->query("UPDATE order_delivery_order_status SET randam_id=NULL,dispatch_load_status='0',dispath_load_status_view='0',dispatch_status='0',assign_status='0',picked_status='0',return_status='1',finance_status='11',delivery_date_status='0',return_amount='".$totalamount."',reason='Driver Full Return',seq_status='0',old_trip_id='".$trip_id."',return_id='".$insert_id."',collection_remarks='".$totalamount."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");


        $this->db->query("UPDATE order_product_list_process  SET randam_id=NULL,loadstatus=0,dispatch_status=0,picked_status=0,delivery_status='0',return_status='1',order_delivery_order_status_load=1 WHERE order_id='".$order_id."'");

                $this->db->query("UPDATE sales_load_products  SET pickedstatus=0,dispatch_load=0,loadstatus=0,randam_id=NULL WHERE  randam_id='".$randam_id."'");

                                    
    $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$delivery_status."',bill_total='".$bill_total."' WHERE id='".$insert_id."'");


                               }
                               else
                               {

                                    $totalamount=round($totalamount,2);
$this->db->query("UPDATE orders_process SET assign_status='0',finance_status='11',reason='Return Partial',return_amount='".$totalamount."',seq_status='1',delivery_date_status='0',return_id='".$insert_id."' WHERE id='".$order_id."'");

//$this->db->query("UPDATE order_delivery_order_status SET randam_id=NULL,dispatch_load_status='0',dispath_load_status_view='0',dispatch_status='0',assign_status='0',picked_status='0',return_status='1',finance_status='11',delivery_date_status='0',return_amount='".$totalamount."',reason='Driver Return Partial',seq_status='0',return_id='".$insert_id."',collection_remarks='".$totalamount."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");




  $dil_status['dispatch_status'] = 0;
                              $dil_status['assign_status'] = 0;
                              $dil_status['order_id'] = $order_id;
                              $dil_status['order_no'] = $order_no;
                              $dil_status['finance_status'] = 2;
                              $dil_status['return_id'] = $insert_id;
                              $dil_status['collection_remarks'] = $totalamount;
                              $dil_status['return_amount'] = $totalamount;
                              $dil_status['reason'] = 'Driver Return Partial';
                              $dil_status['old_trip_id '] = $trip_id;
                              $dil_status['create_date'] = $date;
                              $dil_status['create_time'] = $time;
                              $dil_status['delivery_date'] =$date;
                              $dil_status['delivery_time'] =$time;
                              $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');


                                    $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$delivery_status."',bill_total='".$totalamount."' WHERE id='".$insert_id."'");



                               }

                            
                       
                           


                        }
                        else
                        {     

                                $totalamount=round($totalamount);
                                $this->db->query("UPDATE orders_process SET delivery_date_status='0',reason='Return Partial',assign_status='0',finance_status='11',return_amount='".$totalamount."',return_id='".$insert_id."' WHERE id='".$order_id."'");


                                 //  $this->db->query("UPDATE order_delivery_order_status SET randam_id=NULL,dispatch_load_status='0',dispath_load_status_view='0',dispatch_status='0',assign_status='0',return_status='1',finance_status='11',delivery_date_status='0',return_amount='".$totalamount."',reason='Driver Return Partial',seq_status='0',return_id='".$insert_id."',collection_remarks='".$totalamount."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");




                              $dil_status['dispatch_status'] = 0;
                              $dil_status['assign_status'] = 0;
                              $dil_status['order_id'] = $order_id;
                               $dil_status['order_no'] = $order_no;
                              $dil_status['finance_status'] = 2;

                              $dil_status['return_id'] = $insert_id;
                              $dil_status['collection_remarks'] = $totalamount;
                              $dil_status['return_amount'] = $totalamount;
                              $dil_status['reason'] = 'Driver Return Partial';
                              $dil_status['old_trip_id '] = $trip_id;
                              $dil_status['create_date'] = $date;
                              $dil_status['create_time'] = $time;
                              $dil_status['delivery_date'] =$date;
                              $dil_status['delivery_time'] =$time;
                              $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');


                                $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$delivery_status."',bill_total='".$totalamount."' WHERE id='".$insert_id."'");




                        }
                       
                        


                         $re_order_no='RE-'.strtoupper(date('M') . '/' . $neworder_id); 
                         $this->db->query("UPDATE order_sales_return_complaints SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         
                                         
                                         
                                         
                                         
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'st'=>$st,'massage'=>'Sales Return  Created..');
                                         echo json_encode($array);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
  
                    


    }
    */




    



    
    

    public function sales_return_data_by_driver()
    {
        
        
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                   $randam_id=$form_data->DC_id;      
                                                                         
                                                                                                              
                    // BABU CALL BACK DELETE
    //$this->db->query("DELETE FROM order_delivery_order_status  WHERE order_id='".$form_data->order_id."'  AND randam_id IS NULL AND finance_status=2");                        
                                                                                                            
                                         $customer_id=0;
                                         $driver_id=0;
                                         $route_id=0;
    
                                         //$result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);
                         $result =$this->Main_model->where_names_two_order_by('orders_process', 'order_no', $form_data->order_no, 'deleteid', '0', 'id', 'ASC');
                                         foreach ($result as  $value) {
                                                     
                                                     $create_date=$value->create_date;
                                                     $delivery_status=$value->delivery_status;
                                                     $order_id=$value->id;
                                                     $order_no=$value->order_no;
                                                     $customer_id=$value->customer_id;
                                                     $user_id=$value->user_id;
                                                     $start_reading=$value->start_reading;
                                                     $driver_id=$value->driver_id;
                                                     $bill_total=$value->bill_total;
                                                     $route_id=$value->route_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                      
                                         }
    
    
                                         $neworder_id = 1;
                                         $order_last_count = $this->Main_model->order_last_count_mounth_year('order_sales_return_complaints');
                                         foreach ($order_last_count as $r) {
                                            $neworder_id = $r->id + 1;
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;
    
                                         $km_reading_end=$form_data->km_reading_end;
                                         
                                         $data['order_base']=2;
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;
    
                                         $data['month'] = date('M');
                                         $data['year'] = date('Y');
                                         $data['count'] = $neworder_id;
                                         $data['driver_id'] = $driver_id;
                                         $data['route_id'] = $route_id;
    
                                         $data['re_order_no']='RE-'.strtoupper(date('M') . '/' . $neworder_id); 
    
    
                                        
                                         $data['user_id']=$this->userid;
                                         $data['sales_id']=$user_id;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         $data['update_time']= $time;
                                         
                                         $data['invoice_date']= $create_date;
    
                                         $data['start_reading']= $start_reading;
                                         $data['km_reading_end']= $km_reading_end;
    
    
                                         $data['trip_end_date']= $date;
                                         $data['trip_end_time']= $time;
    
                                         $data['remarks']= 'Driver Return to Sales';
    
                                         $data['driver_return']=2;
                                         $data['randam_id']=$randam_id;
    
                                         
    
    
                       $qty2=0;
                       //$querycount2 = $this->db->query("SELECT a.id,b.qty FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id  WHERE b.deleteid='0' AND a.id='".$order_id."' ORDER BY a.id DESC");
                      
                       // BABU
                       $querycount2 = $this->db->query("SELECT a.id,ss.qty FROM order_product_list_process as a JOIN product_list as b ON a.product_id=b.id JOIN order_delivery_order_status as ds ON a.order_id=ds.order_id JOIN sales_load_products as ss ON a.id=ss.order_product_id WHERE a.order_id='".$order_id."' AND a.deleteid=0 AND a.product_id>0 AND ss.loadstatus=1 AND ss.randam_id='".$randam_id."' GROUP BY ss.order_product_id ORDER BY a.categories_id,a.sort_id ASC");

                        $resultcount2 = $querycount2->result();
                        $count2=count($resultcount2);
                        foreach ($resultcount2 as $rc2) {
                           $qty2+= round($rc2->qty);
                        }

    
    //$checkdata = $this->Main_model->where_names_two_order_by($tablename, 'order_no', $form_data->order_no, 'driver_return', '2','deleteid',0, 'id', 'ASC');
    
    //$condition = "city_name ='".$id."'";
    $this->db->select('*');
    $this->db->from($tablename);
    $this->db->where('randam_id',$randam_id);
    $this->db->where('order_no',$form_data->order_no);
    $this->db->where('driver_return','2');
    $this->db->where('deleteid','0');
    $this->db->order_by('id','ASC');
    $query = $this->db->get();
    $checkdata= $query->row();
    
    
    // no checking
    $insert_id=$this->Main_model->insert_commen($data,$tablename);
    $this->db->query("UPDATE sales_return_products SET return_picked='0',return_no_pick='0',return_qty_pick='0',return_picked_deliverd='0'  WHERE c_id='".$insert_id."'");        

                         
                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         $order_nos_data=explode('|', $form_data->order_nos_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         $totalamount=0;
                                         $gstAmount = 0;
                                         for ($i=0; $i <count($purchase_order_product_id) ; $i++) 
                                         { 
                                        
                                            
                                            $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                                     $product_id=$value->product_id;
                                                     $rate=$value->rate+$value->commission;
                                                     $nos=$value->nos;
                                                     $qty=$value->qty;
                                                     $order_id_data=$value->order_id;
                                                     $categories_id=$value->categories_id;
    
    // $this->db->query("UPDATE order_product_list_process  SET delivery_status='0',return_status='1' WHERE id='".$purchase_order_product_id[$i]."'");  
    
    
    
      // gg changes Return MAIN
                                    
     // $this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status=0,picked_status=0,loadstatus=0,return_status='1',order_delivery_order_status_load=0,delivery_status='0' WHERE id='".$purchase_order_product_id[$i]."' AND order_id='".$form_data->order_id."'  AND picked_status=1 AND randam_id='".$randam_id."'");
      
    //  $this->db->query("UPDATE sales_load_products  SET pickedstatus=0,dispatch_load=0,loadstatus=0,randam_id=NULL WHERE  randam_id='".$randam_id."' AND order_product_id='".$purchase_order_product_id[$i]."'"); 
                                    
    
                                            }
                          
     //////////////////////// GG CHANGES RETURN QTY UPDATE //////////////////////////////
    
    
                        $this->db->select('*');
                        $this->db->from('order_product_list_process');
                        $this->db->where('id',$purchase_order_product_id[$i]);
                        $this->db->order_by('id','DESC');
                        $query_re = $this->db->get();
                        $re_data= $query_re->row();
    
                        $this->db->select('*');
                        $this->db->from('sales_load_products');
                        $this->db->where('order_product_id',$purchase_order_product_id[$i]);
                        $this->db->where('randam_id',$randam_id);
                        $this->db->order_by('id','DESC');
                        $return_sale = $this->db->get();
                        $return_sale_data= $return_sale->row();
    
                        $return_nos=$order_nos_data[$i];
                      // echo'<pre>'; print_r($return_nos);
                        if($return_nos > 0){


                        // // gg changes for driver nos products returns

                        if($return_sale_data->nos == '' || $return_sale_data->nos == '0' || $return_sale_data->nos == null) {

                                $return_sale_data->nos=$return_sale_data->qty;
                        }

                        if( $re_data->nos == '' || $re_data->nos == '0' || $re_data->nos == null) {

                            $re_data->nos=$re_data->qty;
                        }
   

                                // order theoretical qty diff calculation
                                $single_theoretical_qty=$re_data->activel_qty / $re_data->nos;
                              // echo'<pre>'; print_r($single_theoretical_qty);
                                // After gate order edits calculation
                                $single_qty=$return_sale_data->qty / $return_sale_data->nos;
                              // echo'<pre>'; print_r($single_qty);
                                // for return qty calculation
                                $nos_update=$return_sale_data->nos-$return_nos;
                                $qty_update=$single_qty*$nos_update;
                                $amount_update=$qty_update*$return_sale_data->rate;
    
    
                                // For calculate return qty and update to billed in order process table
                                $billed_theoretical_qty_diff= $single_theoretical_qty * $return_nos;
                                $billed_qty_diff= $single_qty * $return_nos;
    
                                if($billed_qty_diff > $billed_theoretical_qty_diff){
    
                                    $qty_update_org=$billed_theoretical_qty_diff - $billed_qty_diff;
    
                                }else {
    
                                    $qty_update_org=$billed_theoretical_qty_diff - $billed_qty_diff;
    
                                }
    
                                //echo'<pre>';  print_r($qty_update_org);
                                $qty_org=$re_data->qty+($qty_update_org);
                                //echo'<pre>';  print_r($qty_org);exit;
    
    
                                // for actival qty
    
                                $single_actival_qty=$return_sale_data->activel_qty / $return_sale_data->nos;
                                $actival_qty_org=$single_actival_qty * $nos_update;
    
    
                                
                                $this->db->query("UPDATE order_product_list_process SET qty='".$qty_org."',return_status=1,return_id='".$insert_id_data."',randam_id=NULL,dispatch_status=0,picked_status=0,loadstatus=0,return_status='1',order_delivery_order_status_load=0,delivery_status='0' WHERE id='".$purchase_order_product_id[$i]."'");
    
                                $this->db->query("UPDATE sales_load_products  SET nos='".$nos_update."',qty='".$qty_update."',amount='".$amount_update."',activel_qty='".$actival_qty_org."' WHERE  randam_id='".$randam_id."' AND order_product_id='".$purchase_order_product_id[$i]."'");
    
                                // for dispatch page finance status change for dispatch loaded
                                $this->db->query("UPDATE order_delivery_order_status SET finance_status='3',assign_status='1' WHERE  randam_id='".$randam_id."' AND order_id='".$form_data->order_id."' AND deleteid=0");
    
    
                        }
                                    
    
                                            $totalamount+=$purchase_qty_data[$i]*$rate;
                                            $gstAmount += ($purchase_qty_data[$i]*$rate) * 1.18;
    
                                            
                                            $netweight+=$purchase_qty_data[$i];
                                            $datadd['qty']=$purchase_qty_data[$i];
                                            $datadd['edit_nos']=$order_nos_data[$i];
                                            $datadd['org_nos']=$nos;
                                            $datadd['org_qty']=$qty;
                                            $datadd['product_id']=$product_id;
                                            $datadd['categories_id']=$categories_id;
                                            $datadd['rate']=$rate;
                                            if($create_date > '2024-05-31'){
                                            $datadd['amount']=$gstAmount;
    
                                        }
                                        else
                                        {
                                            $datadd['amount']=$totalamount;
    
                                        }
                                            $datadd['c_id']=$insert_id;
                                            $datadd['order_no']=$order_id_data;
                                            $datadd['product_name']=$product_name;
                                            $datadd['return_recived_status']=1;
                                            $datadd['notes']=$purchase_notes_data[$i];
                                            $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];

// gg changes for driver return material return
                                            $datadd['order_process_product_id']=$purchase_order_product_id[$i];

                                            $datadd['randam_id']=$randam_id;
    
    
    
                                            $this->db->select('*');
                                            $this->db->from('order_product_list_process');
                                            $this->db->where('id',$purchase_order_product_id[$i]);
                                            $this->db->order_by('id','DESC');
                                            $query = $this->db->get();
                                            $weight_details= $query->row();
    // gg weight
                                            $datadd['weight']=$purchase_qty_data[$i];
    
    
         $checkdata_p = $this->Main_model->where_names_three_order_by('sales_return_products', 'c_id', $insert_id, 'purchase_order_product_id',$purchase_order_product_id[$i],'deleteid', 0, 'id', 'ASC');
    
                                            
                                            if(count($checkdata_p)==0)
                                            {
    
    
                                            $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');
                            }
                               
         }
                                         
                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");
    
                                           
    
                                         $datassh['c_id'] = $insert_id;
                                         $datassh['create_date'] = $date;
                                         $datassh['create_time'] = $time;
                                         $datassh['order_base'] = 13;
                                         $datassh['remarks'] = $data['remarks'];
                                         $datassh['user_id'] = $this->userid;
                                         $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
    
    
    
    
    
                        $st=0;   
                        $qty1=0;         
                        $querycount = $this->db->query("SELECT a.id,b.qty FROM order_sales_return_complaints as a JOIN sales_return_products as b ON a.id=b.c_id  WHERE b.deleteid='0' AND a.order_no='".$form_data->order_no."' AND a.driver_return=2 AND a.randam_id='".$randam_id."' ORDER BY a.id DESC");
                        $resultcount = $querycount->result();
                        $count=count($resultcount);
                        foreach ($resultcount as $rc1) {
                           $qty1+= round($rc1->qty);
                        }
    
                      



                       //$querycount2 = $this->db->query("SELECT ss.qty FROM order_product_list_process as a JOIN order_delivery_order_status as ds ON a.order_id=ds.order_id JOIN sales_load_products as ss ON a.id=ss.order_product_id WHERE a.order_id='".$order_id."' AND a.deleteid=0 AND a.loadstatus_by_cate=0 AND a.product_id!='' AND ss.loadstatus=1 AND ss.randam_id='".$randam_id."' GROUP BY a.id ORDER BY a.categories_id,a.sort_id ASC");

                      
                      


    //                     echo 'count 1: <pre>';print_r($count);
    //                     echo 'count 2 :<pre>';print_r($count2);

//     echo 'qty 1<pre>';print_r($qty1);
//     echo 'qty 2<pre>';print_r($qty2);
// exit;

                    $roundoff = $this->db->query("SELECT * FROM orders_process  WHERE id='".$order_id."' AND deleteid=0");
                    $roundoff = $roundoff->result();
                    foreach ($roundoff as $ss)
                    {      
                              
                                 $roundoff_val=$ss->roundoff;
                                 $tcs_status=$ss->tcs_status;
                              
                              
                              
                    }
                                
                     $tcsamount=0;
                     if($tcs_status==1)
                     {
                        $tcsamount=round($gstAmount*0.1/100); 
                     }


                                                 $totalamount=round($gstAmount+$tcsamount);


    // exit;
                       if($count==$count2) 
                        {
    
    
                          
    
                               if($qty1==$qty2) 
                               {
    
    
                        ////////////////// DRIVER FULL  RETURN /////////////////
                                
    
                                     $st=1;
                                     $totalamount=round($totalamount,2);
    
    
            $this->db->query("UPDATE orders_process SET assign_status='0',finance_status='11',return_amount='".$totalamount."',return_status='1',reason='Driver Full Return',delivery_date_status='0',seq_status='1',return_id='".$insert_id."' WHERE id='".$order_id."'");
    
            // Driver full return so we have update only reason to that line
            $this->db->query("UPDATE order_delivery_order_status SET return_status=1,delivery_date_status='1',finance_status='11',assign_status='0',reason='Driver Full Return',return_amount='".$totalamount."',return_id='".$insert_id."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."' AND deleteid=0");
    
            // driver full return so declare new row in order_delivery_order_status
    
                              $dil_status['dispatch_status'] = 0;
                              $dil_status['assign_status'] = 0;
                              $dil_status['order_id'] = $order_id;
                              $dil_status['order_no'] = $order_no;
                              $dil_status['finance_status'] = 2;
                              $dil_status['deleteid'] = 1002;

                              // gg changes to comment for return values
                              $dil_status['return_id'] = $insert_id;
                             
                              $dil_status['collection_remarks_2'] = $totalamount;
                             // $dil_status['return_amount'] = $totalamount;
                              $dil_status['reason'] = 'Driver Full Return';
                              $dil_status['create_date'] = $date;
                              $dil_status['create_time'] = $time;
                              $dil_status['delivery_date'] =$date;
                              $dil_status['delivery_time'] =$time;
                              $dil_status['assign_status_11_date'] =$date;

//$this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');
                               $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $order_id . "' AND finance_status=2 AND deleteid='0'");
                                            $allcheck = $allcheck->result();
                                            if(count($allcheck)==0)
                                            {

                   $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');


                                            }
                                            else
                                            {


$this->db->query("UPDATE order_delivery_order_status SET return_status=2,return_id='".$insert_id."',reason='Driver Full Return',deleteid=0 WHERE  finance_status=2 AND deleteid='0' AND order_id='".$order_id."'"); 


           
                                            }

    
                    // driver full return so Maintain that line AND just 0 the values
                    $this->db->query("UPDATE sales_load_products  SET nos=0,amount=0,qty=0,activel_qty=0 WHERE  randam_id='".$randam_id."'");
    
                                    
                    $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$delivery_status."',bill_total='".$totalamount."' WHERE id='".$insert_id."'");
    
    
                               }
                               else
                               {
    
    
                                ////////////////// DRIVER PARTIAL RETURN /////////////////
    
                                    $totalamount=round($totalamount,2);
    $this->db->query("UPDATE orders_process SET assign_status='0',finance_status='11',reason='Return Partial',return_amount='".$totalamount."',seq_status='1',delivery_date_status='1',return_id='".$insert_id."' WHERE id='".$order_id."'");
    
    //$this->db->query("UPDATE order_delivery_order_status SET randam_id=NULL,dispatch_load_status='0',dispath_load_status_view='0',dispatch_status='0',assign_status='0',picked_status='0',return_status='1',finance_status='11',delivery_date_status='0',return_amount='".$totalamount."',reason='Driver Return Partial',seq_status='0',return_id='".$insert_id."',collection_remarks='".$totalamount."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");
      
    // gg changes to save return amount in order_delivery_order_status table
    $this->db->query("UPDATE order_delivery_order_status SET return_status='1',return_amount='".$totalamount."',return_id='".$insert_id."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");

    
    
                              $dil_status['dispatch_status'] = 0;
                              $dil_status['assign_status'] = 0;
                              $dil_status['order_id'] = $order_id;
                              $dil_status['order_no'] = $order_no;
                              $dil_status['finance_status'] = 2;

                              // gg changes to comment for return values
                             $dil_status['return_id'] = $insert_id;
                              $dil_status['collection_remarks_2'] = $totalamount;
                            // $dil_status['return_amount'] = $totalamount;
                              
                              $dil_status['reason'] = 'Driver Return Partial1';
                              $dil_status['create_date'] = $date;
                              $dil_status['create_time'] = $time;
                              $dil_status['delivery_date'] =$date;
                              $dil_status['delivery_time'] =$time;
                              $dil_status['assign_status_11_date'] =$date;



 //$this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');
            $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $order_id . "' AND finance_status=2 AND deleteid='0'");
                                            $allcheck = $allcheck->result();
                                            if(count($allcheck)==0)
                                            {

                              $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');

                                            }
                                            else
                                            {


$this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".$totalamount."',return_status=2,return_id='".$insert_id."',reason='Driver Partial Return1',deleteid=0 WHERE  finance_status=2 AND deleteid='0' AND order_id='".$order_id."'"); 


           
                                            }

    
    
                                    $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$delivery_status."',bill_total='".$totalamount."' WHERE id='".$insert_id."'");
    
    
    
                               }
    
                            
                       
                           
    
    
                        }
                        else
                        {     
    
                                $totalamount=round($totalamount);
                                $this->db->query("UPDATE orders_process SET delivery_date_status='1',reason='Return Partial',assign_status='0',finance_status='11',return_amount='".$totalamount."',return_id='".$insert_id."' WHERE id='".$order_id."'");
    
    
                                 //  $this->db->query("UPDATE order_delivery_order_status SET randam_id=NULL,dispatch_load_status='0',dispath_load_status_view='0',dispatch_status='0',assign_status='0',return_status='1',finance_status='11',delivery_date_status='0',return_amount='".$totalamount."',reason='Driver Return Partial',seq_status='0',return_id='".$insert_id."',collection_remarks='".$totalamount."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");
    
                                         
                                 // gg changes to save return amount in order_delivery_order_status table
                                 $this->db->query("UPDATE order_delivery_order_status SET return_status='1',return_amount='".$totalamount."',return_id='".$insert_id."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."'");
                                     
                                
    
    
    
    
    
                              $dil_status['dispatch_status'] = 0;
                              $dil_status['assign_status'] = 0;
                              $dil_status['order_id'] = $order_id;
                               $dil_status['order_no'] = $order_no;
                              $dil_status['finance_status'] = 2;

                              
                             // gg changes to comment for return values
                             $dil_status['return_id'] = $insert_id;
                             $dil_status['collection_remarks_2'] = $totalamount;
                             //  $dil_status['return_amount'] = $totalamount;
 

                              $dil_status['reason'] = 'Driver Return Partial';
                              $dil_status['create_date'] = $date;
                              $dil_status['create_time'] = $time;
                              $dil_status['delivery_date'] =$date;
                              $dil_status['delivery_time'] =$time;
                              $dil_status['assign_status_11_date'] =$date;


//$this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');
                              $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $order_id . "' AND finance_status=2 AND deleteid='0'");
                                            $allcheck = $allcheck->result();
                                            if(count($allcheck)==0)
                                            {

           $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');

                                             }
                                             else
                                            {


$this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".$totalamount."',return_status=2,return_id='".$insert_id."',reason='Driver Partial Return',deleteid=0 WHERE  finance_status=2 AND deleteid='0' AND order_id='".$order_id."'"); 


           
                                            }
    
    
                                $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$delivery_status."',bill_total='".$totalamount."' WHERE id='".$insert_id."'");
    
    
    
    
                        }
                       
                        
    
    
                         $re_order_no='RE-'.strtoupper(date('M') . '/' . $neworder_id); 
                         $this->db->query("UPDATE order_sales_return_complaints SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         
                                         
                                         
                                         
                                         
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'st'=>$st,'massage'=>'Material Return Created..');
                                         echo json_encode($array);
                                         
            
    
    }
    
    
    
        public function inward_bin_update()
    {
        
        
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                                         $name= $form_data->name;
                                         $values= $form_data->values;
                                         
                                         
                                         
                                         $this->db->query("UPDATE sales_return_products SET $name='".$values."' WHERE id='".$form_data->id."'");
                                         $array=array('error'=>'2','insert_id'=>1,'massage'=>'Sales Return Remarks Updated..');
                                         echo json_encode($array);
  


    }
    
    public function sales_return_data_remarks_update()
    {
        
        
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                                         
                                         
                 
                                         $data['create_date']= $date;
                                         $data['create_time']= $time;
                                         $data['c_id']= $form_data->id;
                                         $data['order_base']= $form_data->order_base;
                                         
                                         



                                         $data['remarks']= $form_data->remarks;
            $this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Duplicate entry deleted Sales Return',deletemod='REDD-".$form_data->id."' WHERE deletemod='RE-".$form_data->id."' AND deleteid=0");
                                         
                                          $resultmain = $this->db->query("SELECT a.customer as customer_id,a.id,a.order_no,a.invoice_date FROM `order_sales_return_complaints` as a   WHERE a.deleteid=0  AND a.id='".$form_data->id."' ORDER BY a.id DESC");
                                              $getdata = $resultmain->result();
                                              
                                                  foreach($getdata as $vl)
                                                  {
                                                      $invoiceDate=$vl->invoice_date;
                                                  }
                                         if($form_data->order_base==2)
                                         {
                                             
                                             
                                              
                                         
                                             $resultmain = $this->db->query("SELECT a.customer as customer_id,a.id,a.order_no,a.invoice_date FROM `order_sales_return_complaints` as a   WHERE a.deleteid=0  AND a.id='".$form_data->id."' ORDER BY a.id DESC");
                                              $getdata = $resultmain->result();
                                              
                                                  foreach($getdata as $vl)
                                                  {
                                                      $customer_id=$vl->customer_id;
                                                      $order_id=$vl->id;
                                                      $order_no=$vl->order_no;
                                                      $invoiceDate=$vl->invoice_date;
                                                  }
                                                  
                                                  $totalamount=0;
                         $resultmainre = $this->db->query("SELECT * FROM `sales_return_products`  WHERE c_id='".$form_data->id."' AND deleteid=0  ORDER BY id DESC");
                                                  $getdatare = $resultmainre->result();
                                                  foreach($getdatare as $vlre)
                                                  {
                                                      if($vlre->return_recived_status==1)
                                                      {
                                                          $totalamount+=$vlre->qty*$vlre->rate;
                                                      }
                                                      
                                                  }
                                                  
                                              
                                                  $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                                  $balancetotal = 0;
                                                  $debitsamount = 0;
                                                  $creditsamount = 0;
                                                  foreach ($res as $val) {
                                                        $payid = $val->id;
                                                        $customer_id = $val->customer_id;
                                                        $amount = $val->amount;
                                                        $debitsamount+= $val->debits;
                                                        $creditsamount+= $val->credits;
                                                        $balancetotal+= $val->balance;
                                                 }
                                                 $balancetotal=0;
                                                
                                                    //$data_address['order_id'] = $order_id;
                                                     $data_address['order_id'] = 0;
                                                    $data_address['customer_id'] = $customer_id;
                                                    $data_address['user_id'] = $this->userid;
                                                    $data_address['notes'] = 'Sales Return';
                                                    $data_address['payment_mode'] = '';
                                                    $data_address['order_no'] = 'RE-'.$form_data->id;
                                                    $data_address['difference'] = 0;
                                                    $data_address['reference_no'] = $order_no;
                                                    
                                                    $data_address['amount'] = round($totalamount);
                                                    $data_address['account_head_id'] = 68;
                                                    $data_address['account_heads_id_2'] = 2;
                                                    $data_address['order_trancation_status'] = 0;
                                                    $data_address['paid_status'] = 1;
                                                    $data_address['credits'] = round($totalamount);
                                                    $data_address['balance'] = 0;
                                                    $data_address['collected_amount'] = round($totalamount);
                                                    $data_address['payment_date'] = $date;
                                                    $data_address['process_by'] = 'Sales Return';
                                                    $data_address['payment_time'] = $time;
                                                    $data_address['party_type'] = 1;
                                                    $data_address['bank_id'] = 0;
                                                    $data_address['return_invoice_date'] = $invoiceDate;
                                                    
                                                    
                                                    $data_address['deletemod'] = 'RE-'.$form_data->id;
                                                    
                    $querycheck = $this->db->query("SELECT id FROM all_ledgers  WHERE order_no='".$data_address['order_no']."' AND deleteid='0'");
                    $querycheck=$querycheck->result();
                    if(count($querycheck)==0)
                    {


                                                    $this->Main_model->insert_commen($data_address, 'all_ledgers');

                    }


                                                                  
                                              
                                         }
                                         
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,'sales_return_remarks');
                                        
                                         $this->db->query("UPDATE order_sales_return_complaints SET  remarks='".$form_data->remarks."' WHERE id='".$form_data->id."'");

                                         
                                          $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return Remarks Updated..');
                                          echo json_encode($array);
  


    }
    
    
    
    public function sales_return_data_remarks_update_md()
    {
        
        
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                                         
                                        
                 
                                         $data['create_date']= $date;
                                         $data['create_time']= $time;
                                         $data['c_id']= $form_data->id;
                                         $data['order_base']= $form_data->order_base;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         if($form_data->order_base==2)
                                         {
                                             $reason='Return Approved By MD';
                                             $order_base='1';
                                             $md_approved_status=1;
                                         }
                                         else
                                         {
                                             $reason='Return Rejected By MD';  
                                             $order_base='1';
                                             $md_approved_status=2;
                                         }
                                         
                                         $resultmain = $this->db->query("SELECT b.customer_id,b.id,b.order_no,a.invoice_date FROM `order_sales_return_complaints` as a JOIN orders_process as b ON a.order_id=b.id WHERE a.deleteid=0  AND a.id='".$form_data->id."' ORDER BY a.id DESC");
                                         $getdata = $resultmain->result();
                                         foreach($getdata as $vl)
                                         {
                                                      $customer_id=$vl->customer_id;
                                                      $order_id=$vl->id;
                                                      $order_no=$vl->order_no;
                                                      $invoiceDate=$vl->invoice_date;
                                         }
                                         
                                         $this->db->query("UPDATE orders_process SET reason='".$reason."',order_base='".$order_base."',md_approved_status='".$md_approved_status."' WHERE id='".$order_id."'");
                                               
$this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Duplicate entry deleted Sales Return',deletemod='REDD-".$form_data->id."' WHERE deletemod='RE-".$form_data->id."' AND deleteid=0");
                             
                                         if($form_data->order_base==2)
                                         {
                                             
                                             
                                              
                                         
                                         
                                                
                                                  
                                                  
                                                 
                                                  $totalamount=0;
                                                  $resultmainre = $this->db->query("SELECT * FROM `sales_return_products`  WHERE c_id='".$form_data->id."' AND deleteid=0 ORDER BY id DESC");
                                                  $getdatare = $resultmainre->result();
                                                  foreach($getdatare as $vlre)
                                                  {
                                                      $totalamount+=$vlre->qty*$vlre->rate;
                                                  }
                                                  
                                              
                                                  $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                                  $balancetotal = 0;
                                                  $debitsamount = 0;
                                                  $creditsamount = 0;
                                                  foreach ($res as $val) {
                                                        $payid = $val->id;
                                                        $customer_id = $val->customer_id;
                                                        $amount = $val->amount;
                                                        $debitsamount+= $val->debits;
                                                        $creditsamount+= $val->credits;
                                                        $balancetotal+= $val->balance;
                                                 }
                                                 $balancetotal=$creditsamount-$debitsamount;
                                                
                                                    $data_address['order_id'] = 0;
                                                    $data_address['customer_id'] = $customer_id;
                                                    $data_address['user_id'] = $this->userid;
                                                    $data_address['notes'] = 'Sales Return';
                                                    $data_address['payment_mode'] = '';
                                                    $data_address['order_no'] = 'RE-'.$form_data->id;
                                                    $data_address['difference'] = 0;
                                                    $data_address['reference_no'] = $order_no;
                                                    
                                                    $data_address['amount'] = round($totalamount);
                                                    $data_address['account_head_id'] = 68;
                                                    $data_address['account_heads_id_2'] = 2;
                                                    $data_address['order_trancation_status'] = 0;
                                                    $data_address['paid_status'] = 1;
                                                    $data_address['credits'] = round($totalamount);
                                                    $data_address['balance'] = 0;
                                                    $data_address['collected_amount'] = round($totalamount);
                                                    $data_address['payment_date'] = $date;
                                                    $data_address['process_by'] = 'Sales Return';
                                                    $data_address['payment_time'] = $time;
                                                    $data_address['party_type'] = 1;
                                                    $data_address['bank_id'] = 0;
                                                    $data_address['return_invoice_date'] = $invoiceDate;
                                                    
                                                    
                                                    $data_address['deletemod'] = 'RE-'.$form_data->id;

                                                    $querycheck = $this->db->query("SELECT id FROM all_ledgers  WHERE order_no='".$data_address['order_no']."' AND deleteid='0'");
                                                    $querycheck=$querycheck->result();
                                                    if(count($querycheck)==0)
                                                    {

                                                       $this->Main_model->insert_commen($data_address, 'all_ledgers');

                                                    }
                                                                  
                                              
                                         }
                                         
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,'sales_return_remarks');
                                         $this->db->query("UPDATE order_sales_return_complaints SET order_base='".$form_data->order_base."',remarks='".$reason."' WHERE id='".$form_data->id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return Remarks Updated..');
                                         echo json_encode($array);
  


    }
    
    
    
    
    public function ordercreate() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_quotation');
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->id + 1;
            }
            $data['neworder_quotation_id'] = base64_encode($neworder_quotation_id);
            
            
            
             if($this->session->userdata['logged_in']['access']=='20')
            {
                     $neworder_id = 1;
                     $order_last_count = $this->Main_model->order_last_count('orders_process');
                     foreach ($order_last_count as $r) {
                            $neworder_id = $r->id + 1;
                     }
                     $data['neworder_id'] = base64_encode($neworder_id);                                        
                                                            
            }
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order Creation';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/ordercreate', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;


            $order_last_count = $this->Main_model->order_last_count('orders');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }



            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


        if($this->session->userdata['logged_in']['access'] == '31')
        {

            $this->load->view('order/enquiries_list_cus', $data);

        }
        else
        {
            $this->load->view('order/enquiries_list', $data);
        }


           



        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_price_request_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_price_request_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function quotation_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_quotation');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);

           

        if($this->session->userdata['logged_in']['access'] == '31')
        {

             $this->load->view('order/quotation_list_cus', $data);

        }
        else
        {
             $this->load->view('order/quotation_list', $data);
        }




        } else {
            $this->load->view('admin/index');
        }
    }
    public function quotation_price_request_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_quotation');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/quotation_price_request_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }





    public function orders_list() {
        if (isset($this->session->userdata['logged_in'])) {













$resultloop = $this->db->query("SELECT a.order_product_id,b.order_no,b.order_id,c.reason,a.randam_id as randam_id_load,b.randam_id FROM `sales_load_products` as a JOIN order_product_list_process as b ON a.order_product_id=b.id JOIN order_delivery_order_status as c ON b.order_id=c.order_id WHERE c.assign_status In ('2','11','12','1') AND c.deleteid=0 AND a.amount>0 AND a.randam_id IS NULL");
$resultloop = $resultloop->result();
if(count($resultloop)>0)
{


foreach ($resultloop as $loop) 
{
   $randam_id_load= $loop->randam_id_load;
   $randam_id= $loop->randam_id;
   if($randam_id_load=='')
   {
       $this->db->query("UPDATE  sales_load_products SET randam_id='".$randam_id."' WHERE order_product_id='".$loop->order_product_id."' AND order_id='".$loop->order_id."' AND randam_id IS NULL");
   }
}


}  



$resultloop2 = $this->db->query("SELECT a.order_product_id,b.order_no,b.order_id,c.reason,a.randam_id as randam_id_load,b.randam_id FROM `sales_load_products` as a JOIN order_product_list_process as b ON a.order_product_id=b.id JOIN order_delivery_order_status as c ON b.order_id=c.order_id WHERE c.assign_status In ('2','11','12','1') AND c.deleteid=0 AND a.amount>0  AND a.randam_id!=b.randam_id");
$resultloop2 = $resultloop2->result();

if(count($resultloop2)>0)
{


        foreach ($resultloop2 as $loop2) 
        {
           $randam_id_load= $loop2->randam_id_load;
           $randam_id= $loop2->randam_id;   
           if($randam_id_load!='')
           {

            $this->db->query("UPDATE  order_product_list_process SET randam_id='".$randam_id_load."' WHERE id='".$loop2->order_product_id."' AND order_id='".$loop2->order_id."'");

           }
        }


}  


















            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;













$formdate=date('Y-m-d');
                                              $todate=date('Y-m-d');
                                              
                                             
                                              $lastmonthfrom= date('Y-m-d', strtotime("-1 days"));
                                              $lastmonthto=date('Y-m-d', strtotime("-1 days"));
                                              



 $sql="";
                                          if($this->session->userdata['logged_in']['access']=='16')
                                          {
                                                                     
                                                            $sales_group_id=array();         
                                                            $sales_group = $this->Main_model->where_names_two_order_by('sales_group','sales_group_head',$this->userid,'deleteid','0','id','ASC');   
                                                            foreach($sales_group as $val)
                                                            {
                                                                $sales_group_id[]=$val->id;
                                                            }
                                                            
                                                            
                                                            $sales_group_idval="'".implode("','",$sales_group_id)."'";
                                                            $sql=' AND a.sales_group IN ('.$sales_group_idval.')';
                                                          
                                                                     
                                          }
                                          
                                          
                                          if($this->session->userdata['logged_in']['access']=='17')
                                          {
                                                                     
                                                            
                                                            $sql=' AND a.user_id="'.$this->userid.'"';
                                                          
                                                                     
                                          }


                                          if($this->session->userdata['logged_in']['access']=='31')
                                          {
                                                                     
                                                            
                                                            $sql=' AND a.customer_id="'.$this->userid.'"';
                                                          
                                                                     
                                          }
                                          
                                          
                                          if($this->session->userdata['logged_in']['access']=='11' || $this->session->userdata['logged_in']['access']=='12')
                                          {
                                                                     
                                                                $sales_team_id = array($this->userid);
                                                                $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                                                                foreach ($resultsales_team as $values) {
                                                                    $sales_team_id[] = $values->sales_member_id;
                                                                }
                                                               
                                                                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                                                               
                                                                $sql = ' AND  a.user_id IN (' . $sales_team_id . ')';
                                                            
                                                                     
                                          }
                                     
                                              
                                              



                                              $data['toatalvalue']=0;
                                              $resulttotalsale=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.create_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0   AND a.order_base>0 $sql");
                                              
                                              $resulttotalsale=$resulttotalsale->result();
                                              foreach($resulttotalsale as $totsale)
                                              {
                                                   $data['toatalvalue']=round($totsale->toatalvalue+$totsale->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                         
                                              
                                              
                          
                                              
                                              
                                              
                                              $data['toatalvaluels']=0;
                                              $resulttotalsalels=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.create_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0  AND a.order_base>0 $sql");
                                              
                                              $resulttotalsalels=$resulttotalsalels->result();
                                              foreach($resulttotalsalels as $totsalels)
                                              {
                                                   $data['toatalvaluels']=round($totsalels->toatalvalue+$totsalels->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                               $data['toatalvaluedd']=0;
                                               $resulttotalsaledd=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.trip_end_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0  AND a.order_base>0  $sql");
                                              
                                              $resulttotalsaledd=$resulttotalsaledd->result();
                                              foreach($resulttotalsaledd as $totsaledd)
                                              {
                                                   $data['toatalvaluedd']=round($totsaledd->toatalvalue+$totsaledd->tcsamount);
                                              }
                                              
                                              $data['toatalvaluelsdd']=0;
                                              $resulttotalsalelsdd=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.trip_end_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0   AND a.order_base>0 $sql");
                                              
                                              $resulttotalsalelsdd=$resulttotalsalelsdd->result();
                                              foreach($resulttotalsalelsdd as $totsalelsdd)
                                              {
                                                   $data['toatalvaluelsdd']=round($totsalelsdd->toatalvalue+$totsalelsdd->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                             
                                              $data['totalcount']=0;
                                              $resulttotalcount=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.create_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0  AND a.order_base>0 $sql");
                                              $resulttotalcount=$resulttotalcount->result();
                                              foreach($resulttotalcount as $totcount)
                                              {
                                                   $data['totalcount']=$totcount->totalcount;
                                              }
                                              
                                              
                                              
                                    
                                          
                                              
                                              
                                             
                                             
                                             
                                              $data['totalcountlastmonth']=0;
                                              $resulttotalcountlm=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.create_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcountlm=$resulttotalcountlm->result();
                                              foreach($resulttotalcountlm as $totcountm)
                                              {
                                                   $data['totalcountlastmonth']=$totcountm->totalcount;
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              $data['totalcountdd']=0;
                                              $resulttotalcount=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.trip_end_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcount=$resulttotalcount->result();
                                              foreach($resulttotalcount as $totcount)
                                              {
                                                   $data['totalcountdd']=$totcount->totalcount;
                                              }
                                             
                                             
                                             
                                              $data['totalcountlastmonthdd']=0;
                                              $resulttotalcountlm=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.trip_end_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcountlm=$resulttotalcountlm->result();
                                              foreach($resulttotalcountlm as $totcountm)
                                              {
                                                   $data['totalcountlastmonthdd']=$totcountm->totalcount;
                                              }
                                             
                                             
                                             
                                             
                                               
                                         
                                        
                                             




            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);



        if($this->session->userdata['logged_in']['access'] == '31')
        {

            $this->load->view('order/orders_list_cus', $data);

        }
        else
        {
             $this->load->view('order/orders_list', $data);
        }

           





        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    






























    public function commission_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;













$formdate=date('Y-m-d');
                                              $todate=date('Y-m-d');
                                              
                                             
                                              $lastmonthfrom= date('Y-m-d', strtotime("-1 days"));
                                              $lastmonthto=date('Y-m-d', strtotime("-1 days"));
                                              



 $sql="";
                                          if($this->session->userdata['logged_in']['access']=='16')
                                          {
                                                                     
                                                            $sales_group_id=array();         
                                                            $sales_group = $this->Main_model->where_names_two_order_by('sales_group','sales_group_head',$this->userid,'deleteid','0','id','ASC');   
                                                            foreach($sales_group as $val)
                                                            {
                                                                $sales_group_id[]=$val->id;
                                                            }
                                                            
                                                            
                                                            $sales_group_idval="'".implode("','",$sales_group_id)."'";
                                                            $sql=' AND a.sales_group IN ('.$sales_group_idval.')';
                                                          
                                                                     
                                          }
                                          
                                          
                                          if($this->session->userdata['logged_in']['access']=='17')
                                          {
                                                                     
                                                            
                                                            $sql=' AND a.user_id="'.$this->userid.'"';
                                                          
                                                                     
                                          }
                                          
                                          
                                          if($this->session->userdata['logged_in']['access']=='11' || $this->session->userdata['logged_in']['access']=='12')
                                          {
                                                                     
                                                                $sales_team_id = array($this->userid);
                                                                $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                                                                foreach ($resultsales_team as $values) {
                                                                    $sales_team_id[] = $values->sales_member_id;
                                                                }
                                                               
                                                                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                                                               
                                                                $sql = ' AND  a.user_id IN (' . $sales_team_id . ')';
                                                            
                                                                     
                                          }
                                     
                                              
                                              



                                              $data['toatalvalue']=0;
                                              $resulttotalsale=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.create_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0   AND a.order_base>0 $sql");
                                              
                                              $resulttotalsale=$resulttotalsale->result();
                                              foreach($resulttotalsale as $totsale)
                                              {
                                                   $data['toatalvalue']=round($totsale->toatalvalue+$totsale->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                         
                                              
                                              
                          
                                              
                                              
                                              
                                              $data['toatalvaluels']=0;
                                              $resulttotalsalels=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.create_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0  AND a.order_base>0 $sql");
                                              
                                              $resulttotalsalels=$resulttotalsalels->result();
                                              foreach($resulttotalsalels as $totsalels)
                                              {
                                                   $data['toatalvaluels']=round($totsalels->toatalvalue+$totsalels->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                               $data['toatalvaluedd']=0;
                                               $resulttotalsaledd=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.trip_end_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0  AND a.order_base>0  $sql");
                                              
                                              $resulttotalsaledd=$resulttotalsaledd->result();
                                              foreach($resulttotalsaledd as $totsaledd)
                                              {
                                                   $data['toatalvaluedd']=round($totsaledd->toatalvalue+$totsaledd->tcsamount);
                                              }
                                              
                                              $data['toatalvaluelsdd']=0;
                                              $resulttotalsalelsdd=$this->db->query("SELECT SUM(a.bill_total) as toatalvalue FROM orders_process as a   WHERE a.trip_end_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0   AND a.order_base>0 $sql");
                                              
                                              $resulttotalsalelsdd=$resulttotalsalelsdd->result();
                                              foreach($resulttotalsalelsdd as $totsalelsdd)
                                              {
                                                   $data['toatalvaluelsdd']=round($totsalelsdd->toatalvalue+$totsalelsdd->tcsamount);
                                              }
                                              
                                              
                                              
                                              
                                             
                                              $data['totalcount']=0;
                                              $resulttotalcount=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.create_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0  AND a.order_base>0 $sql");
                                              $resulttotalcount=$resulttotalcount->result();
                                              foreach($resulttotalcount as $totcount)
                                              {
                                                   $data['totalcount']=$totcount->totalcount;
                                              }
                                              
                                              
                                              
                                    
                                          
                                              
                                              
                                             
                                             
                                             
                                              $data['totalcountlastmonth']=0;
                                              $resulttotalcountlm=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.create_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcountlm=$resulttotalcountlm->result();
                                              foreach($resulttotalcountlm as $totcountm)
                                              {
                                                   $data['totalcountlastmonth']=$totcountm->totalcount;
                                              }
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              $data['totalcountdd']=0;
                                              $resulttotalcount=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.trip_end_date BETWEEN '".$formdate."' AND '".$todate."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcount=$resulttotalcount->result();
                                              foreach($resulttotalcount as $totcount)
                                              {
                                                   $data['totalcountdd']=$totcount->totalcount;
                                              }
                                             
                                             
                                             
                                              $data['totalcountlastmonthdd']=0;
                                              $resulttotalcountlm=$this->db->query("SELECT COUNT(a.id) as totalcount FROM orders_process as a WHERE a.trip_end_date BETWEEN '".$lastmonthfrom."' AND '".$lastmonthto."'  AND a.deleteid=0 AND a.order_base>0 $sql");
                                              $resulttotalcountlm=$resulttotalcountlm->result();
                                              foreach($resulttotalcountlm as $totcountm)
                                              {
                                                   $data['totalcountlastmonthdd']=$totcountm->totalcount;
                                              }
                                             
                                             
                                             
                                             
                                               
                                         
                                        
                                             




            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Commission Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/commission_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    



















    
    public function delivery_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;


 //$this->db->query("DELETE FROM order_delivery_order_status  WHERE deleteid='1001' AND finance_status=2");

 $poin_to_member = $this->db->query("SELECT id,order_no,deleteid,collection_remarks,collection_remarks_2,reason,count(order_id) as countorder_id FROM `order_delivery_order_status` WHERE finance_status=2 AND deleteid=0 GROUP BY order_id HAVING countorder_id>1
");
 $poin_to_member = $poin_to_member->result();
 $deleteid_id=0;
 foreach($poin_to_member as $tcs)
 {
             $deleteid_id=$tcs->id;
             if($deleteid_id>0)
             {
                $this->db->query("DELETE FROM order_delivery_order_status  WHERE id='" . $deleteid_id . "'");
             }
 }


 $poin_to_member = $this->db->query("SELECT id,order_no,deleteid,collection_remarks,collection_remarks_2,reason,count(order_id) as countorder_id FROM `order_delivery_order_status` WHERE finance_status=2 AND deleteid=1002 GROUP BY order_id HAVING countorder_id>1 ORDER BY id DESC
");
 $poin_to_member = $poin_to_member->result();
 $deleteid_id=0;
 foreach($poin_to_member as $tcs)
 {
             $deleteid_id=$tcs->id;
             if($deleteid_id>0)
             {
                $this->db->query("DELETE FROM order_delivery_order_status  WHERE id='" . $deleteid_id . "'");
             }
 }
   
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Confirm the date of delivery ';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/delivery_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }



    public function delivery_orders_list_confirmed() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;


            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Confirmed Date of Delivery report ';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/delivery_orders_list_confirmed', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    

     public function order_date_confirmation_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;


            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order date confirmation list';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_date_confirmation_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    



    public function discount_approvel_orders_list()
    {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Collection verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/discount_approvel_orders_list', $data);

        } 
        else 
        {
            $this->load->view('admin/index');
        }
    }
    
    





















    
    
    
        public function production_print() {
        if (isset($this->session->userdata['logged_in'])) {


            $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);



            $sess_array = $this->session->userdata['logged_in'];
            $user = $sess_array['userid'];
            $production_print =='';
            $filterdate = $this->Main_model->where_names('user_category_filter','user_login_id',$user);
            foreach ($filterdate as $date) {
                $fromdate = $date->production_print_fromdate;
                $todate = $date->production_print_todate;
                $production_print = $date->production_print;
            }
            if($production_print=='')
            {
                $data['production_print']=0;
            }
            else
            {
                $data['production_print'] = $production_print;
            }
            
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production print';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_print_beta', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
       public function production_print_beta() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production print';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_print_beta', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
            public function production_print_canceled() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production print canceled';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_print_canceled', $data);
        } else {
            $this->load->view('admin/index');
        }
    }

     public function production_print_canceled_beta() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production print canceled';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_print_canceled_beta', $data);
        } else {
            $this->load->view('admin/index');
        }
    }

            public function production_print_attachement() {
        if (isset($this->session->userdata['logged_in'])) {

            $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);



                 // Get the logged-in user ID
            $sess_array = $this->session->userdata['logged_in'];
            $user = $sess_array['userid'];
            $production_print =='';
            $filterdate = $this->Main_model->where_names('user_category_filter','user_login_id',$user);
            foreach ($filterdate as $date) {
                $fromdate = $date->production_print_fromdate;
                $todate = $date->production_print_todate;
                $production_print = $date->production_print;
            }
            if($production_print=='')
            {
                $data['production_print']=0;
            }
            else
            {
                $data['production_print'] = $production_print;
            }
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production print attachement';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_print_attachement', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
             public function production_print_attachement_beta() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production print attachement';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_print_attachement_beta', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
     public function orders_list_all() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'All Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orderlist_overall', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    public function transport_complated_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_complated_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
      public function reconciliation_completed_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_completed_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
     public function pick_up_loading() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Dispatch Process Flow';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/pick_up_loading', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    public function mass_search() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/mass_search', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    public function transport_overview_search() {
        if (isset($this->session->userdata['logged_in'])) {



            $query = $this->db->query(
                " SELECT id,order_no,order_id,finance_status,assign_status,reason,trip_id,driver_recived_payment,reconcilation_status,start_reading,km_reading_end,randam_id  FROM `order_delivery_order_status` WHERE finance_status IN ('6','5') AND assign_status NOT IN ('3') 
               ORDER BY `order_delivery_order_status`.`assign_status` ASC"
            );
            $resultsales_team = $query->result();
            if(count($resultsales_team)>0)
            {


                    foreach ($resultsales_team as $values) {
                        $trip_id=$values->trip_id;
                        $finance_status=$values->finance_status;
                        $order_id=$values->order_id;
                        $randam_id=$values->randam_id;

                        if($finance_status=='5')
                        {
                           $reason='Full Group Payment Recived Trip ID '.$trip_id;
                        }
                        if($finance_status=='6')
                        {
                           $reason='Full Group Payment Pending Trip ID '.$trip_id;
                        }

            $this->db->query("UPDATE order_delivery_order_status SET assign_status='3',reason='".$reason."' WHERE order_id='".$order_id."' AND randam_id='".$randam_id."' AND deleteid=0 AND finance_status='".$finance_status."'");

             $this->db->query("UPDATE orders_process SET assign_status='3',reason='".$reason."' WHERE id='".$order_id."'  AND finance_status='".$finance_status."'");
                        
                    }


            }
            



            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport overview search';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_overview_search', $data);
        } else {
            $this->load->view('admin/index');
        }
    }




    public function order_status_change() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order Status Change';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_status_change', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    public function orders_list_purchase() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Purchase Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_list_purchase', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_list_purchase() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Purchase Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_list_purchase', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_list_md() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Purchase Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_list_md', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    public function orders_list_md() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'MD Price Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_list_md', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
      public function orders_approval_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'MD Approvel List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_approval_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    public function orders_list_sales_head() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Sales Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/sales_head_order_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function finance_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
           // $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
             //$data['accountheads'] = $this->Main_model->where_names_order_by('accountheads','deleteid','0','id','ASC');
              $data['bankaccount'] = $this->Main_model->where_names('bankaccount','deleteid','0');
           // $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Finance Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/finance_order_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }


     public function reconciliation_orders_list_trip_group() {
        if (isset($this->session->userdata['logged_in'])) {
            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
             //$data['accountheads'] = $this->Main_model->where_names_order_by('accountheads','deleteid','0','id','ASC');
              $data['bankaccount'] = $this->Main_model->where_names('bankaccount','deleteid','0');
            //$data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Reconciliation Trip Group';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_orders_list_trip_group', $data);
        } else {
            $this->load->view('admin/index');
        }
    }



        public function orders_list_load() {
        if (isset($this->session->userdata['logged_in'])) {
            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
             //$data['accountheads'] = $this->Main_model->where_names_order_by('accountheads','deleteid','0','id','ASC');
              $data['bankaccount'] = $this->Main_model->where_names('bankaccount','deleteid','0');
            //$data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Load summary for Transport';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_list_load', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    public function finance_reconciliation_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
             

             //$data['accountheads'] = $this->Main_model->where_names_order_by('accountheads','deleteid','0','id','ASC');
              $data['bankaccount'] = $this->Main_model->where_names('bankaccount','deleteid','0');
           // $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Finance Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/finance_reconciliation_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    public function production_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_panel_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Process List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_panel_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_quality_check_panel_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Quality Check';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_quality_check_panel_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
     public function fetch_data_table_production_by_order() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names_three_order_by_new($tablename, 'production_assign', $order_base, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {

                 if($tot->deleteid==0)
                   {
                           $rate=$tot->rate+$tot->commission;
                           $totalamount+= $rate*$tot->qty;
                           $commission+= $tot->commission;
                   }
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'phone' => $phone, 'reason' => $value->reason, 'address' => $address, 'order_base' => $value->production_assign, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
    public function warehouse_panel_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Warehouse Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/warehouse_panel_list_by_order', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_panel() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = base64_decode($_GET['product_id']);
            $data['product_id'] = $_GET['product_id'];
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_panel', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_panel_quality_check() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = base64_decode($_GET['order_id']);
            $data['status'] = $_GET['status'];
             
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_panel_quality_check', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function warehouse_check() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['racksetup'] = $this->Main_model->where_names('racksetup', 'id', '1');
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = base64_decode($_GET['order_id']);
            
              $data['status'] =$_GET['status'];
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/warehouse_panel_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    public function transport_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
         

        if($this->session->userdata['logged_in']['access']!=13)
        {

                $admin_users = $this->Main_model->where_names('admin_users','id',$this->userid);
               foreach ($admin_users as $value) 
               {
                  $data['from_date_filter']=$value->from_date_filter;
                  $data['to_date_filter']=$value->to_date_filter;
               }


            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            //$data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            

            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Client Scope Transport Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_orders_list', $data);

         }





        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
      
    public function transport_return_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            //$data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Sales Return Transport Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_return_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    public function transport_orders_list_own() {
        if (isset($this->session->userdata['logged_in'])) {

        if($this->session->userdata['logged_in']['access']!=13)
        {

               $admin_users = $this->Main_model->where_names('admin_users','id',$this->userid);
               foreach ($admin_users as $value) 
               {
                  $data['from_date_filter']=$value->from_date_filter;
                  $data['to_date_filter']=$value->to_date_filter;
               }


            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            //$data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Zaron Scope Transport Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_orders_list_own', $data);

        }


        } else {
            $this->load->view('admin/index');
        }
    }
    public function reconciliation_orders_list() { 
        if (isset($this->session->userdata['logged_in'])) {
            $data['bankaccount'] = $this->Main_model->where_names('bankaccount', 'deleteid', '0');
            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            //$data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
                //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Reconciliation Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    public function reconciliation_orders_list_self() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['bankaccount'] = $this->Main_model->where_names('bankaccount', 'deleteid', '0');
           // $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
           // $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            //$order_last_count = $this->Main_model->order_last_count('orders_process');
            //foreach ($order_last_count as $r) {
               //$neworder_id = $r->id + 1;
            //}
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_orders_list_self', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    public function vehicle_wise_assigned() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['bankaccount'] = $this->Main_model->where_names('bankaccount', 'deleteid', '0');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Dispatch Load Vehicle Grouped';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/vehicle_wise_assigned', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    public function driver_orders_list() 
    {
        if (isset($this->session->userdata['logged_in'])) 

        {
           




                if($this->session->userdata['logged_in']['access']=='13') // Driver
                {
                                                  //redirect('index.php/order/driver_orders_list');
   redirect('index.php/order_second/driver_orders_list_trip_order_base?vehicle_id=-1&delivery_status=2');

                                                
                }

                  $status=2;
                 if(isset($_GET['status']))
                {
                   $status=$_GET['status'];
                  
                }

                $data['status']=$status;
                           

            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


            $sql="";
            $define_driver_id=0;
            $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
            foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
            }
            
            if($this->session->userdata['logged_in']['access']==13)
            {

                $sql=" AND b.driver_id='".$define_driver_id."'";

            }


            if($this->session->userdata['logged_in']['access']==30)
            {

                $sql=" AND a.vehicle_owner='".$this->userid."'";

            }
            
            

           $result = $this->db->query("SELECT a.id as vehicle_id,b.vehicle_id as vehicle_id_view,b.finance_status,b.delivery_status,a.vehicle_owner as vehicle_owner,a.vehicle_number as vehicle_number,a.vehicle_name,a.vehicle_type FROM vehicle as a   JOIN driver as d ON d.vehicle_id=a.id LEFT JOIN orders_process as b ON b.vehicle_id=a.id WHERE a.deleteid=0 AND d.deleteid=0 $sql GROUP BY a.id ORDER BY `a`.`vehicle_name` ASC");

            $result = $result->result();

            $data['vehicle'] = $result;



            $vehicle_owner=array();
            foreach ($result as $value)
            {   
                if($value->vehicle_id_view>0)
                {
                     $vehicle_owner[]=$value->vehicle_owner;
                }
               
            }

            $vehicle_owner=array_unique($vehicle_owner);

            $res=array();
           if(count($vehicle_owner)>0)
           {


                        $v_owners = $this->Main_model->where_in_names('admin_users', 'id', $vehicle_owner);
                       foreach ($v_owners as  $ss)
                       {


                               $subarray=array();
                               foreach ($result as  $sss)
                               {

                                  if($ss->id==$sss->vehicle_owner)
                                  { 



                                      $subarray[]=array(

                                            'vehicle_owner'=>$sss->vehicle_owner,
                                            'vehicle_number'=>$sss->vehicle_number,
                                            'vehicle_name'=>$sss->vehicle_name,
                                            'vehicle_type'=>$sss->vehicle_type,
                                            'vehicle_id'=>$sss->vehicle_id,
                                            'countnumber'=>$sss->countnumber
                                            
                                       );

                                  }


                               }

                                sort($subarray);
                                $res[]=array(
                                    'OWNER'=>$ss->name,
                                    'id'=>$ss->id,
                                    'subarray'=>$subarray
                                );


                       }





           } 
          
           
           sort($res);
           $data['res']=$res;

          // echo "<pre>";print_r($res);
           //exit;


            $this->load->view('order/driver_orders_list_beta', $data);







        } 
        else 
        {
            $this->load->view('admin/index');
        }
    }
    
    public function driver_orders_list_beta1() 
    {
        if(isset($this->session->userdata['logged_in'])) 
        {
           



            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);



            $sql="";
            $define_driver_id=0;
            $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
            foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
            }
            
            if($this->session->userdata['logged_in']['access']==13)
            {

                $sql=" AND b.driver_id='".$define_driver_id."'";

            }

            if($this->session->userdata['logged_in']['access']==30)
            {

                //$sql=" AND a.vehicle_owner='".$this->userid."'";

            }
            
   
             $result = $this->db->query("SELECT a.vehicle_owner as vehicle_owner,a.vehicle_number as vehicle_number,a.vehicle_name,a.vehicle_type,b.vehicle_id,count(b.id) as countnumber FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id  JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status IN ('3','10') AND b.assign_status NOT IN ('0','11')  AND b.order_base=1  AND b.md_approved_status IN ('1','0') AND b.delivery_status=2 AND a.deleteid=0 $sql GROUP BY b.vehicle_id   ORDER BY countnumber DESC");


            $result = $result->result();

            $data['vehicle'] = $result;



            $vehicle_owner=array();
            foreach ($result as $value) {
                $vehicle_owner[]=$value->vehicle_owner;
            }

            $vehicle_owner=array_unique($vehicle_owner);


           $res=array();
           $v_owners = $this->Main_model->where_in_names('admin_users', 'id', $vehicle_owner);
           foreach ($v_owners as  $ss)
           {


                   $subarray=array();
                   foreach ($result as  $sss)
                   {

                      if($ss->id==$sss->vehicle_owner)
                      { 



                          $subarray[]=array(

                                'vehicle_owner'=>$sss->vehicle_owner,
                                'vehicle_number'=>$sss->vehicle_number,
                                'vehicle_name'=>$sss->vehicle_name,
                                'vehicle_type'=>$sss->vehicle_type,
                                'vehicle_id'=>$sss->vehicle_id,
                                'countnumber'=>$sss->countnumber
                                
                           );

                      }


                   }


                    $res[]=array(
                        'OWNER'=>$ss->name,
                        'id'=>$ss->id,
                        'subarray'=>$subarray
                    );


           }


           $data['res']=$res;

           



            $this->load->view('order/driver_orders_list_beta1', $data);









        } 
        else 
        {
            $this->load->view('admin/index');
        }
    }
    
    
    public function driver_orders_list_beta() 
    {
        if(isset($this->session->userdata['logged_in'])) 
        {
           



            


                  $status=2;
                 if(isset($_GET['status']))
                {
                   $status=$_GET['status'];
                  
                }

                $data['status']=$status;
                           

            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


            $sql="";
            $define_driver_id=0;
            $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
            foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
            }
            
            if($this->session->userdata['logged_in']['access']==13)
            {

                $sql=" AND b.driver_id='".$define_driver_id."'";

            }


            if($this->session->userdata['logged_in']['access']==30)
            {

                $sql=" AND a.vehicle_owner='".$this->userid."'";

            }
            
            

           $result = $this->db->query("SELECT a.id as vehicle_id,b.vehicle_id as vehicle_id_view,b.finance_status,b.delivery_status,a.vehicle_owner as vehicle_owner,a.vehicle_number as vehicle_number,a.vehicle_name,a.vehicle_type FROM vehicle as a   JOIN driver as d ON d.vehicle_id=a.id LEFT JOIN orders_process as b ON b.vehicle_id=a.id WHERE a.deleteid=0 AND d.deleteid=0 $sql GROUP BY a.id ORDER BY `a`.`vehicle_name` ASC");

            $result = $result->result();

            $data['vehicle'] = $result;



            $vehicle_owner=array();
            foreach ($result as $value)
            {   
                if($value->vehicle_id_view>0)
                {
                     $vehicle_owner[]=$value->vehicle_owner;
                }
               
            }

            $vehicle_owner=array_unique($vehicle_owner);

            $res=array();
           if(count($vehicle_owner)>0)
           {


                        $v_owners = $this->Main_model->where_in_names('admin_users', 'id', $vehicle_owner);
                       foreach ($v_owners as  $ss)
                       {


                               $subarray=array();
                               foreach ($result as  $sss)
                               {

                                  if($ss->id==$sss->vehicle_owner)
                                  { 



                                      $subarray[]=array(

                                            'vehicle_owner'=>$sss->vehicle_owner,
                                            'vehicle_number'=>$sss->vehicle_number,
                                            'vehicle_name'=>$sss->vehicle_name,
                                            'vehicle_type'=>$sss->vehicle_type,
                                            'vehicle_id'=>$sss->vehicle_id,
                                            'countnumber'=>$sss->countnumber
                                            
                                       );

                                  }


                               }

                                sort($subarray);
                                $res[]=array(
                                    'OWNER'=>$ss->name,
                                    'id'=>$ss->id,
                                    'subarray'=>$subarray
                                );


                       }





           } 
          
           
           sort($res);
           $data['res']=$res;

          // echo "<pre>";print_r($res);
           //exit;


            $this->load->view('order/driver_orders_list_beta', $data);





        } 
        else 
        {
            $this->load->view('admin/index');
        }
    }
    
    
    public function driver_open_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Gate Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_open_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    public function driver_open_orders_list_test() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Gate Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
           // $this->load->view('order/driver_open_orders_list', $data);
            $this->load->view('order/driver_open_orders_list_gate', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
     public function driver_orders_return_list() 
     {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Return Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_return_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }



    
   
   
    public function driver_orders_list_view() {
        if (isset($this->session->userdata['logged_in'])) {
            
             $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '15', 'deleteid', '0', 'id', 'ASC');
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = $_GET['id'];
             $data['DC_id'] = $_GET['DC_id'];

            $data['vehicle_id']='-1';
            $data['trip_id']='0';
          //  $order_last_count = $this->Main_model->where_names('orders_process','id',$data['id']);

          $order_last_count = $this->Main_model->where_names_two_order_by('order_delivery_order_status','randam_id',$_GET['DC_id'],'order_id',$_GET['id'],'id','ASC');
          

            foreach ($order_last_count as $r) {
                $data['vehicle_id'] = $r->vehicle_id;
                $data['trip_id'] = $r->trip_id;
            }




            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_list_view', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    public function driver_orders_list_view_return() {
        if (isset($this->session->userdata['logged_in'])) {
            
             $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '15', 'deleteid', '0', 'id', 'ASC');
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = $_GET['id'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel Return View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_list_view_return', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function pickup_orders_list_view() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = $_GET['id'];


            $data['vehicle_id']='-1';
            $data['trip_id']='0';
$order_last_count = $this->Main_model->where_names_two_order_by('order_delivery_order_status','randam_id',$_GET['DC_id'],'order_id',$_GET['id'],'id','ASC');
            foreach ($order_last_count as $r) {
                $data['vehicle_id'] = $r->vehicle_id;
                $data['trip_id'] = $r->trip_id;
            }


$query = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['id'] . "' AND delivery_notes_status=1 AND randam_id IS NOT NULL ");
$data['DC_list'] = $query->result();

            $data['approved_view']=0;
            if(isset($_GET['approved_view']))
            {
                $data['approved_view'] = $_GET['approved_view'];
            }

              $data['DC_id'] = $_GET['DC_id'];


            $data['driver_pickip'] = $_GET['driver_pickip'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/pickup_orders_list_view', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    public function production() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['production'] = $this->Main_model->where_names_order_by('production', 'deleteid', '0', 'id', 'ASC');
            $data['categories'] = $this->Main_model->where_names_order_by('categories', 'deleteid', '0', 'id', 'ASC');
            
            
            $data['purchase_order'] = $this->Main_model->where_names_two_order_by('purchase_order', 'inward_qty!=', '', 'product_id', $_GET['product_id'], 'id', 'ASC');
            
            
            $data['id'] = base64_decode($_GET['product_id']);
            $data['product_id'] = $_GET['product_id'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
     public function ordercreate_product() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            // $version = 'O';
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if($this->session->userdata['logged_in']['access'] == '11')
            {            
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                           
            } 
            else 
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);

            if($neworder_id){
            $ver_data = $this->db->query("SELECT o.id AS order_id, o.version AS lversion, b.* FROM orders AS o LEFT JOIN enquiry_version AS b ON b.order_id = o.id WHERE b.order_id = $neworder_id ORDER BY b.id ASC");
            $data['allversions'] = $ver_data->result();

            $array = array(); 
            $orderversion = $this->Main_model->where_names('enquiry_version', 'order_id', $neworder_id);
            foreach ($orderversion as $value) {
                
                $orderversionData = array(
                    'id' => $value->order_id,
                    'name' => $value->version
                );

                $array[] = $orderversionData;
            }

            $data['version_link'] = $array;
            }


            $data['old_tablename'] = '0';
            $data['version'] = 'O';
            $data['page'] = 'Enquiry';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['order_vp_list'] = 'order_version_product_quatation';
            $data['order_v_log'] = 'enquiry_version';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 0;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }

             $data['finance_status'] = 2;


             $viewbase=0;
             if(isset($_GET['viewbase'])) 
             {
                           
                           $viewbase=1;

             }


             if($viewbase==1)
             {


                    $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
                    if(count($resorder) > 0) 
                    {
                        foreach ($resorder as $data_val) {
                            $order_no = $data_val->order_no;
                            $data['order_id'] = $neworder_id;
                            $data['count_id'] = $neworder_quotation_id;
                            $data['order_no'] = $order_no;
                        }
                    } 
                 

             } 
             else
             {





if($this->session->userdata['logged_in']['access']=='31')
{


      $resorder = $this->Main_model->where_names_two_order_by($data['tablename'],'customer_id',$this->userid, 'id', $neworder_id,'id', 'ASC');

}
else
{



      $resorder = $this->Main_model->where_names_two_order_by($data['tablename'],'entry_user_id',$this->userid, 'id', $neworder_id,'id', 'ASC');



}







                  















                    if(count($resorder) > 0) 
                    {
                        foreach ($resorder as $data_val) {
                            $order_no = $data_val->order_no;
                            $data['order_id'] = $neworder_id;
                            $data['count_id'] = $neworder_quotation_id;
                            $data['order_no'] = $order_no;
                        }
                    } 
                    else 
                    {

                        $order_last_count = $this->Main_model->order_last_count('orders');
                        foreach ($order_last_count as $r) {
                            $neworder_id = $r->id + 1;
                        }
                     $data['order_id'] = $neworder_id;
                     $data['count_id'] = $neworder_quotation_id;
                     $data['order_no'] = $neworder_id . '/' .$this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
                    //  $data['order_no'] = $neworder_id . '/' .'E/'. $version . '/' .$this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
                    }
                    
                    
             }



            //$data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Create Enquiry';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);



                if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {



 $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                                                          

                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }





        } else {
            $this->load->view('admin/index');
        }
    }
    
    public function ordercreate_product_price_request() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
               
               
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } 
            else
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 11;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Create Enquiry';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


          if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

 $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiry_product_process_purchase_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 14;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Create Enquiry';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


            if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {



  $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiry_product_process_md_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 15;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Create Enquiry';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);




             if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {


  $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function overviewtrans() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = $_GET['order_id'];
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $data['order_id'], 'id', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overviewtrans', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function overview() {
        if (isset($this->session->userdata['logged_in'])) {
            //$data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            //$resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            //$data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            //$data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
           // $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            
            
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;



            $data['viewstatus'] = $_GET['viewstatus'];
           



            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                    $data['notes_section'] = $data_val->notes;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            
            
             if($_GET['tablename']=='orders_quotation')
             {
                 $order_id='QC_'.$data['order_id'];
             }
             else
             {
                 $order_id='OR_'.$data['order_id'];
             }
            
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $order_id, 'id', 'ASC');
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Overview ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);




         if($this->session->userdata['logged_in']['access'] == '31')
        {

            $this->load->view('order/overview_customer', $data);

        }
        else
        {
            $this->load->view('order/overview', $data);
        }

            






        } else {
            $this->load->view('admin/index');
        }
    }
    public function po() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $data['order_id'], 'id', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overview', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function overview_commission() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            
            
             if($_GET['tablename']=='orders_quotation')
             {
                 $order_id='QC_'.$data['order_id'];
             }
             else
             {
                 $order_id='OR_'.$data['order_id'];
             }
            
            
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $order_id, 'id', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overview_commission', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
 public function ordercreate_product_quotation() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');

           
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            //version change
            if($neworder_id){
                $ver_data = $this->db->query("SELECT o.id AS order_id, o.version AS lversion, b.* FROM orders_quotation AS o LEFT JOIN enquiry_version AS b ON b.order_id = o.id WHERE b.order_id = $neworder_id ORDER BY b.id ASC");
                $data['allversions'] = $ver_data->result();
    
                $array = array(); 
                $orderversion = $this->Main_model->where_names('enquiry_version', 'order_id', $neworder_id);
                foreach ($orderversion as $value) {
                    
                    $orderversionData = array(
                        'id' => $value->order_id,
                        'name' => $value->version
                    );
    
                    $array[] = $orderversionData;
                }
    
                $data['version_link'] = $array;
            }
            $data['page'] = 'Quotation';            
            $data['button_dis'] = $_GET['via_redirect'] == 1 ? false : true;
            $data['old_tablename'] = 'orders';
            $data['old_tablename_sub'] = 'order_product_list';
            $data['tablename'] = 'orders_quotation';
            $data['tablename_sub'] = 'order_product_list_quotation';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['order_vp_list'] = 'order_version_product_quatation';
            $data['order_v_log'] = 'enquiry_version';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
             
          $data['finance_status'] = 2;   
          $data['order_version_id'] = base64_decode($neworder_id);
            
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


             if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

                            

                              $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 


                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_convertion() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
               
               
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = 'orders';
            $data['old_tablename_sub'] = 'order_product_list';
            $data['tablename'] = 'orders_quotation';
            $data['tablename_sub'] = 'order_product_list_quotation';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);



            if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

                            

                              $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }




        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_quotation_price_request() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            }
            else
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = 'orders';
            $data['old_tablename_sub'] = 'order_product_list';
            $data['tablename'] = 'orders_quotation';
            $data['tablename_sub'] = 'order_product_list_quotation';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 12;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


            if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {


  $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11')
            {
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'TL  Approval Request ';
            $data['status_base'] = 1;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_base'] = 0;
            $data['print_status'] = 0;
            $data['finance_status'] = 2;
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {

                    $order_no = $data_val->order_no;

                    $data['print_status'] = $data_val->print_status;

                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                    $data['order_base'] = $data_val->order_base;
                    $data['finance_status'] = $data_val->finance_status;

                }
            } 
            else 
            {

                $data['order_id'] = $neworder_id;


                  $neworder_id_new=1;
                 $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
                 foreach ($order_last_count as $r) {
                    $neworder_id_new = $r->id + 1;
                 }

                

                 $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id_new);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


             if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {


  $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process_tl_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                             $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Order';
            $data['status_base'] = 13;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


             if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

                            

                              $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process_purchase_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 4;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


            if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

                            
                              $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 

                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process_md_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
           
           
           
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 5;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);



             if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

  $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function ordercreate_product_process_finance_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') 
            {
                
                $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 6;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


            if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {

                            
                              $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }



        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function sales_return_to_order() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
           
           
           
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
               $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                 
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['baseset'] = $_GET['baseset'];
            $data['enable_order'] = $_GET['order_id'];

             $data['order_status'] = $_GET['order_status'];

            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Create Return Order';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 6;
            $data['old_tablename'] = 'orders_process_return_temp';
            $data['old_tablename_sub'] = 'order_product_list_process_return_temp';
            $data['tablename'] = 'orders_process_return_temp';
            $data['tablename_sub'] = 'order_product_list_process_return_temp';
            $data['movetablename'] = 'orders_process_return_temp';
            $data['movetablename_sub'] = 'order_product_list_process_return_temp';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/return_order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    public function sales_return_to_order_view() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') 
            {
                
                $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $data['baseset'] = $_GET['baseset'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Create Return Order';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 6;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process_return';
            $data['tablename_sub'] = 'order_product_list_process_return';
            $data['movetablename'] = 'orders_process_return';
            $data['movetablename_sub'] = 'order_product_list_process_return';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/return_order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function sales_order_return() 
   {
            
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
                
                
                $order_product_id=$form_data->order_product_id;
                $order_product_id=explode('|',$order_product_id);
                
                
                
                
                
                
                
                
                            $resultpss= $this->Main_model->where_names($form_data->tablenamemain,'id',$form_data->order_id);
                            foreach ($resultpss as  $valuepss) {
                                
                                $customer_id=$valuepss->customer_id;
                                $driver_id=$valuepss->driver_id;
                                $order_no_set=$valuepss->order_no;
                                $invoiceDate=$valuepss->create_date;
                                
                            }
                            
                            
                            
                                        $tablename = 'orders_process_return';
                                        $basedata['count_id'] = 1;
                                        $basedata['create_time'] = $time;
                                        $basedata['user_id'] = $this->userid;
                                        $basedata['entry_user_id'] = $this->userid;
                                        $basedata['create_date']  = $form_data->arrival_date;
                                        $basedata['customer_id']   = $customer_id;
                                        $basedata['rescheduling_remarks']   = $form_data->return_remarks;
                                        
                                        $basedata['return_status'] = 1;
                                        $basedata['driver_id'] = $driver_id;
                                        
                                        $basedata['order_base'] = 1;
                                        $basedata['return_id'] = 1;
                                        
                                        
                                        $neworder_quotation_id = 1;
                                        $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
                                        foreach ($order_last_count as $r) {
                                            $neworder_quotation_id = $r->count_id + 1;
                                           
                                        }
                                        $neworder_id = 1;
                                        $order_last_count = $this->Main_model->order_last_count($tablename);
                                        foreach ($order_last_count as $r) {
                                            $neworder_id = $r->id + 1;
                                        }
                                        $basedata['id'] = $neworder_id;
                                        $order_no = $order_no_set . '/RE-'.$neworder_id;
                                        $basedata['order_no'] = $order_no;
                                        $insertid = $this->Main_model->insert_commen($basedata, $tablename);
                            
                      
                
                
                
                                        
                                        $totalamount=0;
                                        for($i=0;$i<count($order_product_id);$i++)
                                        {
                                            
                                       
                                        
                                        
                                       
                                                    $resultp= $this->Main_model->where_names($form_data->tablename_sub,'id',$order_product_id[$i]);
                                                    foreach ($resultp as  $valuep) {
                                                                
                                                                
                                                                 $order_id=$valuep->order_id;
                                                                 $product_id=$valuep->product_id;
                                                                 $product_name=$valuep->product_name;
                                                                 $categories_name=$valuep->categories_name;
                                                                 $categories_id=$valuep->categories_id;
                                                                 
                                                                 
                                                                 $qty=$valuep->qty;
                                                                 $rate=$valuep->rate;
                                                                
                                                                
                                                                
                                                                 $tile_material_name = $valuep->tile_material_name;
                                                                 $tile_material_id = $valuep->tile_material_id;
                                                               
                                                                $dim_one = $valuep->dim_one;
                                                                $dim_two = $valuep->dim_two;
                                                                $dim_three = $valuep->dim_three;
                                                                $base_id = $valuep->base_id;
                                                                $image_length = $valuep->image_length;
                                                                $gst = $valuep->gst;
                                                                $gst_check = $valuep->gst_check;
                                                                $categories_id = $valuep->categories_id;
                                                                $profile = $valuep->profile;
                                                                $commission = $valuep->commission;
                                                                $address_id = $valuep->address_id;
                                                                $address_id_mark = $valuep->address_id_mark;
                                                                $crimp = $valuep->crimp;
                                                                $extra_crimp = $valuep->extra_crimp;
                                                                $sort_id = $valuep->sort_id;
                                                                $count_id = $valuep->count_id;
                                                                $back_crimp = $valuep->back_crimp;
                                                                $uom = $uom;
                                                                $billing_options = $valuep->billing_options;
                                                                $Meter_to_Sqr_feet = $valuep->Meter_to_Sqr_feet;
                                                                $Sqr_feet_to_Meter = $valuep->Sqr_feet_to_Meter;
                                                                
                                                                
                                                                
                                                                
                                                                if($valuep->return_nos!=0)
                                                                {
                                                                    $valuep->nos=$valuep->return_nos;
                                                                }
                                                                
                                                                if($valuep->return_qty!=0)
                                                                {
                                                                    $valuep->qty=$valuep->return_qty;
                                                                }
                                                                
                                                                
                                                                $nos = $valuep->nos;
                                                                $qty=$valuep->qty;
                                                                
                                                                
                                                                
                                                                $unit = $valuep->unit;
                                                                $fact = $valuep->fact;
                                                                
                                                                
                                                                $section_lable = $valuep->section_lable;
                                                                $section_value = $valuep->section_value;
                                                                $degree = $valuep->degree;
                                            
                                            
                                            
                                                                $sub_product_id = $valuep->sub_product_id;
                                                                $value_id = $valuep->value_id;
                                                                $reference_image = $valuep->reference_image;
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                    }
                                                    
                                                    
                                                                
                                                    
                                                    
                                                    $tablename_sub=$form_data->tablename_sub;
                                                    $tablenamemain=$form_data->tablenamemain;
                                                    
                                                    
                                             $purchase_product_list_process = $this->Main_model->where_names_two_order_by('order_product_list_process_return', 'sale_return_op_id', $order_product_id[$i], 'sale_return_o_no', $form_data->order_no, 'id', 'ASC');
                                             if(count($purchase_product_list_process)==0)
                                             {
                                                       
                                                             
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                                                $basedataproduct['sale_return_op_id'] = $order_product_id[$i];
                                                                $basedataproduct['sale_return_o_no'] = $form_data->order_no;
                                                                $basedataproduct['order_no'] = $order_no;
                                                                $basedataproduct['order_id'] = $insertid;
                                                                $basedataproduct['product_id'] = $product_id;
                                                                $basedataproduct['product_name'] = $product_name;
                                                                $basedataproduct['categories_name'] = $categories_name;
                                                                $basedataproduct['categories_id'] = $categories_id;
                                                                
                                                                
                                                                
                                                                $basedataproduct['tile_material_name'] = $tile_material_name;
                                                                $basedataproduct['tile_material_id'] = $tile_material_id;
                                                                $basedataproduct['dim_one'] = $dim_one;
                                                                $basedataproduct['dim_one'] = $dim_one;
                                                                $basedataproduct['dim_two'] = $dim_two;
                                                                $basedataproduct['dim_three'] = $dim_three;
                                                                $basedataproduct['base_id'] = $base_id;
                                                                $basedataproduct['image_length'] = $image_length;
                                                                $basedataproduct['gst'] = $gst;
                                                                $basedataproduct['gst_check'] = $gst_check;
                                                                $basedataproduct['categories_id'] = $categories_id;
                                                                $basedataproduct['profile'] = $profile;
                                                                $basedataproduct['commission'] = $commission;
                                                                $basedataproduct['address_id'] = $address_id;
                                                                $basedataproduct['address_id_mark'] = $address_id_mark;
                                                                $basedataproduct['crimp'] = $crimp;
                                                                $basedataproduct['extra_crimp'] = $extra_crimp;
                                                                $basedataproduct['sort_id'] = $sort_id;
                                                                $basedataproduct['count_id'] = $count_id;
                                                                $basedataproduct['back_crimp'] = $back_crimp;
                                                                $basedataproduct['uom'] = $uom;
                                                                $basedataproduct['billing_options'] = $billing_options;
                                                                $basedataproduct['Meter_to_Sqr_feet'] = $Meter_to_Sqr_feet;
                                                                $basedataproduct['Sqr_feet_to_Meter'] = $Sqr_feet_to_Meter;
                                                                $basedataproduct['nos'] = $nos;
                                                                $basedataproduct['unit'] = $unit;
                                                                $basedataproduct['fact'] = $fact;
                                                                
                                                                
                                                                $basedataproduct['section_lable'] = $section_lable;
                                                                $basedataproduct['section_value'] = $section_value;
                                                                $basedataproduct['degree'] = $degree;
                                            
                                            
                                            
                                                                $basedataproduct['sub_product_id'] = $sub_product_id;
                                                                $basedataproduct['value_id'] = $value_id;
                                                                $basedataproduct['reference_image'] = $reference_image;
                                            
                                                                                    
                                                                                    
                                                                $basedataproduct['qty'] = $qty;
                                                                $basedataproduct['rate'] = $rate;
                                                                
                                                                $totalamount+=$rate*$qty;
                                                                
                                                                $basedataproduct['amount'] = round($rate*$qty);
                                                                $basedataproduct['return_status'] = 1;
                                                                $basedataproduct['return_id'] = 1;
                                                                $this->Main_model->insert_commen($basedataproduct, 'order_product_list_process_return');
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                $this->db->query("UPDATE $tablename_sub SET return_status=1,return_id='".$insertid."' WHERE id='".$order_product_id[$i]."'");
                                                                $this->db->query("UPDATE $tablenamemain SET return_status=1,return_id='".$insertid."' WHERE id='".$order_id."'");
                                                               // $this->db->query("UPDATE purchase_orders_process SET customer_id='".$customer_id."' WHERE id='".$insertid."'");
                                                            
                                                    
                                                }    
                                                    
                                                    
                                                    
                                                    
                                        }   
                                        
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                        $balancetotal = 0;
                                        $debitsamount = 0;
                                        $creditsamount = 0;
                                        foreach ($res as $val) {
                                                $payid = $val->id;
                                                $customer_id = $val->customer_id;
                                                $amount = $val->amount;
                                                $debitsamount+= $val->debits;
                                                $creditsamount+= $val->credits;
                                                $balancetotal+= $val->balance;
                                        }
                                        $balancetotal=$creditsamount-$debitsamount;
                                        
                                        
                                        
                                        
                                        $data_address['order_id'] = 0;
                                        $data_address['customer_id'] = $customer_id;
                                        $data_address['user_id'] = $this->userid;
                                        $data_address['notes'] = 'Sales Return';
                                        $data_address['payment_mode'] = '';
                                        $data_address['order_no'] = 'RE-'.$insertid;
                                        $data_address['difference'] = 0;
                                        $data_address['reference_no'] = $order_no;
                                        $data_address['amount'] = round($totalamount);
                                        $data_address['account_head_id'] = 68;
                                        $data_address['account_heads_id_2'] = 2;
                                        $data_address['order_trancation_status'] = 0;
                                        $data_address['paid_status'] = 1;
                                        $data_address['credits'] = round($totalamount);
                                        $data_address['balance'] = 0;
                                        $data_address['collected_amount'] = round($totalamount);
                                        $data_address['payment_date'] = $date;
                                        $data_address['process_by'] = 'Sales Return';
                                        $data_address['payment_time'] = $time;
                                        $data_address['party_type'] = 1;
                                        $data_address['bank_id'] = 0;
                                        $data_address['return_invoice_date'] = $invoiceDate;
                                        $data_address['deletemod'] = 'RE-'.$insertid;
                                        
                                        
                                        $querycheck = $this->db->query("SELECT id FROM all_ledgers  WHERE order_no='".$data_address['order_no']."' AND deleteid='0'");
                                        $querycheck=$querycheck->result();
                                        if(count($querycheck)==0)
                                        {

                                        $this->Main_model->insert_commen($data_address, 'all_ledgers');


                                        }
                                            
                                    
                
            
   }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function ordercreate_product_process_transport_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                 $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Transport Setup ';
            $data['status_base'] = 5;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);


             if($this->session->userdata['logged_in']['access']=='31') //Sales Head
                {



  $data['Categories'] = $this->Main_model->where_names_order_by('categories','deleteid','0','categories','ASC');
                $data['additional_information1'] =$this->Main_model->where_names_four_order_by_new('additional_information','grouping','1','deleteid','0','hide','0','category_id!=','0','show_order_by','ASC');

                 
                            
                             $this->load->view('order/order_product_customer', $data);

                }
                else
                {
                             $this->load->view('order/order_product', $data);
                }




        } else {
            $this->load->view('admin/index');
        }
    }


 public function request_payment_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'MD Approvel List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/request_payment_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }





    public function discountupdate() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['discount'] = $form_data->discount;
        $datass['discountPre'] = $form_data->discountPre;

        $tablename = $form_data->tablenamemain;
        
         
        if($tablename=='orders_process')
        {
             
             
             
             
             
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           if($order_base>=1)
                           {
                                if($finance_status>=2)
                                {
             
             
                                          $datass['order_base'] = 20;
                                          $datass['reason'] = 'MD Approvel Request For Discount';
                                          date_default_timezone_set("Asia/Kolkata"); 
                                          $date= date('Y-m-d');
                                          $time= date('h:i A');
                                          $datass['edit_user_id'] = $this->userid;
                                          $datass['edit_date'] = $date;
                                          $datass['edit_time'] = $time;
             
                                }
                                
                                
                           }
             
             
             
             
             
        }
        
        $this->Main_model->update_commen($datass, $tablename);



                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) {
                                                                $username=$team->name.' - '.$this->userid;
                                                                
                                             }
                                            $day_log['username'] = $username;
                                            $day_log['changes'] = 'DISCOUNT ORDER '.$form_data->discount;
                                            $day_log['table_name'] = $tablename;
                                            $day_log['reference_no'] = $form_data->order_id;
                                            $day_log['create_date'] =$date;
                                            $day_log['create_time'] =$time;
                                            $day_log['changes'] = 'DISCOUNT ORDER '.$form_data->discount;
                                            $this->Main_model->insert_commen($day_log, 'day_log');



    }
   











    public function fact_commission_update() 
    {




        $form_data = json_decode(file_get_contents("php://input"));
        $order_id = $form_data->order_id;
        $categories_id= $form_data->cate_id;
        $commission_fact = $form_data->factvalue;
        $tablename = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;



       
        if($form_data->factvalue>0)
        {




                $results = $this->Main_model->where_names($tablename, 'id', $order_id);
                foreach($results as $vl)
                {
                    $bill_total_fact=$vl->bill_total_fact;
                    $bill_total=$vl->bill_total;
                                   
                }


                $val['get_id'] = $form_data->order_id;
                $val['commission_check_fact'] = 1;
                if($bill_total_fact==0)
                {
                         $val['bill_total_fact'] = $bill_total;
                }
                $this->Main_model->update_commen($val, $tablename);

             


                $ids=array();
                $resultmain = $this->db->query("SELECT id,fact,commission_fact,amount FROM $tablename_sub  WHERE order_id='" . $order_id . "' AND categories_id='" . $categories_id . "'  AND deleteid='0'");
                $resultcs = $resultmain->result();
                foreach ($resultcs as $vl)
                {

                     $fact= $vl->fact;
                     $ids[] = $vl->id;
                     $old_fact= $vl->commission_fact;
                     $old_fact_amount= $vl->amount;

                     if($old_fact>0)
                     {
                        $this->db->query("UPDATE $tablename_sub SET fact='".$commission_fact."',commission_fact_status='1'  WHERE order_id='" . $order_id. "' AND categories_id='".$categories_id."' AND deleteid='0' AND  id='".$vl->id."'");
                     }
                     else
                     {
                        $this->db->query("UPDATE $tablename_sub SET commission_fact='".$fact."',commission_fact_status='1',fact='".$commission_fact."'  WHERE order_id='" . $order_id. "' AND categories_id='".$categories_id."' AND deleteid='0' AND  id='".$vl->id."'");
                     }
                     

                }

            $error=2;

        }
        else
        {
            $error=1;
        }

         $array = array('error' => $error, 'id' => $ids,'commission_fact' => $fact);
         echo json_encode($array);

        

    }




   
   
    public function roundoff() {



        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['roundoff'] = $form_data->roundoff;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);



                           $results = $this->Main_model->where_names('orders_process', 'id', $form_data->order_id);
                           foreach($results as $vl)
                           {

                                 $order_no=$vl->order_no;
                                 $roundoffstatus=$vl->roundoffstatus;
                                
                              
                           }

                          if($form_data->discountfulltotal>0)
                          {
                           
                              if($form_data->roundoff>=0)
                              {


                                          if($roundoffstatus == 1) {
                                            $discountfulltotal = $form_data->discountfulltotal + $form_data->roundoff;
                                           } else {
                                            $discountfulltotal = $form_data->discountfulltotal -  $form_data->roundoff;
                                           }


                                           $totaldebitset=round($discountfulltotal,2);


                                           $deletelog['userid']=$this->userid;
                                           $deletelog['all_legers']='OrderID-'.$form_data->order_id;
                                           $deletelog['bank_legers']='Round Off value Change '.$totaldebitset;
                                           $this->Main_model->insert_commen($deletelog,'deleted_log');


                              }

                            
      
                          }







    }

 public function sort_no_update()
 {
         $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->id;
         $randam_id = $form_data->randam_id;

        if($form_data->sort_no>0)
        {

                       $result =  $this->db->query("SELECT * FROM orders_process WHERE id='" . $form_data->id . "'");
                         $result = $result->result();
                         foreach ($result as $form_data_val) 
                         {
                                $trip_id=$form_data_val->trip_id;
                         }



                         $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
            $res =  $this->db->query("SELECT * FROM orders_process as a  $JOIN WHERE  ds.trip_id='" . $trip_id . "'");
                         $res = $res->result();
                         $countdata=count($res);



                          if($countdata>=$form_data->sort_no)
                          {

         $result_val =  $this->db->query("SELECT * FROM orders_process WHERE trip_id='" . $trip_id . "' AND sort_id='".$form_data->sort_no."'");
         $result_val = $result_val->result();

         if(count($result_val)==1)
         {

                              //$array = array('error' => '2', 'msg' => 'This  Number '.$form_data->sort_no.' already updated');
                              //echo json_encode($array);

                              $datass['sort_id'] = $form_data->sort_no;
                              $tablename = 'orders_process';
                              $this->Main_model->update_commen($datass, $tablename);

         }
         else
         {


                              $datass['sort_id'] = $form_data->sort_no;
                              $tablename = 'orders_process';
                              $this->Main_model->update_commen($datass, $tablename);

         }
                        

$this->db->query("UPDATE order_delivery_order_status SET sort_id='".$datass['sort_id']."' WHERE trip_id='".$trip_id."' AND order_id='".$form_data->id."' AND deleteid=0 AND randam_id='".$randam_id."'");

                           

                          }
                          else
                          {

                             $array = array('error' => '2', 'msg' => 'MAX Count Number '.$countdata.' Allowed');
                             echo json_encode($array);

                          }

                          



        }
        else
        {
            $array = array('error' => '2', 'msg' => 'Numeric Only Allowed');
            echo json_encode($array);
        }
    }



     public function reading_update() {
       date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');


        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;


        $return_id = $form_data->return_id;
        $randam_id = $form_data->randam_id;


            $end_reading=strlen($form_data->end_reading);
            if($end_reading<=6)
            {

                        $datass['km_reading_end'] = $form_data->end_reading;
                        $tablename = $form_data->tablenamemain;
                        
                        // $this->Main_model->update_commen($datass, $tablename);
                        // echo $form_data->end_reading;
                        // echo $tablename;
                        // echo $form_data->order_id;exit();
                        $this->db->query("UPDATE orders_process SET km_reading_end='".$form_data->end_reading."'  WHERE id='" . $form_data->order_id . "'");

                         $result =  $this->db->query("SELECT * FROM orders_process WHERE id='" . $form_data->order_id . "'");
                         $result = $result->result();
                        //  $this->Main_model->where_names($tablename, 'id', $form_data->order_id);
                         foreach ($result as $form_data_val) 
                         {

                            //$trip_id = $form_data_val->trip_id;
                            $start_reading = $form_data_val->start_reading;
                            $order_no = $form_data_val->order_no;
                            $return = $form_data_val->return_id;
                            $order = $form_data_val->order_no;
                    
                         }



            $results =  $this->db->query("SELECT * FROM order_delivery_order_status WHERE randam_id='" . $randam_id. "'");
                         $results = $results->result();
                         //$this->Main_model->where_names($tablename, 'id', $form_data->order_id);
                         foreach ($results as $form_data_vals) 
                         {

                            $trip_id = $form_data_vals->trip_id;
                             $start_reading = $form_data_vals->start_reading;
                           
                    
                         }


                         


$this->db->query("UPDATE $tablename SET km_reading_end='".$form_data->end_reading."',start_reading='".$start_reading."'  WHERE trip_id='" . $trip_id . "' AND finance_status IN ('4','11')");
$this->db->query("UPDATE order_delivery_order_status SET km_reading_end='".$form_data->end_reading."'  WHERE trip_id='" . $trip_id . "' AND deleteid=0 AND finance_status IN ('4','11')");







if($return)
{
    $this->db->query("UPDATE order_sales_return_complaints SET order_base=2 ,km_reading_end='".$form_data->end_reading."',start_reading='".$start_reading."'  WHERE order_no='" . $order . "' AND order_base=4");
}
//echo "UPDATE $tablename SET km_reading_end='".$form_data->end_reading."',start_reading='".$start_reading."'  WHERE trip_id='" . $trip_id . "'";


                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) {
                                                                $username=$team->name.' - '.$this->userid;
                                                                
                                             }
                                            $day_log['username'] = $username;
                                            $day_log['changes'] = 'Start KM '.$start_reading;
                                            $day_log['table_name'] = $tablename;
                                            $day_log['reference_no'] = $order_no;
                                            $day_log['create_date'] =$date;
                                            $day_log['create_time'] =$time;
                                            $day_log['details'] ='END KM UPDATE'.$datass['km_reading_end'];
                                            $this->Main_model->insert_commen($day_log, 'day_log');


            }
            echo json_encode($array);
    }

      public function reading_update_fact() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['end_reading_factory'] = $form_data->end_reading;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);
    }
       public function reading_update_fact_start() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['start_reading_factory'] = $form_data->end_reading;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);
    }
    
    
    public function convertPlus() 
    {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['roundoff'] = $form_data->roundoff;
        $datass['roundoffstatus'] = $form_data->num;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);

    }
    public function saveRemarks() {
        $form_data = json_decode(file_get_contents("php://input"));
        $fieldset = $form_data->fieldset;
        $datass['get_id'] = $form_data->order_product_id;
        $datass[$fieldset] = $form_data->fieldsetval;
        $tablenamemain = $form_data->tablename_sub;
        $this->Main_model->update_commen($datass, $tablenamemain);
    }
    public function savereason() {


         $form_data = json_decode(file_get_contents("php://input"));

               
                $order_no = $form_data->order_id;
                
                $tablename = $form_data->tablenamemain;
                $datass_val['get_id'] = $order_no;
                if($form_data->reason=='0')
                {
                       $datass_val['order_base'] = 0;
                       $datass_val['reason'] = '';
                }
                else
                {
                     $datass_val['order_base'] = -2;
                     $datass_val['reason'] = $form_data->reason;
                     $datass_val['missed_date'] = date('Y-m-d');
                }
               
 $this->Main_model->update_commen_where($datass_val, 'id', $tablename);


    }












    public function customerupdate() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
        $insertid = $form_data->order_id;
        //$basedata['id'] = $form_data->order_id;
        $basedata['order_no'] = $form_data->order_no;
        $basedata['count_id'] = $form_data->count_id;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;
        $basedata['user_id'] = $this->userid;
        $basedata['entry_user_id'] = $this->userid;
      






        $customer = $form_data->customer;
        $customer = explode('/', $customer);
        $customer_id = 0;
        $result = $this->Main_model->where_names('customers', 'id', $customer[2]);
         foreach ($result as $form_data_val) 
         {
            $customer_id = $form_data_val->id;
            $locality = $form_data_val->locality;
            $sales_group = $form_data_val->sales_group;
            $sales_team_id = $form_data_val->sales_team_id;
            $tcs_status = $form_data_val->tcs_status;
         }
        
         $sales_team_name ='';
         $user_group_team = $this->Main_model->where_names('admin_users','id',$sales_team_id);
         foreach ($user_group_team as  $team) {
                            $sales_team_name=$team->name;
                            $sales_group=$team->sales_group_id;
         }
                       
                       
                        
        
        
        
        
        
        $route_id = 0;
        $routeset = $this->Main_model->where_names('locality', 'id', $locality);
        foreach ($routeset as $routesetval) {
            $route_id = $routesetval->route_id;
        }
        $datass['get_id'] = $insertid;
        $datass['customer_id'] = $customer_id;
        $datass['route_id'] = $route_id;
        $datass['sales_group'] = $sales_group;
        $datass['tcs_status'] = $tcs_status;
        $datass['customer_address_id'] = '0';
        $datass['shipping_address'] = '0';
        $datass['billing_address'] = '0';
        
        
        
        //$this->Main_model->update_commen($datass, $tablename);
        
        
        
        if($tablename=='orders_process')
        {
         
          $this->db->query("UPDATE all_ledgers SET customer_id='".$customer_id."'  WHERE order_id='" . $form_data->order_id . "' AND party_type=1 ");
          $this->db->query("UPDATE order_delivery_order_status SET customer_id='".$customer_id."'  WHERE order_id='" . $form_data->order_id . "'");
                
        }
        
            $customer_id_old ='0';
                                             $user_group_team = $this->Main_model->where_names($tablename,'id',$form_data->order_id);
                                             foreach ($user_group_team as  $team) {
                                                                $customer_id_old=$team->customer_id;
                                                                
                                             }
                  
                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $form_data->order_id;
                                            $datassh['tablename'] = $tablename;
                                            $datassh['order_no'] = $form_data->order_no;
                                            $datassh['inputname'] ='Customer Change';
                                            $datassh['notes'] ='Old Customer ID : '. $customer_id_old.' | New '.$customer_id;
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');

                                            $this->Main_model->update_commen($datass, $tablename);

        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);













    }






























    
    public function customerinsert() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
       // $insertid = $form_data->order_id;
        //$basedata['id'] = $form_data->order_id;
        
      //  $basedata['count_id'] = $form_data->count_id;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;
        $basedata['user_id'] = $this->userid;
        $basedata['entry_user_id'] = $this->userid;



        $customer = $form_data->customer;
        $customer = explode('/', $customer);
        $customer_id = 0;
        $result = $this->Main_model->where_names('customers', 'id', $customer[2]);
         foreach ($result as $form_data_val) 
         {
            $customer_id = $form_data_val->id;
            $locality = $form_data_val->locality;
            $sales_group = $form_data_val->sales_group;
            $sales_team_id = $form_data_val->sales_team_id;
            $tcs_status = $form_data_val->tcs_status;
         }
        
         $sales_team_name ='';
         $user_group_team = $this->Main_model->where_names('admin_users','id',$sales_team_id);
         foreach ($user_group_team as  $team) {
                            $sales_team_name=$team->name;
                            $sales_group=$team->sales_group_id;
         }
                    
        

        $route_id = 0;
        $routeset = $this->Main_model->where_names('locality', 'id', $locality);
        foreach ($routeset as $routesetval) {
            $route_id = $routesetval->route_id;
        }


        $basedata['customer_id'] = $customer_id;
        $basedata['route_id'] = $route_id;
        $basedata['sales_group'] = $sales_group;
        $basedata['tcs_status'] = $tcs_status;

            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            $neworder_id = 1;




             if($tablename=='orders_process') 
            {
                 $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
            } 
            else
            {
                 $order_last_count = $this->Main_model->order_last_count($tablename);
            }






            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            //$basedata['id'] = $neworder_id;

            if ($tablename == 'orders_process')
            {


                $basedata['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
                $basedata['month'] = date('M');
                $basedata['year'] = date('Y');
                $basedata['count'] = $neworder_id;


            } 
            else 
            {
                $basedata['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $insertid = $this->Main_model->insert_commen($basedata, $tablename);
        


        
        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);













    }






    // THIS FUNCTION IS TO CREATE ORDER ENTRY TO AVOID ORDER CONGESTION - USED ONLY IN CUSTOMER LOGIN
    public function orderCreateApp() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;
        
        $basedata['mobile_order'] = '1';
       
        $custid = $this->userid;
        $result = $this->Main_model->where_names('customers', 'id', $custid);
        foreach ($result as $form_data_val) 
        {
            $customer_id = $form_data_val->id;
            $locality = $form_data_val->locality;
            $sales_group = $form_data_val->sales_group;
            $sales_team_id = $form_data_val->sales_team_id;
            $tcs_status = $form_data_val->tcs_status;
        }


        $basedata['user_id'] = $sales_team_id;
        $basedata['entry_user_id'] = $sales_team_id;
        
        $sales_team_name ='';
        $user_group_team = $this->Main_model->where_names('admin_users','id',$sales_team_id);
        foreach ($user_group_team as $team) {
            $sales_team_name=$team->name;
            $sales_group=$team->sales_group_id;
        }
                    
        $route_id = 0;
        $routeset = $this->Main_model->where_names('locality', 'id', $locality);
        foreach ($routeset as $routesetval) {
            $route_id = $routesetval->route_id;
        }

        $basedata['customer_id'] = $customer_id;
        $basedata['route_id'] = $route_id;
        $basedata['sales_group'] = $sales_group;
        $basedata['tcs_status'] = $tcs_status;

        $neworder_quotation_id = 1;
        $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
        foreach ($order_last_count as $r) {
            $neworder_quotation_id = $r->count_id + 1;
        }
        $neworder_id = 1;


        if($tablename=='orders_process') 
        {
            $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
        } 
        else
        {
            $order_last_count = $this->Main_model->order_last_count($tablename);
        }

        foreach ($order_last_count as $r) {
            $neworder_id = $r->id + 1;
        }
        //$basedata['id'] = $neworder_id;

        if ($tablename == 'orders_process'){
            $basedata['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            $basedata['month'] = date('M');
            $basedata['year'] = date('Y');
            $basedata['count'] = $neworder_id;
        }  else  {
            $basedata['order_no'] = $neworder_id . '/'. $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            // $basedata['order_no'] = $neworder_id . '/'.'E/' . $form_data->version . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
        }
        $insertid = $this->Main_model->insert_commen($basedata, $tablename);
        
        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);

    }

















    public function salesteam() 
    {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
        $insertid = $form_data->order_id;
        //$basedata['id'] = $form_data->order_id;
        $basedata['order_no'] = $form_data->order_no;
        $basedata['count_id'] = $form_data->count_id;
        $basedata['user_id'] = $this->userid;
        $basedata['entry_user_id'] = $this->userid;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;
         //$basedata['customer_id'] = 0;
         $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            $neworder_id = 1;

              
            if($tablename=='orders_process') 
            {
                 $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');

            } 
            else
            {
                 $order_last_count = $this->Main_model->order_last_count($tablename);
            }

           



            foreach($order_last_count as $r) 
            {
                $neworder_id = $r->id + 1;
            }
            //$basedata['id'] = $neworder_id;
            if($tablename == 'orders_process') 
            {
                $basedata['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            else
            {
                $basedata['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }

            $basedata['user_id'] = $form_data->user_id;
           
           if($tablename=='orders_process') 
           {

            $basedata['month'] = date('M');
            $basedata['year'] = date('Y');
            $basedata['count'] = $neworder_id;

           }
          


            $insertid = $this->Main_model->insert_commen($basedata, $tablename);

        
        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);
    }












    public function salesteamupdate() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
        $insertid = $form_data->order_id;
        $basedata['id'] = $form_data->order_id;
        $basedata['order_no'] = $form_data->order_no;
        $basedata['count_id'] = $form_data->count_id;
        $basedata['user_id'] = $this->userid;
        $basedata['entry_user_id'] = $this->userid;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;

        $sales_group_idss = 0;
        $resultss = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultss as $form_data_valss)
        {
            $basedata['sales_group'] = $form_data_val->sales_group_id;
        }
        
        $user_id = $form_data->user_id;
        $customer_id = 0;
        $sales_id = 0;
        $sales_group_id = 0;
        $result = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($result as $form_data_val) {
            $customer_id = $form_data_val->id;
            $sales_id = $form_data_val->sales_id;
            $sales_group_id = $form_data_val->sales_group_id;
        }
        $datass['get_id'] = $insertid;
        $datass['user_id'] = $customer_id;
        $datass['entry_user_id'] = $this->userid;
        $datass['sales_group'] = $sales_group_id;
        //$datass['customer_id'] = 0;
        $this->Main_model->update_commen($datass, $tablename);


                                             $customer_id_old ='0';
                                             $user_group_team = $this->Main_model->where_names($tablename,'id',$form_data->order_id);
                                             foreach ($user_group_team as  $team) {
                                                                $customer_id_old=$team->user_id;
                                                                
                                             }
                  
                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $form_data->order_id;
                                            $datassh['tablename'] = $tablename;
                                            $datassh['order_no'] = $form_data->order_no;
                                            $datassh['inputname'] ='Sale Person Change';
                                            $datassh['notes'] =' Old Sales Person ID : '. $customer_id_old;
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');


        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);


    }



















    public function insertandupdate() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        
        
       
        
        
        $tablename = $form_data->tablename_sub;
        $tablenamemain = $form_data->tablenamemain;
        if ($form_data->action == 'Save') {
            if ($form_data->profile != '') {
                $checkboxformula = $form_data->checkboxformula;
                $profile = $form_data->profile;
                $profile = explode('/', $profile);
                $data['product_id'] = 0;
                $data['product_name'] = 0;
                if (isset($profile[0])) {
                    
                    
                    $product_id= explode('-', $profile[0]);
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                    foreach ($result as $form_data_val) {
                        
                        if($tablenamemain!='purchase_orders_process')
                        {
                             $data['product_name'] = $form_data_val->product_name;
                        }
                        
                        
                        $data['product_id'] = $form_data_val->id;
                        $data['categories_id'] = $form_data_val->categories_id;
                        $data['categories_name'] = $form_data_val->categories;
                        
                        $categories_id= $form_data_val->categories_id;
                        $thickness= $form_data_val->thickness;
                         
                         
                        $weight=0; 
                        if($form_data_val->weight>0)
                        {


                        $weight= $form_data_val->weight;

                        } 
                     





                        if($form_data_val->purchase_name=='')
                        {
                            $purchase_name = $form_data_val->product_name;
                        }
                        else
                        {
                            $purchase_name = $form_data_val->purchase_name;
                        }
                        
                        $specification = $form_data_val->specification;
                        
                        $mos = $form_data_val->mos;
                        if ($mos == '') {
                            $mos = 0;
                        }
                        $product_id = $form_data_val->id;
                        $categories_id = $form_data_val->categories_id;
                        $gst = $form_data_val->gst;
                        if ($gst == '') {
                            $gst = 0;
                        }
                        $uom = $form_data_val->uom;
                        $formula = $form_data_val->formula;
                        if ($form_data_val->categories_id == 32) {
                            $data['rate'] = $form_data_val->price + $form_data_val->kg_price;
                        } else {
                            $data['rate'] = $form_data_val->price;
                        }
                        
                        
                        
                      
                        
                        
                        $formula2 = $form_data_val->formula2;
                        $data['sort_id'] = $form_data_val->id;
                        $categories = $form_data_val->categories;
                        $type = $form_data_val->type;
                    }
                }
                $data['gst'] = $gst;
                $data['rate_edit'] = 0;
                if ($categories == 'Accessories') {
                    if ($type == 2) {
                        $data['profile'] = 0;
                        if (isset($profile[1])) {
                            $data['profile'] = $profile[1];
                        }
                        $data['crimp'] = 0;
                        if (isset($profile[2])) {
                            $data['crimp'] = $profile[2];
                        }
                        $data['nos'] = 0;
                        if (isset($profile[3])) {
                            $data['nos'] = $profile[3];
                        }
                        $data['unit'] = 0;
                        if (isset($profile[4])) {
                            $data['unit'] = $profile[4];
                        }
                    } else {
                        $data['profile'] = 0;
                        if (isset($profile[1])) {
                            $data['profile'] = $profile[1];
                        }
                        $data['nos'] = 0;
                        if (isset($profile[2])) {
                            $data['nos'] = $profile[2];
                        }
                        $data['crimp'] = 0;
                        if (isset($profile[3])) {
                            $data['crimp'] = 0;
                        }
                        $data['unit'] = 0;
                        if (isset($profile[4])) {
                            $data['unit'] = $profile[4];
                        }
                    }
                } elseif ($categories == 'Purlin' || $categories == 'Tile sheet' || $categories == 'Profile ridge & Arch' || $categories == 'Decking sheet' || $categories == 'Polycarbonate' || $categories == 'Sag Road' || $categories == 'Liner Sheets' || $categories == 'Roll Sheet') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[2])) {
                        $data['nos'] = $profile[2];
                    }
                } elseif ($categories == 'Screw accessories' || $categories == 'Screw' || $categories == 'Cleat' || $categories == 'Fan & Base' || $categories == 'Rent&charges') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = 0;
                    if (isset($profile[1])) {
                        $data['nos'] = $profile[1];
                    }
                } elseif ($categories == 'UPVC') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = $mos;
                } elseif ($categories == 'Polynum') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                } elseif ($categories == 'Steel Coil' || $categories == 'Rent Bill') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = 0;
                    if (isset($profile[1])) {
                        $data['nos'] = $profile[1];
                    }
                } elseif ($categories == 'L angle') {
                    $data['dim_one'] = 0;
                    if (isset($profile[1])) {
                        $data['dim_one'] = $profile[1];
                    }
                    $data['dim_two'] = 0;
                    if (isset($profile[2])) {
                        $data['dim_two'] = $profile[2];
                    }
                    $data['profile'] = 0;
                    if (isset($profile[3])) {
                        $data['profile'] = $profile[3];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[4])) {
                        $data['crimp'] = $profile[4];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[5])) {
                        $data['nos'] = $profile[5];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[6])) {
                        $data['unit'] = $profile[6];
                    }
                } elseif ($categories == 'Z angle') {
                    $data['dim_one'] = 0;
                    if (isset($profile[1])) {
                        $data['dim_one'] = $profile[1];
                    }
                    $data['dim_two'] = 0;
                    if (isset($profile[2])) {
                        $data['dim_two'] = $profile[2];
                    }
                    $data['dim_three'] = 0;
                    if (isset($profile[3])) {
                        $data['dim_three'] = $profile[3];
                    }
                    $data['profile'] = 0;
                    if (isset($profile[4])) {
                        $data['profile'] = $profile[4];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[5])) {
                        $data['crimp'] = $profile[5];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[6])) {
                        $data['nos'] = $profile[6];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[7])) {
                        $data['unit'] = $profile[7];
                    }
                } elseif ($categories == 'Multiwall') {
                    $data['profile'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[2])) {
                        $data['crimp'] = $profile[2];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[3])) {
                        $data['nos'] = $profile[3];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[4])) {
                        $data['unit'] = $profile[4];
                    }
                } else {
                    $data['profile'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[2])) {
                        $data['crimp'] = $profile[2];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[3])) {
                        $data['nos'] = $profile[3];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[4])) {
                        $data['unit'] = $profile[4];
                    }
                }
                $basedata['id'] = $form_data->order_id;
                $basedata['order_no'] = $form_data->order_no;
                $basedata['count_id'] = $form_data->count_id;
                $basedata['create_date'] = $date;
                $basedata['create_time'] = $time;


                if($this->session->userdata['logged_in']['access']=='31') // Customer
                {


                        $basedata['mobile_order'] = 1;
                        $customer_id = $this->userid;
                        $result = $this->Main_model->where_names('customers', 'id', $customer_id);
                         foreach ($result as $form_data_val) 
                         {
                            $customer_id = $form_data_val->id;
                            $locality = $form_data_val->locality;
                            $sales_group = $form_data_val->sales_group;
                            $sales_team_id = $form_data_val->sales_team_id;
                            $tcs_status = $form_data_val->tcs_status;
                         }
                         $basedata['user_id'] = $sales_team_id;
                         $basedata['customer_id'] = $customer_id;
                         $basedata['entry_user_id'] = $sales_team_id;
                       
                                                                 
                }
                else
                {
                           $basedata['user_id'] = $this->userid;
                           $basedata['entry_user_id'] = $this->userid;


                }




               
                $result_ordercount = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
                if (count($result_ordercount) == 0) {
                    $this->Main_model->insert_commen($basedata, $tablenamemain);
                }
                $data['fact'] = $formula;
                if ($categories == 'Accessories') {
                    $profile=0;
                    if ($type == 1) {
                        if ($checkboxformula == 3) {
                            $profile = round($data['profile'], 4);
                        }
                        if ($checkboxformula == 4) {
                            $profile = round($data['profile']/304.8,4);
                        }
                        if ($checkboxformula == 5) {
                            $profile = round($data['profile']*3.281,4);
                        }
                        if ($checkboxformula == 6) {
                            $profile = round($data['profile']/12, 4);
                        }
                        $qty = $profile * $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    }
                    if ($type == 2) {

                        $data['crimp'] = $data['crimp'];
                        
                        if ($checkboxformula == 4) {
                            $data['crimp'] = round($data['crimp'] / 304.8, 4);
                        }
                        if ($checkboxformula == 5) {
                            
                             $data['crimp'] = round($data['crimp']*3.281,4);
                        }
                        if ($checkboxformula == 6) {
                            $data['crimp'] = round($data['crimp'] / 12, 4);
                        }
                        $qty = $data['profile'] * $data['crimp'] * $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    }
                    if ($type == 3) {
                        $qty = $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    }
                    if ($type == 0) {
                        $subqty = $data['profile'] + $data['crimp'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 2);
                    }
                } else {
                    if ($type == 4) {
                        $profile=0;
                        if ($checkboxformula == 3) {
                            $profile = round($data['profile'] *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $profile = round($data['profile'] / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $profile = $data['profile'];
                        }
                        if ($checkboxformula == 6) {
                            $profile = round($data['profile'] / 39.37, 4);
                        }
                        $qty = $profile * $data['nos'] * $data['fact'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    } elseif ($type == 5 || $type == 8) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty * $data['nos'] *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty * $data['nos'] / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty * $data['nos'];
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty * $data['nos'] / 39.37, 4);
                        }
                        $sqt = $data['Meter_to_Sqr_feet'] * $data['fact'];
                        $sqft = round($subqty * $data['nos'], 4);
                        $data['Sqr_feet_to_Meter'] = $sqft * $data['fact'];
                        $data['qty'] = round($sqt, 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 2);
                    } 
                    elseif ($type == 9) {
                        $qty = $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 2);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    }
                    elseif($type == 19) 
                    {
                        $qty = $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 2);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                        $checkboxformula=7;
                    } 
                     elseif ($type == 14) {
                        $qty = $data['nos'] * $data['fact'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    } elseif ($type == 6) {
                        $profile = $data['profile'] + $data['crimp'];
                        if ($checkboxformula == 3) {
                            $profile = round($profile *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $profile = round($profile / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $profile = $data['profile'] + $data['crimp'];
                        }
                        if ($checkboxformula == 6) {
                            $profile = round($profile / 39.37, 4);
                        }
                        if ($data['crimp'] == 0 || $data['crimp'] == "") {
                            $crimpval == 0;
                        } else {
                            $crimpval = 15;
                        }
                        $data['rate'] = $data['rate'] + $crimpval;
                        $qty = $profile * $data['fact'] * $data['nos'];
                        $data['qty'] = round($qty, 3);
                        $data['Meter_to_Sqr_feet'] = 0;
                        $data['Sqr_feet_to_Meter'] = round($data['rate'] * $qty, 4);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    } elseif ($type == 15) {
                        $profile = $data['profile'] * $data['crimp'];
                        //   if($checkboxformula==3)
                        //   {
                        //       $profile= round($profile*0.305,3);
                        //   }
                        //   if($checkboxformula==4)
                        //   {
                        //       $profile= round($profile/1000,3);
                        //   }
                        //   if($checkboxformula==5)
                        //   {
                        //       $profile= $data['profile']*$data['crimp'];
                        //   }
                        //   if($checkboxformula==6)
                        //   {
                        //       $profile= round($profile/39.37,3);
                        //   }
                        //   $qty=$profile*$data['nos']/1000;
                        if ($checkboxformula == 4) {
                            $profile = round($profile / 1000, 4);
                            $qty = $profile * $data['nos'] / 1000;
                        } else {
                            $qty = $profile * $data['nos'];
                        }
                        $data['qty'] = round($qty, 3);
                        $data['Meter_to_Sqr_feet'] = 0;
                        $data['Sqr_feet_to_Meter'] = round($data['rate'] * $qty, 4);
                        $data['amount'] = round($data['rate'] * $qty, 2);
                    } elseif ($type == 7 || $type == 10 || $type == 16) {
                        if ($categories_id == '13') {
                            $profile = round($data['profile'] / $formula, 4);
                            $data['amount'] = round($profile * $data['rate'], 4);
                            $data['nos'] = round($profile);
                            $profileset = round($data['profile'] / $formula, 4);
                            $factt = $data['profile'] - round($profileset);
                            $facttt =$facttt * $formula;
                            $facttt=abs($facttt);
                            $data['fact']=round($facttt,2);
                           

                            



                            $data['qty'] = round($data['profile'],3);
                            $data['amount'] = round($data['rate'] * $data['profile'], 2);
                        } else {
                            
                             $profile =0;
                            if ($checkboxformula == 3) {
                                $profile = round($data['profile'] *0.305, 4);
                            }
                            if ($checkboxformula == 4) {
                                $profile = round($data['profile'] / 1000, 4);
                            }
                            if ($checkboxformula == 5) {
                                $profile = $data['profile'];
                            }
                            if ($checkboxformula == 6) {
                                $profile = round($data['profile'] / 39.37, 4);
                            }
                            $qty = $profile * $data['fact'] * $data['nos'];
                            $data['qty'] = round($qty, 3);
                            $data['Meter_to_Sqr_feet'] = 0;
                            $data['Sqr_feet_to_Meter'] = round($data['rate'] * $qty, 4);
                            $data['amount'] = round($data['rate'] * $qty, 2);
                        }
                    } elseif ($type == 11) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $dim = round($dim *0.305, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $dim = round($dim / 1000, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $dim = round($dim / 39.37, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $dim * $data['crimp'] * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 2);
                    } elseif ($type == 12) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $dim = round($dim *0.305, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $dim = round($dim / 1000, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $dim = round($dim / 39.37, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $dim * $data['crimp'] * $data['nos'] * $data['fact'],3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 2);
                    } elseif ($type == 17) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $data['crimp'] * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 2);
                    } else {
                        $subqty = $data['profile'] + $data['crimp'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 2);
                    }
                }
                if ($categories_id == '13') {
                    $data['uom'] = 2;
                } else {
                    $data['uom'] = $checkboxformula;
                }

                
// gg changes



if($categories_id == '627') 
{

$data['billing_options'] = 4;

}
if ($categories_id == '628')
 {

$data['billing_options'] = 4;


}
if ($categories_id == '611') 
{

$data['billing_options'] = 4;

}

if ($categories_id == '34') 
{

$data['billing_options'] = 1;

}

if ($categories_id == '36') 
{

$data['billing_options'] = 2;

}
if($categories_id == '626') 
{

$data['billing_options'] = 1;

}



                $data['order_id'] = $form_data->order_id;
                $data['order_no'] = $form_data->order_no;
                $data['old_fact_amount'] =$data['amount'];
                $count_id = 1;
                $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $form_data->order_no . "' AND categories_id='" . $categories_id . "'  AND deleteid='0' ORDER BY id DESC LIMIT 0,1");
                $resultcs = $resultmain->result();
                foreach ($resultcs as $vl) {
                    $count_id = $vl->count_id + 1;
                }
                $data_update['count_id'] = $count_id;
                
                
                if($tablenamemain=='purchase_orders_process')
                {
                            $data['rate'] =0;
                            
                                         $resultc= $this->Main_model->where_names('categories','id',$data['categories_id']);
                                         foreach ($resultc as  $valuec)
                                         {
                                             $data['uom']=$valuec->uom;
                                         }
                            
                           
                            
                            $data['product_name']  =$purchase_name;
                            $data['specifications']  =$specification;
                            
                }







                        
                      
                       if($categories_id==3)
                        {



                            $weight=0;
                            $totalcount= $data['profile']+$data['crimp'];
                            if($thickness=='0.40 MM')
                            {

                                $weight=$totalcount*0.305*3.3*$data['nos'];
                                
                            }

                             if($thickness=='0.60 MM')
                            {

                                $weight=$totalcount*0.305*5.4*$data['nos'];
                                
                            }

                            if($thickness=='0.50 MM')
                            {

                                $weight=$totalcount*0.305*4.2*$data['nos'];
                               
                            }


                             if($thickness=='0.47 MM')
                            {

                                $weight=$totalcount*0.305*4*$data['nos'];
                                
                            }

                             if($thickness=='0.45 MM')
                            {

                                $weight=$totalcount*0.305*3.8*$data['nos'];
                               
                            }



                             if($thickness=='0.37 MM')
                            {

                                $weight=$totalcount*0.305*2.8*$data['nos'];
                               
                            }

                           $weight=round($weight,3);
                           $data['weight'] = $weight;

                        } 
                        elseif($categories_id==36) 
                        {
                                $totalcount= $data['profile']+$data['crimp'];
                                $weight=$totalcount*0.305*2.3*$data['nos'];
                                $weight=round($weight,3);
                                $data['weight'] = $weight;
                        }
                        else
                        {
                               $data['weight'] = $data['nos']*$weight;
                        }

                      





                

                
                $insertid = $this->Main_model->insert_commen($data, $tablename);
                $data_update['get_id'] = $insertid;
                $data_update['sort_id'] = $insertid;

                //log trigger for product create
                if($tablename == "order_product_list_quotation"){
                    $data1 = [];
                    $dat = 'Product created';
                    $data1['userid'] = $this->userid;
                    $data1['order_id'] = $data['order_id'];
                    $data1['order_no'] = $data['order_no'];
                    $data1['tablename'] = 'order_product_list_quotation';
                    $data1['inputname'] = 'Product Added';            
                    $data1['old_value'] = '--';            
                    $data1['new_value'] =  $data['product_name'];
                    $data1['notes'] = 'Org version ';   
                    $this->Main_model->insert_commen($data1,'bill_changes_log_version');  
                }  


                if($tablename=='order_product_list_process_return_temp')
                {

                    $data_update['order_process_product_id'] = $insertid;
                    
                }

                $this->Main_model->update_commen($data_update, $tablename);
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                }elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '627') {
                    $cate_status = 1;
                }
                elseif ($categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
                $array = array('error' => '2', 'id' => $insertid, 'product_id' => $product_id, 'cateid' => $categories_id, 'cate_status' => $cate_status);
                echo json_encode($array);
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
        
         if ($form_data->action == "Loadinsertproductdata")
         {
             
             
            //$this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "'");
             $DC_id = $form_data->DC_id;
             $load['order_product_id'] = $form_data->id;
             $load['nos'] = $form_data->nos;
             $load['qty'] = $form_data->qty;
             $load['rate'] = $form_data->rate;
             $order_id=$_GET['order_id'];
             
          $this->db->query("UPDATE order_product_list_process SET delivery_status='0',modify_qty='".$load['qty']."',modify_nos='".$load['nos']."'  WHERE id='" . $form_data->id . "' ");          
          $load['amount'] = round($form_data->qty*$form_data->rate,2);



 $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND  delivered_products=0 AND randam_id='".$DC_id."'");
            $resultcss = $resultmainss->result();


             if(count($resultcss)>0)
            {


                  foreach($resultcss as $vvl)
                    {

    $this->db->query("UPDATE sales_load_products SET dispatch_qty='".$vvl->qty."',dispatch_nos='".$vvl->nos."',dispatch_amount='".$vvl->amount."' WHERE order_product_id='" . $form_data->id . "' AND  delivered_products=0 AND randam_id='".$DC_id."' AND dispatch_qty=0");


                    }



            }
          


       $this->db->query("UPDATE sales_load_products SET pickedstatus='1',qty='".$load['qty']."',nos='".$load['nos']."',amount='".$load['amount']."',rate='".$load['rate']."' WHERE order_product_id='" . $form_data->id . "' AND  delivered_products=0 AND randam_id='".$DC_id."'");


            
             
            
             
         }


          if($form_data->action == "SAVECOM_NAME")
          {
                                $tablename = $form_data->tablename_sub;
                                $order_id = $form_data->order_id;
                                $categories_id = $form_data->categories_id;
                                $inputname=$form_data->inputname;

                                $datass['get_id'] = $order_id;
                                $datass[$inputname] = $form_data->values;
                                
                               
                                //$this->Main_model->update_commen_where($datass, 'trip_id', $tablename);
                                $this->Main_model->update_commen_where_two($datass, 'order_id','categories_id',$categories_id, $tablename);



          }



           if ($form_data->action == "SAVECOMOPTION")
          {
                                $tablename = $form_data->tablename_sub;
                                $order_id = $form_data->id;
                                $inputname=$form_data->inputname;

                                $datass['get_id'] = $order_id;
                                $datass[$inputname] = $form_data->values;
                                
                                 $this->Main_model->update_commen($datass, $tablename);
                                //$this->Main_model->update_commen_where($datass, 'trip_id', $tablename);
                                //$this->Main_model->update_commen_where_two($datass, 'order_id','categories_id',$categories_id, $tablename);



          }




        
        if ($form_data->action == "InputUpdate") {
            
            
            $error=2;
            if ($form_data->values != '' || $form_data->values == '0') {
                $categories = "";
                
                         $sqt_qty = $form_data->sqt_qty;
                         $totalammt = $form_data->totalammt;
                         $convertion = $form_data->convertion;


                
                
                
                         if(isset($form_data->old_total_amount))
                         {

                              if($form_data->old_total_amount>0)
                              {

                                            $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                                            foreach($results as $vl)
                                            {
                                                $rate=$vl->rate;
                                            }

                                            $data['old_fact_amount']=round($form_data->old_total_amount*$rate,2);
                              }
                              else
                              {
                                           $datass['old_fact_amount']=0;
                              }

                         }
                
     

                     if(isset($form_data->rate_set))
                     {
                            $rate_set = $form_data->rate_set;

                            if($rate_set>0)
                            {
                                $datass['rate']=$rate_set;
                            }
                            

                             if($form_data->inputname=='crimp')
                             {



                                 if($form_data->values>0)
                                 {
                                      $datass['crimp_check']=1;
                                 }
                                 else
                                 {
                                      $datass['crimp_check']=0;
                                 }
                               
                             }       

                     }
                     
   
                    
                    
                    if($tablename=='order_product_list_process')
                    {
                        
                        
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                           foreach($results as $vl)
                           {
                                $inputval=$form_data->inputname;
                                $order_id=$vl->order_id;
                                $orgchages=$vl->$inputval;
                                $oldproduct_id=$vl->product_id;
                               
                           }
                           
                           $results = $this->Main_model->where_names('orders_process', 'id', $order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           
                           // AStockUpdate-live-01/07
                            // for stock edit auto update   
                           $this->daywisestocksave_order($order_id);
                            $results_val = $this->db->query("SELECT * FROM order_product_list_process WHERE order_id = '".$order_id."' AND deleteid = 0 ORDER BY id DESC")->result();
                            foreach($results_val as $valord)
                            {
                                $product_id=$valord->product_id;                                
                                $sub_id=$valord->id;
                                $order_id=$valord->order_id;
                                $order_no=$valord->order_no;
                                $this->date_stock_order($product_id,$sub_id,$order_id,$order_no,'edit');
                             
                            }
                          // AStockUpdate-live-01/07
                           
                           if($order_base>0)
                           {
                                if($finance_status>=2)
                                {
                                    
                                   $notin_array=array('product_name','tile_material_name','sub_product_id');
                                   if(!in_array($form_data->inputname, $notin_array))
                                   {
                                    
                                    
                                   
                                    
                                    
                                    
                                    
                                    
                    
                                    $basedata['order_id'] = $order_id;
                                    $basedata['order_product_id'] = $form_data->id;
                                    $basedata['create_date'] = $date;
                                    $basedata['create_time'] = $time;
                                    $basedata['user_id'] = $this->userid;
                                    $basedata['names'] = $form_data->inputname;
                                    $basedata['org_changes'] = $orgchages;

         
                                       if($orgchages>0)
                                       {
                                                  
                                                 if($orgchages!=$form_data->values) 
                                                 {




                                                     $vv['get_id'] = $order_id;

                                          if($convertion!=2)
                                          {
                                                     if($form_data->inputname=='commission')
                                                     {

                                                          $vv['reason'] = 'Commission approval pending';
                                                          $vv['order_base'] = 21;

                                                     }
                                                     else
                                                     {

                                                         $vv['reason'] = 'Edit approval pending';
                                                         $vv['order_base'] = 23;

                                                     }


                                           }          


                                                                    date_default_timezone_set("Asia/Kolkata"); 
                                                                    $date= date('Y-m-d');
                                                                    $time= date('h:i A');
                                                                    $vv['edit_user_id'] = $this->userid;
                                                                    $vv['edit_date'] = $date;
                                                                    $vv['edit_time'] = $time;

                                                    



                                                     $this->Main_model->update_commen($vv, 'orders_process');


                                                   



                                                  


                                                                 $this->Main_model->insert_commen($basedata, 'order_edit_changes');
                                                                 $edit=$form_data->inputname.'_edit';
                                                                 $this->db->query("UPDATE $tablename SET $edit='".$orgchages."'  WHERE id='" . $form_data->id . "'");   
                                                                                
                                                    






                                                }


                                        }



                                                        
                                        
                                    
                                   
                               
                                }
                
                                }
                           }
                            
                            
                    
                    }
                    
                    
                
                
                
                $ratechange = $form_data->ratechange;
                $factchange = $form_data->factchange;
                $data['get_id'] = $form_data->id;
                // Decking sheet rate Update
                if ($ratechange != 0) {
                    $data['rate'] = $ratechange;
                }
                if ($factchange != 0) {
                    $data['fact'] = $factchange;
                }
                 $factfinal=0;
                if ($form_data->inputname == 'product_name') {
                    
                     $product_id= explode('-', $form_data->values);
                     $data[$form_data->inputname] = $product_id[1];
                     $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                     if(count($result)>0)
                     {
                         
                     
                             foreach ($result as $product) {
                                $data['product_name'] = $product->product_name;
                                $data['product_id'] = $product->id;
                                $data['categories_id'] = $product->categories_id;
                                $data['categories_name'] = $product->categories;
                               // $data['rate'] = $product->price;
                                $data['fact'] = $product->formula;
                                //$data['uom'] = 3;
                                $data['gst'] = $product->gst;
                                $uom = $product->uom;
                                $formula = $product->formula;
                                $priceset = $product->price;
                                $kg_priceset = $product->kg_price;
                                $categories = $product->categories;

                                $factfinal=$product->formula;
                            }
                    
                     }
                     else
                     {

                             $result = $this->Main_model->where_names('product_list', 'product_name', $form_data->values);
                             if(count($result)>0)
                             {
                                $data['product_name'] = $form_data->values;
                             }
                             else
                             {
                                  $error=1;
                             }

                     }
                    
                    
                } 
                elseif ($form_data->inputname == 'tile_material_name') 
                {
                     $product_id= explode('-', $form_data->values);
                     
                     if($product_id[0]>0)
                     {


                             $data[$form_data->inputname] = $product_id[1];

                             $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                             foreach ($result as $product) {
                                $data['tile_material_name'] = $product->product_name;
                                $data['tile_material_id'] = $product->id;
                             }

                     }


                } 
                elseif($form_data->inputname == 'sub_product_id') 
                {
                     $product_id= explode('-', $form_data->values);

                     if($product_id[0]>0)
                     {
                          $data[$form_data->inputname] = $product_id[0];
                     }
                     

                    
                } 
                else
                {


                    $resultff = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                    foreach ($resultff as $ssdd) {
                        $cul = $ssdd->cul;
                         $fact2 = $ssdd->fact2;
                        $product_ids = $ssdd->product_id;
                    }
                    $result = $this->Main_model->where_names('product_list', 'id', $product_ids);
                     foreach ($result as $product) {
                                
                                $formula2 = $product->formula2;
                     }
                    $data[$form_data->inputname] = $form_data->values;

                     $datass['get_id'] = $form_data->id;
                     if(isset($form_data->convertion)){
                         if($form_data->convertion != '2'){
                            $datass['qty'] =$sqt_qty;
                             $datass['amount'] = $sqt_qty * $form_data->nos;
                         }
                     }else {
                        $datass['qty'] =$sqt_qty;
                         $datass['amount'] = $totalammt;
                     }
                     
                    


                      if($form_data->categories_id==13)
                      {


                        $datass['nos'] =$form_data->nos;
                        $datass['fact'] = $form_data->fact;



                      }
                      if($form_data->categories_id==36)
                      {              




                        if($form_data->inputname=='billing_options')
                        {

                            if($form_data->values==3)
                            {   
                                if($fact2>0)
                                {
                                   
                                    $datass['fact'] = $fact2;
                                    $datass['fact2'] = $fact2;
                                }
                                else
                                { 
                                     $datass['fact'] = $formula2;
                                     $datass['fact2'] = $formula2;


                                }
                                
                            }

                        }


                        // echo "<pre>";print_r($form_data);
                        // exit;
                     



                      }

                      
  $people = array("sub_product_id", "tile_material_name", "product_name");
  if(!in_array($form_data->inputname, $people))
  {
      $datass[$form_data->inputname] = $form_data->values; 
  }
                     $this->Main_model->update_commen($datass, $tablename);
                    


                }
                                if ($form_data->inputname == 'rate') {
                                    $data['rate_edit'] = 1;
                                }

                                if( $form_data->inputname == 'dim_two'&& $form_data->lable == 'other'){
                                    $data['coil_no_other'] = 1;
                                    }


                            $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                                foreach($results as $vl)
                                {
                                     $order_no=$vl->order_no;
                                     $order_id=$vl->order_id;
                                     $nos_re=$vl->nos;                                     
                                     $process_id=$vl->order_process_product_id;

                                      if($tablename == 'order_product_list_process_return_temp'){
                                             $process_data = $this->db->query("SELECT * FROM order_product_list_process WHERE id = '".$process_id."' ORDER BY id DESC LIMIT 1")->row();

                                             $nos = $process_data->nos;
                                             $weg = $process_data->weight;
                                             $singlewei = $weg/$nos;
                                             $return_weg = round(($singlewei * $nos_re),3);

                                              if($return_weg>0){
                                                  if($results->sub_product_id>0)
                                                  {
                                                       $this->db->query("UPDATE $tablename SET weight='".$return_weg."' WHERE id='" . $form_data->id . "'");
                                                       
                                                  }else{
                                                       $data['weight'] =round($return_weg,3);
                                                  }
                                             }


                                     }else{

                                   if($form_data->inputname == 'crimp' ||  $form_data->inputname == 'profile' || $form_data->inputname == 'nos' || $form_data->inputname == 'fact')  
                                       { 
                                            $data['weight'] =round($form_data->weight,3);
                                         
                                       }

                                   }
                               }



                
                                $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                                foreach($results as $vl)
                                {
                                     $order_no=$vl->order_no;
                                      $order_id=$vl->order_id;
                                   
                                }





                                            $sslog['userid'] = $this->userid;
                                            $sslog['order_id'] = $order_id;
                                            $sslog['order_product_id'] = $form_data->id;
                                            $sslog['tablename'] = $tablename;
                                            $sslog['order_no'] = $order_no;
                                            $sslog['inputname'] = $form_data->inputname;
                                            $sslog['notes'] = 'Org Data ' .json_encode($results);
                                            $this->Main_model->insert_commen($sslog, 'bill_changes_log');


                             
                             if($tablename=='order_product_list_process') 
                             {
                                 # code...



                                            $results_data = $this->Main_model->where_names($tablenamemain, 'order_no', $order_no);
                                            foreach($results_data as $vls)
                                            {
                                                 
                                                 $finance_status=$vls->finance_status;
                                                 $order_base=$vls->order_base;
                                                
                                               
                                            }
                      
                                            if($order_base>0)
                                            {


                                            if($finance_status>=2)
                                            {

                                                    if($form_data->inputname=='product_name')
                                                    {
                                                         $product_get_name= explode('-', $form_data->values);


                                                         if(is_numeric($product_get_name[0])==1)
                                                         {


                                                                 if($oldproduct_id!=$product_get_name[0])
                                                                 {



                                                                 $vv['get_id'] = $order_id;


                                    if($convertion!=2)
                                    {

                                    $vv['reason'] = ucfirst($form_data->inputname). ' Edit approval pending';
                                    $vv['order_base'] = 23;

                                    }


                                                                    date_default_timezone_set("Asia/Kolkata"); 
                                                                    $date= date('Y-m-d');
                                                                    $time= date('h:i A');
                                                                    $vv['edit_user_id'] = $this->userid;
                                                                    $vv['edit_date'] = $date;
                                                                    $vv['edit_time'] = $time; 



                                                                 $this->Main_model->update_commen($vv, $tablenamemain);


                                                                 }


                                                         }



                                                    }
                                                   

                                            } 
                             
                                         } 
                                           
                
                            }
                

                 if($error==2)
                 {

                                         
  $people = array("sub_product_id", "tile_material_name", "product_name");
  if(!in_array($form_data->inputname, $people))
  {
                                            $data[$form_data->inputname] = $form_data->values;

  }
                                            $this->Main_model->update_commen($data, $tablename);

                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $order_id;
                                            $datassh['order_product_id'] = $form_data->id;
                                            $datassh['tablename'] = $tablename;
                                            $datassh['order_no'] = $order_no;
                                            $datassh['inputname'] = $form_data->inputname;
                                            $datassh['notes'] = $form_data->values. '  changes';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');


                  }



                $array = array('error' => $error,'factfinal'=>$factfinal,'old_fact_amount'=>$data['old_fact_amount'], 'massage' => 'Successfully Updated..');
              
                echo json_encode($array);
                
                
                
            } 
            else 
            {
                $array = array('error' => '1');
                echo json_encode($array);
            }
            
            
            
            
            
        }
        
        
        
        
          if ($form_data->action == "InputUpdatereturn") {
            
            
            
            if ($form_data->values != '' || $form_data->values == '0') {
                $categories = "";
                $ratechange = $form_data->ratechange;
                $factchange = $form_data->factchange;
                $data['get_id'] = $form_data->id;
                // Decking sheet rate Update
                if ($ratechange != 0) {
                    $data['rate'] = $ratechange;
                }
                if ($factchange != 0) {
                    $data['fact'] = $factchange;
                }
                if ($form_data->inputname == 'product_name') {
                    $product_id= explode('-', $form_data->values);
                    $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                   
                   
                     if(count($result)>0)
                     {
                         
                    foreach ($result as $product) {
                        $data['product_name'] = $product->product_name;
                        $data['product_id'] = $product->id;
                        $data['categories_id'] = $product->categories_id;
                        $data['categories_name'] = $product->categories;
                        $data['rate'] = $product->price;
                        $data['fact'] = $product->formula;
                        $uom = $product->uom;
                        $formula = $product->formula;
                        $priceset = $product->price;
                        $kg_priceset = $product->kg_price;
                        $categories = $product->categories;
                    }
                    
                     }
                     else
                     {
                         $data['product_name'] = $form_data->values;
                         
                     }
                    
                    
                    
                } elseif ($form_data->inputname == 'tile_material_name') {
                    $product_id= explode('-', $form_data->values);
                    
                    if($product_id[0]>0)
                    {

                            $data[$form_data->inputname] = $product_id[1];
                            $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                            foreach ($result as $product) {
                                $data['tile_material_name'] = $product->product_name;
                                $data['tile_material_id'] = $product->id;
                            }

                    }

                } else {
                    $resultff = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                    foreach ($resultff as $ssdd) {
                        $cul = $ssdd->cul;
                    }
                    $data[$form_data->inputname] = $form_data->values;
                }
                if ($form_data->inputname == 'rate') {
                    $data['rate_edit'] = 1;
                }
                
                
                $nos = $data['nos'];
                //$this->Main_model->update_commen($data, $tablename);
                
                
                
                
                $array = array('error' => '2', 'massage' => 'Customer successfully Updated..');
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data) {
                    $id = $form_data->id;
                    $profile = $form_data->profile;
                    $extra_crimp = $form_data->extra_crimp;
                    $dim_one = $form_data->dim_one;
                    $dim_two = $form_data->dim_two;
                    $dim_three = $form_data->dim_three;
                    $uom = $form_data->uom;
                    $crimp = $form_data->crimp;
                  
                    $fact = $form_data->fact;
                    $rate = $form_data->rate;
                    $categories_id = $form_data->categories_id;
                    $billing_options = $form_data->billing_options;
                    $formula = 0;
                    $formula2 = 0;
                    $resultcc = $this->Main_model->where_names('product_list', 'id', $form_data->product_id);
                    foreach ($resultcc as $productcc) {
                        $categories = $productcc->categories;
                        $type = $productcc->type;
                        $type = $productcc->type;
                        $formula = $productcc->formula;
                        $formula2 = $productcc->formula2;
                        $priceset = $productcc->price;
                        $kg_priceset = $productcc->kg_price;
                    }
                    $datass['get_id'] = $id;
                    if ($categories == 'Accessories') {
                        if ($type == 1) {
                            if ($uom == 3) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile/304.8, 4);
                            }
                            if ($uom == 5) {
                                $profile = round($profile*3.281, 4);
                            }
                            if ($uom == 6) {
                                $profile = round($profile/12, 4);
                            }
                            $qty = $profile * $nos;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty,3);
                        }
                        if ($type == 2) {


                            $crimp = $crimp;
                            if ($uom == 4) {
                                $crimp = round($crimp / 304.8, 4);
                            }
                            if ($uom == 5) {
                                $crimp = round($crimp*3.281,4);
                            }
                            if ($uom == 6) {
                                $crimp = round($crimp / 12, 4);
                            }
                            
                            $qty = $profile * $crimp * $nos;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 3) {
                            $qty = $nos;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 0) {
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        }
                    } else {
                        if ($type == 4) {
                            if ($uom == 3) {
                                $profile = round($profile *0.305, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                            }
                            if ($uom == 5) {
                                $profile = $profile;
                            }
                            if ($uom == 6) {
                                $profile = round($profile / 39.37, 4);
                            }
                            $qty = $profile * $nos * $fact;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 9) {
                            $qty = $nos;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 19) {
                            $qty = $form_data->qty;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 14) {
                            $qty = $nos * $fact;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 5) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty * $nos;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 39.37, 4);
                            }
                            $sqft = round($subqty * $nos, 4);
                            $datass['Sqr_feet_to_Meter'] = $sqft * $fact;
                            $sqt = $datass['Meter_to_Sqr_feet'] * $fact;
                            $datass['qty'] = round($sqt, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 8) {
                            //  extra crimp
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty * $nos;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 39.37, 4);
                            }
                            $sqft = round($subqty * $nos, 4);
                            $datass['Sqr_feet_to_Meter'] = $sqft * $fact;
                            $sqt = $datass['Meter_to_Sqr_feet'] * $fact;
                            $datass['qty'] = round($sqt, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 6) {
                            $profile = $profile + $crimp;
                            if ($uom == 3) {
                                $profile = round($profile *0.305, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                            }
                            if ($uom == 5) {
                                $profile = $profile + $crimp;
                            }
                            if ($uom == 6) {
                                $profile = round($profile / 39.37, 4);
                            }
                            if ($crimp == 0 || $crimp == "") {
                                $crimpval == 0;
                            } else {
                                $crimpval = 15;
                            }
                            if ($billing_options == 1) {
                                $rateavl = $priceset + $crimpval;
                            } else {
                                $rateavl = $kg_priceset + $crimpval;
                            }
                            $qty = $profile * $fact * $nos;
                            $datass['qty'] = round($qty, 3);
                            $datass['Meter_to_Sqr_feet'] = 0;
                            $datass['rate'] = $rateavl;
                            $datass['Sqr_feet_to_Meter'] = round($rateavl * $qty, 4);
                            $datass['amount'] = round($rateavl * $qty, 3);
                        } elseif ($type == 15) {
                            $profile = $profile * $crimp;
                            //   if($uom==3)
                            //   {
                            //       $profile= round($profile*0.305,3);
                            //   }
                            //   if($uom==4)
                            //   {
                            //       $profile= round($profile/1000,3);
                            //   }
                            //   if($uom==5)
                            //   {
                            //       $profile= $profile*$crimp;
                            //   }
                            //   if($uom==6)
                            //   {
                            //       $profile= round($profile/39.37,3);
                            //   }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                                $qty = $profile * $nos / 1000;
                            } else {
                                $qty = $profile * $nos;
                            }
                            $datass['qty'] = round($qty, 3);
                            $datass['Meter_to_Sqr_feet'] = 0;
                            $datass['rate'] = $rate;
                            $datass['Sqr_feet_to_Meter'] = round($rate * $qty, 4);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 7 || $type == 10 || $type == 16) {
                            if ($categories_id == '13') {
                                if ($uom == 2) {
                                    $formula = $formula;
                                } else {
                                    $formula = $formula2;
                                }
                                $profilevv = round($profile / $formula, 4);
                                $datass['amount'] = round($profilevv * $rate, 4);
                                if ($uom == 2) {
                                    $datass['nos'] = round($profilevv,2);
                                } else {
                                    $datass['nos'] = round($profilevv, 2);
                                }
                                $profileset = round($profile / $formula, 4);
                                
                                $facttt = $profile - round($profileset);
                                $facttt = $facttt * $formula;


                                if ($uom == 2) {


                                    $facttt=abs($facttt);
                                    $datass['fact']=round($facttt,2);




                                } else {
                                    $datass['fact'] = 0;
                                }
                                $datass['qty'] = round($profile,3);
                                $datass['amount'] = round($rate * $profile, 3);
                            } else {
                                if ($uom == 3) {
                                    $profile = round($profile *0.305, 4);
                                }
                                if ($uom == 4) {
                                    $profile = round($profile / 1000, 4);
                                }
                                if ($uom == 5) {
                                    $profile = $profile;
                                }
                                if ($uom == 6) {
                                    $profile = round($profile / 39.37, 4);
                                }
                                $qty = $profile * $fact * $nos;
                                $datass['qty'] = round($qty, 3);
                                $datass['Meter_to_Sqr_feet'] = 0;
                                $datass['Sqr_feet_to_Meter'] = round($rate * $qty, 4);
                                $datass['amount'] = round($rate * $qty, 3);
                            }
                        } elseif ($type == 11) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim *0.305, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim / 1000, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $toatldim = $dim_one + $dim_two;
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim / 39.37, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $toatldim * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 12) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim *0.305, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim / 1000, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim / 39.37, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $toatldim * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 17) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } else {
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        }
                    }
                    
                   
                    
                    $datass_return['get_id'] = $id;
                    $datass_return['return_qty'] = $datass['qty'];
                    $datass_return['return_nos'] = $nos;
                    $datass_return['return_amount'] = $datass['amount'];
                    
                    
                
                    $this->Main_model->update_commen($datass_return, $tablename);
                    
                    
                    
                }
                echo json_encode($array);
                
                
                
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
            
            
            
            
            
        }

         // for gate orders

         
         if($form_data->action == "convertionqty_gate") 
         {
 
             $tablenamemain=$form_data->tablenamemain;
             $convertion=$form_data->convertion;
             $onclick_qty=$form_data->default_qty;
             $order_id=$_GET['order_id'];
             $dc_id=$form_data->dc_id;
             $id=$form_data->id;
             $qty=$form_data->values;
             $rate=$form_data->rate;
             $amount_data=round($rate * $qty,3);
 
 //  for  call back reason we saved org qty to callback_weight field
 
             $this->db->select('*')
             ->where('order_id', $order_id)
             ->where('id', $id);
             $call_bc = $this->db->get('order_product_list_process')->row();
 
             if (empty($call_bc->callback_weight)) {
             $this->db->where('order_id', $order_id)
                 ->where('id', $id)
                 ->update('order_product_list_process', ['callback_weight' => $call_bc->qty]);
             }
 
 
 
             $dats=array(
             'qty'=>$qty
             );
 
           
             if($qty > 0) {
 
 
                 if($convertion==2)
                 {
                    $this->db->query("UPDATE order_delivery_order_status SET convertion='".$convertion."',gate_login_view_status='0'  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0 AND randam_id='".$dc_id."'");
                    $this->db->query("UPDATE orders_process SET convertion='".$convertion."',gate_login_view_status='0'  WHERE id='" . $_GET['order_id'] . "'");
 
                 }
 
 
 
 
                 
                                                     // update that onclick bill qty to packlist
                                                     $billed_qty_value=array(
                                                         'billed_qty'=>$onclick_qty,
                                                         );
                                                         $this->db->where('order_product_id',$id);
                                                         $this->db->where('randam_id', $dc_id);
                                                         $this->db->where('billed_qty',0);
                                                         $this->db->where('order_id', $order_id);
                                                         $this->db->update('packed_details',$billed_qty_value);
 
                                                                // update that qty to packlist
                                                     $billed_qty_value2=array(
                                                         
                                                         'qty'=>$qty
                                                         );
                                                         $this->db->where('order_product_id',$id);
                                                         $this->db->where('randam_id', $dc_id);
                                                         $this->db->where('order_id', $order_id);
                                                         $this->db->update('packed_details',$billed_qty_value2);
 
 
                     // get differnce
                     $this->db->select('packed_details.*');
                     $this->db->where('order_product_id',$id);
                     $this->db->where('order_id',$order_id);
                     $this->db->where('randam_id', $dc_id);
                     $dats123=$this->db->get('packed_details');
                     $packed_activel21=$dats123->row();
                     $packed_activel=$packed_activel21->activel_qty;
                     $qty_differnce=abs($packed_activel - $qty);
 
 
                                                                     $this->db->where('order_id',$order_id);
                                                                     $this->db->where('randam_id', $dc_id);
                                                                     $dats1=$this->db->get('packed_details');
                                                                     $amount=$dats1->result();
 
                                                                     if(!empty($amount)) {
 
 
                                                                         $sub_amount=array();
                                                                         foreach($amount as $data12) {
 
                                                                             $amount_values=$data12->qty * $data12->rate;
                                                                             if (strpos($amount_values , '.') !== false && strlen(substr(strrchr($amount_values , "."), 1)) > 2) {
                                                                             
                                                                                 $amount_values = floor($amount_values * 100) / 100;
                                                                             }
 
                                                                             $sub_amount[]=$amount_values;
 
                                                                         }
 
                                                                         $amounttotal=array_sum($sub_amount);
                                                                         // gg canges 
 
                                                                         $picked_amount_sub=$amounttotal;
                                                                         $picked_amount_gst_picked= $picked_amount_sub * 0.18/2 ;
 
                                                                         $roundoff = $amounttotal;
                                                                         $roundoff = sprintf("%.2f", $roundoff);
 
                                                                         if (strpos($picked_amount_gst_picked , '.') !== false && strlen(substr(strrchr($picked_amount_gst_picked , "."), 1)) > 2) {
                                                                             // Only truncate if more than 2 digits after decimal
                                                                             $picked_amount_gst_picked = floor($picked_amount_gst_picked * 100) / 100;
                                                                         }
 
                                                                         // $truncatedValue_gsts_picked = floor($picked_amount_gst_picked * 100) / 100;
                                                                         $picked_amount_gst = sprintf("%.2f", $picked_amount_gst_picked);
 
                                                                         
                                                                               //GET TCS STATUS
 
                                                                               $resultdis12 = $this->Main_model->where_names_two_order_by('orders_process', 'id', $order_id, 'deleteid', '0', 'id', 'DESC');
                                                                               foreach ($resultdis12 as $valuedis12) {
                                                                               
                                                                                   $tcs_status = $valuedis12->tcs_status;
                                                                                }
       
                                                                                
                             
                                                                                   if($tcs_status == 1){
                                                                                   $tcsamount_picked=round(($picked_amount_sub+$picked_amount_gst+$picked_amount_gst)*0.1/100);
                                                                                   $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$tcsamount_picked+$minisroundoff;
                                                                                   }else {
                                                                                       $tcsamount_picked='0';
                                                                                       $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$minisroundoff;
                                                                                   }
                                                                         
                                                                         
                                                                         
                                                                      
 
                                                                         $amounttotalgst_roundoff=$roundoff*0.18/2;
                                                                         $truncatedValue_gsts = floor($amounttotalgst_roundoff * 100) / 100;
                                                                         $amounttotalgst_roundoff_total = sprintf("%.2f", $truncatedValue_gsts);
                                                                 
                                                                         $discountfulltotal_roundoff=$roundoff + $amounttotalgst_roundoff_total + $amounttotalgst_roundoff_total;
                                                         
                                                                         $whole = floor($discountfulltotal_roundoff); 
                                                                         $decimal1 = $discountfulltotal_roundoff - $whole;
                                                                         $totalval= round($decimal1,3);
 
                                                                         // gg changes
 
                                                                         $roundoffstatusval_data="";
                                                                         $getdataminis=0;
 
                                                                         if($totalval!=0)
                                                                                 {
 
 
                                                                                         if($totalval>0.5)
                                                                                         {
                                                                                                 
 
                                                                                                 $getplusevalue=1-$totalval;
                                                                                                 $discountfulltotal=$discountfulltotal+$getplusevalue;
                                                                                                 
                                                                                                 if($getplusevalue>0)
                                                                                                 {
                                                                                                     $roundoffstatusval_data=" (+) ".$getplusevalue;
                                                                                                     $autoRoundStat = 'plus';
                                                                                                     $autoRound = $getplusevalue;
                                                                                                 }
 
                                                                                         }
                                                                                         elseif($totalval == 0.5)
                                                                                         {
 
 
                                                                                                 $getplusevalue=$totalval;
                                                                                                 $discountfulltotal=$discountfulltotal+$getplusevalue;
                                                                                                 
                                                                                                 if($getplusevalue>0)
                                                                                                 {
                                                                                                     $roundoffstatusval_data=" (+) ".$getplusevalue;
                                                                                                     $autoRoundStat = 'plus';
                                                                                                     $autoRound = $getplusevalue;
                                                                                                 }
 
                                                                                         }
                                                                                         else
                                                                                         {
 
                                                                                                 $discountfulltotal=round($discountfulltotal-$totalval);
                                                                                                 if($totalval>0)
                                                                                                 {
                                                                                                     $roundoffstatusval_data=" (-) ".$totalval;
                                                                                                     $autoRoundStat = 'minus';
                                                                                                     $autoRound = $totalval;
                                                                                                 }
                                                                                                 
                                                                                         }
 
                                                                                 }
 
                                                                         
                                                                                         // update to packing page show details
                                                                         $this->db->query("UPDATE order_delivery_order_status SET collect_sub_amount='".$picked_amount_sub."',collect_gst='".$picked_amount_gst."',collect_tcs='".$tcsamount_picked."',collect_roundoff='".$roundoffstatusval_data."',total_picked_amount='".round($total_show_value)."',collection_remarks_2='".round($total_show_value)."' WHERE order_id='".$_GET['order_id']."' AND deleteid=0 AND randam_id='".$dc_id."'");
 
                                                                     }
 
 
 
                         $this->db->select_sum('billed_qty');
                         $this->db->where('order_id', $order_id);
                         $dats1 = $this->db->get('packed_details');
                         $billed_count_weight = $dats1->row()->billed_qty; 
                                     
                         if($billed_count_weight > 0) {
 
                             $this->db->where('order_id',$order_id);
                             $this->db->where('randam_id', $dc_id);
                             $this->db->where('order_product_id',$id);
                             $dats12=$this->db->get('packed_details');
                             $amount12=$dats12->result();
                              foreach($amount12 as $data12) {
 
                                     $actual_bill_qty=$data12->billed_qty;
                              }
 
                         }else {
 
                                     // get orignal bill qty
                                     $this->db->select('order_product_list_process.*');
                                     $this->db->where('order_id',$order_id);
                                     $this->db->where('id',$id);
                                     $dats156=$this->db->get('order_product_list_process');
                                     $bill_qty_data=$dats156->row();
                                     $actual_bill_qty=$bill_qty_data->qty;
 
                         }
                        
                             if($qty > $packed_activel) {
 
                                 $bill_qty=$actual_bill_qty+$qty_differnce;
 
                             }else {
                                 $bill_qty=$actual_bill_qty-$qty_differnce;
                             }
                         
 
                                 // update to billing page
                             $bill_amount=round($rate * $bill_qty,3);
 
 
                 // weight='".$bill_qty."' =>NOT UPDATE ORIGNAL WEIGHT AS IT IS
 
                 $this->db->query("UPDATE  order_product_list_process SET qty='".$bill_qty."',modify_qty='".$qty."',amount='".$bill_amount."' WHERE order_id='".$_GET['order_id']."' AND id='".$id."'");
 
                                 // update to loding page
                     $this->db->query("UPDATE  sales_load_products SET qty='".$qty."',amount='".$amount_data."' WHERE order_id='".$_GET['order_id']."' AND randam_id='".$dc_id."' AND order_product_id ='".$id."'");
 
         
     }
 
 
             $array = array('error' => '2', 'massage' => 'successfully Updated..');
             echo json_encode($array);
 
         }
        
        
        
        if($form_data->action == "convertionqty") 
        {
            
            
            
            $tablenamemain=$form_data->tablenamemain;
            $convertion=$form_data->convertion;


         


            $order_id=$_GET['order_id'];
            
            if ($form_data->values != '' || $form_data->values == '0') {


             if($convertion==2)
             {
                $this->db->query("UPDATE $tablenamemain SET convertion='".$convertion."',gate_login_view_status='0'  WHERE id='" . $_GET['order_id'] . "'");
             }


                $categories = "";
                $data['get_id'] = $form_data->id;
                if ($form_data->inputname == 'product_name') {
                    $product_id= explode('-', $form_data->values);
                    $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                   

                     if(count($result)>0)
                     {
                                  foreach ($result as $product) {
                                            $data['product_name'] = $product->product_name;
                                            $data['product_id'] = $product->id;
                                            $data['categories_id'] = $product->categories_id;
                                            $data['categories_name'] = $product->categories;
                                            $data['rate'] = $product->price;
                                            $data['fact'] = $product->formula;
                                            $uom = $product->uom;
                                            $formula = $product->formula;
                                            $categories = $product->categories;
                             }
                     }
                     else
                     {
                                                   $data['product_name'] = $form_data->values;

                         
                     }
                    
                    
                    
                    
                } elseif ($form_data->inputname == 'tile_material_name') {
                    $product_id= explode('-', $form_data->values);
                    if($product_id[0]>0)
                    {
                            $data[$form_data->inputname] = $product_id[1];
                            $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                            foreach ($result as $product) {
                                $data['tile_material_name'] = $product->product_name;
                                $data['tile_material_id'] = $product->id;
                            }
                    }
                } else {
                    $resultff = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                    foreach ($resultff as $ssdd) {
                        $cul = $ssdd->cul;
                    }
                    $data[$form_data->inputname] = $form_data->values;
                     if($form_data->inputname == 'qty'){
                        $data['weight'] = $form_data->values;
                    }
                }
                if($form_data->inputname == 'rate')
                {
                   
                    //$data['rate_edit'] = 1;

                          
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                           foreach($results as $vl)
                           {
                                $inputval='rate';
                                $order_id=$vl->order_id;
                                $orgchages=$form_data->old_rate;
                                $edit='rate_edit';
                                $this->db->query("UPDATE $tablename SET $edit='".$orgchages."'  WHERE id='" . $form_data->id . "'");
                                        
                               
                           }

                    
                    if($tablenamemain=='orders_process')
                    {
                           
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                           foreach($results as $vl)
                           {
                                $inputval='rate';
                                $order_id=$vl->order_id;
                                $orgchages=$form_data->old_rate;
                               
                           }
                        
                           $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           if($order_base>0)
                           {
                                if($finance_status>=2)
                                {
                                  
                                  
                                    
                                
                            


                                  if($orgchages>0)
                                  {


                                        if($orgchages!=$form_data->values)
                                        {

                                        
                                    


                                           // $vv['get_id'] = $order_id;
                                           // $vv['reason'] = 'Price Edit approval pending';
                                           // $vv['order_base'] = 23;
                                           // $this->Main_model->update_commen($vv, $tablenamemain);
                                    
                                    
                                
                                
                                            $basedata['order_id'] = $order_id;
                                            $basedata['order_product_id'] = $form_data->id;
                                            $basedata['create_date'] = $date;
                                            $basedata['create_time'] = $time;
                                            $basedata['user_id'] = $this->userid;
                                            $basedata['names'] = $form_data->inputname;
                                            $basedata['org_changes'] = $orgchages;

                                            $this->Main_model->insert_commen($basedata, 'order_edit_changes');
                                            $edit='rate_edit';
                                            $this->db->query("UPDATE $tablename SET $edit='".$orgchages."'  WHERE id='" . $form_data->id . "'");
                                        
                                    
                                    }


                                    }
                            
                                
                                
                                
                                
                                 
                                
                                
                                }
                           }
                            
                            
                    
                    }
                   
                }


                 
             
                            
                                if($form_data->weight>0)
                                {
                                   $data['weight'] =round($form_data->weight,3);
                 
                                }



                               $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                               foreach($results as $vl)
                               {
                                     $order_no=$vl->order_no;
                                     
                                   
                               }


                                            $sslog['userid'] = $this->userid;
                                            $sslog['order_id'] = $form_data->id;
                                            $sslog['tablename'] = $tablename;
                                            $sslog['order_no'] = $order_no;
                                            $sslog['inputname'] = $form_data->inputname;
                                            $sslog['notes'] = 'Org Data ' .json_encode($results);
                                            $this->Main_model->insert_commen($sslog, 'bill_changes_log');

                       
                                  if($tablename=='order_product_list_process')
                                  {        



                                               $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                                               foreach($results as $vl)
                                               {
                                                    $inputval=$form_data->inputname;
                                                    $order_id=$vl->order_id;
                                                    $orgchages=$vl->$inputval;

                                                     $edit=$inputval.'_edit';
                                                     $this->db->query("UPDATE $tablename SET $edit='".$orgchages."'  WHERE id='" . $form_data->id . "'");
                                                   
                                               }


                                            $results_data = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                                            foreach($results_data as $vls)
                                            {
                                                 
                                                 $finance_status=$vls->finance_status;
                                                 $order_base=$vls->order_base;
                                               
                                            }


                                            if($order_base>0)
                                            {
                                       

                                            if($finance_status>=2)
                                            {

                                            $vv['get_id'] = $order_id;

                                            if($convertion!=2)
                                            {

                                            $vv['reason'] = ucfirst($form_data->inputname). ' Edit approval pending';
                                            $vv['order_base'] = 23;

                                            }


                                                                    date_default_timezone_set("Asia/Kolkata"); 
                                                                    $date= date('Y-m-d');
                                                                    $time= date('h:i A');
                                                                    $vv['edit_user_id'] = $this->userid;
                                                                    $vv['edit_date'] = $date;
                                                                    $vv['edit_time'] = $time;


                                            $this->Main_model->update_commen($vv, $tablenamemain);

                                            } 

                                            }



                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $form_data->id;
                                            $datassh['tablename'] = $tablename;
                                            $datassh['order_no'] = $order_no;
                                            $datassh['inputname'] = $form_data->inputname;
                                            $datassh['notes'] = $form_data->values.' '.ucfirst($form_data->inputname).'  changes';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');

                                  }


                $data[$form_data->inputname] = $form_data->values;
                $this->Main_model->update_commen($data, $tablename);
                $array = array('error' => '2', 'massage' => 'successfully Updated..');
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data) {
                    $datass['get_id'] = $form_data->id;
                    $qty = $form_data->qty;
                    $rate = $form_data->rate;
                    if($conversion==2)
                    {
                         $datass['weight'] = $qty;
                    }
                    $datass['amount'] = round($qty * $rate,2);
                    $datass['old_fact_amount'] = round($qty * $rate,2);
                    $this->Main_model->update_commen($datass, $tablename);
                }


                echo json_encode($array);
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }




        if ($form_data->action == 'Reached_location')
        {
            $rl['get_id'] =  $form_data->order_id;
            $rl['reason'] = 'Reached location';
            //$rl['finance_status'] = 7;
            $this->Main_model->update_commen($rl, $tablenamemain);
        }



           
        if ($form_data->action == 'order_full_status_change') 
        {
        
            $tablename = $form_data->tablename;
            $id = $form_data->id;
            $order_no = $form_data->order_no;
            $checked = $form_data->checked;
            $randam_id = $form_data->randam_id;





                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) {
                                                                $username=$team->name;
                                                                
                                             }


                                             $return_id =0;
                                             if($randam_id!='')
                                             {


                                                         $user_group_teams = $this->Main_model->where_names('order_delivery_order_status','randam_id',$randam_id);
                                                         foreach ($user_group_teams as  $teams) 
                                                         {
                                                                            $return_id=$teams->return_id;
                                                                            $order_no=$teams->order_no;
                                                                            $trip_id_set=$teams->trip_id.$randam_id;
                                                                            
                                                         }


                                             }
                  

            $this->db->query("UPDATE $tablename SET order_base=1  WHERE id='" . $id . "'"); 
            $this->db->query("UPDATE order_delivery_order_status SET order_base=1  WHERE order_id='" . $id . "'");    
            

             if($checked==1)
            {
                

    $this->db->query("UPDATE $tablename SET reason_by='Changed Order Created ".$username."',reason='Order Created',changed_by='".$username."',return_status=0,order_base=1,finance_status=2,delivery_date_status=0,assign_status=0,km_reading_end=0,start_reading=0  WHERE id='" . $id . "'");



            if($randam_id=='')
            {

               $randam_ids=' AND randam_id IS NULL';
            }
            else
            {
                $randam_ids=' AND randam_id="'.$randam_id.'"';
            }



    $this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed Order Created ".$username."',reason='Order Created',changed_by='".$username."',return_status=0,order_base=1,finance_status=2,delivery_date_status=0,assign_status=0,km_reading_end=0,start_reading=0,dispatch_status=0,randam_id=NULL,seq_status=0,dispath_load_status_view=0,dispatch_load_status=0  WHERE  order_id='" . $id . "' AND deleteid=0 $randam_ids");

if($randam_id!='')
{

$this->db->query("UPDATE sales_load_products SET pickedstatus=0,randam_id=NULL,loadstatus=0,delivered_products=0,driver_payment_status=0,dispatch_load=0 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");


$this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status=0,loadstatus=0,picked_status=1,delivery_status=0,return_status=0 WHERE order_id='" . $id . "'");


$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed Order Created Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");
$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");


$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");

$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");


}



            }

            if($checked==7)
            {

            




            $this->db->query("UPDATE $tablename SET reason_by='Changed Date Confirmed ".$username."',reason='Date Confirmed',changed_by='".$username."',order_base=1,finance_status=2,assign_status=0,delivery_date_status=1,km_reading_end=0,start_reading=0  WHERE id='" . $id . "'");
              if($randam_id=='')
            {

               $randam_ids=' AND randam_id IS NULL';
            }
            else
            {
                $randam_ids=' AND randam_id="'.$randam_id.'"';
            }


$this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed Date Confirmed ".$username."',reason='Date Confirmed',changed_by='".$username."',order_base=1,finance_status=2,assign_status=0,delivery_date_status=1,km_reading_end=0,start_reading=0,dispatch_status=0,randam_id=NULL,seq_status=0,dispath_load_status_view=0,dispatch_load_status=0  WHERE order_id='" . $id . "' AND deleteid=0 $randam_ids");



if($randam_id!='')
{

            $this->db->query("UPDATE sales_load_products SET pickedstatus=1,randam_id=NULL,loadstatus=0,delivered_products=0,driver_payment_status=0,dispatch_load=0 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");

                 $this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status=0,loadstatus=0,picked_status=1,delivery_status=0,return_status=0 WHERE order_id='" . $id . "'");



            $this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed Date Confirmed Status ".$username."' WHERE id='" . $return_id . "'");
            $this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");


            $order_no_set_final=$order_no.$trip_id_set;
            $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
            $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
            $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
            $this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

            $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
            $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");


}
$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");



            }


            if($checked==9)
            {

              


$this->db->query("UPDATE $tablename SET reason_by='Changed In Reconciliation Completed ".$username."',reason='Reconciliation Completed',changed_by='".$username."',order_base=1,finance_status=5,assign_status=3,delivery_date_status=1  WHERE id='" . $id . "'");


$this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=1,reason_by='Changed In Reconciliation Completed ".$username."',reason='Reconciliation Completed',changed_by='".$username."',order_base=1,finance_status=5,assign_status=3,delivery_date_status=1  WHERE randam_id='" . $randam_id . "' AND order_id='" . $id . "' AND deleteid=0");


$this->db->query("UPDATE sales_load_products SET pickedstatus=1,loadstatus=1,delivered_products=1,driver_payment_status=1,dispatch_load=1 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");



$this->db->query("UPDATE order_product_list_process SET loadstatus=1,picked_status=1,delivery_status=1 WHERE order_id='" . $id . "'");


$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed Date Confirmed Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");


$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='0' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");


$this->db->query("UPDATE denomination SET delivery_status='1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");


            }
           
           
           
            if($checked==2)
            {

                
$randam_id=uniqid();
                 $this->db->query("UPDATE $tablename SET reason_by='Changed In Order Assigned ".$username."',return_status=0,reason='Order Assigned',changed_by='".$username."',order_base=1,finance_status=3,assign_status=11,km_reading_end=0,start_reading=0  WHERE id='" . $id . "'");


 $this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed In Order Assigned ".$username."',return_status=0,reason='Order Assigned',changed_by='".$username."',order_base=1,finance_status=3,assign_status=11,km_reading_end=0,start_reading=0  WHERE  order_id='" . $id . "' AND deleteid=0");

                 $this->db->query("UPDATE order_product_list_process SET picked_status=1,return_status=0,delivery_status=0 WHERE order_id='" . $id . "'");


    $this->db->query("UPDATE sales_load_products SET pickedstatus=1,delivered_products=0,driver_payment_status=0,dispatch_load=0 WHERE order_id='" . $id . "'");


$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed  Order Assigned Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");



$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");

$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");


            }


            if($checked==3)
            {

$this->db->query("UPDATE $tablename SET reason_by='Changed In Dispatch Loaded ".$username."',return_status=0,reason='Dispatch Loaded',changed_by='".$username."',order_base=1,finance_status=3,assign_status=12,km_reading_end=0,start_reading=0  WHERE id='" . $id . "'");
                


$this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed In Dispatch Loaded ".$username."',return_status=0,reason='Dispatch Loaded',changed_by='".$username."',order_base=1,finance_status=3,assign_status=12,km_reading_end=0,start_reading=0,seq_status=1  WHERE randam_id='" . $randam_id . "' AND order_id='" . $id . "' AND deleteid=0");
                
$this->db->query("UPDATE sales_load_products SET pickedstatus=1,loadstatus=1,delivered_products=0,driver_payment_status=0 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");

                 $this->db->query("UPDATE order_product_list_process SET loadstatus=1,picked_status=1,return_status=0,delivery_status=0 WHERE order_id='" . $id . "'");

$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed  Dispatch Loaded Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");




$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");


$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");


$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");

            }
           

            if($checked==4)
            {


 $this->db->query("UPDATE $tablename SET reason_by='Changed In Driver Loaded ".$username."',return_status=0,reason='Driver Loaded',changed_by='".$username."',order_base=1,finance_status=3,assign_status=1,km_reading_end=0,start_reading=0  WHERE id='" . $id . "'");



 $this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed In Driver Loaded ".$username."',return_status=0,reason='Driver Loaded',changed_by='".$username."',order_base=1,finance_status=3,assign_status=1,km_reading_end=0,start_reading=0  WHERE randam_id='" . $randam_id . "' AND order_id='" . $id . "' AND deleteid=0");

$this->db->query("UPDATE sales_load_products SET pickedstatus=1,loadstatus=1,delivered_products=0,driver_payment_status=0 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");

$this->db->query("UPDATE order_product_list_process SET loadstatus=1,picked_status=1,return_status=0,delivery_status=0 WHERE order_id='" . $id . "'");


$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed  Driver Loaded Started Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");



$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");

$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");


            }


             if($checked==5)
            {




$this->db->query("UPDATE $tablename SET reason_by='Changed In Driver Trip Started ".$username."',order_base=1,finance_status=3,assign_status=2,km_reading_end=0,return_status=0,reason='Driver Trip Started',changed_by='".$username."'  WHERE id='" . $id . "'");




$this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed In Driver Trip Started ".$username."',order_base=1,finance_status=3,assign_status=2,km_reading_end=0,return_status=0,reason='Driver Trip Started',changed_by='".$username."'  WHERE randam_id='" . $randam_id . "' AND deleteid=0 AND order_id='" . $id . "'");


$this->db->query("UPDATE sales_load_products SET pickedstatus=1,loadstatus=1,delivered_products=0,driver_payment_status=0,dispatch_load=1 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");

$this->db->query("UPDATE order_product_list_process SET loadstatus=1,picked_status=1,return_status=0,delivery_status=0 WHERE order_id='" . $id . "'");



$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed  Driver Trip Started Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");



$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");

$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");


            }


             if($checked==6)
            {




    $this->db->query("UPDATE $tablename SET reason_by='Changed In Driver Trip Completed ".$username."',order_base=1,finance_status=4,assign_status=3,return_status=0,reason='Driver Trip Completed',changed_by='".$username."',km_reading_end=0  WHERE id='" . $id . "'");





    $this->db->query("UPDATE order_delivery_order_status SET reconcilation_status=0,reason_by='Changed In Driver Trip Completed ".$username."',order_base=1,finance_status=4,assign_status=3,return_status=0,reason='Driver Trip Completed',changed_by='".$username."',km_reading_end=0  WHERE randam_id='" . $randam_id . "' AND deleteid=0 AND order_id='" . $id . "'");



$this->db->query("UPDATE sales_load_products SET pickedstatus=1,loadstatus=1,delivered_products=1,driver_payment_status=0,dispatch_load=1 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");

                  $this->db->query("UPDATE order_product_list_process SET loadstatus=1,picked_status=1,delivery_status=1,return_status=0 WHERE order_id='" . $id . "'");


$this->db->query("UPDATE order_sales_return_complaints SET deleteid='1',remarks='Changed  Driver Trip Completed Status ".$username."' WHERE id='" . $return_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='1' WHERE c_id='" . $return_id . "'");



$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");

$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE denomination SET delivery_status='0' WHERE  order_id='" . $id . "' AND order_no='".$order_no."' AND delivery_status='-1' LIMIT 1");


            }


            if($checked==8)
            {


                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');


                                        $customer_id=0;
                                         $driver_id=0;
                                         $route_id=0;
                                       //  $result= $this->Main_model->where_names('orders_process','id',$id);
                                  
 $result =$this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_id', $id, 'randam_id', $randam_id, 'id', 'ASC');
                                         foreach ($result as  $value) 
                                         {
                                                     
                                                    
                                                     $order_id=$id;
                                                     $trip_id_set=$value->trip_id;
                                                     $order_no=$value->order_no;
                                                     $customer_id=$value->customer_id;
                                                     $start_reading=$value->start_reading;
                                                     $driver_id=$value->driver_id;
                                                     $delivery_status=$value->delivery_status;

                                        }


$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");

$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE denomination SET delivery_status='-1' WHERE  order_id='" . $id . "' AND order_no='".$order_no."'");
                


                        $deleteid = 0;
                                        if($deleteid == 0)
                                        {
                     // $result_order = $this->Main_model->where_names('orders_process', 'order_no', $order_no);
                      $result_order =$this->Main_model->where_names_two_order_by('orders_process', 'order_no', $order_no, 'deleteid', '0', 'id', 'ASC');
                      foreach ($result_order as $orders) 
                      {


                                                $find['order_no']=$orders->order_no;
                                                $customer_id = $orders->customer_id;
                                                $bill_total=$orders->bill_total;
                                                $route_id=$orders->route_id;
                                                $user_id=$orders->user_id;
                                                $create_date=$orders->create_date;
                                                //gst task
                                                 $createDateValue=$orders->create_date;
                                                $find['customer_id'] = $orders->customer_id; $find['notes'] = $orders->notes;
                                                $find['sales_group'] = $orders->sales_group;
                                                $find['roundoff'] = $orders->roundoff;
                                                $find['roundoffstatus'] = $orders->roundoffstatus;
                                                $find['move_id'] = $form_data->order_id;
                                                $find['customer_address_id'] = $orders->customer_address_id;
                                                $find['route_id'] = $orders->route_id;
                                                $find['user_id'] = $orders->user_id;
                                                $find['entry_user_id'] = $this->userid;
                                                $find['remarks'] = $remarks;
                                              
                                                $find['create_date'] = $orders->create_date;
                                                $find['roundoff'] = $orders->roundoff;
                                                $find['roundoffstatus'] = $orders->roundoffstatus;
                                                $find['mark_date'] = $orders->mark_date;
                                                $find['return_date'] = $create_date;
                                
                                                $find['create_time'] = $time;
                                                $find['status'] = 1;
                                                $find['deleteid'] = $deleteid;
                                                $find['finance_status'] = 2;
                                                $find['delivery_status'] = 1;
                                                $find['selforder'] =0;
                                                $find['commission_check'] = $orders->commission_check;
                                                $find['gst_check'] = $orders->gst_check;
                                                $find['delivery_charge'] = $orders->delivery_charge;
                                
                                
                                                $find['SSD_check'] = $orders->SSD_check;
                                                $find['delivery_date_time'] = $orders->delivery_date_time;
                                
                                                $delivery_status=$orders->delivery_status;
                                
                                                $find['delivery_status'] = $orders->delivery_status;
                                                $find['payment_mode'] = $orders->payment_mode;
                                                $find['paricel_mode'] = $orders->paricel_mode;
                                                $find['order_base'] = 1;
                                                $find['reason'] = 'Return Order Created';
                                                $find['discount'] = $orders->discount; 


                                                $find['delivery_mode'] = $orders->delivery_mode;
                                                $payment_mode = $orders->payment_mode;
                                                $delivery_charge = $orders->delivery_charge;
                                                $minisroundoff = $orders->roundoff;
                                                $roundoffstatus = $orders->roundoffstatus;
                                                $discount = $orders->discount;
                                                
                                                $find['others'] = $orders->others;
                                                $find['print'] = $orders->print;
                                                $find['packaging'] = $orders->packaging;
                                                $find['competitorname'] = $orders->competitorname;
                                                $find['details'] = $orders->details;
                                                $result_order = $this->Main_model->where_names('orders_process_return_temp', 'order_no', $orders->order_no);
                                               
                                                $temp_id = '';
                                                if(count($result_order) == 0) 
                                                {
                                                    
                                                    $insertid = $this->Main_model->insert_commen($find, 'orders_process_return_temp');
                                                    // echo $insertid;
                                                    // exit;
                                                    $temp_id = $insertid;
                                                    $order_no = $form_data->order_no;
                                                    $find['order_no'] = $order_no;
                                                    $this->db->query("UPDATE orders_process_return_temp SET order_no='".$order_no."' WHERE id='".$insertid."'");
                                
                                
                                                }
                                                else
                                                {
                                                    foreach ($result_order as $orderst) {
                                                        $insertid = $orderst->id;
                                                        
                                                    }
                                                    $datass['get_id'] = $form_data->order_no;
                                                    $datass['order_base'] = 1;
                                                    $datass['remarks'] = $remarks;
                                                    $datass['return_date'] = $create_date;
                                                    $datass['finance_status'] = 2;
                                                    $datass['roundoff'] = $orders->roundoff;
                                                    $datass['roundoffstatus'] = $orders->roundoffstatus;
                                                    $datass['deleteid'] = $deleteid;
                                                    $this->Main_model->update_commen_where($datass, 'order_no', 'orders_process_return_temp');
                                                }

                                                $this->Main_model->delete_where_new('order_product_list_process_return_temp', 'order_id', $insertid);
                                                $result_order_product = $this->Main_model->where_names_two_order_by('order_product_list_process', 'order_id', $orders->id, 'deleteid', '0', 'id', 'ASC');
                                                $totalamount = 0;


                                                foreach ($result_order_product as $orders_product) {


                                                    $findp['order_id'] = $insertid;
                                                    $findp['order_id'] = $insertid;
                                                    $findp['order_process_product_id'] = $orders_product->id;
                                                    $findp['product_name'] = $orders_product->product_name;
                                                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                                                    $findp['product_id'] = $orders_product->product_id;
                                                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                                                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                                                    $findp['categories_name'] = $orders_product->categories_name;
                                                    $findp['dim_one'] = $orders_product->dim_one;
                                                    $findp['dim_two'] = $orders_product->dim_two;
                                                    $findp['dim_three'] = $orders_product->dim_three;
                                                    $findp['base_id'] = $orders_product->base_id;
                                                    $findp['image_length'] = $orders_product->image_length;
                                                    $findp['gst'] = $orders_product->gst;
                                                    $findp['gst_check'] = $orders_product->gst_check;
                                                    $findp['categories_id'] = $orders_product->categories_id;
                                                    $findp['profile'] = $orders_product->profile;
                                                    $findp['commission'] = $orders_product->commission;
                                                    $findp['address_id'] = $orders_product->address_id;
                                                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                                                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                                                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                                                    foreach ($additional_information as $vl) {
                                                        $label_name = strtolower($vl->label_name);
                                                        $findp[$label_name] = $orders_product->$label_name;
                                                    }
                                                    $findp['crimp'] = $orders_product->crimp;
                                                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                                                    $findp['back_crimp'] = $orders_product->back_crimp;
                                                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                                                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                     

                                                    $findp['weight'] = $orders_product->weight;
                                                    $findp['meterial_category'] = $orders_product->meterial_category;
                                                    $findp['po_upload'] = $orders_product->po_upload;
                                                     $findp['coil_no_other'] = $orders_product->coil_no_other;
                                                    $findp['uom'] = $orders_product->uom;
                                                    $findp['billing_options'] = $orders_product->billing_options;
                                                    $findp['unit'] = $orders_product->unit;
                                                    $findp['fact'] = $orders_product->fact;
                                                    $findp['section_lable'] = $orders_product->section_lable;
                                                    $findp['section_value'] = $orders_product->section_value;
                                                    $findp['degree'] = $orders_product->degree;
                                                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                                                    $findp['value_id'] = $orders_product->value_id;
                                                    $findp['reference_image'] = $orders_product->reference_image;

                                                    $findp['color_side'] = $orders_product->color_side;
                                                    $findp['uom_image'] = $orders_product->uom_image;
                                                    $findp['input_values'] = $orders_product->input_values;


                                                    $findp['rate'] = $orders_product->rate;
                                                    
                                
                                                    $findp['activel_qty'] = $orders_product->qty;
                                                    $findp['modify_qty'] = $orders_product->modify_qty;
                                                    $findp['sort_id'] = $orders_product->sort_id;
                                                    $findp['count_id'] = $orders_product->count_id;


                                                     if($createDateValue > '2024-05-31'){
                                                    $findp['amount'] = $orders_product->amount * 1.18;
                                                    }else{
                                                        $findp['amount'] = $orders_product->amount;
                                                    }

                                                    $findp['deleteid'] = $orders_product->deleteid;
                                                    $findp['create_date'] = $orders_product->create_date;


                                               $edit_nos=0;
                                               $edit_qty=0;
                                             $resultmaincountset = $this->db->query("SELECT qty as qty,edit_nos as edit_nos FROM sales_return_products  WHERE product_id='" .$orders_product->product_id . "' AND order_no='".$orders_product->order_id."' AND purchase_order_product_id='".$orders_product->id."' AND deleteid=0 ORDER BY id ASC");
                                               $resultcsset = $resultmaincountset->result();
                                               foreach($resultcsset as $vl)
                                               {
                                    
                                                 $edit_qty=$vl->qty;
                                                 $edit_nos=$vl->edit_nos;
                                    
                                               }
                                    
                                
                                                      $findp['nos'] = $orders_product->nos-$edit_nos;
                                                      $findp['qty'] = $orders_product->qty-$edit_qty;
                                
                                
                                                    $findp['org_order_id'] = $orders_product->order_id;
                                                    $findp['org_qty'] = $orders_product->qty;
                                                    $findp['org_nos'] = $orders_product->nos;
                                                    $totalamount+= $orders_product->rate * $orders_product->qty;
                                                    $this->Main_model->insert_commen($findp, 'order_product_list_process_return_temp');
                                

                                                }
                                                

                      }

                  }


                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                                     
                                                       $company_name=$value2->company_name;
                                                      
                                         }


                                         $neworder_id = 1;
                                         $order_last_count = $this->Main_model->order_last_count_mounth_year('order_sales_return_complaints');
                                         foreach ($order_last_count as $r) {
                                            $neworder_id = $r->id + 1;
                                         }


                                          $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;

                                         $km_reading_end=$form_data->km_reading_end;
                                         
                                         $data['order_base']=2;
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;

                                         $data['month'] = date('M');
                                         $data['year'] = date('Y');
                                         $data['count'] = $neworder_id;
                                         $data['driver_id'] = $driver_id;
                                         $data['route_id'] = $route_id;
                                    
                                         $data['temp_id']= $temp_id;
                                         $data['re_order_no']='RE-'.strtoupper(date('M') . '/' . $neworder_id); 


                                         $data['user_id']=$this->userid;
                                         $data['sales_id']=$user_id;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $date;
                                         $data['update_time']= $time;
                                         
                                         $data['invoice_date']= $create_date;

                                         $data['start_reading']= $start_reading;
                                         $data['km_reading_end']= $km_reading_end;


                                         $data['trip_end_date']= $date;
                                         $data['trip_end_time']= $time;

                                         $data['remarks']= 'Return to Sales';

                                         $data['driver_return']=2;
                                         $data['delivery_status']=$delivery_status;


                                            $checkdata = $this->Main_model->where_names_two_order_by('order_sales_return_complaints', 'order_no', $form_data->order_no, 'driver_return', '2','deleteid',0, 'id', 'ASC');
                                            foreach($checkdata as $vid)
                                            {
                                                 $insert_id=$vid->id;
                                            }
                                                  
                                            if(count($checkdata)==0)
                                            {

                                               $insert_id=$this->Main_model->insert_commen($data,'order_sales_return_complaints');

                                            }


$this->db->query("UPDATE order_sales_return_complaints SET driver_delivery_status='0',deleteid='0',remarks='Changed In Production Return Status ".$username."' WHERE id='" . $insert_id . "'");
$this->db->query("UPDATE sales_return_products SET deleteid='0' WHERE c_id='" . $insert_id . "'"); 
     


  $netweight=0;
  $totalamount=0;
  $resultgetprodut= $this->Main_model->where_names('order_product_list_process','order_id',$id);


                $roundoff_val=0;
                $tcsamount=0;
                $roundoff = $this->db->query("SELECT * FROM orders_process  WHERE id='".$id."' AND deleteid=0");
                $roundoff = $roundoff->result();
                foreach ($roundoff as $ss)
                {      
                          
                             $roundoff_val=$ss->roundoff;
                             $tcsamount=$ss->tcsamount;
                        
                          
                }

   
  $this->db->query("DELETE FROM sales_return_products  WHERE c_id='" . $insert_id . "'");

                                            foreach ($resultgetprodut as  $value) {
                                                     //$qty=$value->qty;
                                                     $product_name=$value->product_name;
                                                     $product_id=$value->product_id;
                                                     $rate=$value->rate+$value->commission;
                                                     $nos=$value->nos;
                                                     $qty=$value->qty;
                                                     $order_id_data=$value->order_id;
                                                     $categories_id=$value->categories_id;

                                                        $totalamount+=round(($qty*$rate) * 1.18);
                                                        $netweight+=$qty;
                                                        $datadd['qty']=$qty;
                                                        $datadd['edit_nos']=$nos;
                                                        $datadd['org_nos']=$nos;
                                                        $datadd['org_qty']=$qty;
                                                        $datadd['product_id']=$product_id;
                                                        $datadd['categories_id']=$categories_id;
                                                        $datadd['rate']=$rate;
                                                        $datadd['c_id']=$insert_id;
                                                        $datadd['order_no']=$id;
                                                        $datadd['product_name']=$product_name;
                                                        $datadd['return_recived_status']=1;
                                                        $datadd['notes']='';
                                                        $datadd['in_status_val']='Return To Sale';
                                                        $datadd['purchase_order_product_id']=$value->id;


$checkdata_p = $this->Main_model->where_names_three_order_by('sales_return_products', 'c_id', $insert_id, 'purchase_order_product_id',$value->id,'deleteid', 0, 'id', 'ASC');

                                            
                                            if(count($checkdata_p)==0)
                                            {


                                            $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');
    $this->db->query("UPDATE order_product_list_process SET return_status=1,return_id='".$insert_id_data."' WHERE id='".$value->id."'");


                                            }


                                            }
                                            
                                           
$this->db->query("UPDATE $tablename SET finance_status=11,return_date='".$date."',delivery_date_status=0,assign_status=0,return_status=1,vehicle_id='0',driver_id='0',start_reading='0',km_reading_end='0',payment_mode_reconciliation='',reason_by='Changed In Production Return Status ".$username."',reason='Return To Sale',changed_by='".$username."',return_id='".$insert_id."'  WHERE id='" . $id . "'");



             if($randam_id=='')
            {

               $randam_ids=' AND randam_id IS NULL';
            }
            else
            {
                $randam_ids=' AND randam_id="'.$randam_id.'"';
            }




$this->db->query("UPDATE order_delivery_order_status SET finance_status=11,return_date='".$date."',delivery_date_status=0,assign_status=0,return_status=1,vehicle_id='0',driver_id='0',start_reading='0',km_reading_end='0',payment_mode_reconciliation='',reason_by='Changed In Production Return Status ".$username."',dispatch_status=0,randam_id=NULL,reason='Return To Sale',changed_by='".$username."',return_id='".$insert_id."',seq_status=0,dispath_load_status_view=0,dispatch_load_status=0  WHERE  order_id='" . $id . "' AND deleteid=0 $randam_ids");


$this->db->query("UPDATE sales_load_products SET pickedstatus=0,randam_id=NULL,loadstatus=0,delivered_products=0,driver_payment_status=0,dispatch_load=0 WHERE order_id='" . $id . "' AND randam_id='" . $randam_id . "'");

$this->db->query("UPDATE order_product_list_process SET loadstatus=0,picked_status=0,delivery_status=0,return_status=0 WHERE order_id='" . $id . "'");

$totalamount=$totalamount+$tcsamount;
$this->db->query("UPDATE order_sales_return_complaints SET bill_total='".round($totalamount+$roundoff_val)."',qty='".$netweight."' WHERE id='".$insert_id."'");


            }


                                                date_default_timezone_set("Asia/Kolkata"); 
                                                $date= date('Y-m-d');
                                                $time= date('h:i A');


                                            $day_log['username'] = $username;
                                            $day_log['changes'] = 'order_status_change';
                                            $day_log['table_name'] = $tablename;
                                            $day_log['reference_no'] = $order_no;
                                            $day_log['create_date'] =$date;
                                            $day_log['create_time'] =$time;
                                            $day_log['details'] ='Move ID '.$checked;
                                            $this->Main_model->insert_commen($day_log, 'day_log');
           
        }



        if ($form_data->action == 'Delete') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $this->Main_model->deleteupdate($id, $tablename);
        }

     	if ($form_data->action == 'Approve') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $status = $form_data->order_base;
            $this->Main_model->approvalupdate($id, $tablename ,$status);
        }
        if ($form_data->action == 'sub_product_update')
        {
            
                                $tablename = $form_data->tablename_sub;
                                $id = $form_data->id;
                                $datassh['get_id'] = $id;

                                 $product_list = $this->Main_model->where_names($tablename,'id',$form_data->id);
                                 foreach ($product_list as  $value) {
                                     $categories_id=$value->categories_id;
                                 }
                                 if($categories_id==26)
                                 {
                                    $product_lists = $this->Main_model->where_names('product_list','id',$form_data->sub_product_id);
                                     foreach ($product_lists as  $values) {
                                         $product_name=$values->product_name;
                                     }
                                     $datassh['tile_material_id'] = $form_data->sub_product_id;
                                     $datassh['tile_material_name'] = $product_name;
                                 }
                                 elseif($categories_id==631)
                                 {
                                    $product_lists = $this->Main_model->where_names('product_list','id',$form_data->sub_product_id);
                                     foreach ($product_lists as  $values) {
                                         $product_name=$values->product_name;
                                     }
                                     $datassh['tile_material_id'] = $form_data->sub_product_id;
                                     $datassh['tile_material_name'] = $product_name;
                                 }
                                 elseif($categories_id==590)
                                 {
                                    $product_lists = $this->Main_model->where_names('product_list','id',$form_data->sub_product_id);
                                     foreach ($product_lists as  $values) {
                                         $product_name=$values->product_name;
                                     }
                                     $datassh['tile_material_id'] = $form_data->sub_product_id;
                                     $datassh['tile_material_name'] = $product_name;
                                 }
                                 else
                                 {
                                     $datassh['sub_product_id'] = $form_data->sub_product_id;
                                 }

                                
                                $this->Main_model->update_commen($datassh, $tablename);   


        }
        if($form_data->action == 'Advance_remarks')
        {
            
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;

            $advance = str_replace(',','', $form_data->advance);


            $approve_by = $this->userid;
            $this->db->query("UPDATE orders_process SET collection_remarks='".$advance."' WHERE id='".$id."'");
            $this->db->query("UPDATE order_delivery_order_status SET collection_remarks='".$advance."' WHERE order_id='".$id."' AND randam_id IS NULL AND deleteid=0");



                                $datassh['userid'] = $this->userid;
                                $datassh['order_id'] = $id;
                                $datassh['tablename'] = $tablename;
                                $datassh['order_no'] = '';
                                $datassh['inputname'] =$advance;
                                $datassh['notes'] = 'Advance Collection Amount Input';
                                $this->Main_model->insert_commen($datassh, 'bill_changes_log');
           

        }

        if ($form_data->action == 'Reject') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $this->Main_model->deleteupdate($id, $tablename);
        }


      



   

        if($form_data->action == 'Returndelete')
        {
            
            
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                //$this->Main_model->deleteupdate($id, $tablename);

                $this->db->query("UPDATE $tablename SET order_base=3  WHERE id='" . $id . "'");
                
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data)
                {
                    $order_id = $form_data->order_id;
                    $order_no = $form_data->order_no;
                    $this->db->query("UPDATE orders_process SET return_status=0,return_id=0 WHERE order_no='" . $order_no . "'");
                }
                
                
                //$this->db->query("UPDATE all_ledgers SET deleteid=1 WHERE deletemod='RE-" . $id . "'");
                
                
            
        }
      

         if($form_data->action == 'Returndeleterow')
        {
            
            
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                //$this->Main_model->deleteupdate($id, $tablename);

                $this->db->query("UPDATE $tablename SET deleteid=1  WHERE id='" . $id . "'");
                $this->db->query("UPDATE sales_return_products SET deleteid=1  WHERE c_id='" . $id . "'");
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_datas)
                {
                    $order_id = $form_datas->order_id;
                    $re_order_no = $form_datas->re_order_no;
                    $order_no = $form_datas->order_no;


$this->db->query("UPDATE orders_process SET return_status=0,return_id=0,reason='Order Created' WHERE order_no='" . $order_no . "'");
$this->db->query("UPDATE order_delivery_order_status SET return_status=0,finance_status=2,assign_status=0,reason='Order Created' WHERE order_no='" . $order_no . "' AND return_status=1");



                }

$this->db->query("UPDATE all_ledgers SET deleteid=1,deleted_by='".$this->userid."' WHERE deletemod='RE-" . $id . "' AND reference_no='".$re_order_no."' AND party_type=1");

$this->db->query("UPDATE all_ledgers SET deleteid=1,deleted_by='".$this->userid."' WHERE order_no='RE-" . $id . "' AND reference_no='".$re_order_no."'");

 $tcsset='RET-TCS-'.$id;
$this->db->query("UPDATE all_ledgers SET deleteid=1,deleted_by='".$this->userid."' WHERE  deletemod='".$tcsset."'");

$this->db->query("UPDATE all_ledgers SET deleteid=1,deleted_by='".$this->userid."' WHERE deletemod='REPAY-" . $id . "' AND party_type=2");

$this->db->query("UPDATE all_ledgers SET deleteid=1,deleted_by='".$this->userid."' WHERE deleteid=0 AND party_type=5 AND order_no='RE-".$id."' AND account_head_id=142");





                                $datassh['userid'] = $this->userid;
                                $datassh['order_id'] = $id;
                                $datassh['tablename'] = $tablename;
                                $datassh['order_no'] = $order_no;
                                $datassh['inputname'] = $id;
                                $datassh['notes'] = 'Return Order Delete';
                                $this->Main_model->insert_commen($datassh, 'bill_changes_log');


                
                
            
        }


        if ($form_data->action == 'Deletesub') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $this->Main_model->deleteupdate($id, $tablename);
            $id = $form_data->id;
            $additional_information = $this->Main_model->where_names($tablename, 'id', $id);
            foreach ($additional_information as $vl) {
                $product_id = $vl->product_id;
                $categories_id = $vl->categories_id;
                $product_name = $vl->product_name;
                $order_no = $vl->order_no;
                $sort_id = $vl->sort_id;
            }
            $i = 1;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $order_no . "' AND categories_id='" . $categories_id . "' AND deleteid='0' AND id!='" . $id . "' ORDER BY sort_id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $vl) {
                $data_update['count_id'] = $i;
                $data_update['get_id'] = $vl->id;
                $this->Main_model->update_commen($data_update, $tablename);
                $i++;
            }



 
                                $datassh['userid'] = $this->userid;
                                $datassh['order_id'] = $form_data->id;
                                $datassh['tablename'] = $tablename;
                                $datassh['order_no'] = $order_no;
                                $datassh['inputname'] = $id;
                                $datassh['notes'] = $product_name.' Bill Product Delete';
                                $this->Main_model->insert_commen($datassh, 'bill_changes_log');









            exit;
        }
        if ($form_data->action == 'markDeliveryaddress') {
            $tablename = $form_data->tablename_sub;
            $tablenamemain = $form_data->tablenamemain;
            $partial = $form_data->partial;
            $delivery_mode = $form_data->delivery_mode;
            $order_id = $form_data->order_id;
            $idval = $form_data->id;
            
           

           if($form_data->delivery_date_time!='')
           {
                  $delivery_date_time = date('d-m-Y g:i A',strtotime($form_data->delivery_date_time));
                  $delivery_date = date('Y-m-d',strtotime($form_data->delivery_date_time));

           }
           else
           {

                  $delivery_date_time = date('d-m-Y g:i A');
                  $delivery_date = date('Y-m-d');

           }
            
            $id = explode('|', $idval);
            $ss['get_id'] = $order_id;
            $ss['paricel_mode'] = 0;
            
            if($delivery_mode!='Partial/Spilt')
            {

                 $ss['modify_qty'] = 0;

            }

           
            $this->Main_model->update_commen_where($ss, 'order_id', $tablename);
            if($partial == 1) {
                $address_idval = $form_data->address_id;
                $address_id = explode('|', $address_idval);
                for ($i = 0;$i < count($id);$i++) {
                    $datass_appprox['get_id'] = $id[$i];
                    $datass_appprox['address_id'] = $address_id[$i];
                    if ($datass_appprox['address_id'] != 0) {
                        $datass_appprox['address_id_mark'] = 1;
                    } else {
                        $datass_appprox['address_id_mark'] = 0;
                    }
                    $datass_appprox['paricel_mode'] = $partial;
                    $this->Main_model->update_commen($datass_appprox, $tablename);
                }
                $dat['get_id'] = $order_id;
                $dat['paricel_mode'] = $partial;
                $dat['delivery_mode'] = $delivery_mode;
                $dat['delivery_date_time'] = $delivery_date_time;
                $dat['delivery_date'] = $delivery_date;
                $this->Main_model->update_commen($dat, $tablenamemain);
            }elseif ($partial == 2) {
               
                $datass_appprox['address_id_mark'] = 0;
                $datass_appprox['paricel_mode'] = $partial;
                $datass_appprox['get_id'] = $order_id;
                $this->Main_model->update_commen_where($datass_appprox, 'order_id', $tablename);
                
                $dat['get_id'] = $order_id;
                $dat['paricel_mode'] = $partial;
                $dat['delivery_mode'] = $delivery_mode;
                $dat['delivery_date_time'] = $delivery_date_time;
                $dat['delivery_date'] = $delivery_date;
                $this->Main_model->update_commen($dat, $tablenamemain);
            }else {
                $address_idval = $form_data->address_id;
                $address_id = explode('|', $address_idval);
                for ($i = 0;$i < count($id);$i++) {
                    $datass_appprox['get_id'] = $id[$i];
                    $datass_appprox['paricel_mode'] = 0;
                    $this->Main_model->update_commen($datass_appprox, $tablename);
                }
                $dat['get_id'] = $order_id;
                $dat['paricel_mode'] = $partial;
                $dat['delivery_mode'] = $delivery_mode;
                $dat['delivery_date_time'] = $delivery_date_time;
                $dat['delivery_date'] = $delivery_date;
                $this->Main_model->update_commen($dat, $tablenamemain);
            }



            $this->db->query("UPDATE order_delivery_order_status SET delivery_date='".$delivery_date."',delivery_confirm_date_time='".$delivery_date_time."' WHERE order_id='".$order_id."' AND deleteid=0"); 


                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) 
                                             {
                                                
                                                                $username=$team->name;
                                                                
                                             }
                  
                                             $day_log['username'] = $username;
                                             $day_log['changes'] = 'markDeliveryaddress';
                                             $day_log['table_name'] = $tablenamemain;
                                             $day_log['reference_no'] = $order_id;
                                             $day_log['create_date'] =$date;
                                             $day_log['create_time'] =$time;
                                             $day_log['details'] =json_encode($dat);
                                             $this->Main_model->insert_commen($day_log, 'day_log');





            echo "1";
            exit;
        }
        if ($form_data->action == 'returnproduct') {
            $tablename = $form_data->tablename_sub;
            $idval = $form_data->order_product_id;
            $id = explode('|', $idval);
            $statusv = $form_data->status;
            $status = explode('|', $statusv);
            $statusfinal = array_sum($status);
            if ($statusfinal == 0) {
                $statusfinalbase = 0;
            } else {
                $statusfinalbase = 1;
            }
            for ($i = 0;$i < count($id);$i++) {
                $datass_appprox['get_id'] = $id[$i];
                $datass_appprox['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox, $tablename);
                $result = $this->Main_model->where_names($tablename, 'id', $id[$i]);
                foreach ($result as $form_data) {
                    $order_id = $form_data->order_id;
                }
                $datass_appprox_order['get_id'] = $order_id;
                $datass_appprox_order['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox_order, 'orders_process');
            }
            echo "1";
            exit;
        }
       
       
       
       
       
       
        if ($form_data->action == 'returnproduct_driver') {
            $tablename = $form_data->tablename_sub;
            $idval = $form_data->order_product_id;
            $id = explode('|', $idval);
            $statusv = $form_data->status;
            $status = explode('|', $statusv);
            $statusfinal = array_sum($status);
            if ($statusfinal == 1) {
                $statusfinalbase = 1;
            } else {
                $statusfinalbase = 2;
            }
            for ($i = 0;$i < count($id);$i++) {
                $datass_appprox['get_id'] = $id[$i];
                $datass_appprox['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox, $tablename);
                $result = $this->Main_model->where_names($tablename, 'id', $id[$i]);
                foreach ($result as $form_data) {
                    $order_id = $form_data->order_id;
                }
                $datass_appprox_order['get_id'] = $order_id;
                $datass_appprox_order['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox_order, 'orders_process');
            }
            echo "1";
            exit;
        }
        
        if ($form_data->action == 'returnproduct_driver_trip_completed') 
        {
             $otp = $form_data->otp;
             $otp = str_replace('|', '', $form_data->otp);
             $id = $form_data->id;
             $return_order_product_id = explode('|', $form_data->return_order_product_id);
             $qty = explode('|', $form_data->purchase_qty_data);
             $order_nos_data = explode('|', $form_data->order_nos_data);



             
             
              $km_reading_end = $form_data->km_reading_end;
              $rescheduling_delivery = $form_data->rescheduling_delivery;
              $rescheduling_date = $form_data->rescheduling_date;
              $rescheduling_remarks = $form_data->rescheduling_remarks;
            
             $resultmainss = $this->db->query("SELECT * FROM order_sales_return_complaints  WHERE id='" . $id . "' AND otp='".$otp."' ORDER BY id DESC");
             $resultcss = $resultmainss->result();
              
              
             if($otp!='')
             {
                 
             
                         if(count($resultcss)>0)
                         {
                            foreach($resultcss as $vlval)
                            {
                                $order_id=$vlval->order_id;
                            }
                            
                            if($rescheduling_delivery=='YES')
                            {
                                
                                
                                             for($i=0;$i<count($return_order_product_id);$i++)
                                             {
                                                 
                                                 
                                                 
                                                 $order_product_id=$return_order_product_id[$i];
                                                 if($order_product_id!='')
                                                 {
                                                     
                                                     
                                                       $this->db->query("UPDATE sales_return_products SET qty='" . $qty[$i] . "',edit_nos='" . $order_nos_data[$i] . "',return_recived_status='1' WHERE id='" . $order_product_id . "'");
                                                      
                                                      
                                                      
                                                       $resultmainss = $this->db->query("SELECT * FROM sales_return_products  WHERE id='" . $order_product_id . "'  ORDER BY id DESC");
                                                       $resultcss = $resultmainss->result();
                                                       foreach($resultcss as $vl)
                                                       {
                                                           
                                                          $purchase_order_product_id= $vl->purchase_order_product_id;
                                                          $this->db->query("UPDATE order_product_list_process SET return_status='1' WHERE id='" . $purchase_order_product_id . "'");
                                      
                                                          
                                                       }
                                                      
                                                      
                                                      
                                                
                                                 }
                                                 
                                                 
                                                 
                                                 
                                                 
                                                 
                                             }
                                             
                                                     
                                        $remarks='Return To Re-Sale Trip Completed';
                                        $this->db->query("UPDATE order_sales_return_complaints SET km_reading_end='".$km_reading_end."',order_base='5',remarks='".$remarks."' WHERE id='" . $id . "'");
                                        //$this->db->query("UPDATE orders_process SET order_base='25',reason='".$remarks."' WHERE id='" . $order_id . "'");
                                      
                                                           
                                        $datassh['c_id'] = $id;
                                        $datassh['create_date'] = $date;
                                        $datassh['create_time'] = $time;
                                        $datassh['order_base'] = 5;
                                        $datassh['remarks'] = $remarks;
                                         $datassh['user_id'] = $this->userid;
                                        $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                                             
                                             
                                
                                
                            }
                            else
                            {
                                
                                 $rescheduling_date=date('d-m-Y g:i A',strtotime($rescheduling_date));   
                                 $checkdate=date('Y-m-d',strtotime($rescheduling_date)); 


                                 $remarks='Reschedule '.$rescheduling_date;
                               

 
                                 if($checkdate==$date)
                                {

                                     $this->db->query("UPDATE order_sales_return_complaints SET rescheduling_delivery='" . $rescheduling_delivery . "',rescheduling_date='" . $checkdate . "',order_base='1',rescheduling_remarks='".$rescheduling_remarks."',remarks='".$remarks."' WHERE id='" . $id . "'");
                              

                                }
                                else
                                {

                                     $this->db->query("UPDATE order_sales_return_complaints SET rescheduling_delivery='" . $rescheduling_delivery . "',rescheduling_date='" . $checkdate. "',order_base='0',rescheduling_remarks='".$rescheduling_remarks."',remarks='".$remarks."' WHERE id='" . $id . "'");
                              

                                }


                                
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                                   
                                $datassh['c_id'] = $id;
                                $datassh['create_date'] = $date;
                                $datassh['create_time'] = $time;
                                $datassh['order_base'] = 6;
                                $datassh['remarks'] = $remarks;
                                 $datassh['user_id'] = $this->userid;
                                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
                                  
                                  
                                  
                                  
                                
                            }
                             
                             
                             
                             
                             
                         }
                         else
                         {
                             
                              $array = array('error' => '1', 'massage' => 'OTP Is Wrong');
                              echo json_encode($array);
                             
                             
                         }
                
                
             }
             else
             {
                 
                  $array = array('error' => '1', 'massage' => 'OTP Is Required');
                  echo json_encode($array);
                 
             }
            
            
            
            
        }
        
        
        
        if ($form_data->action == 'Cancel')
        {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            

            if($tablename!='orders_process')
            {
                $this->Main_model->cancelupdate($id, $tablename);
            }

            $error=0;
            
                    if($tablename=='orders_quotation')
                    {
                        
                        
                           $results = $this->Main_model->where_names($tablename, 'id', $id);
                           foreach($results as $vl)
                           {
                                $move_id=$vl->move_id;
                                $move_id_order_no=$vl->order_no;
                                
                           }
                           
                                    
                                
                                $vv['get_id'] = $move_id;
                                $vv['reason'] = 'Quotation '.$move_id_order_no;
                                $vv['order_base'] = -1;
                                //$this->Main_model->update_commen($vv, 'orders');
                            
                            
                    
                    }

                     if($tablename=='orders_process')
                    {
                        
                        
                          $tablename = $form_data->tablenamemain;
                          $id = $form_data->id;
                          $order['get_id'] = $id;
                          $order['order_base'] = 22;
                          $order['reason'] = 'MD cancel order request';

                            date_default_timezone_set("Asia/Kolkata"); 
                            $date= date('Y-m-d');
                            $time= date('h:i A');

                            $order['edit_user_id'] = $this->userid;
                            $order['edit_date'] = $date;
                            $order['edit_time'] = $time;



                                        $results = $this->Main_model->where_names($tablename, "id", $id);
                                        foreach ($results as $orders)
                                        {

                                            $error=0;
                                            if($orders->print_status==1)
                                            {
                                                $error=1;
                                            }


                                        }




                                         if($this->session->userdata['logged_in']['access']== '1') 
                                        {

                                            
                                                    
                                                     $this->Main_model->update_commen($order, $tablename);
                                                    
                                                   

                                        }
                                        else
                                        {

                                                    if($error==0)
                                                    {
                                                        $this->Main_model->update_commen($order, $tablename);
                                                    }

                                        }
                            
                            
                    
                    }



$arrayName = array('error' =>$error);   
                    echo json_encode($arrayName);
                    exit;
                  
                  
            
            
        }











    if ($form_data->action == "whatsappsend") {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $results = $this->Main_model->where_names($tablename, "id", $id);
            foreach ($results as $orders) {
                $delivery_date_time = date(
                    "d-m-Y",
                    strtotime($orders->delivery_date)
                );
                $create_date = date("d-m-Y", strtotime($orders->create_date));
                $order_no = $orders->order_no;
                $id = $orders->id;
                $customer_id = $orders->customer_id;
                $bill_total = $orders->bill_total;


                $customers_data = $this->Main_model->where_names(
                    "customers",
                    "id",
                    $customer_id
                );
                $userid_sales=0;
                foreach ($customers_data as $csvalv) {
                    $phone = $csvalv->phone;
                    $userid_sales = $csvalv->sales_team_id;
                }

                $sales_name = "";
                $sales_phone = "";
                $sales_person = $this->Main_model->where_names(
                    "admin_users",
                    "id",
                    $userid_sales
                );
                foreach ($sales_person as $sales) {
                    $sales_name = $sales->name;
                    $sales_phone = $sales->phone;
                }

               
            }


             $bill_total =  number_format($bill_total, 2, '.', ',');

            $msg = "";

            if ($tablename == "orders") {
                $base = 1;

                $msg =
                    'Greetings from Zaron Industries

Thanks for your enquiry. Please find enquiry details. 
Enquiry number: ' .
                    $order_no .
                    '

Date: ' .
                    date("d-m-Y", strtotime($create_date)) .
                    '

Enquiry value: Rs. ' .
                    $bill_total .
                    '

Sales person: ' .
                    $sales_name .
                    '
Contact: ' .
                    $sales_phone .
                    '

Detailed enquiry can be viewed in the link


' .
                    base_url() .
                    "index.php/order/order_overview?base=1&order_id=" .
                    base64_encode($id);
            }
            if ($tablename == "orders_quotation") {
                $base = 2;
                $text = "Quotation";
                $msg =
                    'Greetings from Zaron Industries

We would like to submit the Quotation for your purchase. Please find the details below

Quotation number: ' .
                    $order_no .
                    '

Date: ' .
                    date("d-m-Y", strtotime($create_date)) .
                    '

Quotation value: Rs. ' .
                    $bill_total .
                    '

Sales person: ' .
                    $sales_name .
                    '
Contact: ' .
                    $sales_phone .
                    '


Detailed Quotation can be viewed in the link 


' .
                    base_url() .
                    "index.php/order/order_overview?base=2&order_id=" .
                    base64_encode($id);
            }
            if ($tablename == "orders_process") {
                $base = 3;

                $msg =
                    'Greetings from Zaron Industries

We would like to submit the Order for your purchase. Please find the details below

Order number: ' .
                    $order_no .
                    '

Date: ' .
                    date("d-m-Y", strtotime($create_date)) .
                    '

Order value: Rs. ' .
                    $bill_total .
                    '

Sales person: ' .
                    $sales_name .
                    '
Contact: ' .
                    $sales_phone .
                    '

Detailed Order can be viewed in the link 


' .
                    base_url() .
                    "index.php/order/order_overview?base=3&order_id=" .
                    base64_encode($id);
            }

            $this->whats_app_send($phone, $msg, $tablenamemain, $id,$userid_sales);
        }











        if($form_data->action == 'Cancel_by_order') 
        {
            
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $order['get_id'] = $id;
                $order['order_base'] = 22;
                $order['reason'] = 'MD cancel order request';
                $this->Main_model->update_commen($order, $tablename);
            
            
        }
        if ($form_data->action == 'updateWeight') {
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $order['get_id'] = $id;
                $order['weight'] = $form_data->weight;
                $this->Main_model->update_commen($order, $tablename);
        }
       

         if ($form_data->action == 'updatefields')
         {



                $tablename = $form_data->tablename_sub;
                $inputname = $form_data->inputname;
                $id = $form_data->id;
                $order['get_id'] = $id;
                $order[$inputname] = $form_data->val;
                $this->Main_model->update_commen($order, $tablename);

        }

        if ($form_data->action == 'DateUpdate') {
                $tablename = $form_data->tablenamemain;
                $id = $form_data->order_id;
                $order['get_id'] = $id;
                $order['create_date'] = $form_data->create_date;
                $order['mark_date'] = $form_data->create_date;
                $this->Main_model->update_commen($order, $tablename);


               if($tablename=='orders_process')
               {



                     $this->db->query("UPDATE all_ledgers SET payment_date='".$form_data->create_date."' WHERE order_id='".$form_data->order_id."'  AND party_type=1  AND deleteid=0");





               }




        }
        if ($form_data->action == 'process_status_assign') 
        {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->product_id;
            $order_product_id = $form_data->order_product_id;
            
            $order_product_id=explode("|",$order_product_id);
            $status = $form_data->status;
            
            
            for($i=0;$i<count($order_product_id);$i++)
            {
                
                    $datass_appprox['get_id'] = $order_product_id[$i];
                    $datass_appprox['production_start'] = $status;
                    $datass_appprox['production_start_date'] = $date;
                    $datass_appprox['production_start_time'] = $time;
                    $this->Main_model->update_commen($datass_appprox, $tablename);
                    
                    $result = $this->Main_model->where_names($tablename, 'id', $order_product_id[$i]);
                    foreach ($result as $form_datas) {
                        $order_id = $form_datas->order_id;
                    }
                    
                    
                    $datass_appprox1['get_id'] = $order_id;
                    $datass_appprox1['production_assign'] = $status;
                    $datass_appprox1['reason'] = $form_data->reason;
                    $datass_appprox1['production_start_date'] = $date;
                    $datass_appprox1['production_start_time'] = $time;
                    $this->Main_model->update_commen($datass_appprox1, 'orders_process');
                    
                
            }
            
            
                   
            
          
            
            
        }
        if ($form_data->action == 'actioncalculation') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['uom'] = $form_data->values;
            $datass_appprox['profile'] = $form_data->profile;
            $datass_appprox['dim_one'] = $form_data->dim_one;
            $datass_appprox['dim_two'] = $form_data->dim_two;
            $datass_appprox['dim_three'] = $form_data->dim_three;
            $datass_appprox['crimp'] = $form_data->crimp;
            if ($form_data->nosval != '0') {
                $datass_appprox['nos'] = $form_data->nosval;
            }
            if ($form_data->factval != '0') {
                $datass_appprox['fact'] = str_replace("-", "", $form_data->factval);
            }
            
            
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'appprox') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->order_id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['approx'] = $form_data->appprox_status;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'qtymodifiy') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['modify_qty'] = $form_data->qty;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }


         if ($form_data->action == 'defaultupdateMain') 
         {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox[$form_data->inputname] = $form_data->value;
            if($form_data->inputname=='shipping_address')
            {
                    
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $form_data->value);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {  
                       
                        $locality = $customers_adddrss_v->locality;
                        
                    }



                     if($form_data->value==0)
                     {

                         $customers_adddrss = $this->Main_model->where_names($tablename, 'id', $id);
                         foreach ($customers_adddrss as $customers_adddrss_v)
                         {  
                            $customer_id = $customers_adddrss_v->customer_id;
                         }

                         $customers = $this->Main_model->where_names('customers', 'id', $customer_id);
                         foreach ($customers as $csval) {
                               
                          $locality = $csval->locality;

                         }


                     }
            




                     $route_id = 0;
                     $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
                     foreach ($loc_name_id as $valc) {
                      
                       
                         $route_id = $valc->route_id;
                     }


                     if($route_id>0)
                     {
                         $datass_appprox['route_id'] = $route_id;
                     }



                


            }




            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
        
         if ($form_data->action == 'statuschangepickupall') 
        {




                                $tablename = $form_data->tablenamemain;
                                $id = $form_data->trip_id;
                              


                                $result = $this->Main_model->where_names($tablename,'trip_id', $id);
                                foreach ($result as $form_datavv) {
                                   
                                    if($form_datavv->assign_status==12)
                                    {
                                        $trip_id = $form_datavv->trip_id;




                                           
                                        $datass['get_id'] = $form_datavv->id;
                                        $datass['assign_status'] = 1;
                                        $datass['assign_status_1_date'] = date('Y-m-d');
                                        $datass['reason'] = "Driver Picked";
                                        

                                        $this->db->query("UPDATE order_delivery_order_status SET 
                                        assign_status_1_date='".$datass['assign_status_1_date']."'
                                        WHERE trip_id='".$trip_id."' AND assign_status=12 AND deleteid=0");

                                        $this->Main_model->update_commen($datass, $tablename);
                                        

                                    }
                                    
                                }








        }
        
        if ($form_data->action == 'statuschange') 
        {




                                
 $tablename = $form_data->tablenamemain;
                                $id = $form_data->id;
                                $return_id = $form_data->return_id;
                                $start_reading = $form_data->start_reading;
                                 $randam_id = $form_data->randam_id;

$end_reading=strlen($start_reading);
if($end_reading<=6)
{


                                $datass_appprox['get_id'] = $id;
                                $datass_appprox['assign_status'] = 2;
                                $datass_appprox['assign_status_2_date'] = date('Y-m-d');
                                $datass_appprox['start_reading'] = $start_reading;
                                $datass_appprox['otp'] ='1234';

                                if($return_id>0)
                                {
                                     $datass_appprox['reason'] = "Driver Return Trip Started";
                                     $datass['reason'] = "Driver Return Trip Started";
                                }
                                else
                                {
                                     $datass_appprox['reason'] = "Driver Trip Started";
                                     $datass['reason'] = "Driver Trip Started";
                               

                                }

                                

                                $datass_appprox['trip_start_date'] = $date;
                                $datass_appprox['trip_start_time'] = $time;
                                $this->Main_model->update_commen($datass_appprox, $tablename);



                                $datass_appproxss['get_id'] = $return_id;
                                $datass_appproxss['remarks'] = "Driver Trip Started";
                                $datass_appproxss['start_reading'] = $start_reading;
                                $datass_appproxss['trip_start_date'] = $date;
                                $datass_appproxss['trip_start_time'] = $time;
                                $datass_appproxss['order_base'] = 4;
                                $datass_appproxss['otp'] ='1234';
                                if($return_id>0)
                                {
                                     $this->Main_model->update_commen($datass_appproxss, 'order_sales_return_complaints');
                                }
                               


                                $result = $this->Main_model->where_names($tablename,'id', $id);
                                foreach ($result as $form_datavv) {
                                   
                                    $trip_id = $form_datavv->trip_id;
                                }


                                 $results =  $this->db->query("SELECT * FROM order_delivery_order_status WHERE randam_id='" . $randam_id. "'");
                                 $results = $results->result();
                                 //$this->Main_model->where_names($tablename, 'id', $form_data->order_id);
                                 foreach ($results as $form_data_vals) 
                                 {

                                    $trip_id = $form_data_vals->trip_id;
                                   
                            
                                 }


                                $datass['get_id'] = $trip_id;
                                $datass['assign_status'] = 2;
                                $datass['assign_status_2_date'] = date('Y-m-d');
                                $datass['trip_start_date'] = $date;
                                $datass['trip_start_time'] = $time;
                                $datass['start_reading'] = $start_reading;
                                $datass['otp'] ='1234';
                                $this->Main_model->update_commen_where($datass, 'trip_id', $tablename);
                                //$this->Main_model->update_commen_where_two($datass, 'trip_id','assign_status','1', $tablename);



                                $datass1['get_id'] = $trip_id;
                                //$datass1['order_base'] = 4;
                                $datass1['order_base'] = 2;
                                $datass1['remarks'] = "Driver Trip Started";
                                $datass1['trip_start_date'] = $date;
                                $datass1['trip_start_time'] = $time;
                                $datass1['start_reading'] = $start_reading;
                                $datass1['otp'] ='1234';
                                
                                //$this->Main_model->update_commen_where($datass, 'trip_id', $tablename);
                                $this->Main_model->update_commen_where_two($datass1, 'trip_id','order_base','1', 'order_sales_return_complaints');


           $this->db->query("UPDATE order_delivery_order_status SET 
            reason='Driver Trip Started',
            assign_status='2',
            finance_status='3',
            dispatch_load_status='1',
            km_reading_end='0',
            dispath_load_status_view='1',
            seq_status='1',
            assign_status_2_date='" . $datass_appprox['assign_status_2_date'] . "',
            trip_start_date='" . $datass_appprox['trip_start_date'] . "',
            trip_start_time='" . $datass_appprox['trip_start_time'] . "',
            otp='" . $datass_appprox['otp'] . "',
            trip_end_date=NULL,
            assign_status='" . $datass_appprox['assign_status'] . "',
            start_reading='" . $datass_appprox['start_reading'] . "'
            WHERE  trip_id='".$trip_id."' AND dispatch_status=1 AND deleteid=0");





            $id = $form_data->id;
            $results = $this->Main_model->where_names(
                'order_delivery_order_status',
                "trip_id",
                $trip_id
            );
            foreach ($results as $orders)
            {

                $delivery_date_time = $orders->delivery_date_time;
                
                $id = $orders->order_id;

                 $orders_val = $this->Main_model->where_names(
                    "orders_process",
                    "id",
                    $id
                 );
                 foreach($orders_val as $vll)
                 {

                $create_date = date("d-m-Y", strtotime($vll->create_date));
                $order_no = $vll->order_no;
                $customer_id = $vll->customer_id;
                $bill_total = $vll->bill_total;
               
                 }



                  $vehicle_id = $orders->vehicle_id;

              



                $otp = $orders->otp;


                $sort_id='1 St';
                if($orders->sort_id>0)
                {
                    $sort_id=$orders->sort_id;
                    if($sort_id==1)
                    {
                         $sort_id='1 St';
                    }
                    elseif($sort_id==2)
                    {
                            $sort_id='2 nd';
                    }
                    elseif($sort_id==3)
                    {
                            $sort_id='3 rd';
                    }
                    else
                    {
                            $sort_id=$sort_id.' th';
                    }
                }

                
                $sales_name = "";
                $sales_phone = "";
                $sales_person = $this->Main_model->where_names(
                    "admin_users",
                    "id",
                    $orders->user_id
                );
                foreach ($sales_person as $sales) {
                    $sales_name = $sales->name;
                    $sales_phone = $sales->phone;
                }

                $customers_data = $this->Main_model->where_names(
                    "customers",
                    "id",
                    $customer_id
                );
                    $userid_sales=0;
                    foreach ($customers_data as $csvalv) {
                        $phone = $csvalv->phone;
                         $userid_sales = $csvalv->sales_team_id;
                    }


                $result = $this->Main_model->where_names(
                    "vehicle",
                    "id",
                    $vehicle_id
                );
                foreach ($result as $value) {
                    $vehicle_name = $value->vehicle_name;
                    $vehicle_number = $value->vehicle_number;
                }

              
                                   $result = $this->Main_model->where_names(
                                        "driver",
                                        "vehicle_id",
                                        $vehicle_id
                                    );
                                    foreach ($result as $value) 
                                    {
                                        $driver_id = $value->id;
                                        $driver_name = $value->name.' | '.$value->phone;
                                        
                                    }


                $msg =
                    'Greetings from Zaron Industries

 Your order number  ' .
                    $order_no .
                    " is out for delivery ('".$sort_id."' delivery) through the vehicle number  " .
                    $vehicle_number .
                    "  on " .
                    $delivery_date_time .
                     "  Driver " .
                    $driver_name .
                    '

Please share the OTP ' .
                    $otp .
                    " with our delivery person to fulfil the delivery process";

                if ($orders->assign_status == 2) {
                    $this->whats_app_send($phone, $msg, $tablename, $id,$userid_sales);
                }
            }


    }






        }



         if ($form_data->action == 'statusChange_seq')
        {



           
            $trip_id = $form_data->trip_id;
          
           
            $datass_appprox['reason'] = "Driver Sequence Updated";
 //$this->db->query("UPDATE orders_process SET seq_status='1',assign_status='11',reason='" . $datass_appprox['reason'] . "' WHERE trip_id='" . $trip_id . "'");


  if($trip_id!='0')
  {


              $resultmainss = $this->db->query("SELECT * FROM orders_process  WHERE trip_id='" . $trip_id . "' AND finance_status=3 ORDER BY id DESC");
             $resultcss = $resultmainss->result();
             foreach($resultcss as $vlval)
             {
                                $dispath_load_status_view=$vlval->dispath_load_status_view;
                                if($dispath_load_status_view==0)
                                {


            $datass_appprox['reason'] = "Driver Sequence Updated";
            $this->db->query("UPDATE orders_process SET finance_status='3',seq_status='1',assign_status='11',assign_status_12_date=NULL, assign_status_2_date= NULL, assign_status_3_date=NULL  ,reason='" . $datass_appprox['reason'] . "' WHERE trip_id='" . $trip_id . "'");


 $this->db->query("UPDATE order_delivery_order_status SET finance_status='3',seq_status='1',assign_status='11',reason='" . $datass_appprox['reason'] . "' WHERE  trip_id='".$trip_id."' AND dispatch_status=1 AND deleteid=0");

                                }
                                else
                                {

            $datass_appprox['reason'] = "Driver Loaded Pending";
            $this->db->query("UPDATE orders_process SET finance_status='3',seq_status='1',assign_status='12',dispath_load_status_view=1,dispatch_load_status=1,reason='" . $datass_appprox['reason'] . "' WHERE id='" . $vlval->id . "'");



              $this->db->query("UPDATE order_delivery_order_status SET finance_status='3',seq_status='1',assign_status='12',dispath_load_status_view=1,dispatch_load_status=1,reason='" . $datass_appprox['reason'] . "' WHERE  trip_id='".$trip_id."' AND dispatch_status=1 AND deleteid=0");

              


                                }


             }




}




        }



         if ($form_data->action == 'statusChange_seq')
        {



           
            $trip_id = $form_data->trip_id;
            $randam_id = $form_data->randam_id;
          
           
             $resultmainss = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE trip_id='" . $trip_id . "' ORDER BY id DESC");
             $resultcss = $resultmainss->result();
             foreach($resultcss as $vlval)
             {
                                $dispath_load_status_view=$vlval->dispath_load_status_view;
                                if($dispath_load_status_view==0)
                                {


            $datass_appprox['reason'] = "Driver Sequence Updated";
            $this->db->query("UPDATE orders_process SET seq_status='1',assign_status='11',assign_status_12_date=NULL, assign_status_2_date= NULL, assign_status_3_date=NULL  ,reason='" . $datass_appprox['reason'] . "' WHERE trip_id='" . $trip_id . "'");

            $this->db->query("UPDATE order_delivery_order_status SET seq_status='1',assign_status='11',reason='" . $datass_appprox['reason'] . "' WHERE id='".$vlval->id."' AND trip_id='".$trip_id."' AND dispatch_status=1 AND deleteid=0");


                                }
                                else
                                {

            $datass_appprox['reason'] = "Driver Loaded Pending";
            $this->db->query("UPDATE orders_process SET seq_status='1',assign_status='12',dispath_load_status_view=1,dispatch_load_status=1,reason='" . $datass_appprox['reason'] . "' WHERE id='" . $vlval->id . "'");

            $this->db->query("UPDATE order_delivery_order_status SET seq_status='1',assign_status='12',dispath_load_status_view=1,dispatch_load_status=1,reason='" . $datass_appprox['reason'] . "' WHERE id='".$vlval->id."' AND trip_id='".$trip_id."' AND dispatch_status=1 AND deleteid=0");


                                }


             }


          

        }

        if ($form_data->action == 'canceltrip')
        {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
           
            $km_reading_end = $form_data->km_reading_end;
            $datass_appprox['get_id'] = $id;
           
            $datass_appprox['order_base'] = 3;
        
            $datass_appprox['km_reading_end'] = $km_reading_end;
            $datass_appprox['remarks'] = "Driver Trip Revoked";
            $datass_appprox['trip_end_date'] = $date;
            $datass_appprox['trip_end_time'] = $time;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
        
        if ($form_data->action == 'weightupdate')
        {
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $gate_weight = $form_data->gate_weight;
                $datass_appprox['get_id'] = $id;
                $datass_appprox['gate_status'] = 1;
                $datass_appprox['gate_weight'] = $gate_weight;
                $datass_appprox['reason'] = "Gate Weight Updated";
                $datass_appprox['gate_date'] = $date;
                $datass_appprox['gate_time'] = $time;
                $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
          if ($form_data->action == 'statuschangeReturn') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $start_reading = $form_data->start_reading;
            $datass_appprox['get_id'] = $id;
            //$datass_appprox['order_base'] = 4;
            $datass_appprox['order_base'] = 2;
            $datass_appprox['start_reading'] = $start_reading;
            $datass_appprox['remarks'] = "Driver Trip Started";
            $datass_appprox['trip_start_date'] = $date;
            $datass_appprox['trip_start_time'] = $time;
            $this->Main_model->update_commen($datass_appprox, $tablename);
            
            
            
                $datassh['c_id'] = $form_data->id;
                $datassh['create_date'] = $date;
                $datassh['create_time'] = $time;
                $datassh['order_base'] = 4;
                $datassh['remarks'] = 'Driver Trip Started';
                 $datassh['user_id'] = $this->userid;
                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
            
            
            
            
            
            
            
            
            
            
            
            
        }
        

          if($form_data->action == 'loadcompleted_save')
          {
                    $tablename = $form_data->tablenamemain;
                    $id = $form_data->order_id;
                    $driver_pickip = $form_data->driver_pickip;
                    $datass_appprox['get_id'] = $id;
                    
                    
                    $datass_appprox['loading_status'] = 0;
                    if($driver_pickip==0)
                    {
                        
                        
                      
                         $datass_appprox['reason'] = "Dispatch Saved";
                         
                    }
                    else
                    {

                         $datass_appprox['reason'] = "Driver PickUP Saved";
                       
                         
                    }
                    $st['get_id']=$id;
                    $this->Main_model->update_commen($datass_appprox, $tablename);


                                              $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) {
                                                                $username=$team->name.' - '.$this->userid;
                                                                
                                             }
                                            $day_log['username'] = $username;
                                            $day_log['changes'] = '';
                                            $day_log['table_name'] = $tablename;
                                            $day_log['reference_no'] = $id;
                                            $day_log['create_date'] =$date;
                                            $day_log['create_time'] =$time;
                                            $day_log['details'] =$datass_appprox['reason'];
                                            $this->Main_model->insert_commen($day_log, 'day_log');
             




            
            
         }

        
         

         if ($form_data->action == 'loadcompleted') {




           

            $tablename = $form_data->tablenamemain;
            $id = $form_data->order_id;
            $driver_pickip = $form_data->driver_pickip;
            $DC_id = $form_data->DC_id;
            $datass_appprox['get_id'] = $id;
            $results = $this->Main_model->where_names("orders_process","id",$id);


                   // At initial set 0 for enable_load_pending column value to 0
                   $this->db->query("UPDATE order_product_list_process SET enable_load_pending='0' WHERE order_id='".$id."'");  

$this->db->query("UPDATE order_delivery_order_status SET deleteid='1002',finance_status=2 WHERE order_id='".$id."' AND finance_status=1001 AND deleteid=1001");


             // gg changes Return removal update

             $this->db->query("UPDATE order_product_list_process SET return_status='0' WHERE randam_id='".$DC_id."' AND dispatch_status='1'");    
             
             $this->db->query("UPDATE orders_process SET return_amount=0 WHERE id='".$id."'");  
             $this->db->query("UPDATE order_delivery_order_status SET return_amount='0' WHERE randam_id='".$DC_id."' AND order_id='".$id."' AND deleteid=0");
             
            foreach ($results as $orders) {


                    $order_no = $orders->order_no;
                    $id = $orders->id;
                    $customer_id = $orders->customer_id;
                    $bill_total = $orders->bill_total;
                    $delivery_status = $orders->delivery_status;
                    $assign_status = $orders->assign_status;
                    $full_delivery = $orders->full_delivery;
                    $return_id = $orders->return_id;
                    $trip_id = $orders->trip_id;
                    $payment_mode_data = $orders->payment_mode;


            }




$this->db->query("UPDATE order_delivery_order_status SET delivery_mode='Partial',deleteid='0' WHERE order_id='".$form_data->order_id."' AND deleteid='88'");


            $this->db->query("UPDATE orders_process SET dispath_load_status_view='1'   WHERE trip_id='".$trip_id."'");
            //$datass_appprox['loading_status'] = 0;
            if($driver_pickip==0)
            {



                
                 
                 $datass_appprox['assign_status'] = 12;
                 $datass_appprox['assign_status_12_date'] = date('Y-m-d');
                 $datass_appprox['assign_status_2_date'] = NULL;
                 $datass_appprox['assign_status_3_date'] = NULL;

                 $datass_appprox['finance_status'] = 3;
                 $datass_appprox['dispatch_load_status'] = 1;
                 $datass_appprox['reason'] = "Dispatch Loaded";


                    $lengeth=0;
                    
                    $lengeth_array=array(0);
                    $query_profle_get = $this->db->query("SELECT MAX(profile) as profile FROM order_product_list_process  WHERE order_id='".$id."' AND randam_id='".$DC_id."' AND deleteid=0");
                    $result_lengeth = $query_profle_get->result();
                    foreach ($result_lengeth as $valuess) {
                        $lengeth_array[] = $valuess->profile;
                    }
                    
                    $lengeth=max($lengeth_array);
                    $lengeth=round($lengeth,2);


                    $weighttotal=0;
                    $query_weight_get = $this->db->query("SELECT SUM(weight) as totalweight FROM order_product_list_process  WHERE order_id='".$id."' AND randam_id='".$DC_id."' AND deleteid=0");
                    $result_totalweight = $query_weight_get->result();
                    foreach ($result_totalweight as $we) {
                        $weight = $we->totalweight;

                        $weighttotal += $we->totalweight;
                    }
            
            
                   $datass_appprox['lengeth_max'] = $lengeth;
                   $datass_appprox['weighttotal'] = $weighttotal;


                 $full_delivery =0;

                 $results = $this->Main_model->where_names(
                    "orders_process",
                    "id", $id
                 );
                foreach ($results as $orders) {
                    $delivery_date_time = date(
                        "d-m-Y",
                        strtotime($orders->delivery_date)
                    );
                    $create_date = date(
                        "d-m-Y",
                        strtotime($orders->create_date)
                    );
                    $order_no = $orders->order_no;
                    $id = $orders->id;
                    $customer_id = $orders->customer_id;
                    $bill_total = $orders->bill_total;
                    $delivery_status = $orders->delivery_status;
                    $assign_status = $orders->assign_status;
                    $full_delivery = $orders->full_delivery;
                    $return_id = $orders->return_id;

                    
                    $vehicle_number = "";
                    $vehicle_name = "";
                    $vehicle = $this->Main_model->where_names(
                        "vehicle",
                        "id",
                        $orders->vehicle_id
                    );
                    foreach ($vehicle as $vehicle_v) {
                        $vehicle_name = $vehicle_v->vehicle_name;
                        $vehicle_number = $vehicle_v->vehicle_number;
                        $vehicle_id = $vehicle_v->id;
                    }

                    $customers_data = $this->Main_model->where_names(
                        "customers",
                        "id",
                        $customer_id
                    );
                    $userid_sales=0;
                    foreach ($customers_data as $csvalv) {
                        $phone = $csvalv->phone;
                         $userid_sales = $csvalv->sales_team_id;
                    }


                                    $result = $this->Main_model->where_names(
                                        "driver",
                                        "vehicle_id",
                                        $vehicle_id
                                    );
                                    foreach ($result as $value) 
                                    {
                                        $driver_id = $value->id;
                                        $driver_name = $value->name.' | '.$value->phone;
                                        
                                    }


                }

                $msg =
                    'Greetings from Zaron Industries

Your order number  ' .
                    $order_no .
                    " will be dispatched through the vehicle number  " .
                    $vehicle_number .
                    " Driver  " .
                    $driver_name .
                    " on " .
                    $delivery_date_time;

                $this->whats_app_send($phone, $msg, "orders_process", $id,$userid_sales);


  $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
  $querygettrips = $this->db->query("SELECT ds.trip_id FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.vehicle_id='".$vehicle_id."' AND ds.assign_status IN ('11','12') AND  ds.finance_status=3 AND ds.dispath_load_status_view=0 ORDER BY a.id DESC");
  $trips= $querygettrips->result();
  $this->db->query("UPDATE vehicle SET assiend_count='".count($trips)."'  WHERE id='".$vehicle_id."'");






            }
            else
            {

                 $datass_appprox['finance_status'] = 3;
                 $datass_appprox['assign_status'] = 1;           
                 $datass_appprox['assign_status_1_date'] = date('Y-m-d');
                 $datass_appprox['reason'] = "Driver Picked";


                 // gg changes
                 //$this->db->query("UPDATE order_product_list_process SET delivery_status='2' WHERE  delivery_status='0' AND order_id ='" . $id . "' AND dispatch_status ='1' AND loadstatus='1' AND dispatch_status='1'"); 

                 // gg changes driver confirmation
                  $this->db->query("UPDATE sales_load_products SET driver_confirmation='1' WHERE randam_id='".$DC_id."'");

                 
            }
            
             $datass_appprox['otp'] = '1234';
             //$datass_appprox['trip_id'] = substr(time(), 4);

           
            $datass_appprox['loading_date'] = $date;
            $datass_appprox['loading_time'] = $time;
            
            $resultmain = $this->db->query("SELECT SUM(b.nos+b.dispatch_nos) as totalnosload FROM order_product_list_process as a JOIN sales_load_products as b ON a.id=b.order_product_id WHERE a.order_id='" . $form_data->order_id . "' AND a.deleteid='0' AND b.randam_id='".$DC_id."' ORDER BY a.id DESC");
            $resultcs = $resultmain->result();
            $totalproductcount=$resultcs[0]->totalnosload;
            
            
            $resultmainss = $this->db->query("SELECT SUM(b.nos) as totalnosload FROM order_product_list_process as a JOIN sales_load_products as b ON a.id=b.order_product_id WHERE a.order_id='" . $form_data->order_id . "' AND a.deleteid='0' AND b.loadstatus=1 AND b.randam_id='".$DC_id."' ORDER BY a.id DESC");
            $resultcss = $resultmainss->result();
            $totalproductcountloadstatus=$resultcss[0]->totalnosload;


//$this->db->query("UPDATE order_delivery_order_status SET deleteid='0' WHERE order_id='".$form_data->order_id."' AND deleteid='88'");

            $pack_approved_status=0;
            if($driver_pickip==1)
            {
                
                     if($totalproductcount!=$totalproductcountloadstatus)
                    {


                          if($full_delivery==1)
                          {


                              if($return_id>0)
                              {
                                   $datass_appprox['loading_status'] = 1;
                                   $datass_appprox['reason'] = "Partial Return Loaded";
                              }
                              else
                              {
                                  $datass_appprox['loading_status'] = 0;
                                  $datass_appprox['reason'] = "Driver Loaded";
                              }
                              

                          }
                          else
                          {




                              $datass_appprox['loading_status'] = 1;
                              $datass_appprox['reason'] = "Driver Partial Loaded";
                              $pack_approved_status=1;



                          }

                         
                    }
                    else
                    {
                              if($return_id>0)
                              {
                                $datass_appprox['loading_status'] = 0;
                                $datass_appprox['reason'] = "Return Loaded";
                              }
                              else
                              {
                                $datass_appprox['loading_status'] = 0;
                              }
                    }

                
   
                    
                
            }
            else
            {
                
                    if($totalproductcount!=$totalproductcountloadstatus)
                    {



                          if($full_delivery==1)
                          {


                              if($return_id>0)
                              {
                                   $datass_appprox['loading_status'] = 1;
                                   $datass_appprox['reason'] = "Partial Return Loaded";
                              }
                              else
                              {
                                   $datass_appprox['loading_status'] = 0;
                                   $datass_appprox['reason'] = "Driver Loaded";
                              }

                            
                          }
                          else
                          {


$collection_remarks_2=0;
 $allcheck = $this->db->query("SELECT id,SUM(collection_remarks_2) as collection_remarks_2 FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND randam_id IS NOT NULL");
                                            $allcheck = $allcheck->result();
                                           foreach ($allcheck as  $df) 
                                           {
                                             $collection_remarks_2=$df->collection_remarks_2;
                                           }


$collection_remarks_2_set=$bill_total-$collection_remarks_2;




                                             $datass_appprox['loading_status'] = 1;
                                             $datass_appprox['reason'] = "Dispatch Partial Loaded";
                                             $pack_approved_status=1;


                                             $dil_status['dispatch_status'] = 0;
                                             $dil_status['assign_status'] = 0;
                                             $dil_status['collection_remarks'] = 0;
                                             $dil_status['order_id'] = $form_data->order_id;
                                             $dil_status['order_no'] = $order_no;
                                             $dil_status['finance_status'] = 2;
                                             $dil_status['reason'] = 'Partial Dispatched Yet to confirm';
                                             $dil_status['delivery_mode'] = 'Partial';
                                             $dil_status['collection_remarks_2'] = $collection_remarks_2_set;
                                             $dil_status['total_picked_amount'] = $collection_remarks_2_set;
                                             $dil_status['assign_status_0_date'] = date('Y-m-d');

                                             
                                             $dil_status['create_date'] = $date;
                                             $dil_status['payment_mode'] = $payment_mode_data;
                                             $dil_status['create_time'] = $time;
                                             $dil_status['delivery_date'] =$date;
                                             $dil_status['delivery_time'] =$time;
                                             $dil_status['customer_id'] =$customer_id;


                                            $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND randam_id IS NULL  ");
                                            $allcheck = $allcheck->result();
                                            if(count($allcheck)==0)
                                            {

                                                //echo'<pre>'; print_r(12345);exit;
                                             $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');



                                             }


$this->db->query("UPDATE order_delivery_order_status SET reason='Partial Dispatched Yet to confirm',deleteid='0' WHERE order_id='".$form_data->order_id."' AND deleteid='88'");
$this->db->query("UPDATE order_delivery_order_status SET delivery_mode='Partial' WHERE randam_id='".$DC_id."' AND deleteid=0");

                                             $this->db->query("UPDATE sales_load_products SET randam_id=NULL,pickedstatus=0,dispatch_load=0 WHERE order_id='".$form_data->order_id."' AND loadstatus=0 AND pickedstatus=1");
                                             


                                    // update enable_load_pending status

                                    $this->db->query("UPDATE order_product_list_process SET enable_load_pending=1 WHERE order_id='".$form_data->order_id."'  AND picked_status=1 AND loadstatus=0 AND randam_id='".$DC_id."'");

                                    // gg changes to change order_delivery_order_status_load 1 to 0
                                       
                                    $this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status=0,picked_status=0,order_delivery_order_status_load=0 WHERE order_id='".$form_data->order_id."'  AND picked_status=1 AND randam_id='".$DC_id."'"); 









                                          
                          }




                          //$datass_appprox['loading_status'] = 1;
                          
                    }
                    else
                    {



               $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE order_id='" . $form_data->order_id . "'  AND deleteid=0 ORDER BY id DESC");
               $checkcount = $checkcount->result();

              $resultmainss = $this->db->query("SELECT SUM(qty) as totalqty FROM sales_load_products  WHERE order_id='" . $form_data->order_id . "' AND pickedstatus=1   ORDER BY id DESC");
              $resultcss = $resultmainss->result();


                $firsttotal=round($checkcount[0]->totalqty);
                $secondtotal=round($resultcss[0]->totalqty);
                 if($firsttotal!=$secondtotal)
                 {



$collection_remarks_2=0;
 $allcheck = $this->db->query("SELECT id,SUM(collection_remarks_2) as collection_remarks_2 FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND randam_id IS NOT NULL");
                                            $allcheck = $allcheck->result();
                                           foreach ($allcheck as  $df) {
                                             $collection_remarks_2=$df->collection_remarks_2;
                                           }


$collection_remarks_2_set=$bill_total-$collection_remarks_2;






                              $dil_status_first['dispatch_status'] = 0;
                              $dil_status_first['assign_status'] = 0;
                              $dil_status_first['collection_remarks'] = 0;
                              $dil_status_first['order_id'] = $form_data->order_id;
                              $dil_status_first['order_no'] = $order_no;
                              $dil_status_first['customer_id'] = $customer_id;
                              $dil_status_first['finance_status'] = 2;
                              $dil_status_first['reason'] = 'Partial Pick Pending';
                              $dil_status_first['delivery_mode'] = 'Partial';
                              $dil_status_first['create_date'] = $date;
                              $dil_status_first['create_time'] = $time;
                              $dil_status_first['delivery_date'] =$date;
                              $dil_status_first['delivery_time'] =$time;
                              $dil_status_first['collection_remarks_2'] = $collection_remarks_2_set;
                              $dil_status_first['total_picked_amount'] = $collection_remarks_2_set;
                              $dil_status_first['assign_status_0_date'] = date('Y-m-d');


                               if($delivery_status==2)
                              {


                                if($return_id==0)
                                {


                                     $ssd = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE randam_id='" . $DC_id . "' AND return_base=1");
                                    $ssd = $ssd->result();
                                    $ssd=count($ssd);
                                    if($ssd==0)
                                    {




                                           $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND finance_status=2 AND deleteid='88'");
                                            $allcheck = $allcheck->result();
                                            if(count($allcheck)==0)
                                            {

                                              // echo'<pre>'; print_r(1234);exit;

$this->Main_model->insert_commen($dil_status_first, 'order_delivery_order_status');
$this->db->query("UPDATE order_delivery_order_status SET delivery_mode='Partial' WHERE order_id='".$form_data->order_id."' AND deleteid=0"); 

                                            }
                                            else
                                            {

                                              
$this->db->query("UPDATE order_delivery_order_status SET reason='Partial Pick Pending',delivery_mode='Partial',collection_remarks_2='".$collection_remarks_2_set."',total_picked_amount='".$collection_remarks_2_set."',deleteid=0 WHERE  finance_status=2 AND deleteid='88' AND order_id='".$form_data->order_id."'"); 


                                            }




                                                    $resultcheck = $this->Main_model->where_names('sales_load_products', 'order_id', $form_data->order_id);
                                                    if(count($resultcheck)>0)
                                                    {

                                                           foreach($resultcheck as $vlset)
                                                          {
                                                                   if($vlset->pickedstatus==1)
                                                                   {


               $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE id='" . $vlset->order_product_id . "'  AND deleteid=0 ORDER BY id DESC");
               $checkcount = $checkcount->result();

               $resultmainss = $this->db->query("SELECT SUM(qty) as totalqty FROM sales_load_products  WHERE order_product_id='" . $vlset->order_product_id . "' AND pickedstatus=1   ORDER BY id DESC");
               $resultcss = $resultmainss->result();


                 $firsttotal=round($checkcount[0]->totalqty);
                 $secondtotal=round($resultcss[0]->totalqty);
                 if($firsttotal!=$secondtotal)
                 {
                       
$this->db->query("UPDATE order_product_list_process SET picked_status='0',randam_id=NULL WHERE id='" . $vlset->order_product_id . "'");

                 }



                                                                   }

                                                          }


                                                    }




                                    }


                                    if($ssd>0)
                                    {



                    $this->db->query("UPDATE order_delivery_order_status SET finance_status='3',assign_status='1',reason='Driver Return Trip Assigned' WHERE order_id='".$form_data->order_id."'  AND randam_id='".$DC_id."' AND deleteid=0");    




                                    }







                                }



                            }


                 }


      



                                  


                              if($return_id>0)
                              {


                                        $datass_appprox['loading_status'] = 1;
                                        $datass_appprox['reason'] = "Return Loaded";

                                        $collection_remarks_2=0;
                                        $allcheck = $this->db->query("SELECT id,SUM(collection_remarks_2) as collection_remarks_2 FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND randam_id IS NOT NULL");
                                                                                   $allcheck = $allcheck->result();
                                                                                  foreach ($allcheck as  $df) {
                                                                                    $collection_remarks_2=$df->collection_remarks_2;
                                                                                  }
                                        
                                        
                                        $collection_remarks_2_set=$bill_total-$collection_remarks_2;
                                        
                                        
                                        
                                        
                                                                                  
                                        
                                        
                                                                                    $dil_status['dispatch_status'] = 0;
                                                                                    $dil_status['assign_status'] = 0;
                                                                                    $dil_status['collection_remarks'] = 0;
                                                                                    $dil_status['order_id'] = $form_data->order_id;
                                                                                    $dil_status['order_no'] = $order_no;
                                                                                    $dil_status['finance_status'] = 2;
                                                                                    $dil_status['reason'] = 'Return Partial Dispatched Yet to confirm';
                                                                                    $dil_status['delivery_mode'] = 'Partial';
                                                                                    $dil_status['collection_remarks_2'] = 0.2;
                                                                                    $dil_status['return_id']=$return_id;
                                                                                    $dil_status['total_picked_amount'] =  0.2;
                                                                                    $dil_status['assign_status_0_date'] = date('Y-m-d');
                                                                                    
                                                                                    $dil_status['create_date'] = $date;
                                                                                    $dil_status['payment_mode'] = $payment_mode_data;
                                                                                    $dil_status['create_time'] = $time;
                                                                                    $dil_status['delivery_date'] =$date;
                                                                                    $dil_status['delivery_time'] =$time;
                                                                                    $dil_status['customer_id'] =$customer_id;
                                        
                                        
                                                                                   $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND randam_id IS NULL  AND finance_status=2");
                                                                                   $allcheck = $allcheck->result();
                                                                                   if(count($allcheck)==0)
                                                                                   {
                                        


                            //comment by gg changes
                            $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');
                                        
                                        
                                        
                                                                                    }
                                        
                                        
                                        
                $this->db->query("UPDATE order_delivery_order_status SET reason='Return Partial Dispatched Yet to confirm',deleteid='0' WHERE order_id='".$form_data->order_id."' AND deleteid='88' AND finance_status=2");

                                        $this->db->query("UPDATE order_delivery_order_status SET delivery_mode='Partial' WHERE randam_id='".$DC_id."' AND deleteid=0");
                                        $this->db->query("UPDATE sales_load_products SET randam_id=NULL,pickedstatus=0,dispatch_load=0 WHERE order_id='".$form_data->order_id."' AND loadstatus=0 AND pickedstatus=1");




                                             // update enable_load_pending status

                                    $this->db->query("UPDATE order_product_list_process SET enable_load_pending=1 WHERE order_id='".$form_data->order_id."'  AND picked_status=1 AND loadstatus=0 AND randam_id='".$DC_id."'");
                                 
                                                                                    
                                                                           // gg changes to change order_delivery_order_status_load 1 to 0
                                        $this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status=0,picked_status=0,order_delivery_order_status_load=0 WHERE order_id='".$form_data->order_id."'  AND picked_status=1 AND randam_id='".$DC_id."'"); 
                                        
                                        
                                        
                                        


                              }
                              else
                              {
                                $datass_appprox['loading_status'] = 0;
                              }
                         
                    }


                 
                
            }



  



                                $result = $this->Main_model->where_names($tablename,'id', $id);
                                foreach ($result as $form_datavv) {
                                   
                                    $delivery_status = $form_datavv->delivery_status;
                                }

                                $delivery_status_return=0;
                                $result_return = $this->Main_model->where_names('order_sales_return_complaints','id', $return_id);
                                foreach ($result_return as $form_datavv_return) {
                                   
                                    $delivery_status_return = $form_datavv_return->delivery_status;
                                }


                                if($delivery_status_return==1)
                                {

                                      $datass_appprox['finance_status'] = 5;
                                      $datass_appprox['assign_status'] = 3;
                                      $datass_appprox['reason'] = "Return To Sale Completed";
                                      date_default_timezone_set("Asia/Kolkata"); 
                                      $date= date('Y-m-d');
                                      $time= date('h:i A');
                                      $datass_appprox['trip_end_date'] = $date;
                                      $datass_appprox['trip_end_time'] = $time;

        $this->db->query("UPDATE order_sales_return_complaints SET order_base=2,inward_status=13,remarks='Client Scope Return Completed' WHERE id='" . $return_id ."'"); 



                                }

// gg changes for scope task

                                if($delivery_status==1)
                                {

                                      $datass_appprox['finance_status'] = 4;
                                      //$datass_appprox['vehicle_id'] = 142;
                                      //$datass_appprox['route_id'] = 108;
                                      $datass_appprox['assign_status'] = 3;
                                      //$datass_appprox['driver_id'] = 145;
                                      //$datass_appprox['trip_id'] = '';
                                      $datass_appprox['reason'] = "Dispatch loaded and completed ";
                 $datass_appprox['assign_status_3_date'] = date('Y-m-d');

                                      date_default_timezone_set("Asia/Kolkata"); 
                                      $date= date('Y-m-d');
                                      $time= date('h:i A');
                                      $datass_appprox['trip_end_date'] = $date;
                                      $datass_appprox['trip_end_time'] = $time;


                                   

                                    // open it for next partial if available only client scope

                                    $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE order_id='" . $form_data->order_id . "'  AND deleteid=0 ORDER BY id DESC");
                                    $checkcount = $checkcount->result();
                     
                                   $resultmainss = $this->db->query("SELECT SUM(qty) as totalqty FROM sales_load_products  WHERE order_id='" . $form_data->order_id . "' AND pickedstatus=1   ORDER BY id DESC");
                                   $resultcss = $resultmainss->result();
                     
                     
                                     $firsttotal=round($checkcount[0]->totalqty);
                                     $secondtotal=round($resultcss[0]->totalqty);
                                      if($firsttotal!=$secondtotal)
                                      {
                     
                     
                     
                     $collection_remarks_2=0;
                      $allcheck = $this->db->query("SELECT id,SUM(collection_remarks_2) as collection_remarks_2 FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND randam_id IS NOT NULL");
                                                                 $allcheck = $allcheck->result();
                                                                foreach ($allcheck as  $df) {
                                                                  $collection_remarks_2=$df->collection_remarks_2;
                                                                }
                     
                     
                     $collection_remarks_2_set=$bill_total-$collection_remarks_2;
                     
                     
                     
                     
                     
                     
                                                   $dil_status_first['dispatch_status'] = 0;
                                                   $dil_status_first['assign_status'] = 0;
                                                   $dil_status_first['collection_remarks'] = 0;
                                                   $dil_status_first['order_id'] = $form_data->order_id;
                                                   $dil_status_first['order_no'] = $order_no;
                                                   $dil_status_first['customer_id'] = $customer_id;
                                                   $dil_status_first['finance_status'] = 2;
                                                   $dil_status_first['reason'] = 'Partial Pick Pending';
                                                   $dil_status_first['delivery_mode'] = 'Partial';
                                                   $dil_status_first['create_date'] = $date;
                                                   $dil_status_first['create_time'] = $time;
                                                   $dil_status_first['delivery_date'] =$date;
                                                   $dil_status_first['delivery_time'] =$time;
                                                   $dil_status_first['collection_remarks_2'] = $collection_remarks_2_set;
                                                   $dil_status_first['seq_status'] = 1;
                                                   //     if($delivery_status==2)
                                                //    {
                     
                     
                                                    //  if($return_id==0)
                                                    //  {
                     
                     
                                                          $ssd = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE randam_id='" . $DC_id . "' AND return_base=1");
                                                         $ssd = $ssd->result();
                                                         $ssd=count($ssd);
                                                         if($ssd==0)
                                                         {
                     
                     
                     
                     
                                                                $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND finance_status=2");
                                                                 $allcheck = $allcheck->result();
                                                                 if(count($allcheck)==0)
                                                                 {
                     
                                                                   // echo'<pre>'; print_r(1234);exit;
                     
                     $this->Main_model->insert_commen($dil_status_first, 'order_delivery_order_status');
                     $this->db->query("UPDATE order_delivery_order_status SET delivery_mode='Partial' WHERE order_id='".$form_data->order_id."' AND deleteid=0"); 
                   
                        
                            // gg chasnges for scope task set next patial assign and finance details
                            $is_partial_scope=1;




                                                                 }
                     
                     
                     
                     
                                                                         $resultcheck = $this->Main_model->where_names('sales_load_products', 'order_id', $form_data->order_id);
                                                                         if(count($resultcheck)>0)
                                                                         {
                     
                                                                                foreach($resultcheck as $vlset)
                                                                               {
                                                                                        if($vlset->pickedstatus==1)
                                                                                        {
                     
                     
                                    $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE id='" . $vlset->order_product_id . "'  AND deleteid=0 ORDER BY id DESC");
                                    $checkcount = $checkcount->result();
                     
                                    $resultmainss = $this->db->query("SELECT SUM(qty) as totalqty FROM sales_load_products  WHERE order_product_id='" . $vlset->order_product_id . "' AND pickedstatus=1   ORDER BY id DESC");
                                    $resultcss = $resultmainss->result();
                     
                     
                                      $firsttotal=round($checkcount[0]->totalqty);
                                      $secondtotal=round($resultcss[0]->totalqty);
                                      if($firsttotal!=$secondtotal)
                                      {
                                            
                     $this->db->query("UPDATE order_product_list_process SET picked_status='0',randam_id=NULL WHERE id='" . $vlset->order_product_id . "'");
                     
                                      }
                     
                     
                     
                                                                                        }
                     
                                                                               }
                     
                     
                                                                         }
                     
                     
                     
                     
                                                         }
                     
                     
                                                         if($ssd>0)
                                                         {
                     
                     
                     
                                         $this->db->query("UPDATE order_delivery_order_status SET finance_status='3',assign_status='1',reason='Driver Return Trip Assigned' WHERE order_id='".$form_data->order_id."'  AND randam_id='".$DC_id."' AND deleteid=0");    
                     
                     
                     
                     
                                                         }
                     
                     
                     
                                                     //}
                     
                     
                     
                                                 //}

                                
                     
                                      }


                                  
                     
                     
 
                                }





  $this->db->query("UPDATE order_delivery_order_status SET pack_approved_status='".$pack_approved_status."' WHERE order_id='".$id."' AND dispatch_status=1 AND randam_id='".$DC_id."' AND pack_approved_status=0 AND deleteid=0");




  $this->db->query("UPDATE order_delivery_order_status SET assign_status_1_date='".$datass_appprox['assign_status_1_date']."',trip_end_date='".$datass_appprox['trip_end_date']."',trip_end_time='".$datass_appprox['trip_end_time']."',loading_date='".$datass_appprox['loading_date']."',loading_time='".$datass_appprox['loading_time']."',finance_status='".$datass_appprox['finance_status']."',assign_status='".$datass_appprox['assign_status']."',reason='".$datass_appprox['reason']."',delivery_notes_status=1,dispath_load_status_view=1,dispatch_load_status=1,seq_status=1 WHERE order_id='".$id."' AND dispatch_status=1 AND randam_id='".$DC_id."' AND deleteid=0");




            
            
               $st['get_id']=$id;
               $st['delivery_status']=0;
               $st['driver_payment_status']=0;
               //$this->Main_model->update_commen_where($st, 'order_id', 'order_product_list_process');
         
           
  // gg changes for scope task assign_status and finance_status update

  if($is_partial_scope='1'){
    $datass_appprox['finance_status'] = 2;
    $datass_appprox['assign_status'] = 0;
}


               $this->Main_model->update_commen($datass_appprox, $tablename);


$this->db->query("UPDATE sales_load_products SET dispatch_load=1 WHERE randam_id='".$DC_id."' AND order_id='".$id."' AND loadstatus=1");

               


                                            $username ='';
                                            $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                            foreach ($user_group_team as  $team) {
                                                                $username=$team->name.' - '.$this->userid;
                                                                
                                            }
                                            $day_log['username'] = $username;
                                            $day_log['changes'] = '';
                                            $day_log['table_name'] = $tablename;
                                            $day_log['reference_no'] = $order_no.' - '.$id;
                                            $day_log['create_date'] =$date;
                                            $day_log['create_time'] =$time;
                                            $day_log['details'] =$datass_appprox['reason'];
                                            $this->Main_model->insert_commen($day_log, 'day_log');
             
          




            
            
        }


















        if($form_data->action == 'loadstatus') 
        {
            
            $id = $form_data->id;
                        $status = $form_data->status;
                        $driver_pickip = $form_data->driver_pickip;
                        $DC_id = $form_data->DC_id;

                                $result = $this->Main_model->where_names('order_product_list_process', 'id', $id);
                                foreach ($result as $form_datavv) 
                                {

                                    $qty = $form_datavv->qty;
                                    if($form_datavv->modify_qty>0)
                                    {

                                         $qty = $form_datavv->modify_qty;

                                    }
                                    $product_id = $form_datavv->product_id;
                                    $order_id = $form_datavv->order_id;
                                    
                                }
                        
                        
                        if($driver_pickip==0)
                        {
                               
                               
                                if($status==1)
                                {
                                     $this->db->query("UPDATE product_list SET stock=stock-'" . $qty . "' WHERE id='" . $product_id . "'");
                                }

                                if($status==0)
                                {
                                     $this->db->query("UPDATE product_list SET stock=stock+'" . $qty . "' WHERE id='" . $product_id . "'");
                                }
                               
                                
                        }
                        
                        
                      //  $resultcheck =$this->Main_model->where_names('sales_load_products', 'order_product_id', $id);

        $resultcheck = $this->Main_model->where_names_two_order_by('sales_load_products', 'order_id', $order_id, 'order_product_id', $id, 'id', 'ASC');  
                        if(count($resultcheck)==0)
                        {
                            
                            
                              $this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=0 AND order_id='".$order_id."'");
                              $load['order_product_id'] = $form_data->id;
                              
                              $resultmainss = $this->db->query("SELECT * FROM order_product_list_process  WHERE id='" . $form_data->id . "' ORDER BY id DESC");
                              $resultcss = $resultmainss->result();
                              foreach($resultcss as $vl)
                              {

                                       if($vl->modify_nos>0)
                                       {

                                                  $load['nos'] = $vl->modify_nos;

                                       }
                                       else
                                       {
                                                  $load['nos'] = $vl->nos;
                                       }
                                  
                                       if($vl->modify_qty>0)
                                       {

                                         $load['qty'] = $vl->modify_qty;
                                         $vl->qty=$vl->modify_qty;

                                       }
                                       else
                                       {
                                         $load['qty'] = $vl->qty;
                                       }

                                     
                                      $rate= $vl->rate+$vl->commission;
                                      $load['rate'] = $rate;
                                      $load['loadstatus'] = $status;
                                      $load['dispatch_load'] = $status;
                                      $load['commission'] = $vl->commission;
                                      $load['randam_id'] = $DC_id;
                                      $load['pickedstatus'] = 1;
                                      $load['order_id'] = $vl->order_id;
                                      $load['amount'] = round($rate*$vl->qty,2);
                              }
                             
                              $this->Main_model->insert_commen($load, 'sales_load_products');
                            
                        }
                        else
                        {

                              $resultmainss = $this->db->query("SELECT * FROM order_product_list_process  WHERE id='" . $form_data->id . "' ORDER BY id DESC");
                              $resultcss = $resultmainss->result();
                              foreach($resultcss as $vl)
                              {
                                  
                                       if($vl->modify_nos>0)
                                       {

                                                  $load['nos'] = $vl->modify_nos;

                                       }
                                       else
                                       {
                                                  $load['nos'] = $vl->nos;
                                       }

                                       if($vl->modify_qty>0)
                                       {

                                         $load['qty'] = $vl->modify_qty;

                                         $vl->qty=$vl->modify_qty;

                                       }
                                       else
                                       {
                                         $load['qty'] = $vl->qty;
                                       }

                                     
                                      $rate = $vl->rate+$vl->commission;
                                      $commission = $vl->commission;
                                      $amount = round($rate*$vl->qty,2);
                                      $order_id = $vl->order_id;
                              }


//$this->db->query("UPDATE sales_load_products SET nos='" . $load['nos'] . "',rate='" . $rate . "',amount='" . $amount . "',qty='" . $load['qty'] . "',loadstatus='" . $status . "' WHERE order_product_id='" . $id . "' AND delivered_products=0 AND randam_id='".$DC_id."' AND order_id='".$order_id."'");

$this->db->query("UPDATE sales_load_products SET pickedstatus='1',dispatch_load='".$status."',loadstatus='" . $status . "',randam_id='".$DC_id."' WHERE order_product_id='" . $id . "' AND delivered_products=0 AND randam_id='".$DC_id."' AND order_id='".$order_id."'");


                        }
                        
                        
                        $datass_appprox['get_id'] = $id;
                        $datass_appprox['loadstatus'] = $status;
                        $datass_appprox['dispatch_status'] = $status;
                        $datass_appprox['picked_status'] = 1;

                        if($status==0)
                        {
                            //$datass_appprox['picked_status'] = $status;
                            //$datass_appprox['randam_id'] = '';
                        }
                        //$this->Main_model->update_commen($datass_appprox, 'order_product_list_process');
                        $this->Main_model->update_commen_where_two($datass_appprox, 'id','delivery_status','0', 'order_product_list_process');
                        
                        
        }
        
          if($form_data->action == "return_pickup")
         {


             $order_product_id = $form_data->id;
             $nos = $form_data->nos;
             $qty = $form_data->qty;
             $return_id = $form_data->return_id;
             $status = $form_data->status;



             if($status==1)
             {

                


        $this->db->query("UPDATE sales_return_products SET return_picked='1',return_no_pick='".$nos."',return_qty_pick='".$qty."'  WHERE c_id='".$return_id."' AND purchase_order_product_id='".$order_product_id."'");



             }
             else
             {

                 $this->db->query("UPDATE sales_return_products SET return_picked='0',return_no_pick='0',return_qty_pick='0',return_picked_deliverd='0'  WHERE c_id='".$return_id."' AND purchase_order_product_id='".$order_product_id."'");

             }


         }

       // gg changes
       if($form_data->action == "Loadinsertproductdata_pack")
         {  
             
             




  // $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
  // $querygettrips = $this->db->query("SELECT ds.finance_status FROM orders_process as a $JOIN WHERE  a.order_base>0 AND a.id='".$_GET['order_id']."' AND finance_status=2 ORDER BY a.id DESC");
  // $trips= $querygettrips->result();






             //$this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "'");
             $load['order_product_id'] = $form_data->id;
             $load['nos'] = $form_data->nos;


             if($form_data->categories_id=='593')
             {
                 $load['qty'] = $form_data->nos;
                 $form_data->qty=$form_data->nos;

             }
             else
             {
                 $load['qty'] = $form_data->qty;
             }
            
             $load['rate'] = $form_data->rate;
             $order_id=$_GET['order_id'];





             
                
            // Assuming $load['qty'] might contain a NaN value or other invalid data
            if (isset($load['qty']) && $load['qty'] > 0 && !is_nan($load['qty']) && $load['qty'] != 0) {
                // Value is valid, update the record
                $this->db->query("UPDATE order_product_list_process 
                                SET order_delivery_order_status_load='1', 
                                    delivery_status='0', 
                                    dispatch_status=0, 
                                    picked_status=1, 
                                    modify_qty='".$load['qty']."', 
                                    modify_nos='".$load['nos']."'  
                                WHERE id='" . $form_data->id . "' ");
            } elseif (isset($load['qty']) && $load['qty'] === '' && !is_nan($load['qty'])) {
                // If qty is an empty string, update the record
                $this->db->query("UPDATE order_product_list_process 
                                SET order_delivery_order_status_load='0', 
                                    delivery_status='0', 
                                    dispatch_status=0, 
                                    picked_status=0, 
                                    modify_qty='".$load['qty']."', 
                                    modify_nos='".$load['nos']."'  
                                WHERE id='" . $form_data->id . "' AND randam_id='' AND dispatch_status=0");
            }











             
             

            $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=0 AND randam_id IS NULL ORDER BY id DESC");
            $resultcss = $resultmainss->result();
            
            if(count($resultcss)==0)
            {
                
                
                     //$load['loadstatus'] = 1;
                     if($load['qty']>0)
                    {

                        $load['pickedstatus'] = 1;
                    }
                    else
                    {
                        $load['pickedstatus'] = 0;
                    }
                     
                     $load['commission'] = 0;
                     $load['order_id'] = $order_id;

                     $load['activel_qty'] = $load['qty'];
                     // gg changes

                     $load['amount'] = $form_data->qty*$form_data->rate;
                     $this->Main_model->insert_commen($load, 'sales_load_products');



                     
            }
            else
            {
                    


                     if($load['qty']>0)
                    {

                        $load['pickedstatus'] = 1;
                    }
                    else
                    {
                        $load['pickedstatus'] = 0;
                    }
                          
                         // gg changes           
                  $load['amount'] = $form_data->qty*$form_data->rate;
                $this->db->query("UPDATE sales_load_products SET pickedstatus='".$load['pickedstatus']."',qty='".$load['qty']."',nos='".$load['nos']."',amount='".$load['amount']."',rate='".$load['rate']."',activel_qty='".$load['qty']."' WHERE order_product_id='" . $form_data->id . "' AND  delivered_products=0 AND randam_id IS NULL");
                                     
                      
                 
            }











             
            
         }









         if($form_data->action == 'pickcompleted') 
         {
 
 
 
                                             $tablename = $form_data->tablenamemain;
                                             $id = $form_data->order_id;
 
                
 
       
                               $total_qty=0;
                               $checkcount = $this->db->query("SELECT SUM(qty) as total_qty FROM order_product_list_process  WHERE order_id='" . $id . "'  AND deleteid=0 ORDER BY id DESC");
                               $checkcount = $checkcount->result();
 
 
 
 $valcheck = $this->db->query("SELECT picked_status,id FROM order_product_list_process  WHERE order_id='" . $id . "'  AND deleteid=0 AND picked_status=0 ORDER BY id DESC");
 $valcheck = $valcheck->result();
 foreach($valcheck as $ss)
 {
     $this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $ss->id . "'  AND randam_id IS NULL");
 }
 
 
 
 
 $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_id='" . $id . "' AND pickedstatus=1 ORDER BY id DESC");
 
 
                               $resultcss = $resultmainss->result();
                               foreach($resultcss as $vl)
                               {
                                         $total_qty+=intval($vl->qty);        
                                         $product_order_id=$vl->order_product_id;
                                         //$this->db->query("UPDATE order_product_list_process SET randam_id='".$randam_id."' WHERE id='".$product_order_id."' AND picked_status=1 AND dispatch_status=0");
 
                               }
 
 
 
             if($checkcount[0]->total_qty==$total_qty)
             {
                  $reason='Full Packed';
                  $delivery_mode='Full';
                  
             }
             else
             {
                  $reason='Partial Packed';
                  $delivery_mode='Partial';
                  
             }            
        
 
 
 
 $this->db->query("UPDATE orders_process SET delivery_mode='".$delivery_mode."',reason='".$reason."',picked_status='1'  WHERE id='".$id."'");


 $this->db->query("UPDATE order_delivery_order_status SET delivery_mode='".$delivery_mode."',pack_approved_status='0',reason='".$reason."' WHERE order_id='".$id."' AND dispatch_status=0 AND deleteid=0");



$poin_to_member = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='".$id."' AND dispatch_status=0 AND deleteid=0 AND return_id>0 AND  return_status IN ('2','0')");
                                 $poin_to_member = $poin_to_member->result();
                                 $return_id=0;
                                 foreach($poin_to_member as $tcs)
                                 {
                                        $return_id=$tcs->return_id;
                                 }

if($return_id>0)
{

    //$this->db->query("UPDATE order_sales_return_complaints SET driver_delivery_status='1' WHERE id='".$return_id."'");

}
 


 //$this->db->query("UPDATE sales_load_products SET randam_id='".$randam_id."' WHERE order_id='".$id."' AND pickedstatus=1 AND loadstatus=0 AND randam_id IS NULL");
             
 
 
 
 
                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) {
                                                                 $username=$team->name.' - '.$this->userid;
                                                                 
                                             }
                                             $day_log['username'] = $username;
                                             $day_log['changes'] = '';
                                             $day_log['table_name'] = $tablename;
                                             $day_log['reference_no'] = $order_no.' - '.$id;
                                             $day_log['create_date'] =$date;
                                             $day_log['create_time'] =$time;
                                             $day_log['details'] ='Picked Completed';
                                             $this->Main_model->insert_commen($day_log, 'day_log');
 
         
         }
         
         if($form_data->action == 'pickedstatus') 
         {
 

                         $id = $form_data->id;
 
                   
                  
 
                         $status = $form_data->status;
                         $type = $form_data->type;
                         $driver_pickip = $form_data->driver_pickip;
                         $this->db->query("UPDATE order_product_list_process SET loadstatus=0 WHERE id='".$id."' AND randam_id is NULL");
 
                         
                                 $result = $this->Main_model->where_names('order_product_list_process', 'id', $id);
                                 foreach ($result as $form_datavv) 
                                 {
 
                                     $qty = $form_datavv->qty;
                                     $return_status = $form_datavv->return_status;
                                     if($form_datavv->modify_qty>0)
                                     {
 
                                          $qty = $form_datavv->modify_qty;
 
                                     }
                                     $product_id = $form_datavv->product_id;
                                     $order_id = $form_datavv->order_id;
                                     
                                 }
                         
                       
                         if($driver_pickip==0)
                         {
                                
                                
                                 if($status==1)
                                 {
                                      $this->db->query("UPDATE product_list SET stock=stock-'" . $qty . "' WHERE id='" . $product_id . "'");
                                 }
 
                                 if($status==0)
                                 {
                                      $this->db->query("UPDATE product_list SET stock=stock+'" . $qty . "' WHERE id='" . $product_id . "'");
                                 }
                                
                                 
                         }
                         
        $this->db->query("UPDATE  sales_return_products  SET return_picked='".$status."' WHERE purchase_order_product_id='" . $form_data->id . "'");
                       //  $resultcheck =$this->Main_model->where_names('sales_load_products', 'order_product_id', $id);
 
         $resultcheck = $this->Main_model->where_names_two_order_by('sales_load_products', 'order_id', $order_id, 'order_product_id', $id, 'id', 'ASC');  
                         if(count($resultcheck)==0)
                         {
                             
                             
                               $this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=0 AND order_id='".$order_id."'");
                               $load['order_product_id'] = $form_data->id;
                               

        

                               $resultmainss = $this->db->query("SELECT * FROM order_product_list_process  WHERE id='" . $form_data->id . "' ORDER BY id DESC");
                               $resultcss = $resultmainss->result();
                               foreach($resultcss as $vl)
                               {
 
                                        if($vl->modify_nos>0)
                                        {
 
                                                   $load['nos'] = $vl->modify_nos;
 
                                        }
                                        else
                                        {
                                                   $load['nos'] = $vl->nos;
                                        }
                                   
                                        if($vl->modify_qty>0)
                                        {
 
                                          $load['qty'] = $vl->modify_qty;
                                          $vl->qty=$vl->modify_qty;
 
                                        }
                                        else
                                        {
                                          $load['qty'] = $vl->qty;
                                        }
 
                                           if($type==9 || $type==9)
                                           {
                                              $load['nos']=$load['qty'];
                                           }
 
 
                                      
                                       $rate= $vl->rate+$vl->commission;
                                       $load['rate'] = $rate;
                                       $load['pickedstatus'] = $status;
                                       $load['commission'] = $vl->commission;
                                       $load['order_id'] = $vl->order_id;
                                       $load['return_status'] = $return_status;

                                       
                                       $load['amount'] = round($rate*$vl->qty,3);
                               }
                              
                               $this->Main_model->insert_commen($load, 'sales_load_products');
                             
                         }
                         else
                         {
 
                               $resultmainss = $this->db->query("SELECT * FROM order_product_list_process  WHERE id='" . $form_data->id . "' ORDER BY id DESC");
                               $resultcss = $resultmainss->result();
                               foreach($resultcss as $vl)
                               {
                                   
                                        if($vl->modify_nos>0)
                                        {
 
                                                   $load['nos'] = $vl->modify_nos;
 
                                        }
                                        else
                                        {
                                                   $load['nos'] = $vl->nos;
                                        }
 
                                        if($vl->modify_qty>0)
                                        {
 
                                          $load['qty'] = $vl->modify_qty;
 
                                          $vl->qty=$vl->modify_qty;
 
                                        }
                                        else
                                        {
                                          $load['qty'] = $vl->qty;
                                        }
 
                                      
                                       $rate = $vl->rate+$vl->commission;
                                       $commission = $vl->commission;
                                       $amount = round($rate*$vl->qty,3);
                                       $order_id = $vl->order_id;
                               }
 
 
                               if($type==9 || $type==9)
                               {
                                  $load['nos']=$load['qty'];
                               }
 
 if($status==1)
 {
 
 
 $this->db->query("UPDATE sales_load_products SET return_status='" . $return_status . "',nos='" . $load['nos'] . "',rate='" . $rate . "',amount='" . $amount . "',qty='" . $load['qty'] . "',order_id='" . $order_id . "',pickedstatus='" . $status . "' WHERE order_product_id='" . $id . "' AND delivered_products=0 AND order_id='".$order_id."' AND randam_id IS NULL");
 
 
 }
 else
 {
   $this->db->query("UPDATE sales_load_products SET return_status='" . $return_status . "',nos='0',rate='" . $rate . "',amount='" . $amount . "',qty='" . $load['qty'] . "',order_id='" . $order_id . "',pickedstatus='" . $status . "' WHERE order_product_id='" . $id . "' AND delivered_products=0 AND order_id='".$order_id."' AND randam_id IS NULL");
  $this->db->query("UPDATE order_product_list_process SET modify_qty='0',modify_nos='0' WHERE id='" . $id . "' AND loadstatus=0 AND randam_id IS NULL");
   
 }
 
                         }
                         
                         
                         $datass_appprox['get_id'] = $id;
                         $datass_appprox['picked_status'] = $status;
                         $datass_appprox['order_delivery_order_status_load'] = $status;
                        
                         //$this->Main_model->update_commen($datass_appprox, 'order_product_list_process');
 
                         $id_data=$datass_appprox['get_id'];
                         unset($datass_appprox['get_id']);
 
 
                         // Check if randam_id is empty, only proceed if it has a valid value
                             if (!empty($id_data)) {
                                 $this->db->where('id', $id_data);
                                 $this->db->where('delivery_status', '0');
                                 
                                 // Use IS NULL for checking NULL values
                                 $this->db->where('randam_id IS NULL');
                                 
                                 $this->db->where('dispatch_status', '0');
                                 $this->db->update('order_product_list_process', $datass_appprox);
                             }
 
 
 
 // gg chnages to commant
                        // $this->Main_model->update_commen_where_two($datass_appprox, 'id','delivery_status','0', 'order_product_list_process');
             
                         // $id = $form_data->id;
                         // $tablename="order_product_list_process";
                         // $status = $form_data->status;
                         // $datass_appprox['get_id'] = $id;
                         // $datass_appprox['picked_status'] = $status;
                         // $this->Main_model->update_commen($datass_appprox, $tablename);
 
 
 
         }
        
        if($form_data->action == 'loadstatus_by_cate') 
        {
            
                        $id = $form_data->id;
                        $status = $form_data->status;
                        $datass_appprox['get_id'] = $id;
                        $datass_appprox['loadstatus_by_cate'] = $status;
                        $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
         if($form_data->action == 'Updatetotalqty') 
        {


            
            $id = $form_data->id;
            $order_id = $form_data->order_id;
            $value = $form_data->value;
            $this->db->query("UPDATE order_product_list_process SET activel_qty_total='" . $value . "' WHERE order_id='" . $order_id . "' AND categories_id='".$id."'");


        }
        
        
        
        
        if ($form_data->action == 'bayinfocnage') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['bay_info'] = $form_data->value;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'bininfocnage') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['bin_info'] = $form_data->value;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'InputUpdateprocess') {
            $tablename = 'proudtcion_order_products';
            $id = $form_data->id;
            $this->db->query("UPDATE proudtcion_order_products SET proudtcion_no=proudtcion_no+'" . $form_data->values . "' WHERE id='" . $id . "'");
        }
        if ($form_data->action == 'qcstatuschange')
        {
            
         
           
            $tablename = 'proudtcion_order_products';
            $id = $form_data->id;
            $idstatus = $form_data->idstatus;
            $statuss = $form_data->statuss;
            $field = $form_data->field;
            if($idstatus == '-1')
            {  
                $start_status=2;
                $this->db->query("UPDATE proudtcion_order_products SET $field='" . $statuss . "',production_status='" . $idstatus . "',proudtcion_no='0' WHERE id='" . $id . "'");
            } 
            else
            {
                $this->db->query("UPDATE proudtcion_order_products SET $field='" . $statuss . "',production_status='" . $idstatus . "' WHERE id='" . $id . "'");
                $start_status=$idstatus;
                
                
            }
            if ($idstatus == '-1') {
                $reason = 'Production Re-assign '.$field;
            } else {
                $reason = 'Production QC Verified';
                
            }
           
            
            $result = $this->Main_model->where_names('proudtcion_order_products', 'id', $id);
            foreach ($result as $form_datavv) 
            {
                $order_product_id = $form_datavv->order_product_id;
                $order_id = $form_datavv->order_id;
            }
            
            $this->db->query("UPDATE orders_process SET production_assign='" . $idstatus . "',reason='" . $reason . "' WHERE id='" . $order_id . "'");
            $this->db->query("UPDATE order_product_list_process SET production_start='" . $idstatus . "' WHERE id='" . $order_product_id . "'");
            
            
            
            
            
            
            
            
        }
        if ($form_data->action == 'processStatuschages') {
            $tablename = $form_data->tablenamemain;
           
            $id = $form_data->order_product_id;
            $orer_p_id = explode('|', $id);
            $order_production_no = explode('|', $form_data->order_production_no);
            $order_production_no_cmd = explode('|', $form_data->order_production_no_cmd);
            for ($i = 0;$i < count($orer_p_id);$i++) {
                
                
                 $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        
                        $order_product_id = $form_datavv->order_product_id;
                        $order_id = $form_datavv->order_id;
                    }
                
                
                $datass_appprox['get_id'] = $orer_p_id[$i];
                $datass_appprox['production_status'] = $form_data->status;
                if ($form_data->status == 1) {
                    //$datass_appprox['proudtcion_no']=0;
                    
                } elseif ($form_data->status == 3) {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_status = $form_datavv->production_status;
                        $production_no = $form_datavv->production_no;
                        if ($order_production_no_cmd[$i] != 0) {
                            $proudtcion_no_data = $order_production_no_cmd[$i];
                        } else {
                            $proudtcion_no_data = $order_production_no[$i];
                        }
                    }
                    if ($production_status == 1) {
                        $datass_appprox['production_status'] = 2;
                    }
                    $datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                } else {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_no = $form_datavv->production_no;
                        if ($production_no == 0 || $production_no = "") {
                            if ($order_production_no_cmd[$i] != 0) {
                                $proudtcion_no_data = $order_production_no_cmd[$i];
                            } else {
                                $proudtcion_no_data = $order_production_no[$i];
                            }
                        } else {
                            $proudtcion_no_data = $production_no;
                        }
                    }
                    //$datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                }
                $datass_appprox['process_start_date'] = $date;
                $datass_appprox['process_start_time'] = $time;
                $this->Main_model->update_commen($datass_appprox, $tablename);
                
                
                
                
                
                
                
                    $datass['get_id'] = $order_product_id;
                    $datass['production_start'] = $form_data->status;
                    $datass['process_start_date'] = $date;
                    $datass['process_start_time'] = $time;
                    $this->Main_model->update_commen($datass, 'order_product_list_process');
                    
                    
                    
                    if ($form_data->status == 2) {
                     $reason = 'Production In-progress';
                    }
                    if ($form_data->status == 1) {
                     $reason = 'Production Started';
                    }
                    if ($form_data->status == 3) {
                        $reason = 'Production Completed';
                    }
                    if ($form_data->status == 4) {
                        $reason = 'Production QC Verified';
                    }
                    if ($form_data->status == -1) {
                        $reason = 'Production Re-assign';
                    }
                    if ($form_data->status == 5) {
                        $reason = 'Production Move Transport';
                        $datass_val['finance_status'] = 2;
                    }
                    
                    $datass_val['get_id'] = $order_id;
                    $datass_val['reason'] = $reason;
                    $datass_val['production_assign'] = $form_data->status;
                    
                    $this->Main_model->update_commen($datass_val, 'orders_process');
                
                
                
                
                
            }
            
            
            
            
        }
        if ($form_data->action == 'processStatuschagesAll') {
            $tablename = $form_data->tablenamemain;
            $order_id = $form_data->order_id;
            $datass_appprox['get_id'] = $order_id;
            $datass_appprox['production_status'] = $form_data->status;
            $this->Main_model->update_commen_where($datass_appprox, 'order_id', $tablename);
            $datass['get_id'] = $order_id;
            $datass['production_status'] = $form_data->status;
            $datass['reason'] = $form_data->reason;
            $this->Main_model->update_commen($datass, 'orders_process');
        }
        if ($form_data->action == 'processStatuschages_single') {
            
            
            $tablename = $form_data->tablenamemain;
            $id = $form_data->order_product_id;
            $orer_p_id = explode('|', $id);
            $order_production_no = explode('|', $form_data->order_production_no);
            $order_production_no_cmd = explode('|', $form_data->order_production_no_cmd);
            for ($i = 0;$i < count($orer_p_id);$i++) {
                
                
                
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        
                        $order_product_id = $form_datavv->order_product_id;
                        $order_id = $form_datavv->order_id;
                    }
                
                
                $datass_appprox['get_id'] = $orer_p_id[$i];
                $datass_appprox['production_status'] = $form_data->status;
                if ($form_data->status == 1) {
                    //$datass_appprox['proudtcion_no']=0;
                    
                    $reason='Production Started';
                    
                } elseif ($form_data->status == 3) {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_status = $form_datavv->production_status;
                        $production_no = $form_datavv->production_no;
                        if ($order_production_no_cmd[$i] != 0) {
                            $proudtcion_no_data = $order_production_no_cmd[$i];
                        } else {
                            $proudtcion_no_data = $order_production_no[$i];
                        }
                    }
                    if ($production_status == 1) {
                        $datass_appprox['production_status'] = 2;
                    }
                    $datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                    $reason='Production Complated';
                } else {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_no = $form_datavv->production_no;
                        if ($production_no == 0 || $production_no = "") {
                            if ($order_production_no_cmd[$i] != 0) {
                                $proudtcion_no_data = $order_production_no_cmd[$i];
                            } else {
                                $proudtcion_no_data = $order_production_no[$i];
                            }
                        } else {
                            $proudtcion_no_data = $production_no;
                        }
                    }
                    $datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                    $reason='Production In-progress';
                }
                $datass_appprox['process_start_date'] = $date;
                $datass_appprox['process_start_time'] = $time;
                $this->Main_model->update_commen($datass_appprox, $tablename);
                
                
                
                    $datass['get_id'] = $order_product_id;
                    $datass['production_start'] = $form_data->status;
                    $datass['process_start_date'] = $date;
                    $datass['process_start_time'] = $time;
                    $this->Main_model->update_commen($datass, 'order_product_list_process');
                    
                    
                    $datass_val['get_id'] = $order_id;
                    $datass_val['reason'] = $reason;
                    $datass_val['production_assign'] = $form_data->status;
                    $this->Main_model->update_commen($datass_val, 'orders_process');
            
                
                
                
            }
           
            
            
            
        }
        if ($form_data->action == 'addprocessdelete') {
            $tablename = $form_data->tablenamemain;
            $this->db->query("DELETE FROM $tablename  WHERE id='" . $form_data->id . "'");
        }
        if ($form_data->action == 'addprocess') {
            
            
            $this->db->query("DELETE FROM proudtcion_order_products  WHERE order_product_id='" . $form_data->order_product_id . "'");
            
            
            $tablename = $form_data->tablenamemain;
            $datass['proudtcion_id'] = $form_data->id;
            $datass['order_product_id'] = $form_data->order_product_id;
            $datass['product_id'] = $form_data->product_id;
            $result = $this->Main_model->where_names('order_product_list_process', 'id', $form_data->order_product_id);
            foreach ($result as $form_datavv) {
                $datass['categorie_id'] = $form_datavv->categories_id;
                $datass['order_id'] = $form_datavv->order_id;
            }
          
            $datass['proudtcion_name'] = $form_data->name;
            $datass['userid'] = $this->userid;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $datass['order_id'] . "' AND order_product_id='" . $form_data->order_product_id . "' ORDER BY id DESC LIMIT 0,1");
            $resultcs = $resultmain->result();
            if (count($resultcs) > 0) {
                foreach ($resultcs as $v) {
                    $datass['sort_order'] = $v->sort_order + 1;
                }
            } else {
                $datass['sort_order'] = 1;
            }
            $this->db->query("UPDATE order_product_list_process SET checked='1' WHERE id='" . $form_data->order_product_id . "'");
            $datass['create_date'] = $date;
            $datass['create_time'] = $time;
            $this->Main_model->insert_commen($datass, $tablename);
            
            
        }
        if ($form_data->action == 'addprocessloop') {
            $tablename = $form_data->tablenamemain;
            $order_product_id = explode('|', $form_data->order_product_id);
            for ($i = 0;$i < count($order_product_id);$i++) {
                
                $this->db->query("DELETE FROM proudtcion_order_products  WHERE order_product_id='" . $order_product_id[$i] . "'");
         
                $datass['order_product_id'] = $order_product_id[$i];
                $datass['proudtcion_id'] = $form_data->id;
                $result = $this->Main_model->where_names('order_product_list_process', 'id', $order_product_id[$i]);
                foreach ($result as $form_datavv) {
                    $datass['categorie_id'] = $form_datavv->categories_id;
                    $datass['product_id'] = $form_datavv->product_id;
                    $datass['order_id'] = $form_datavv->order_id;
                }
                
                $datass['proudtcion_name'] = $form_data->name;
                $datass['userid'] = $this->userid;
                $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $form_data->order_id . "' AND order_product_id='" . $order_product_id[$i] . "' ORDER BY id DESC LIMIT 0,1");
                $resultcs = $resultmain->result();
                if (count($resultcs) > 0) {
                    foreach ($resultcs as $v) {
                        $datass['sort_order'] = $v->sort_order + 1;
                    }
                } else {
                    $datass['sort_order'] = 1;
                }
                $this->db->query("UPDATE order_product_list_process SET checked='1' WHERE id='" . $order_product_id[$i] . "'");
                $datass['create_date'] = $date;
                $datass['create_time'] = $time;
                $this->Main_model->insert_commen($datass, $tablename);
            }
        }
        if ($form_data->action == 'sizesave') {
            $tablename_sub = $form_data->tablename_sub;
            $id = $form_data->order_product_id;
            $ss['get_id'] = $id;
            $ss['sub_product_id'] = $form_data->sub_product;
            $ss['value_id'] = 0;
            $ss['section_lable'] = 0;
            $ss['section_value'] = 0;
            $ss['degree'] = 0;
            $this->Main_model->update_commen($ss, $tablename_sub);
            $datass_appprox['get_id'] = $id;
            $datass_appprox['sub_product_id'] = $form_data->sub_product;
            $datass_appprox['value_id'] = $form_data->value_id;
            $datass_appprox['section_lable'] = $form_data->lab1;
            $datass_appprox['section_value'] = $form_data->lab2;
            $datass_appprox['degree'] = $form_data->degree;
            $datass_appprox['image_length'] = $form_data->image_length;
            $this->Main_model->update_commen($datass_appprox, $tablename_sub);
        }
        if ($form_data->action == 'Cancelfinance') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $this->Main_model->cancelupdatefinance($id, $tablename);
        }
        if ($form_data->action == 'Commission')
         {






            $tablename = $form_data->tablename_sub;
            $order_id = $form_data->order_id;
            $commission = $form_data->commissionval;
            $commissionvalfact = $form_data->commissionval_fact;
            $datass['get_id'] = $form_data->order_id;
            $datass['commission'] = $commission;
            //$datass['commission_fact'] = $commissionvalfact;
            $this->Main_model->update_commen_where($datass, 'order_id', $tablename);



            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->order_id;
            $val['commission_check'] = 1;


            $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
            foreach($results as $vl)
            {
                $bill_total_rate=$vl->bill_total_rate;
                $bill_total=$vl->bill_total;
                $order_no=$vl->order_no;
                               
            }

             

             if($bill_total_rate==0)
             {
                     $val['bill_total_rate'] = $bill_total;
             }






             $commissionrateset = $this->Main_model->where_names_two_order_by($tablename, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
             foreach ($commissionrateset as $vlrate) 
             {

                  $rateval=$vlrate->rate+$commission;
                  $amounts=$rateval*$vlrate->qty;
                  $amounts_old=$vlrate->rate*$vlrate->qty;
                  $datassrate['get_id'] = $vlrate->id;
                  $datassrate['amount'] = round($amounts,2);
                  $datassrate['old_rate_amount'] = round($amounts_old,2);
                  $this->Main_model->update_commen_where($datassrate, 'id', $tablename);
             }




            
            
            
                     
            if($tablenamemain=='orders_process')
            {
                
                
                
                           $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           if($order_base==1)
                           {
                                if($finance_status>=2)
                                {
                
                                                    $val['order_base'] = 21;
                                                    $val['reason'] = 'MD Approvel Request For Commission';


                                                                    date_default_timezone_set("Asia/Kolkata"); 
                                                                    $date= date('Y-m-d');
                                                                    $time= date('h:i A');
                                                                    $val['edit_user_id'] = $this->userid;
                                                                    $val['edit_date'] = $date;
                                                                    $val['edit_time'] = $time;







                
                                }
                                
                                
                           }
                
                
                
                
                
                
                
            }
                
            
            $this->Main_model->update_commen($val, $tablenamemain);





                                             $day_log['userid'] = $this->userid;
                                            $day_log['inputname'] = 'ORDER COMMISSION CHECK 1';
                                            $day_log['tablename'] = $tablename;
                                            $day_log['order_id'] = $id;
                                            $day_log['order_no'] = $order_no;
                                            $day_log['notes'] ='ORDER COMMISSION';
                                            $this->Main_model->insert_commen($day_log, 'bill_changes_log');









        }
        if ($form_data->action == 'deliverystatus') 
        {
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->order_id;
            $val['delivery_charge'] = $form_data->delivery_charge;
           

            if($form_data->deliverystatus=='')
             {
                     $val['delivery_status'] = 2;
             } 
             else
             {
                     $val['delivery_status'] = $form_data->deliverystatus;
             }  
           
            
            if($form_data->payment_mode=='')
             {
                     $val['payment_mode'] = 'Cash';
             } 
             else
             {
                     $val['payment_mode'] = $form_data->payment_mode;
             }  
           


            $val['delivery_mode'] = $form_data->delivery_mode;
            $this->Main_model->update_commen($val, $tablenamemain);



if($form_data->deliverystatus==1)
{
   
    $this->db->query("UPDATE order_delivery_order_status SET delivery_status='".$form_data->deliverystatus."',delivery_date_status=1 WHERE order_id='".$form_data->order_id."' AND deleteid=0");
}
else
{
    $this->db->query("UPDATE order_delivery_order_status SET delivery_status='".$form_data->deliverystatus."' WHERE order_id='".$form_data->order_id."' AND deleteid=0");
}


               
                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) 
                                             {
                                                
                                                                $username=$team->name;
                                                                
                                             }
                  
                                             $day_log['username'] = $username;
                                             $day_log['changes'] = 'deliverystatus';
                                             $day_log['table_name'] = $tablenamemain;
                                             $day_log['reference_no'] = $form_data->order_id;
                                             $day_log['create_date'] =$date;
                                             $day_log['create_time'] =$time;
                                             $day_log['details'] =json_encode($val);
                                             $this->Main_model->insert_commen($day_log, 'day_log');







        }
        
        
       
         
        if ($form_data->action == 'removeassign') 
        {



  $reason = $form_data->reason;
   $randam_id = $form_data->randam_id;
            
            $tablenamemain = $form_data->tablenamemain;


                 $results = $this->Main_model->where_names(
                    "orders_process",
                    "id",
                    $form_data->id
                );
                foreach ($results as $orders) {
                    $delivery_date_time = date(
                        "d-m-Y",
                        strtotime($orders->delivery_date)
                    );
                    $create_date = date(
                        "d-m-Y",
                        strtotime($orders->create_date)
                    );
                    $order_no = $orders->order_no;
                    $id = $orders->id;
                    $customer_id = $orders->customer_id;
                    $bill_total = $orders->bill_total;
                    $delivery_status = $orders->delivery_status;
                    $assign_status = $orders->assign_status;

                    $vehicle_number = "";
                    $vehicle_name = "";
                    $vehicle = $this->Main_model->where_names(
                        "vehicle",
                        "id",
                        $orders->vehicle_id
                    );
                    foreach ($vehicle as $vehicle_v) {
                        $vehicle_name = $vehicle_v->vehicle_name;
                        $vehicle_number = $vehicle_v->vehicle_number;
                        $vehicle_id = $vehicle_v->id;
                    }

                    $customers_data = $this->Main_model->where_names(
                        "customers",
                        "id",
                        $customer_id
                    );
                    $userid_sales=0;
                    foreach ($customers_data as $csvalv) {
                         $phone = $csvalv->phone;
                         $userid_sales = $csvalv->sales_team_id;
                    }


                                    $result = $this->Main_model->where_names(
                                        "driver",
                                        "vehicle_id",
                                        $vehicle_id
                                    );
                                    foreach ($result as $value) 
                                    {
                                        $driver_id = $value->id;
                                        $driver_name = $value->name.' | '.$value->phone;
                                        
                                    }


                }


$msg =
                    'Greetings from Zaron Industries

Your order number  ' .
                    $order_no .
                    " will not be dispatched through the vehicle number  " .
                    $vehicle_number .
                    " Driver  " .
                    $driver_name .
                    " due to  " .
                    $reason;


  //$this->whats_app_send($phone, $msg, "orders_process", $id,$userid_sales);
  

                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $order_no;
                                            $datassh['tablename'] = 'orders_process';
                                            $datassh['order_no'] = $order_no;
                                            $datassh['inputname'] ='Order Removed Assign';
                                            $datassh['notes'] =' Order Removed Assign';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');

    
            $val['get_id'] = $form_data->id;
            $val['finance_status'] = 2;
            $val['assign_status'] = 0;
            $val['seq_status'] = 0;
            $val['dispatch_load_status']=0;
            $val['dispath_load_status_view']=0;
            $val['trip_id']=0;
            if($reason=='')
            {
                 $val['reason'] = 'Order Un-Assigned';
                 $val['assign_status_11_date'] = NULL;
                 $val['assign_status_12_date'] = NULL;
                 $val['assign_status_3_date'] = NULL;
                 $val['assign_status_2_date'] = NULL;
            }
            else
            {
                $val['reason'] = $reason;
                $val['assign_status_11_date'] = NULL;
                 $val['assign_status_12_date'] = NULL;
                 $val['assign_status_3_date'] = NULL;
                 $val['assign_status_2_date'] = NULL;
            }
            
            $val['driver_id'] = 0;
            $val['vehicle_id'] = 0;
            
            $this->Main_model->update_commen($val, $tablenamemain);
            $this->db->query("UPDATE order_product_list_process SET delivery_status='0',driver_payment_status='0' WHERE order_id='" . $form_data->id . "'");


$this->db->query("UPDATE sales_load_products SET randam_id=NULL,loadstatus=0,delivered_products=0,driver_payment_status=0,dispatch_load=0 WHERE randam_id='" . $randam_id . "'");

$this->db->query("UPDATE packed_details SET randam_id=NULL WHERE randam_id='" . $randam_id . "' AND order_id='" . $form_data->id. "'");

$this->db->query("UPDATE order_delivery_order_status SET assign_status_11_date=NULL,assign_status_12_date=NULL,assign_status_3_date=NULL,assign_status_2_date=NULL,randam_id=NULL,finance_status='2',reason='".$val['reason']."',assign_status='0',seq_status='0',dispatch_load_status=0,sort_id=0,driver_id=0,trip_id=0,vehicle_id=0,dispath_load_status_view=0,dispatch_status=0 WHERE order_id='".$form_data->id."' AND randam_id='".$randam_id."' AND dispatch_status=1 AND deleteid=0");

$resultmainss = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $form_data->id. "' AND picked_status=1  AND deleteid=0 ORDER BY id DESC");
$resultcss = $resultmainss->result();
foreach($resultcss as $vl)
{

    $randam_id=$vl->randam_id;
    $product_order_id=$vl->id;
    $this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status='0' WHERE id='".$product_order_id."' AND picked_status=1 AND randam_id='".$randam_id."'");

}
$this->db->query("DELETE FROM packed_details  WHERE order_id='".$form_data->id."'  AND randam_id='".$form_data->randam_id."'");
//$this->db->query("DELETE FROM order_delivery_order_status  WHERE order_id='" . $form_data->id . "' AND trip_id='0'");




//$this->customer_balance_report_pass($customer_id);

    $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
  $querygettrips = $this->db->query("SELECT ds.trip_id FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.vehicle_id='".$vehicle_id."' AND ds.assign_status IN ('11','12') AND  ds.finance_status=3 AND ds.dispath_load_status_view=0 ORDER BY a.id DESC");
  $trips= $querygettrips->result();
  $this->db->query("UPDATE vehicle SET assiend_count='".count($trips)."'  WHERE id='".$vehicle_id."'");







        }


        if ($form_data->action == 'removeassign_return') {
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->id;
            $val['driver_assign'] = 0;
            $val['order_base'] = 0;
            $val['remarks'] = "Un-assiend Vehicle";
            $val['driver_id'] = 0;
            $val['vehicle_id'] = 0;
            $this->Main_model->update_commen($val, $tablenamemain);
            
            
                $datassh['c_id'] = $val['get_id'];
                $datassh['create_date'] = $date;
                $datassh['create_time'] = $time;
                $datassh['order_base'] = 0;
                $datassh['remarks'] = 'Un-assiend Vehicle';
                 $datassh['user_id'] = $this->userid;
                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
            
            
            
        }
        
        if ($form_data->action == 'removeAssignCallback')
        {

                // update callback qty to their respective qty before gate order qty edit

                $sales_load_products_data = $this->db->query("
                    SELECT * FROM order_product_list_process 
                    WHERE order_id = '" . $form_data->id . "' 
            
                ")->result();

                if (!empty($sales_load_products_data)) {

                    foreach ($sales_load_products_data as $products_data) {

                        if($products_data->callback_weight != ''){

                                $this->db->query("UPDATE order_product_list_process 
                                    SET qty = '".$products_data->callback_weight."',callback_weight=''
                                    WHERE order_id = '" . $products_data->order_id . "' 
                                    AND id = '" . $products_data->id . "'
                                ");

                        }

                    }
                }

            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->id;
            $val['finance_status'] = 2;
            $val['assign_status'] = 0;
            $val['assign_status_0_date'] = date('Y-m-d');
            $val['assign_status_11_date'] = NULL;
            $val['assign_status_12_date'] = NULL;
            $val['assign_status_2_date'] = NULL;
            $val['assign_status_3_date'] = NULL;
            $val['reason'] = "CallBack";
            //$val['driver_id'] = 0;
            //$val['vehicle_id'] = 0;
            $this->Main_model->update_commen($val, $tablenamemain);

               $date=date('Y-m-d');

 $results = $this->Main_model->where_names(
                    "orders_process",
                    "id", $form_data->id
                 );
                foreach ($results as $orders) {
                   
                    $bill_total = $orders->bill_total;

                }

 $collection_remarks_2=0;
 $allcheck = $this->db->query("SELECT id,SUM(collection_remarks_2) as collection_remarks_2 FROM order_delivery_order_status  WHERE order_id='" . $form_data->id . "' AND randam_id IS NOT NULL");
 $allcheck = $allcheck->result();
 foreach ($allcheck as  $df) 
 {
     $collection_remarks_2=$df->collection_remarks_2;
 }

 $collection_remarks_2_set=0;
                             
                                                

// BABU CALL BACK DELETE
//$this->db->query("DELETE FROM order_delivery_order_status  WHERE order_id='".$form_data->id."'  AND randam_id IS NULL AND finance_status=2");
// CHECK


$this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".$collection_remarks_2_set."',delivery_date_status=0,picked_status=0,assign_status_3_date=NULL,assign_status_11_date=NULL,assign_status_12_date=NULL,assign_status_2_date=NULL,randam_id=NULL,finance_status='2',assign_status_0_date='".$date."',reason='".$val['reason']."',
gate_login_view_status='0',convertion='0',assign_status='0',seq_status='0',dispatch_load_status=0,sort_id=0,driver_id=0,trip_id=0,vehicle_id=0,dispath_load_status_view=0,dispatch_status=0 WHERE order_id='".$form_data->id."' AND randam_id='".$form_data->randam_id."' AND dispatch_status=1 AND deleteid=0");

//$this->db->query("UPDATE order_delivery_order_status SET assign_status_3_date=NULL,assign_status_11_date=NULL,assign_status_12_date=NULL,assign_status_2_date=NULL,finance_status='3',assign_status_0_date='".$date."',reason='".$val['reason']."',assign_status='11',seq_status='0' WHERE order_id='".$form_data->id."' AND randam_id='".$form_data->randam_id."' AND dispatch_status=1");

//$this->db->query("UPDATE sales_load_products SET randam_id=NULL,pickedstatus=1,dispatch_load=0 WHERE randam_id='".$form_data->randam_id."' AND loadstatus=0 AND order_id='".$form_data->id."'");
//$this->db->query("UPDATE sales_load_products SET randam_id=NULL,loadstatus=0,delivered_products=0,driver_payment_status=0,dispatch_load=0 WHERE randam_id='" . $form_data->randam_id . "' AND  order_id='".$form_data->id."'");



$this->db->query("UPDATE order_product_list_process SET randam_id=NULL,dispatch_status='0',picked_status=0,loadstatus=0 WHERE order_id='".$form_data->id."' AND randam_id='" . $form_data->randam_id . "'");


$this->db->query("DELETE FROM packed_details  WHERE order_id='".$form_data->id."'  AND randam_id='".$form_data->randam_id."'");
$this->db->query("DELETE FROM sales_load_products  WHERE order_id='".$form_data->id."'  AND randam_id='".$form_data->randam_id."'");


$this->db->query("UPDATE orders_process SET finance_status='2',reason='".$val['reason']."',assign_status='0',seq_status='0',sort_id=0,driver_id=0,trip_id=0,vehicle_id=0 WHERE  id='".$form_data->id."'");



 $results = $this->Main_model->where_names(
                    "orders_process",
                    "id",
                    $form_data->id
                );
                foreach ($results as $orders) {
                    $delivery_date_time = date(
                        "d-m-Y",
                        strtotime($orders->delivery_date)
                    );
                    $create_date = date(
                        "d-m-Y",
                        strtotime($orders->create_date)
                    );
                    $order_no = $orders->order_no;
                    $id = $orders->id;
                    $customer_id = $orders->customer_id;
                    $bill_total = $orders->bill_total;
                    $delivery_status = $orders->delivery_status;
                    $assign_status = $orders->assign_status;

                    $vehicle_number = "";
                    $vehicle_name = "";
                    $vehicle = $this->Main_model->where_names(
                        "vehicle",
                        "id",
                        $orders->vehicle_id
                    );
                    foreach ($vehicle as $vehicle_v) {
                        $vehicle_name = $vehicle_v->vehicle_name;
                        $vehicle_number = $vehicle_v->vehicle_number;
                        $vehicle_id = $vehicle_v->id;
                    }

                    $customers_data = $this->Main_model->where_names(
                        "customers",
                        "id",
                        $customer_id
                    );
                    $userid_sales=0;
                    foreach ($customers_data as $csvalv) {
                         $phone = $csvalv->phone;
                         $userid_sales = $csvalv->sales_team_id;
                    }


                                    $result = $this->Main_model->where_names(
                                        "driver",
                                        "vehicle_id",
                                        $vehicle_id
                                    );
                                    foreach ($result as $value)
                                    {
                                        $driver_id = $value->id;
                                        $driver_name = $value->name.' | '.$value->phone;
                                       
                                    }


                }


                $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
  $querygettrips = $this->db->query("SELECT ds.trip_id FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.vehicle_id='".$vehicle_id."' AND ds.assign_status IN ('11','12') AND  ds.finance_status=3 AND ds.dispath_load_status_view=0 ORDER BY a.id DESC");
  $trips= $querygettrips->result();
  $this->db->query("UPDATE vehicle SET assiend_count='".count($trips)."'  WHERE id='".$vehicle_id."'");


        }
      
        
      







        if ($form_data->action == 'Copy') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $result = $this->Main_model->where_names($tablename, 'id', $id);
            foreach ($result as $form_data) {
                $data['product_id'] = $form_data->product_id;
                $data['product_name'] = $form_data->product_name;
                $data['tile_material_name'] = $form_data->tile_material_name;
                $data['tile_material_id'] = $form_data->tile_material_id;
                $data['categories_id'] = $form_data->categories_id;
                $data['categories_name'] = $form_data->categories_name;
                $data['dim_one'] = $form_data->dim_one;
                $data['dim_two'] = $form_data->dim_two;
                $data['dim_three'] = $form_data->dim_three;
                $data['image_length'] = $form_data->image_length;
                $data['gst'] = $form_data->gst;
                $data['gst_check'] = $form_data->gst_check;
                $data['profile'] = $form_data->profile;
                $data['crimp'] = $form_data->crimp;
                $data['extra_crimp'] = $form_data->extra_crimp;
                $data['back_crimp'] = $form_data->back_crimp;
                $data['Meter_to_Sqr_feet'] = $form_data->Meter_to_Sqr_feet;
                $data['Sqr_feet_to_Meter'] = $form_data->Sqr_feet_to_Meter;
                $data['nos'] = $form_data->nos;
                $data['uom'] = $form_data->uom;
                $data['billing_options'] = $form_data->billing_options;
                $data['commission'] = $form_data->commission;
                 
                $data['commission_fact'] = $form_data->commission_fact;
                $data['old_fact_amount'] = $form_data->old_fact_amount;
                $data['crimp_check'] = $form_data->crimp_check;
                $data['old_rate_amount'] = $form_data->old_rate_amount;

                $data['input_values'] = $form_data->input_values;
                $data['uom_image'] = $form_data->uom_image;
                $data['color_side'] = $form_data->color_side;

                $data['address_id'] = $form_data->address_id;
                $data['address_id_mark'] = $form_data->address_id_mark;
                $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                foreach ($additional_information as $vl) {
                    $label_name = strtolower($vl->label_name);
                    $data[$label_name] = $form_data->$label_name;
                }
                $data['reference_image'] = $form_data->reference_image;

                   

                $data['section_lable'] = $form_data->section_lable;
                $data['section_value'] = $form_data->section_value;
                $data['degree'] = $form_data->degree;
                $data['sub_product_id'] = $form_data->sub_product_id;
                $data['value_id'] = $form_data->value_id;
                $data['unit'] = $form_data->unit;
                $data['order_id'] = $form_data->order_id;
                $data['order_no'] = $form_data->order_no;
                $data['fact'] = $form_data->fact;
                $data['rate'] = $form_data->rate;
                $data['qty'] = $form_data->qty;
                $data['sort_id'] = $form_data->sort_id;
                $data['amount'] = $form_data->amount;
                $this->Main_model->insert_commen($data, $tablename);
            }
            $array = array('success' => '2');
            echo json_encode($array);
        }
        if ($form_data->action == 'Copygroup') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $rows_input = $form_data->rows_input;
            for ($i = 0;$i < $rows_input;$i++) {
                $result = $this->Main_model->where_names($tablename, 'id', $id);
                foreach ($result as $form_data) {


                     $product_id = $form_data->product_id;
                $categories_id = $form_data->categories_id;
                $product_name = $form_data->product_name;
                $order_no = $form_data->order_no;
                $sort_id = $form_data->sort_id;
                                $datassh['userid'] = $this->userid;
                                $datassh['order_id'] = $form_data->id;
                                $datassh['tablename'] = $tablename;
                                $datassh['order_no'] = $order_no;
                                $datassh['inputname'] = $id;
                                $datassh['notes'] = $product_name.' Bill Product Group';
                                $this->Main_model->insert_commen($datassh, 'bill_changes_log');
                  

                    if ($this->session->userdata['logged_in']['access'] != '31') 
                    {


                        $data['product_id'] = $form_data->product_id;
                        $data['product_name'] = $form_data->product_name;
                        $data['tile_material_name'] = $form_data->tile_material_name;
                        $data['tile_material_id'] = $form_data->tile_material_id;
                        $data['categories_id'] = $form_data->categories_id;
                        $categories_id = $form_data->categories_id;
                        $data['categories_name'] = $form_data->categories_name;
                        $data['dim_one'] = $form_data->dim_one;
                        $data['dim_two'] = $form_data->dim_two;
                        $data['dim_three'] = $form_data->dim_three;
                        $data['image_length'] = $form_data->image_length;
                        $data['gst'] = $form_data->gst;
                        $data['gst_check'] = $form_data->gst_check;
                        $data['profile'] = $form_data->profile;
                        $data['crimp'] = $form_data->crimp;
                        $data['extra_crimp'] = $form_data->extra_crimp;
                        $data['back_crimp'] = $form_data->back_crimp;
                        $data['Meter_to_Sqr_feet'] = $form_data->Meter_to_Sqr_feet;
                        $data['Sqr_feet_to_Meter'] = $form_data->Sqr_feet_to_Meter;
                        $data['nos'] = $form_data->nos;
                        $data['uom'] = $form_data->uom;
                        $data['billing_options'] = $form_data->billing_options;
                        $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                        foreach ($additional_information as $vl) {
                            $label_name = strtolower($vl->label_name);
                            $data[$label_name] = $form_data->$label_name;
                        }
                        $data['commission'] = $form_data->commission;
                         $data['commission_fact'] = $form_data->commission_fact;
                         $data['old_fact_amount'] = $form_data->old_fact_amount;
                         $data['crimp_check'] = $form_data->crimp_check;
                         $data['old_rate_amount'] = $form_data->old_rate_amount;
                         $data['address_id'] = $form_data->address_id;


                        $data['input_values'] = $form_data->input_values;
                        $data['uom_image'] = $form_data->uom_image;
                        $data['color_side'] = $form_data->color_side;


                        $data['address_id_mark'] = $form_data->address_id_mark;
                        $data['reference_image'] = $form_data->reference_image;

                      
                        $data['sub_product_id'] = $form_data->sub_product_id;
                        $data['value_id'] = $form_data->value_id;
                        $data['section_lable'] = $form_data->section_lable;
                        $data['section_value'] = $form_data->section_value;
                        $data['degree'] = $form_data->degree;
                        $data['unit'] = $form_data->unit;
                        $data['order_id'] = $form_data->order_id;
                        $data['order_no'] = $form_data->order_no;
                        $data['fact'] = $form_data->fact;
                        $data['rate'] = $form_data->rate;
                        $data['qty'] = $form_data->qty;
                        $data['sort_id'] = $form_data->sort_id;
                        $data['weight'] = $form_data->weight;
                        $data['amount'] = $form_data->amount;



                    }
                    else
                    {

                        $data['product_id'] = $form_data->product_id;
                        $data['product_name'] = $form_data->product_name;
                        $data['tile_material_name'] = $form_data->tile_material_name;
                        $data['tile_material_id'] = $form_data->tile_material_id;
                        $data['categories_id'] = $form_data->categories_id;
                        $categories_id = $form_data->categories_id;
                        $data['categories_name'] = $form_data->categories_name;
                        $data['dim_one'] = $form_data->dim_one;
                        $data['dim_two'] = $form_data->dim_two;
                        $data['dim_three'] = $form_data->dim_three;
                        $data['image_length'] = $form_data->image_length;
                        $data['gst'] = $form_data->gst;
                        $data['gst_check'] = $form_data->gst_check;
                        $data['profile'] = 0;
                        $data['crimp'] = 0;
                        $data['extra_crimp'] = $form_data->extra_crimp;
                        $data['back_crimp'] = $form_data->back_crimp;
                        $data['Meter_to_Sqr_feet'] = $form_data->Meter_to_Sqr_feet;
                        $data['Sqr_feet_to_Meter'] = $form_data->Sqr_feet_to_Meter;
                        $data['nos'] = 0;
                        $data['uom'] = $form_data->uom;
                        $data['billing_options'] = $form_data->billing_options;
                        $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                        foreach ($additional_information as $vl) {
                            $label_name = strtolower($vl->label_name);
                            $data[$label_name] = $form_data->$label_name;
                        }
                        $data['commission'] = $form_data->commission;
                         $data['commission_fact'] = $form_data->commission_fact;
                         $data['old_fact_amount'] = $form_data->old_fact_amount;
                         $data['crimp_check'] = $form_data->crimp_check;
                         $data['old_rate_amount'] = $form_data->old_rate_amount;
                         $data['address_id'] = $form_data->address_id;


                        $data['input_values'] = $form_data->input_values;
                        $data['uom_image'] = $form_data->uom_image;
                        $data['color_side'] = $form_data->color_side;


                        $data['address_id_mark'] = $form_data->address_id_mark;
                        $data['reference_image'] = '';

                      
                        $data['sub_product_id'] = $form_data->sub_product_id;
                        $data['value_id'] = $form_data->value_id;
                        $data['section_lable'] = $form_data->section_lable;
                        $data['section_value'] = $form_data->section_value;
                        $data['degree'] = $form_data->degree;
                        $data['unit'] = $form_data->unit;
                        $data['order_id'] = $form_data->order_id;
                        $data['order_no'] = $form_data->order_no;
                        $data['fact'] = $form_data->fact;
                        $data['rate'] = $form_data->rate;
                        $data['qty'] = 0;
                        $data['sort_id'] = $form_data->sort_id;
                        $data['weight'] = 0;
                        $data['amount'] = 0;

                    }



                    $this->Main_model->insert_commen($data, $tablename);
                }
            }
            $i = 1;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $form_data->order_no . "' AND categories_id='" . $categories_id . "' AND deleteid='0'  ORDER BY sort_id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $vl) {
                $data_update['count_id'] = $i;
                $data_update['get_id'] = $vl->id;
                $this->Main_model->update_commen($data_update, $tablename);
                $i++;
            }
            $array = array('success' => '2');
            echo json_encode($array);
        }
        if ($form_data->action == 'Copyempty') {
            $tablename = $form_data->tablename_sub;
            $rows_input = $form_data->rows_input;
            $checkinsert = $form_data->checkinsert;
            $additional_information = $this->Main_model->where_names_two_order_by($tablename, 'id', $checkinsert, 'deleteid', '0', 'id', 'ASC');
            foreach ($additional_information as $vl) {
                $product_id = $vl->product_id;
                $categories_id = $vl->categories_id;
                $product_name = $vl->product_name;
                $sort_id = $vl->sort_id;
            }
            for ($i = 0;$i < $rows_input;$i++) {
                if ($categories_id == 1) {
                    $data['product_id'] = $product_id;
                    $data['product_name'] = $product_name;
                }
                $data['tile_material_name'] = "";
                $data['tile_material_id'] = "";
                $data['categories_id'] = $categories_id;
                $data['categories_name'] = "";
                $data['dim_one'] = "";
                $data['dim_two'] = "";
                $data['dim_three'] = "";
                $data['image_length'] = "0";
                $data['gst'] = "0";
                $data['gst_check'] = "0";
                $data['profile'] = "0";
                $data['crimp'] = "0";
                $data['extra_crimp'] = "0";
                $data['back_crimp'] = "0";
                $data['commission'] = "0";
                $data['commission_fact'] = "0";
                $data['address_id'] = "0";
                $data['address_id_mark'] = "0";
                $data['nos'] = "0";
                $data['unit'] = "0";
                $data['order_id'] = $form_data->order_id;
                $data['order_no'] = $form_data->order_no;
                $data['fact'] = "0";
                $data['uom'] = "0";
                $data['rate'] = "0";
                $data['qty'] = "0";
                $data['sort_id'] = $sort_id;
                $data['amount'] = "0";
                $this->Main_model->insert_commen($data, $tablename);
            }
            $i = 1;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $form_data->order_no . "' AND categories_id='" . $categories_id . "' AND deleteid='0' ORDER BY sort_id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $vl) {
                $data_update['count_id'] = $i;
                $data_update['get_id'] = $vl->id;
                $this->Main_model->update_commen($data_update, $tablename);
                $i++;
            }
            $array = array('success' => '2');
            echo json_encode($array);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_by_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE product_id='" . $_GET['product_id'] . "' AND deleteid=0  ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                
                       if($tablenamemain=='purchase_orders_process')
                        {    
                             if($csval->purchase_name!='')
                             {
                                 $product_name = $csval->purchase_name;
                             }
                             
                        }
                
                
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $this->db->query("UPDATE $tablename_sub SET cul='3' WHERE id='" . $value->id . "'");
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->qty * 10.765, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($value->base_id == "") {
                $value->base_id = 1;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
                $value->reference_image=0;
            }
            else
            {
                $value->reference_image=base_url().$value->reference_image;
            }
            
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            if ($value->count_id != '') {
                $count_id = $i;
            } else {
                $count_id = $i;
            }
            
           
            $array[] = array('no' => $count_id, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus,'production_start' => $value->production_start, 'order_id' => $value->order_id,'purchase_request' => $value->purchase_request,'purchase_id' => $value->purchase_id, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id,'reference_image' => $value->reference_image,'sub_product_id' => $value->sub_product_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'return_status' => $value->return_status,'rate_edit' => $value->rate_edit, 'categories_id' => $value->categories_id, 'specifications' => $value->specifications, 'profile_tab' => round($profile,3), 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'base_id' => $value->base_id, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    public function fetch_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
    
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
            $base_check = $valuecs->base_check;
            $mobile_order = $valuecs->mobile_order;
        }
        if($this->session->userdata['logged_in']['access']==11){
            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0  AND product_id>0   ORDER BY categories_id,sort_id ASC");
            $result = $result->result();

        }
        else{
            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0  AND product_id>0  ORDER BY categories_id,sort_id ASC");
            $result = $result->result();  
        }
       
        foreach ($result as $value) {



               $crimp_check=0;
               if($mobile_order==1)
               {
                   
                       $crimp_check=$value->crimp_check;
                   
               }


            $rate=$value->rate+$value->commission;
            $amountdata =$rate*$value->qty;




            if($tablename_sub=='order_product_list_process')
            {

    $randam_id= $value->randam_id;
    if($amountdata==0)
    {
      

//echo "UPDATE sales_load_products  SET amount='0' WHERE  randam_id='".$randam_id."' AND order_id='".$value->order_id."' AND order_product_id='".$value->id."'";

    
    $this->db->query("UPDATE sales_load_products  SET amount='0' WHERE   order_id='".$value->order_id."' AND order_product_id='".$value->id."'");


    }


            }



            $amount = $amountdata;
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $weight = $csval->weight;
                $thickness= $csval->thickness;                
                $density= $csval->density;
                $dimensions= $csval->dimensions;
                $price= $csval->price;
                $standard_weight = $csval->standard_weight;       
                $kg_rmtr_weight = $csval->kg_rmtr_weight;
                  $fact2 = $csval->formula2; // fact2 changes
                $fact1 = $csval->formula; // fact2 changes

                
                       if($tablenamemain=='purchase_orders_process')
                        {    
                             if($csval->purchase_name!='')
                             {
                                 $product_name = $csval->purchase_name;
                             }
                             
                        }

                        if ($csval->categories_id == '1') {
                            if($csval->sub_product_id > 0){
                            $product_list1 = $this->Main_model->where_names('product_list', 'id', $csval->sub_product_id);
                            foreach ($product_list1 as $csval1) {
                                $thickness= $csval1->thickness;
                                $standard_weight = $csval1->standard_weight;       
                                $kg_rmtr_weight = $csval1->kg_rmtr_weight;      
                            }
                            }
                        }

                        //tile product
                        $thickness_tile_prod = "";
                        if($value->tile_material_id > 0){
                            $product_list2 = $this->Main_model->where_names('product_list', 'id', $value->tile_material_id);
                            foreach ($product_list2 as $val1) {
                                $thickness_tile_prod= $val1->thickness;
                                $standard_weight = $val1->standard_weight;       
                                $kg_rmtr_weight = $val1->kg_rmtr_weight;      
                            }
                        }else if($value->sub_product_id > 0){
                            $product_list3 = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
                            foreach ($product_list3 as $val3) {
                                $thickness_tile_prod= $val3->thickness;
                                $standard_weight = $val3->standard_weight;       
                                $kg_rmtr_weight = $val3->kg_rmtr_weight;      
                            }
                        }else{
                            $standard_weight = $csval->standard_weight;       
                            $kg_rmtr_weight = $csval->kg_rmtr_weight;      
                        }
                

                        if ($csval->categories_id == '30') {
                            $top_thickness= $csval->top_sheet_thickness;
                            $bottom_thickness= $csval->bottom_sheet_thickness;
                            $foarm_thickness= $csval->foam_denstiy;
                            if($foarm_thickness == '40(+/- 2) kgs/m3'){
                                $foarm = '40';
                            }else if($foarm_thickness == '50(+/- 2) kgs/m3'){
                                $foarm = '50';
                            }else{
                                $foarm = '';
                            }
                        }
                
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                
                $formula = $csval->formula;

                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                

                $og_formula = $csval->length;
                $kg_formula2 = $csval->width;


                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 0;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '611' || $categories_id == '627') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $this->db->query("UPDATE $tablename_sub SET cul='3' WHERE id='" . $value->id . "'");
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->qty * 10.764, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
           


            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($value->base_id == "") {
                $value->base_id = 1;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
                $value->reference_image=0;
            }
            else
            {
                $value->reference_image=base_url().$value->reference_image;
            }
            
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            if ($value->count_id != '') {
                $count_id = $i;
            } else {
                $count_id = $i;
            }
            
            
                 $profile_edit=0;
                $crimp_edit=0;
                $fact_edit=0;
                $nos_edit=0;
                $qty_edit=0;
                $commission_edit=0;
            if($tablename_sub=='order_product_list_process')
            {
                $profile_edit=$value->profile_edit;
                $crimp_edit=$value->crimp_edit;
                $fact_edit=$value->fact_edit;
                $nos_edit=$value->nos_edit;
                $qty_edit=$value->qty_edit;
                $commission_edit=$value->commission_edit;
            }


           $sort_id= $value->sort_id;
           $sorthide=0;
           $resultmaincountset = $this->db->query("SELECT * FROM $tablename_sub  WHERE sort_id='" .$sort_id . "' AND deleteid=0 ORDER BY id ASC");
           $resultcsset = $resultmaincountset->result();
           if (count($resultcsset)>1) 
           {
               $sorthide=1;
           }
       

            $product_name_sub="";
           $product_list_sub = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
            foreach ($product_list_sub as $csval_sub)
            {

                $product_name_sub=$csval_sub->product_name;
                $product_name_sub_thick=$csval_sub->thickness;
                // $product_name_sub_thick=$csval_sub->kg_rmtr_weight;
            }


         $rate= $value->rate+$value->commission;
         //$rate= $value->rate;
         $old_rate= $value->rate_edit;
         $rate_edit=0;
         if($value->rate_edit>0)
         {
             $rate_edit= $value->rate_edit+$value->commission;
         }
        

         //basic rate
        //  $basic_rate = $value->basic_rate;

        //  if($basic_rate != null){
        //     $base_rate=round($basic_rate,3);
        //  }else{
            $base_rate=round($rate/1.18,4);
        //  }

            


            if($value->amount_1=='')
            {
               // $value->amount_1=$rate;
            }
            if($value->amount_2=='')
            {
                //$value->amount_2=$rate;
            }
            if($value->amount_3=='')
            {
                //$value->amount_3=$rate;
            }



            if($value->net_rate1=='')
            {
                $value->net_rate1=$qty;
            }
            if($value->net_rate2=='')
            {
                $value->net_rate2=$qty;
            }
            if($value->net_rate3=='')
            {
                $value->net_rate3=$qty;
            }




             if($value->c_fact_1=='')
            {
                //$value->c_fact_1=$value->fact;
            }
            if($value->c_fact_2=='')
            {
                //$value->c_fact_2=$value->fact;
            }
            if($value->c_fact_3=='')
            {
                //$value->c_fact_3=$value->fact;
            }



            if($value->total_1=='')
            {
                //$value->total_1=$amount;
            }
            if($value->total_2=='')
            {
                //$value->total_2=$amount;
            }
            if($value->total_3=='')
            {
                //$value->total_3=$amount;
            }
            $status = $value->p_c_status;
            $price_change_status = $status == 2 ? 'Approved' : 
                    ($status == 3 ? 'Rejected' : 
                    ($status == 4 ? 'pending(MD)' : ($status == 1 ? 'pending' : '')));

            //Cancel status 
            if($tablename_sub == 'order_product_list_process'){
                $c_status = $value->cancel_prod;
                $cancel = $c_status == 1 ||  $c_status == 111 ? 'pending' :
                            ($c_status == 3 ? 'Rejected' : 
                            ($c_status == 5 ? 'Rejected' : ($c_status == 7 ? 'Rejected' : '')));

            }else{
                $cancel = "";
                $c_status = "";
            }


                    if($value->commission_fact=='0')
                    {
                        //$value->commission_fact=$value->fact;
                    }

            //Get the current price and calculate the profit and loss
            $current_selling_price = $this->db->query("SELECT rate as latest_rate FROM $tablename_sub WHERE deleteid = 0 AND product_id = '".$value->product_id."' ORDER BY create_date DESC LIMIT 1;")->row();

            $purchase_price=0;
            $resultpp= $this->Main_model->where_names('product_list','id',$value->product_id); //Product_list
            foreach ($resultpp as  $value1) {
            $purchase_price= $value1->average_price;
            }

           if($purchase_price >0 && $purchase_price != "0"){

                $profit_and_loss = 0;
                if($current_selling_price->latest_rate > 0){                    
                    $profit_and_loss=$current_selling_price->latest_rate-$purchase_price;
                }
                $profit_and_loss = round($profit_and_loss ,2);
            }else {
                $profit_and_loss = 'NA';
            }

            $profit_and_loss_val= $profit_and_loss;

            if ($categories_id == 593 || $categories_id == 28) {
                $res = $res = $this->db->query("SELECT SUM(inward_qty) as qtyval FROM purchase_order_coilupdate WHERE product_id ='" . $value->tile_material_id . "'");
                $res = $res->row();
                $qty1= round($res->qtyval*1000 ,3);
           

            $coil_no = $this->db->query("SELECT id,coil_no FROM purchase_order_coilupdate WHERE product_id ='" . $value->tile_material_id . "'")->result();
            $coilarray = array();
            foreach ($coil_no as $res) {
                $coilarray[] = array(
                    'id' => $res->id,
                    'coil_no' => $res->coil_no,
                );
            }


            }
            // if ($categories_id == 593 || $categories_id == 28) { //steel coil
            //     $this->db->query("UPDATE $tablename_sub SET weight='".$qty1."', nos=1 WHERE id='" . $value->id . "'");

            //     $weg = $this->Main_model->where_names($tablename_sub, 'id', $value->id);
            //     foreach ($weg as $weightval)
            //     {
            //         $weight=$weightval->weight;
            //     }
            // }else{
                $weight = $value->weight;
            // }

               $sub_product_id_check='';
                if($value->sub_product_id>0)
                {
                     $sub_product_id_check= $value->sub_product_id.'-';
                }

                if($value->fact2 > 0){ // fact2 changes
                    $fact2 = $value->fact2;
                }

            //decking roll sheet
            $fact_tab =$value->fact;
            if(($value->categories_id == '626' || $value->categories_id == '611') && $value->sub_product_id > 0){
                $prod_li_sub = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
                    foreach ($prod_li_sub as $sub)
                    {
                        $fact1=$sub->formula;
                        $fact2=$sub->formula2  ;
                    }
                    if($value->fact > 0){
                        $fact_tab = $value->fact;
                    }else{
                        $fact_tab = $fact1;
                    }

                     if($value->fact2 > 0){
                        $fact2 = $value->fact2;
                    }
                    
             }
            $billing_options = $value->billing_options;
             if($value->categories_id == '611' || $value->categories_id == '627'){
               if($value->billing_options > 0){
                    $billing_options = $value->billing_options;
               }else{
                    $billing_options = 4;
               }

             }

             $prod_li = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
                foreach ($prod_li as $subs)
                {
                    $basefact=$subs->formula;
                    $basecat=$subs->categories_id;
                }




           $read= '0';
           if($value->categories_id == 34)
           { 
            
                if($value->billing_options!=2)
                {
                     $read= '1';
                }
              


            }
             if($value->categories_id == 36)
            { 

                if($value->billing_options!=2)
                {
                     $read= '1';
                }
                


            }
             if($value->categories_id == 626)
            {

                if($value->billing_options!=2)
                {
                     $read= '1';
                }
              
            }

             if($value->categories_id == 627)
            {

                if($value->billing_options!=2)
                {
                     $read= '1';
                }
              
            }

             if($value->categories_id == 628)
            {

                if($value->billing_options!=2)
                {
                     $read= '1';
                }
              
            }


            // gg changes
            $truncatedValue = floor($amount * 100) / 100;
            $amount = sprintf("%.2f", $truncatedValue);
            if($mobile_order==1)
            {
               $amount = round($amount, 2);
            }
            else
            {
                $amount = round($amount, 2);
            }

             $attachment = "";
              $resultventat = $this->Main_model->where_names_two_order_by('product_images', 'product_id', $value->product_id, 'deleteid', '0', 'id', 'ASC');
              if (count($resultventat) > 0) {
                  $attachment = "attachment_yes";
              }
              if($value->product_id == 9 || $value->product_id == 1069 || $value->product_id == 1070 || $value->product_id == 701){
                    $attachment = "attachment_yes";
              }

// gg changes for material category

$result_material = $this->db->query("SELECT meterial_category FROM order_product_list  WHERE sort_id='" . $value->sort_id . "'");
$result_material_value = $result_material->row();

if($value->meterial_category == "" || $value->meterial_category === NULL){
    $value->meterial_category=$result_material_value->meterial_category;
}




            $array[] = array('no' => $count_id,
            'profile_edit' => round($profile_edit,3),
            'crimp_edit' => round($crimp_edit,3),
            'fact_edit' => round($fact_edit,3),
            'nos_edit' => round($nos_edit,3),
            'qty_edit' => round($qty_edit,3),
            'amountdata'=>$amountdata,
            'read'=>$read,
            'crimp_check'=>$crimp_check,
            'product_price'=>$price,
            'attachment'=>$attachment,
             'commission_edit' => round($commission_edit,3),
             'commission_fact' => $value->commission_fact,
            'id' => $value->id,
             'same' => $same,
             'sub_product_id_check' => $sub_product_id_check,
             'base_rate' => $base_rate,
             'base_check' => $base_check,
             'sorthide' => $sorthide, 
             'imagestatus' => $imagestatus,
             'img_width' => $value->img_width,            
             'profit_and_loss' => $profit_and_loss_val,             
             'current_selling_price' => $current_selling_price->latest_rate,
             'purchase_price' => $purchase_price,
             'fact2'=> $fact2, // fact2 changes
             'basefact'=> $basefact, // fact2 changes
             'basecat'=> $basecat, // fact2 changes
             'fact1'=> $fact1, // fact2 changes
              'meterial_category' => $value->meterial_category,              
              'coil_no' => $coilarray,              
              'order_id' => $value->order_id,
              'activel_qty' => $value->activel_qty,
              'weight' => round($weight,3),
              'default_weight'=>round($weight,3),
              'standard_weight'=>round($standard_weight,3), 
              'kg_rmtr_weight'=>round($kg_rmtr_weight,3), 
              'dimensions' => $dimensions,              
              'density' => $density,           
              'default_fact'=>$formula,
              'thickness'=>$thickness,
              'sub_product_name_tab'=>$product_name_sub,
              'product_name_sub_thick'=>$product_name_sub_thick,
              'purchase_request' => $value->purchase_request,
              'purchase_id' => $value->purchase_id,
               'product_name_tab' => $product_name,
                'tile_material_name' => $value->tile_material_name,
                 'tile_material_id' => $value->tile_material_id,
                 // 'reference_image' => $value->reference_image,
                 'reference_image' => $value->reference_image,
                 'sub_product_id' => $value->sub_product_id, 
                 'categories' => $categories,
                  'type' => $type,
                   'description' => $description, 
                   'product_id' => $value->product_id,                   
                   'tile_material_id' => $value->tile_material_id,                   
                   'thickness_tile_prod' => $thickness_tile_prod,
                   'top' => $top_thickness,
                   'bottom' => $bottom_thickness,
                   'foarm' => $foarm,
                   'sort_id' => $value->sort_id,
                   'count_id' => $value->count_id,
                    'return_status' => $value->return_status,
                    'rate_edit' => round($rate_edit,2), 
                    'categories_id' => $value->categories_id,
                     'specifications' => $value->specifications,
                      'profile_tab' => round($profile,3), 
                      'crimp_tab' => round($crimp,3), 
                      'checked' => $value->checked, 
                      'dim_two' => $value->dim_two,                      
                      'coil_other' => $value->coil_no_other,
                       'dim_one' => $value->dim_one,
                       'old_fact_amount' => $value->old_fact_amount,
                       'commssion_amount' => $value->commssion_amount,
                        'dim_three' => $value->dim_three,
                         'image_length' => $value->image_length,
                          'gst' => $value->gst,
                           'gst_check' => $value->gst_check, 
                           'extra_crimp' => round($value->extra_crimp,3),
                            'back_crimp' => round($value->back_crimp,3),
                             'proudtcion_no' => $value->proudtcion_no,
                              'nos_tab' => round($value->nos,2),
                               'unit_tab' => $value->unit,
                                'return_status' => $value->return_status,
                                 'fact_tab' => round($fact_tab,2), 
                                 'uom' => $value->uom,
                                  'base_id' => $value->base_id,
                                  'sub_product_id_edit' => $value->sub_product_id_edit,
                                   'stock' => $stock, 
                                   'kg_price' => $kg_price, 
                                   'og_price' => $og_price, 
                                   'og_formula' => $og_formula,
                                    'kg_formula2' => $kg_formula2, 
                                    'billing_options' => $billing_options,
                                     'commission_tab' => round($value->commission,2),
                                      'cate_status' => $cate_status, 
                                      'net_rate1' => $value->net_rate1,
                                      'net_rate2' => $value->net_rate2,
                                      'net_rate3' => $value->net_rate3,
                                      'amount_1' => $value->amount_1,
                                      'amount_2' => $value->amount_2,
                                      'amount_3' => $value->amount_3,
                                      'total_1' => round($value->total_1, 2),
                                      'total_2' => round($value->total_2, 2),
                                      'total_3' => round($value->total_3, 2),
                                      'c_fact_1' => $value->c_fact_1,
                                      'c_fact_2' => $value->c_fact_2,
                                      'c_fact_3' => $value->c_fact_3,
                                      'categories_id_get' => $categories_id,
                                       'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2),
                                        'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2),
                                         'rate_tab' => round($rate,2), 
                                         'rate_tab_old' => round($rate,2),
                                         'old_rate' => $old_rate, 
                                         'cul' => $value->cul,
                                          'qty_tab' => round($qty,3), 
                                          'price_change_status' => $price_change_status,
                                          'cancel' => $cancel,                                          
                                          'cancel_prod' => $c_status,
                                          //gg changes
                                          //'amount_tab' => sprintf("%.2f",$amount),
                                          'amount_tab' => $amount,

                                          'selling_price' => round($price, 2));
            $i++;
        }
        echo json_encode($array);
    }
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_delivery_data_by_load() {




       


        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        
        
         $driver_pickip=0;
         $loadset="";
         if(isset($_GET['driver_pickip']))
         {
             $driver_pickip = $_GET['driver_pickip'];
             
             if($driver_pickip==1)
             {
                //$loadset=" AND loadstatus='".$driver_pickip."'";
              
             }
             
         }

         if (isset($_GET['DC_id']))
         {



                $DC_id = $_GET['DC_id'];
                //$loadset=' AND randam_id="'.$DC_id.'"';
    $this->db->query("UPDATE sales_load_products SET randam_id='".$DC_id."'  WHERE pickedstatus IN ('1','0') AND order_id='".$_GET['order_id']."' AND delivered_products=0 AND dispatch_load=0 AND loadstatus=1");

             if($driver_pickip==1)
             {
                $this->db->query("UPDATE sales_load_products SET loadstatus='1',pickedstatus='1'  WHERE pickedstatus IN ('1','0') AND order_id='".$_GET['order_id']."' AND delivered_products=0 AND dispatch_load=1");
              
             }


         }
      
          $this->db->query("UPDATE sales_load_products SET pickedstatus='1'  WHERE randam_id IS NOT NULL");





        $customer_id = 0;
        $paricel_mode = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            //$paricel_mode = $valuecs->paricel_mode;
            $customer_id = $valuecs->customer_id;
            $delivery_status = $valuecs->delivery_status;
        }
        
        if($driver_pickip==0)
        {
            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "'  AND deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
        }
        else
        {
             $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "'  AND deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
        }
        

        $result = $result->result();
        foreach ($result as $value) {



            $rate=$value->rate+$value->commission;
            $amountdata = $rate * $value->qty;
            $bill_nos = $value->nos;
            $amount = $amountdata;
            if ($value->paricel_mode == '1') {
                
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                
                $amountdata = $rate * $value->modify_qty;
                $amount = $amountdata;
            }



            $picked_status_val = $value->picked_status;
            $unlode_check_box=0;

            if($delivery_status==2)
            {


                if($picked_status_val=='0')
                {
                        
                        $unlode_check_box=1;
                        
                }


            }



           $packed_nos=0;
           $packed_nos_data=0;
           $dispatch_qty=0;
           $packed_qty=0;
           $loadstatus=0;
        //    if($driver_pickip==0)
        //    {
            
                    $resultload = $this->db->query("SELECT SUM(dispatch_nos) as dispatch_nos,SUM(dispatch_qty) as dispatch_qty,SUM(dispatch_amount) as dispatch_amount,SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1 AND loadstatus=1 AND order_id='".$value->order_id."'  AND randam_id='".$DC_id."' ORDER BY id ASC");
                    $resultload = $resultload->result();
                    foreach ($resultload as $valueload)
                    {
                            

                          

                                     $loadnos= $valueload->nos;
                                     //$value->nos= $value->nos-$valueload->nos;
                                     $loadamount= $valueload->amount;
                                     $loadqty= $valueload->qty;


                               
                       
                            
                        
                    }
                    // For one rupee issue
                    $empty_loadnos=0;
                    $resultload_empty = $this->db->query("SELECT SUM(nos) as nos FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1 AND loadstatus=1 AND order_id='".$value->order_id."' ORDER BY id ASC");
                    $resultload_empty1 = $resultload_empty->result();
                    foreach ($resultload_empty1 as $valueload1)
                    {
                            

                          

                                     $empty_loadnos= $valueload1->nos;
                
                        
                    }



                   
                    $resultload = $this->db->query("SELECT loadstatus,SUM(dispatch_nos) as dispatch_nos,SUM(dispatch_qty) as dispatch_qty,SUM(dispatch_amount) as dispatch_amount,SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1  AND loadstatus=1 AND  order_id='".$value->order_id."' AND randam_id='".$DC_id."'   ORDER BY id ASC");
                    $resultload = $resultload->result();

                    
                    foreach ($resultload as $valueload)
                    {   


                            $dispatch_nos= $valueload->dispatch_nos;
                            $dispatch_qty= $valueload->dispatch_qty;
                            $packed_qty= $valueload->qty;

                                        // if($valueload->loadstatus==1)
                                        // {
                                             $loadqty= $valueload->qty;
                                             $loadamount= $valueload->amount;
                                             $loadnos= $valueload->nos;

                                        //}


                            if($dispatch_nos>0)
                            {
                                 $packed_nos= $valueload->nos;
                            }
                            else
                            {
                                  $packed_nos= $valueload->nos;
                            }
                        
                           
                            $loadstatus=$valueload->loadstatus;
                           
                    }

                    // echo'<pre>';print_r($loadqty);
                    // echo'<pre>';print_r($loadnos);
                    // echo'<pre>';print_r($loadamount);
                    // echo'<pre>';print_r($packed_nos);
                    // echo'<pre>';print_r($loadstatus); exit;
                    
          
        //   }
           
        /*    if($driver_pickip==1)
           {
            
                        $resultload = $this->db->query("SELECT SUM(dispatch_nos) as dispatch_nos,SUM(dispatch_qty) as dispatch_qty,SUM(dispatch_amount) as dispatch_amount,SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1 AND loadstatus=1 AND order_id='".$value->order_id."' AND delivered_products=0    ORDER BY id ASC");
                        $resultload = $resultload->result();
                        foreach ($resultload as $valueload)
                        {
                            
                                
                                    

                                             $loadnos= $valueload->nos;
                                             //$value->nos= $value->nos-$valueload->nos;
                                             $loadamount= $valueload->amount;
                                             $loadqty= $valueload->qty;

                                  
                            
                        }

                           $resultload = $this->db->query("SELECT loadstatus,SUM(dispatch_nos) as dispatch_nos,SUM(dispatch_qty) as dispatch_qty,SUM(dispatch_amount) as dispatch_amount,SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1  AND order_id='".$value->order_id."'   ORDER BY id ASC");
                            $resultload = $resultload->result();
                            foreach ($resultload as $valueload)
                            {
                                
                                        $dispatch_nos= $valueload->dispatch_nos;
                                        $dispatch_qty= $valueload->dispatch_qty;
                                        $packed_qty= $valueload->qty;


                                        if($valueload->loadstatus==1)
                                        {
                                             $loadqty= $valueload->qty;
                                             $loadamount= $valueload->amount;
                                             $loadnos= $valueload->nos;

                                        }

                                        

                                        if($dispatch_nos>0)
                                        {
                                           $packed_nos= $valueload->nos;
                                        }
                                        else
                                        {
                                           $packed_nos= $valueload->nos;
                                        }
                                        $loadstatus=$valueload->loadstatus;
                                   
                            }

                                   // gg changes

                        $resultload = $this->db->query("SELECT loadstatus,SUM(dispatch_nos) as dispatch_nos,SUM(dispatch_qty) as dispatch_qty,SUM(dispatch_amount) as dispatch_amount,SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1 AND  order_id='".$value->order_id."' AND randam_id='".$DC_id."'   ORDER BY id ASC");
                        $resultload = $resultload->result();
                        foreach ($resultload as $valueload)
                        { 
                            $packed_nos_data= $valueload->nos;
                        }
            
           }
*/
   
           if($dispatch_nos>0)
           {

           }
           else
           {
             $dispatch_nos=0;
           }
            
            $address_id = $value->address_id;
            $addresstopariel = "";
            if ($value->paricel_mode == 1) {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }

            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 0;
                }
                elseif ($categories_id == '591' || $categories_id == '626') {
                    $cate_status = 1;
                }
                 else {
                    $cate_status = 0;
                }
            }



           
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($value->paricel_mode == '1') {
                $qty = $value->modify_qty;
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $profile_val = '';
            if ($value->profile) {
                $data = [2 => 'SQMTR', 3 => 'FEET', 4 => 'MM', 5 => 'MTR', 6 => 'INCH'];
                
                $profile = $value->profile;
                $uom = $value->uom;
                   // gg changes 

                   $dim_one=$value->dim_one;
                   $dim_two=$value->dim_two;
                   $dim_three=$value->dim_three;
                if ($uom === '2') {
                    // Convert from square meters to feet
                    $profile_val = $profile * 10.7639;
                } elseif ($uom === '4') {
                    // Convert from millimeters to feet
                    $profile_val = $profile * 0.00328084;
                } elseif ($uom === '5') {
                    // Convert from meters to feet
                    $profile_val = $profile * 3.28084;
                } elseif ($uom === '6') {
                    // Convert from inches to feet
                    $profile_val = $profile * 0.0833333;
                } else {
                    $profile_val = $profile; // If uom is '3' (FEET), no conversion needed
                }
            }

 //$this->db->query("UPDATE order_product_list_process SET modify_qty='0',modify_nos='0' WHERE id='" . $value->id . "' AND loadstatus=0");


             if($loadstatus>0)
             {
                $loadstatus=1;
             }

             if($delivery_status==1)
             {
                $packed_nos=$bill_nos;


                if($type==9 || $type==19)
                {
                     $packed_nos=$qty;
                }

               

             }
              else
             {
          
               
                 if($type==9 || $type==19)
                {
                     $packed_nos=$packed_qty;
                     //$dispatch_nos=$dispatch_qty;
                }



             }
            
              if($loadstatus==null)
              {
                    $loadstatus=0;
              }

              if($type==9 || $type==19)
              {
                    $bill_nos = $value->qty;
              }else {
                    $bill_nos = $value->nos;
              }
             















// conversion ->gg changes

if ($value->uom == '3') {
    $profile_tab_convert = round($profile, 3);
    $crimp_tab_convert = round($crimp, 3);
    $dim_one_convert = round($dim_one, 3);
    $dim_two_convert = round($dim_two, 3);
    $dim_three_convert = round($dim_three, 3);
}

if ($value->uom == '4') {
    $profile_set = $profile / 304.8;
    $crimp_set = $crimp / 304.8;
    $dim_one_convert = $dim_one / 304.8;
    $dim_two_convert = $dim_two / 304.8;
    $dim_three_convert = $dim_three / 304.8;

    $profile_tab_convert = round($profile_set, 3);
    $crimp_tab_convert = round($crimp_set, 3);
    $dim_one_convert = round($dim_one_convert, 3);
    $dim_two_convert = round($dim_two_convert, 3);
    $dim_three_convert = round($dim_three_convert, 3);
}

if ($value->uom == '5') {
    $profile_set = $profile / 0.305; // Corrected from 3.281 to 0.305
    $crimp_set = $crimp / 0.305; // Corrected from 3.281 to 0.305
    $dim_one_convert = $dim_one / 0.305;
    $dim_two_convert = $dim_two / 0.305;
    $dim_three_convert = $dim_three / 0.305;

    $profile_tab_convert = round($profile_set, 3);
    $crimp_tab_convert = round($crimp_set, 3);
    $dim_one_convert = round($dim_one_convert, 3);
    $dim_two_convert = round($dim_two_convert, 3);
    $dim_three_convert = round($dim_three_convert, 3);
}

if ($value->uom == '6') {
    $profile_set = $profile / 12;
    $crimp_set = $crimp / 12;
    $dim_one_convert = $dim_one / 12;
    $dim_two_convert = $dim_two / 12;
    $dim_three_convert = $dim_three / 12;

    $profile_tab_convert = round($profile_set, 3);
    $crimp_tab_convert = round($crimp_set, 3);
    $dim_one_convert = round($dim_one_convert, 3);
    $dim_two_convert = round($dim_two_convert, 3);
    $dim_three_convert = round($dim_three_convert, 3);
}

if ($value->uom == '2') {



    $profile_set = $profile * 10.764;
    $crimp_set = $crimp * 10.764;
    $dim_one_convert = $dim_one * 10.764;
    $dim_two_convert = $dim_two * 10.764;
    $dim_three_convert = $dim_three * 10.764;

    $profile_tab_convert = round($profile_set, 3);
    $crimp_tab_convert = round($crimp_set, 3);
    $dim_one_convert = round($dim_one_convert, 3);
    $dim_two_convert = round($dim_two_convert, 3);
    $dim_three_convert = round($dim_three_convert, 3);
}



/// in transit 
// gg changes

// $intransit_delivered12 = $this->db->query("SELECT SUM(nos) as intransit_delivered_nos,SUM(qty) as intransit_delivered_qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1 AND driver_confirmation=1 AND dispatch_load=1 AND loadstatus=1 AND order_id='".$value->order_id."'");

$intransit_delivered12 = $this->db->query("
    SELECT 
        SUM(slp.nos) AS intransit_delivered_nos,
        SUM(slp.qty) AS intransit_delivered_qty,
        oplp.return_status
    FROM 
        sales_load_products AS slp
    JOIN 
        order_product_list_process AS oplp ON slp.order_product_id = oplp.id
    WHERE 
        slp.order_product_id = '" . $value->id . "' 
        AND slp.pickedstatus = 1 
        AND slp.driver_confirmation = 1 
        AND slp.dispatch_load = 1 
        AND slp.loadstatus = 1 
        AND slp.order_id = '" . $value->order_id . "'
       
");



$intransit_delivered123 = $intransit_delivered12->result();
$intransit_delivered_count=0;
foreach($intransit_delivered123 as $trans) {

    if($trans->intransit_delivered_nos == "" || $trans->intransit_delivered_nos ==0)
    {
        $intransit_delivered_count=$trans->intransit_delivered_qty;
    }else {
      
        $intransit_delivered_count=$trans->intransit_delivered_nos;

    }
}
$in_transit='';
if($intransit_delivered_count != 0){
    $in_transit=intval($intransit_delivered_count);

}


          // gg changes for packed_nos_data

          $resultload_packs = $this->db->query("SELECT SUM(nos) as nos,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1 AND  order_id='".$value->order_id."' AND randam_id='".$DC_id."'   ORDER BY id ASC");
          $resultload_pack = $resultload_packs->result();
          foreach ($resultload_pack as $valueload_pack)
          { 


            if($type==9 || $type==19)
            {
                  $packed_nos_data = $valueload_pack->qty;
            }else {
                  $packed_nos_data = $valueload_pack->nos;
            }
         

          }


          
// sub products to show


$product_name_sub="";
$product_list_sub = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
 foreach ($product_list_sub as $csval_sub)
 {

     $product_name_sub=$csval_sub->product_name;
 }

 // to show load pending to driver order panel
$enable_load_pending=0;
 if($driver_pickip==1)
 {
    $enable_load_pending=$value->enable_load_pending;
 }else {
    $enable_load_pending=0;
 }


            $array[] = array('no' => $i,
                'id' => $value->id,
                'loadnos' => round($loadnos,2),
                // For one rupee issue
                'empty_loadnos'=>$empty_loadnos,
                'loadamount' => round($loadamount,2),
                'loadqty' => round($loadqty,2), 
                'same' => $same, 
                'transit_delivered'=>$in_transit,
                'imagestatus' => $imagestatus, 
                'loadstatus' => $loadstatus,
                'profile_tab_convert' => $profile_tab_convert,
                'crimp_tab_convert' => $crimp_tab_convert,
                'dim_one_convert' => $dim_one_convert,
                'dim_two_convert' => $dim_two_convert,
                'dim_three_convert' => $dim_three_convert,
                'delivery_status' => $value->delivery_status,
                'order_id' => $value->order_id, 
                'paricel_mode' => $value->paricel_mode,
                'product_name_tab' => $product_name,
                'tile_material_name' => $value->tile_material_name,
                'tile_material_id' => $value->tile_material_id,
                'categories' => $categories, 
                'type' => $type, 
                'labletype' => $type, 
                'unlode_check_box'=>$unlode_check_box,
                'dispatch_nos'=>$dispatch_nos,
                'description' => $description,
                'product_id' => $value->product_id, 
                'categories_id' => $value->categories_id,
                'profile_tab' => round($profile,3),
                'crimp_tab' => round($crimp,3),
                'checked' => $value->checked,
                'dim_two' => $value->dim_two,
                'dim_one' => $value->dim_one, 
                'dim_three' => $value->dim_three,
                'image_length' => $value->image_length,
                'picked_status' => $value->picked_status,
                'gst' => $value->gst,
                'gst_check' => $value->gst_check, 
                'extra_crimp' => round($value->extra_crimp,3),
                'back_crimp' => round($value->back_crimp,3),
                'proudtcion_no' => $value->proudtcion_no,
                'nos_tab' => round($value->nos,2),
                'unit_tab' => $value->unit,
                'return_status' => $value->return_status, 
                'fact_tab' => round($value->fact,2),
                'uom' => $value->uom,
                'stock' => $stock,
                'bill_nos'=>$bill_nos,
                'packed_nos'=>$packed_nos,
                'packed_nos_data'=>$packed_nos_data,
                'kg_price' => $kg_price,
                'og_price' => $og_price, 
                'og_formula' => $og_formula,
                'kg_formula2' => $kg_formula2,
                'billing_options' => $value->billing_options,
                'commission_tab' => $value->commission,
                'cate_status' => $cate_status,
                'categories_id_get' => $categories_id, 
                'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2),
                'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 
                'rate_tab' => round($rate,2), 
                'cul' => $value->cul, 
                'qty_tab' => round($qty,3),
                'reference_image' => $value->reference_image,
                'sub_product_name_tab'=>$product_name_sub,
                'remark' => $value->remark,
                'otherremark' => $value->otherremark,
                'profile_val'=> round($profile_val,3),
                'addresstopariel' => $addresstopariel,
                'amount_tab' => sprintf("%.2f",$amount),
                'activel_qty' => $value->activel_qty,
                'enable_load_pending'=>$enable_load_pending
            );
                $i++;
        }
        echo json_encode($array);
    }
    
    public function fetchCustomerdetails_view()
    {

        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $order_id = $form_data->id;
        $DC_id = $form_data->DC_id;
        $i = 1;
        $array = array();



        

       

 // gg changes for scope task
   $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
   $result = $this->db->query("SELECT a.*,ds.reference_no,ds.utr_status,ds.payment_mode,ds.delivery_charge,
    ds.finance_status as finance_status_last,
    ds.assign_status as assign_status_last,
    ds.trip_start_date as trip_start_date_last,
    ds.trip_start_time as trip_start_time_last,
    ds.vehicle_id as vehicle_id_last,
    ds.collection_remarks as collection_remarks_last,ds.collection_remarks_2 as collection_remarks_2_last,
    ds.return_amount as return_amount_last

     FROM orders_process as a $JOIN WHERE  a.order_base>0 AND a.id='".$order_id."' AND ds.randam_id='".$DC_id."' ORDER BY a.id DESC");
   $result= $result->result();



        foreach ($result as $value)
        {


            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {

                if($tot->deleteid==0)
                {
                     $rate=$tot->rate+$tot->commission;
                    $totalamount+= $rate*$tot->qty;
                    $commission+= $tot->commission;
                 }
            }
            if ($route_id == 0) {
                $route_id_base = 0;
            } else {
                $route_id_base = $value->route_id;
            }
            
            
          
            $weight=0;
            
             $lengeth=$this->maxlength($value->id);
            
            
            $company_name_data = "";
            $email = "";
            $phone = "";
            $address = "";
            $localityid=0;
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval)
             {
                $localityid=$csval->locality;
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }


            if($value->customer_address_id>0) 
            {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                foreach ($customers_adddrss as $customers_adddrss_v)
                {
                    $localityid=$customers_adddrss_v->locality;
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }


            if($value->shipping_address>0) 
            {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                foreach ($customers_adddrss as $customers_adddrss_v) 
                {
                    $localityid=$customers_adddrss_v->locality;
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }


              $localityname = "";
                $route_id="";
                $resultlocality = $this->Main_model->where_names('locality', 'id',  $localityid);
                foreach ($resultlocality as $vl) {
                    $localityname = $vl->name;
                    $route_id = $vl->route_id;
             }


            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id_last);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            
            
                $sales_name="";
                $sales_phone="";
                 $sales_person = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
                foreach ($sales_person as $sales) {
                    $sales_name = $sales->name;
                    $sales_phone = $sales->phone;
                    
                }
                
            
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $value->vehicle_id_last);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            if ($assigen_status_last == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status_last == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status_last == '3') {
                $statusval = "Delivered";
            }
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Own Scope";
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }


                              $tcs_status=$value->tcs_status;
                              $tcsamount=$value->tcsamount;
                            
                              $tcsamount=0;


             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {
        
            $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$value->id."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$value->customer_id."'");
            $resultset = $resultset->result();
       
            foreach ($resultset as $set)
                 {
                  
                              $tcsamountval=round($set->totalamount,2);
                              $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
                              if($tcsamountvaldata>5000000)
                              {
                                  $tcsamount=round($discountfulltotal*0.1/100);
                              }
                              $tcsamount=0;
                    
                   
                 }


             }


             $discountfulltotal=$discountfulltotal+$tcsamount;


          $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);


            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          
                    }
                    else
                    {

                           $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }
            

                    $weight=0;
                    $query_weight_get = $this->db->query("SELECT SUM(weight) as totalweight FROM $tablename_sub  WHERE order_id='".$value->id."' AND deleteid=0");
                    $result_totalweight = $query_weight_get->result();
                    foreach ($result_totalweight as $we) {
                        $weight = $we->totalweight;
                    }



           if($value->collection_remarks_last==0)
           {
                        $value->collection_remarks_last=$value->collection_remarks_2_last;
           }
            

            $array = array('no' => $i,'localityname'=>$localityname, 'sales_phone' => $sales_phone, 'sales_name' => $sales_name,'customer_id' => $value->customer_id,'id' => $value->id,'weight' => round($weight,2), 'base_id' => base64_encode($value->id),'lengeth' => $lengeth, 'order_no' => $value->order_no, 'name' => $company_name, 'company_name_data' => $company_name_data, 'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 'payment_mode' => $value->payment_mode, 'payment_image' => $payment_image, 'collection_remarks' => $value->collection_remarks_last-$value->return_amount_last,'reference_no' => $value->reference_no, 'delivery_mode' => $value->delivery_mode, 'delivery_status' => $value->delivery_status, 'delivery_status_name' => $delivery_status, 'delivery_charge' => round($value->delivery_charge, 2), 'totalamount' => round($discountfulltotal + $value->delivery_charge, 2), 'commission' => round($commission, 2), 'reason' => $value->reason_last, 'sort_id' => $value->sort_id_last, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status_last,'delivery_date_time' => $value->delivery_date_time,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status,'loading_status' => $value->loading_status, 'order_base' => $value->finance_status_last,'assign_date' => date('d-m-Y', strtotime($value->assign_date_last)) . ' ' . $value->assign_time_last, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date_last)) . ' ' . $value->trip_start_time_last,'utr_status'=>$value->utr_status);
            $i++;
        }
        echo json_encode($array);
    }


    public function fetch_data_delivery_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $paricel_mode = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            //$paricel_mode = $valuecs->paricel_mode;
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND loadstatus_by_cate=0 AND loadstatus=1 AND product_id!='' ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            if ($value->paricel_mode == '1') {
                
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                
                $amountdata = $value->rate * $value->modify_qty;
                $amount = $amountdata + $value->commission;
            }
            $address_id = $value->address_id;
            $addresstopariel = "";
            if ($value->paricel_mode == 1) {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($value->paricel_mode == '1') {
                $qty = $value->modify_qty;
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'loadstatus' => $value->loadstatus,'order_id' => $value->order_id, 'paricel_mode' => $value->paricel_mode, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($profile,3), 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => round($qty,3), 'addresstopariel' => $addresstopariel, 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    public function fetch_data_delivery_data_driver() {


        $i = 1;
                $array = array();
                $cate_status = '0';
                $tablename_sub = $_GET['tablename_sub'];
                $tablenamemain = $_GET['tablenamemain'];
                $convert = $_GET['convert'];
        
                 $loadset="";
                 if (isset($_GET['DC_id']))
                 {
        
                        $DC_id = $_GET['DC_id'];
                       $loadset=' AND ss.randam_id="'.$DC_id.'"';
        
                 }
        
                 $JOIN=' JOIN order_delivery_order_status as ds ON a.order_id=ds.order_id JOIN sales_load_products as ss ON a.id=ss.order_product_id';
        
           
                $customer_id = 0;
                $paricel_mode = 0;
                $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
                $resultcs = $resultmain->result();
                foreach ($resultcs as $valuecs) {
                    $paricel_mode = $valuecs->paricel_mode;
                    $customer_id = $valuecs->customer_id;
                }
                $result = $this->db->query("SELECT a.* FROM $tablename_sub  as a $JOIN WHERE a.order_id='" . $_GET['order_id'] . "'  AND a.deleteid=0 AND ss.loadstatus=1  $loadset  GROUP BY a.id ORDER BY a.categories_id,a.sort_id ASC");
                $result = $result->result();
                foreach ($result as $value) {
                    
                    
                    
          $resultload = $this->Main_model->where_names_two_order_by('sales_load_products', 'order_product_id', $value->id, 'randam_id', $DC_id, 'id', 'ASC');
                    foreach ($resultload as $valueload)
                    {
        
        
                        if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                        { 
        
                              
                                            $value->rate= $valueload->rate;
                                            $value->qty= $valueload->qty;
                                            $value->nos= $valueload->nos;
                              
                        }
        
        
                    }
                    
        
                    $return_status=$value->return_status;
                    $amountdata = $value->rate * $value->qty;
                    $amount = $amountdata + $value->commission;
                    $address_id = $value->address_id;
        
        
                    $addresstopariel = "";
                    if ($value->paricel_mode == 1) {
                        $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
                        foreach ($customers_adddrss as $customers_adddrss_v) {
                            $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                        }
                    }
        
        
                    $description = "";
                    $product_name = "";
                    $kg_price = 0;
                    $og_price = 0;
                    $og_formula = 0;
                    $kg_formula2 = 0;
                    $stock = 0;
                    $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
                    foreach ($product_list as $csval) {
                        $description = $csval->description;
                        $product_name = $csval->product_name;
                        $categories = $csval->categories;
                        $categories_id = $csval->categories_id;
                        $type = $csval->type;
                        $gst = $csval->gst;
                        $kg_price = $csval->kg_price;
                        $og_price = $csval->price;
                        $stock = round($csval->stock);
                        $og_formula = $csval->formula;
                        $kg_formula2 = $csval->formula2;
                        if ($categories_id == '1') {
                            $cate_status = 1;
                        } elseif ($categories_id == '2622') {
                            $cate_status = 1;
                        } elseif ($categories_id == '5') {
                            $cate_status = 0;
                        } elseif ($categories_id == '32') {
                            $cate_status = 1;
                        } elseif ($categories_id == '40') {
                            $cate_status = 0;
                        } elseif ($categories_id == '41') {
                            $cate_status = 0;
                        } 
                        elseif ($categories_id == '591' || $categories_id == '626') {
                            $cate_status = 1;
                        }else {
                            $cate_status = 0;
                        }
                    }
                    $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
                    $resultsameqty = $resultsameqty->result();
                    $same = 0;
                    if (count($resultsameqty) > 0) {
                        $same = 1;
                    }
                    $qty = round($value->qty, 4);
                    if ($value->paricel_mode == '1') {
                        $qty = $value->modify_qty;
                    }
                    $profile = $value->profile;
                    $crimp = $value->crimp;
                    $imagestatus = 1;
                    if ($value->reference_image == '') {
                        $imagestatus = 0;
                    }
                    if ($value->gst == '') {
                        $value->gst = $gst;
                    }
        
        
                    // conversion ->gg changes
        
                    if ($value->uom == '3') {
                        $profile_tab_convert = round($profile, 3);
                        $crimp_tab_convert = round($crimp, 3);
                    }
        
        
                    if ($value->uom == '4') {
                        $profile_set = $profile / 304.8;
                        $crimp_set = $crimp / 304.8;
                        $profile_tab_convert = round($profile_set, 3);
                        $crimp_tab_convert = round($crimp_set, 3);
                    }
        
                    if ($value->uom == '5') {
                        $profile_set = $profile / 3.281;
                        $crimp_set = $crimp / 3.281;
                        $profile_tab_convert = round($profile_set, 3);
                        $crimp_tab_convert = round($crimp_set, 3);
                    }
        
        
                    if ($value->uom == '6') {
                        $profile_set = $profile / 12;
                        $crimp_set = $crimp / 12;
                        $profile_tab_convert = round($profile_set, 3);
                        $crimp_tab_convert = round($crimp_set, 3);
                    }
        
                    if ($value->uom == '2') {
                        $profile_set = $profile / 10.764;
                        $crimp_set = $crimp / 10.764;
                        $profile_tab_convert = round($profile_set, 3);
                        $crimp_tab_convert = round($crimp_set, 3);
                    }
        
        
                    $reference_image="";
                    if($value->reference_image!="")
                    {
                         $reference_image=base_url().$value->reference_image; 
                    }
        
        
        
        
        
        
        
        
        
                    $array[] = array('no' => $i, 
        
                        'return_status'=>$return_status,
                        'crimp_tab_convert'=>$crimp_tab_convert,
                        'profile_tab_convert'=>$profile_tab_convert,
                        'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'loadstatus' => $value->loadstatus,'order_id' => $value->order_id, 'paricel_mode' => $value->paricel_mode, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($profile,3), 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'weight' => $value->weight, 'qty_tab' => round($qty,3), 'addresstopariel' => $addresstopariel, 'amount_tab' => sprintf("%.2f",$amount),
                        'reference_image'=>$reference_image);
                  
                    $i++;
                }
                echo json_encode($array);
        
                  }
            
    
    
    
    
          public function fetch_data_get() {
            $i = 1;
            $array = array();
            $cate_status = '0';
            $tablename_sub = $_GET['tablename_sub'];
            $tablenamemain = $_GET['tablenamemain'];
            $convert = $_GET['convert'];
            $customer_id = 0;
            $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $valuecs) {
                $customer_id = $valuecs->customer_id;
            }
            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0 AND product_id!='0'  ORDER BY categories_id,sort_id ASC");
            $result = $result->result();
            foreach ($result as $value) {
    
    
               $rate= $value->rate+$value->commission;
    
    
                if ($value->paricel_mode == 1) {
                    if ($value->modify_qty == "") {
                        $amountdata = $rate * $value->qty;
                    } else {
                        
                        if($value->modify_qty==0)
                        {
                            $value->modify_qty=$value->qty;
                        }
                        
                        $amountdata = $rate * $value->modify_qty;
                    }
                } else {
                    $amountdata = $rate * $value->qty;
                }
                $amount = $amountdata;
                $description = "";
                $product_name = "";
                $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
                foreach ($product_list as $csval) {
                    $description = $csval->description;
                    $product_name = $csval->product_name;
                    $categories = $csval->categories;
                    $categories_id = $csval->categories_id;
                    $type = $csval->type;
                    $gst = $csval->gst;
                    if ($categories_id == '1') {
                        $cate_status = 1;
                    } elseif ($categories_id == '2622') {
                        $cate_status = 1;
                    } elseif ($categories_id == '5') {
                        $cate_status = 0;
                    } elseif ($categories_id == '32') {
                        $cate_status = 1;
                    } elseif ($categories_id == '40') {
                        $cate_status = 1;
                    } elseif ($categories_id == '41') {
                        $cate_status = 1;
                    } 
                    elseif ($categories_id == '591' || $categories_id == '626') {
                        $cate_status = 1;
                    }
                    else {
                        $cate_status = 0;
                    }
                }
                $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
                $resultsameqty = $resultsameqty->result();
                $same = 0;
                if (count($resultsameqty) > 0) {
                    $same = 1;
                }
                $qty = round($value->qty, 4);
                if ($convert == 1) {
                    $qty = round($value->qty, 4);
                }
                if ($convert == 2) {
                    $qty = round($value->Sqr_feet_to_Meter, 4);
                }
                if ($convert == 'undefined') {
                    $qty = round($value->qty, 4);
                }
                $profile = $value->profile;
                $crimp = $value->crimp;
                if ($convert == 3) {
                    if ($type == 4) {
                        $profile = round($value->profile / 304.8, 4);
                        $crimp = round($value->crimp / 304.8, 4);
                    } else {
                        $profile = $value->profile;
                        $crimp = $value->crimp;
                    }
                }
                if ($convert == 4) {
                    if ($type == 4) {
                        $profile = $value->profile;
                        $crimp = $value->crimp;
                    } else {
                        $profile = round($value->profile * 304.8, 4);
                        $crimp = round($value->crimp * 304.8, 4);
                    }
                }
                if ($convert == 5) {
                    $profile = round($value->profile *0.305, 4);
                    $crimp = round($value->crimp *0.305, 4);
                }
                if ($convert == 6) {
                    $profile = round($value->profile * 12, 4);
                    $crimp = round($value->crimp * 12, 4);
                }
                if ($value->paricel_mode == 1)
                {
                    
                    $modify_qty_data = $value->modify_qty; 
                    $modify_qty = $value->modify_qty;
                    $modify_qty=round($value->qty-$modify_qty,2);
                    
                }
                else
                { 
                    $modify_qty = 0;
                     $modify_qty_data =0;
                }
                
                $imagestatus = 1;
                if ($value->reference_image == '') {
                    $imagestatus = 0;
                }
                if ($value->gst == '') {
                    $value->gst = $gst;
                }
    
    
    
    
    
    
    
    
    
                  $rate=$value->rate+$value->commission;
    
    //gg changes
    
    $truncatedValue = floor($amount * 100) / 100;
    $amount= number_format($truncatedValue, 2);
    
                $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'loadstatus_by_cate' => $value->loadstatus_by_cate,'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($profile,3), 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'address_id' => $value->address_id, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'paricel_mode' => $value->paricel_mode, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $rate, 'cul' => $value->cul,'modify_qty_data' => $modify_qty_data, 'modify_qty' => $modify_qty, 'qty_tab' => round($qty,3), 
            
                // gg changes
                // 'amount_tab' => sprintf("%.2f",$amount)
                'amount_tab' => $amount
            
            
            );
                $i++;
            }
            echo json_encode($array);
            
        }
    
    
    public function fetch_data_calculation() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $cid = $_GET['cid'];
        $typev = $_GET['type'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "'  AND deleteid=0 ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                }
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                 else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($cid == $value->id) {
                $this->db->query("UPDATE $tablename_sub SET cul='" . $convert . "' WHERE id='" . $value->id . "'");
                if ($convert == 5) {
                    $profile = round($value->profile *0.305, 4);
                    $crimp = round($value->crimp *0.305, 4);
                }
                if ($convert == 6) {
                    $profile = round($value->profile * 12, 4);
                    $crimp = round($value->crimp * 12, 4);
                }
                if ($convert == 3) {
                    if ($type == 4) {
                        $profile = round($value->profile / 304.8, 4);
                        $crimp = round($value->crimp / 304.8, 4);
                    } else {
                        $profile = $value->profile;
                        $crimp = $value->crimp;
                    }
                }
                if ($convert == 4) {
                    if ($type == 4) {
                        $profile = $value->profile;
                        $crimp = $value->crimp;
                    } else {
                        $profile = round($value->profile * 304.8, 4);
                        $crimp = round($value->crimp * 304.8, 4);
                    }
                }
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($profile,3), 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
        }
        echo json_encode($array);
    }
    










     public function fetch_data_production_order_by() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $status = $_GET['status'];
        $sqlstatus = '';
        //$sqlstatus = ' AND   b.production_status=' . $status;
        $order_id = $_GET['order_id'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $order_id . "' AND  deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT a.*,b.color,b.color_qty,b.thickness,b.thickness_qty,b.corners,b.corners_qty,b.crimp_check,b.crimp_check_qty,b.bay_info,b.bin_info,b.proudtcion_no as proudtcion_no_val,b.id as labelid,b.production_status as production_status,b.proudtcion_id as proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE a.order_id='" . $order_id . "' AND  a.deleteid=0 $sqlstatus ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                }
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                 else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE  a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            if ($value->proudtcion_no_val == 0 || $value->proudtcion_no_val == '') {
                $proudtcion_no_val = $value->nos;
                $cmp_no = 0;
            } else {
                $cmp_no = $value->proudtcion_no_val;
                $proudtcion_no_val = $value->nos - $value->proudtcion_no_val;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'labelid' => $value->labelid, 'order_no' => $value->order_no, 'type' => $type, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'proudtcion_id' => $value->proudtcion_id, 'categories_id' => $value->categories_id, 'profile_tab' =>round($value->profile,2), 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'checked' => $value->checked, 'production_status' => $value->production_status, 'bay_info' => $value->bay_info, 'bin_info' => $value->bin_info, 'color' => $value->color, 'color_qty' => $value->color_qty, 'thickness' => $value->thickness, 'thickness_qty' => $value->thickness_qty, 'corners' => $value->corners, 'corners_qty' => $value->corners_qty, 'crimp_check' => $value->crimp_check, 'crimp_check_qty' => $value->crimp_check_qty, 'proudtcion_no' => $proudtcion_no_val, 'cmp_no' => $cmp_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }










     public function fetch_data_production_order_by_print() 
     {





        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $status = $_GET['status'];

        $cancelid = $_GET['cancelid'];

         $order_no1 = $_GET['order_no1'];
         $order_no2 = $_GET['order_no2'];

         $from_date = $_GET['from_date'];
        if($from_date!='')
        {


            $from_date = $_GET['from_date'];
            $to_date = $_GET['to_date'];

         }
         else
         {

               $from_date =  date('Y-m-d');
               $to_date = date('Y-m-d');

         }
           

            $status=0;
           if(isset($_GET['status_ssd']))
           {
                 $status=$_GET['status_ssd'];
           }



         $sqlstatuss = '';
         if($cancelid=='0')
         {

             if($order_no1=='')
             {
                 $sqlstatuss .= ' AND create_date BETWEEN "'.$from_date .'" AND "'.$to_date .'" AND   order_base NOT IN ("22","-1","-2")';
             }
             else
             {
                 $sqlstatuss .= ' AND   order_base NOT IN ("22","-1","-2")';
             }


         }
         else
         {
             $cancelid=-1;
             $sqlstatuss .= ' AND  create_date BETWEEN "'.$from_date .'" AND "'.$to_date .'" AND order_base=' . $cancelid;
         }
        


        if($order_no1>0)
        {

             if($order_no1>0 && $order_no2>0)
             {

                $sqlstatuss .= ' AND create_date BETWEEN "'.$from_date .'" AND "'.$to_date .'" AND count BETWEEN "'.$order_no1 .'" AND "'.$order_no2 .'"';

             }
             else
             {

                  $sqlstatuss .= ' AND  count="'.$order_no1 .'"';

             }

                
           

        }


        if($status=='1')
        {
            $sqlstatuss .= ' AND   SSD_check=' . $status;
        }



         // get loged in user id
        $sess_array =$this->session->userdata['logged_in'];
        $user = $sess_array['userid'];

         //get categories
         $query = $this->db->query("SELECT a.production_print 
         FROM `user_category_filter` as a 
         WHERE a.user_login_id = '".$user."'   ");
         

        // Check if categories is set and not empty
        if (isset($_GET['categories'])) 
        {
             $category = $_GET['categories'];
        }
        else
        {
            $query = $query->row(); // Assuming you expect a single result
            $category = $query ? $query->production_print : "";
        }

        $category_val = $category;

        if ($category === "0"){
            $category = "";
            $category_val = "0";
        }

        if($category && $category != 'null' && !empty($category))
        {

              $categoriesArray = explode(',', $category);
                
        }

     


        $category_id = "";
        if (!empty($categoriesArray)) {
            // Include category filter
           
            $category_id = implode(',', $categoriesArray); // Convert array to comma-separated string
            $sqlstatuss .= ' AND EXISTS (
                SELECT 1
                FROM ' . $tablename_sub . ' AS sub
                WHERE sub.order_id = ' . $tablenamemain . '.id
                AND sub.categories_id IN (' . $category_id . ')
            )';
        }

      
        
        $order_id = $_GET['order_id'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE   deleteid=0  $sqlstatuss  ORDER BY count ASC");
        $resultcs = $resultmain->result();



        // Store category values against the login user
        if (!empty($category_val)) {
            // Check if the user ID exists in the table
            $userchek = $this->db->get_where('user_category_filter', array('user_login_id' => $user));
            $userdata = $userchek->row();

            if ($userdata) {
                // User ID exists, update the production_print field
                $data = array('production_print' => $category_val);
                $this->db->where('user_login_id', $user);
                $this->db->update('user_category_filter', $data);
            } else {
                // User ID doesn't exist, insert a new record
                $data = array(
                    'user_login_id' => $user,
                    'production_print' => $category_val
                );
                $this->db->insert('user_category_filter', $data);
            }
        }
        else
        {
                $data = array('production_print' => $category_val);
                $this->db->where('user_login_id', $user);
                $this->db->update('user_category_filter', $data);
        }









        foreach ($resultcs as $valuecs)
        {
            $customer_id = $valuecs->customer_id;
            $company_name="";
            $customer_id_list = $this->Main_model->where_names('customers', 'id', $customer_id);
            foreach ($customer_id_list as $csvals)
            {
                  
                  $company_name=$csvals->company_name;
                  $sales_team_id=$csvals->sales_team_id;


            }



            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $valuecs->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }

$subarray=array();
$product_ids=array();
$tile_material_id=array();

$k=1;

            $this->validateEntry($valuecs->id);
            
       if (isset($category_id) && !empty($category_id)) {
            $test = "yes";
            $result = $this->db->query("SELECT * FROM $tablename_sub WHERE order_id='" . $valuecs->id . "'
                AND categories_id IN (" . $category_id . ")
                AND deleteid=0 AND product_id>0
                ORDER BY categories_id,product_id,sort_id,id ASC");
        } else {
            $test = 'no';
            $result = $this->db->query("SELECT * FROM $tablename_sub WHERE order_id='" . $valuecs->id . "'
                AND deleteid=0 AND product_id>0
                ORDER BY categories_id,product_id,sort_id,id ASC");
        }




        $result = $result->result();


         foreach ($result as $valuess) {
             $product_ids[]=$valuess->product_id;


              if($valuess->tile_material_id>0)
              {
              $tile_material_id[]=$valuess->tile_material_id;
              }
             
        }

        $product_ids_set=array_unique($product_ids);
         $product_ids_set=implode(',',$product_ids_set);
        $product_ids_set=explode(',',$product_ids_set);

  $tile_material_id_set=array();
  if(count($tile_material_id)>0)
  {
       $tile_material_id_set=array_unique($tile_material_id);
       $tile_material_id_set=implode(',',$tile_material_id_set);
       $tile_material_id_set=explode(',',$tile_material_id_set);
  }   


        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";



            $color_style ="white";
          
            for ($i=0; $i <count($product_ids_set); $i++)
            { 
                
                if($i % 2 == 0) 
                {

                        if($product_ids_set[$i]==$value->product_id)
                        {
                            $color_style ="gray";
                        }
                        
                         
                }



            }


             if(count($tile_material_id_set)>0)
           {

                    $color_style ="";
                    for ($j=0; $j <count($tile_material_id_set); $j++)
                   { 



                           if($j % 2 == 0) 
                           {
                               if($tile_material_id_set[$j]==$value->tile_material_id)
                               {
                                   $color_style ="gray";
                               }
                           }

                   }

           }





$product_name_sub="";
  $product_list = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
            foreach ($product_list as $csval) {
                
                $product_name_sub = $csval->product_name;

               if($csval->brand=='NO BRAND')
               {
                  $csval->brand='';
               }
               $colors_sub=$csval->color.' '.$csval->thickness.' '.$csval->brand;

               
            }




            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;


                           $uomstatus = $csval->uom;


               

               

               if($csval->categorie_type!='')
               {
                   $product_name = $csval->categorie_type.' '.$csval->material_type;
               }
               else
               {
                   if($csval->categories_id==19)
                   {

                        $colors=$csval->color.' '.$csval->thickness;
                        $product_name =str_replace($colors,'', $csval->product_name);

                                  
                   }
                   else
                   {
                        $product_name = $csval->product_name;
                   }

               }
                

               

               if($csval->brand=='NO BRAND')
               {
                  $csval->brand='';
               }

               //$colors=$csval->color.' '.$csval->thickness.' '.$csval->brand;

$colors=$csval->color.' '.$csval->thickness.' '.$csval->coating_mass.' '.$csval->yield_strength.' '.$csval->brand;


                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }



               $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');


            $same = 0;

            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            if ($value->proudtcion_no_val == 0 || $value->proudtcion_no_val == '') {
                $proudtcion_no_val = $value->nos;
                $cmp_no = 0;
            }
             else {
                $cmp_no = $value->proudtcion_no_val;
                $proudtcion_no_val = $value->nos - $value->proudtcion_no_val;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }


            if($value->nos>=0)
            {
                
            }
            else
            {
                $value->nos=$value->qty;
            }
             
             
             $crimp=0;
             if($value->crimp>0)
             {
                $crimp=$value->crimp;
             }

              $conversion=$value->profile+$crimp;
            $meconversion=$value->profile+$crimp;
            $profile=$value->profile;
            $crimp=$value->crimp;
            if($value->uom=='4')
            {
                     
                      $conversion=$value->profile+$crimp;
                        
                      $meconversion=$conversion/1000;
                   

                    $profile=$value->profile;
                    $profile=$profile/304.8;

                     $crimp=$value->crimp;
                     $crimp=$crimp/304.8;

                      


            }

            if($value->uom=='3')
            {

                       $length_data= $value->profile+$crimp;
                       
                       $conversion=$length_data*304.8;
                       $meconversion=$length_data/3.281;

                       $profile=$value->profile;
                        $crimp=$value->crimp;



            }


            if($value->uom=='5')
            {          
                       $length_data= $value->profile+$crimp;
                      
                       $conversion=$length_data*1000;

                       $meconversion= $value->profile+$crimp;


                      $profile=$value->profile;
                      $profile=$profile*3.281;

                      $crimp=$value->crimp;
                      $crimp=$crimp*3.281;



            }

            if($value->uom=='6')
            {

                      $length_data= $value->profile+$crimp;
                     

                      $conversion=$length_data*25.4;
                      $meconversion=$length_data/39.37;


                      $profile=$value->profile;
                      $profile=$profile/12;


                      $crimp=$value->crimp;
                      $crimp=$crimp/12;



            }




             


             $reference_image="";
             if($value->reference_image!="")
             {
                  $reference_image=base_url().$value->reference_image; 
             }

            $subarraydata=array();
            foreach ($additional_information as $vl)
            {
                        $label_name = strtolower($vl->label_name);

                       
                        if($value->$label_name!='')
                        {



                        $subarraydata[] =ucfirst($label_name) .' : '.$value->$label_name;


                        }

                        
            }


           $subvalues= implode(' , ', $subarraydata);
            



              if($uomstatus=='Nos' && $value->categories_id != "1")
              {
                     $value->nos=$value->qty;
              }


          $uom_image='';
                if($value->uom_image=='6')
            {
                $uom_image='INCH';
            }
            if($value->uom_image=='3')
            {
                $uom_image='FEET';
            }
            if($value->uom_image=='4')
            {
                $uom_image='MM';
            }
            if($value->uom_image=='5')
            {
                $uom_image='MTR';
            }
            
         


            $subarray[] = array(
                'no' => $k, 
                'id' => $value->id,
                'subvalues' => $subvalues,
                'uom_image' => $uom_image,
                'same' => $same, 
                'imagestatus' => $imagestatus,
                'order_id' => $value->order_id,
                'labelid' => $value->labelid,
                'order_no' => $value->order_no,
                 'color_style'=>$color_style,
                 'reason' => $value->reason,
                 'type' => $type,
                  'product_name_tab' => $product_name,
                  'colors' => $colors,
                   'categories' => $categories,
                    'description' => $description,
                     'product_id' => $value->product_id,
                      'tile_material_name' => $value->tile_material_name,
                       'tile_material_id' => $value->tile_material_id,
                        'categories_id' => $value->categories_id, 
                         'remarks' => $value->remarks, 
                        'profile_tab' => round($profile,3),
                         'crimp_tab' => round($crimp,3), 
                         'dim_two' => $value->dim_two, 
                         'dim_one' => $value->dim_one,
                          'dim_three' => $value->dim_three,
                          'reference_image' => $reference_image,
                           'image_length' => $value->image_length, 
                           'product_name_sub' => $product_name_sub, 
                            'colors_sub' => $colors_sub, 
                          'gst' => $value->gst,
                           'gst_check' => $value->gst_check, 
                           'extra_crimp' => $value->extra_crimp, 
                          'back_crimp' => $value->back_crimp, 
                          'checked' => $value->checked, 
                          'nos_tab' => $value->nos, 
                          'unit_tab' => $value->unit,
                           'return_status' => $value->return_status,
                           'fact_tab' => $value->fact,
                            'conversion' => round($conversion), 
                            'meconversion' => round($meconversion,2), 
                           'uom' => $value->uom, 
                           'billing_options' => $value->billing_options,
                            'commission_tab' => $value->commission,
                             'cate_status' => $cate_status, 
                            'categories_id_get' => $categories_id,
                             'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 
                             'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2),
                              'rate_tab' => $value->rate,
                               'qty_tab' => round($value->qty,3));
                            









            $k++;
        }



       











          $array[] = array('no' => $i, 
            'company_name' => $company_name, 
            'sales_name'=>$sales_name,
            'sales_phone'=>$sales_phone,
            'order_no' => $valuecs->order_no,
            'order_id' => $valuecs->id,
            'delivery_date_time' => $valuecs->delivery_date_time,
            'SSD_check' => $valuecs->SSD_check,
            'excess_payment_status' => $valuecs->excess_payment_status,
            'base_id' => base64_encode($valuecs->id),
            'create_date' => date('d-m-Y',strtotime($valuecs->create_date)),
            'subarray' => $subarray
           );




          $i++;
        }



      
        echo json_encode($array);










    }
















     public function fetch_data_production_order_by_print_files() 
     {





        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $status = $_GET['status'];

        $cancelid = $_GET['cancelid'];
          $order_no1 = $_GET['order_no1'];
         $order_no2 = $_GET['order_no2'];


         $from_date = $_GET['from_date'];
        if($from_date!='')
        {


            $from_date = $_GET['from_date'];
            $to_date = $_GET['to_date'];

         }
         else
         {

               $from_date =  date('Y-m-d');
               $to_date = date('Y-m-d');

         }


       
          $status=0;
           if(isset($_GET['status_ssd']))
           {
                 $status=$_GET['status_ssd'];
           }

         

         $sqlstatuss = '';
         if($cancelid=='0')
         {

             if($order_no1=='')
             {
                 $sqlstatuss .= ' AND a.create_date BETWEEN "'.$from_date .'" AND "'.$to_date .'" AND a.order_base NOT IN ("22","-1","-2")';
             }
             else
             {
                 $sqlstatuss .= ' AND   a.order_base NOT IN ("22","-1","-2")';
             }


         }
         else
         {
             $cancelid=-1;
             $sqlstatuss .= ' AND  a.order_base=' . $cancelid;
         }



      
        if($order_no1>0)
        {




             if($order_no1>0 && $order_no2>0)
             {

                  $sqlstatuss .= ' AND  a.create_date BETWEEN "'.$from_date .'" AND "'.$to_date .'" AND a.count BETWEEN "'.$order_no1 .'" AND "'.$order_no2 .'"';

             }
             else
             {

                  $sqlstatuss .= ' AND  a.count="'.$order_no1 .'"';

             }

                
           

        }

           if($status=='1')
        {
            $sqlstatuss .= ' AND   a.SSD_check=' . $status;
        }




         // get loged in user id
        $sess_array =$this->session->userdata['logged_in'];
        $user = $sess_array['userid'];

         //get categories
         $query = $this->db->query("SELECT a.production_print 
         FROM `user_category_filter` as a 
         WHERE a.user_login_id = '".$user."'   ");
         

        // Check if categories is set and not empty
        if (isset($_GET['categories'])) 
        {
             $category = $_GET['categories'];
        }
        else
        {
            $query = $query->row(); // Assuming you expect a single result
            $category = $query ? $query->production_print : "";
        }

        $category_val = $category;

        if ($category === "0"){
            $category = "";
            $category_val = "0";
        }

        if($category && $category != 'null' && !empty($category))
        {

              $categoriesArray = explode(',', $category);
                
        }

     


        $category_id = "";
        if (!empty($categoriesArray)) {
            // Include category filter
           
            $category_id = implode(',', $categoriesArray); // Convert array to comma-separated string
            $sqlstatuss .= ' AND EXISTS (
                SELECT 1
                FROM ' . $tablename_sub . ' AS sub
                WHERE sub.order_id = a.id
                AND sub.categories_id IN (' . $category_id . ')
            )';
        }


      
        
        $order_id = $_GET['order_id'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT a.* FROM $tablenamemain as a JOIN  $tablename_sub as b ON a.id=b.order_id WHERE   a.deleteid=0  AND  b.deleteid=0  AND b.product_id>0 AND b.reference_image!=''   $sqlstatuss GROUP BY a.id ORDER BY a.count ASC");
        $resultcs = $resultmain->result();






        if (!empty($category_val)) {
            // Check if the user ID exists in the table
            $userchek = $this->db->get_where('user_category_filter', array('user_login_id' => $user));
            $userdata = $userchek->row();

            if ($userdata) {
                // User ID exists, update the production_print field
                $data = array('production_print' => $category_val);
                $this->db->where('user_login_id', $user);
                $this->db->update('user_category_filter', $data);
            } else {
                // User ID doesn't exist, insert a new record
                $data = array(
                    'user_login_id' => $user,
                    'production_print' => $category_val
                );
                $this->db->insert('user_category_filter', $data);
            }
        }
        else
        {
                $data = array('production_print' => $category_val);
                $this->db->where('user_login_id', $user);
                $this->db->update('user_category_filter', $data);
        }




        foreach ($resultcs as $valuecs)
        {
            $customer_id = $valuecs->customer_id;
            $company_name="";
            $customer_id_list = $this->Main_model->where_names('customers', 'id', $customer_id);
            foreach ($customer_id_list as $csvals)
            {
                  
                  $company_name=$csvals->company_name;
                  $sales_team_id=$csvals->sales_team_id;
                  


            }

              $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $valuecs->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }



$subarray=array();
$k=1;


       if (isset($category_id) && !empty($category_id)) {
            $test = "yes";
            $result = $this->db->query("SELECT * FROM $tablename_sub WHERE order_id='" . $valuecs->id . "'
                AND categories_id IN (" . $category_id . ")
                AND deleteid=0 AND product_id>0
                ORDER BY categories_id,sort_id,id ASC");
        } else {
            $test = 'no';
            $result = $this->db->query("SELECT * FROM $tablename_sub WHERE order_id='" . $valuecs->id . "'
                AND deleteid=0 AND product_id>0
                ORDER BY categories_id,sort_id,id ASC");
        }

        



  //$result = $this->db->query("SELECT * FROM $tablename_sub WHERE order_id='" . $valuecs->id . "' AND  deleteid=0  ORDER BY product_id,sort_id ASC");
        $result = $result->result();



         foreach ($result as $valuess) {
             $product_ids[]=$valuess->product_id;
             
        }

$product_ids_set=array_unique($product_ids);
            $product_ids_set=implode(',',$product_ids_set);
        $product_ids_set=explode(',',$product_ids_set);


        foreach ($result as $value) 
        {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";


                
            
            for ($i=0; $i <count($product_ids_set); $i++)
            { 
                
                if($i % 2 == 0) 
                {
                          $color_style ="";
                        if($product_ids_set[$i]==$value->product_id)
                        {
                            $color_style ="gray";
                        }
                        
                         
                }



            }





$product_name_sub="";
  $product_list = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
            foreach ($product_list as $csval) {
                
                $product_name_sub = $csval->product_name;

               if($csval->brand=='NO BRAND')
               {
                  $csval->brand='';
               }
               $colors_sub=$csval->color.' '.$csval->thickness.' '.$csval->brand;









               
            }




            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;



$uomstatus = $csval->uom;




                if($csval->categorie_type!='')
               {
                   $product_name = $csval->categorie_type.' '.$csval->material_type;
               }
               else
               {
                   if($csval->categories_id==19)
                   {

                        $colors=$csval->color.' '.$csval->thickness;
                        $product_name =str_replace($colors,'', $csval->product_name);

                                  
                   }
                   else
                   {
                        $product_name = $csval->product_name;
                   }

               }
                

               
                             

               if($csval->brand=='NO BRAND')
               {
                  $csval->brand='';
               }
               //$colors=$csval->color.' '.$csval->thickness.' '.$csval->brand;

 $colors=$csval->color.' '.$csval->thickness.' '.$csval->coating_mass.' '.$csval->yield_strength.' '.$csval->brand;

       

                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }




 $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');

            $same = 0;
            
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            if ($value->proudtcion_no_val == 0 || $value->proudtcion_no_val == '') {
                $proudtcion_no_val = $value->nos;
                $cmp_no = 0;
            } else {
                $cmp_no = $value->proudtcion_no_val;
                $proudtcion_no_val = $value->nos - $value->proudtcion_no_val;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }


            if($value->nos>0)
            {
                
            }
            else
            {
                $value->nos=$value->qty;
            }
             
             
             $crimp=0;
             if($value->crimp>0)
             {
                $crimp=$value->crimp;
             }

              $conversion=$value->profile+$crimp;
            $meconversion=$value->profile+$crimp;
            $profile=$value->profile;
            $crimp=$value->crimp;
            if($value->uom=='4')
            {
                     
                      $conversion=$value->profile+$crimp;
                        
                      $meconversion=$conversion/1000;
                   

                    $profile=$value->profile;
                    $profile=$profile/304.8;

                     $crimp=$value->crimp;
                     $crimp=$crimp/304.8;

                      


            }

            if($value->uom=='3')
            {

                       $length_data= $value->profile+$crimp;
                       
                       $conversion=$length_data*304.8;
                       $meconversion=$length_data/3.281;

                       $profile=$value->profile;
                        $crimp=$value->crimp;



            }


            if($value->uom=='5')
            {          
                       $length_data= $value->profile+$crimp;
                      
                       $conversion=$length_data*1000;

                       $meconversion= $value->profile+$crimp;


                      $profile=$value->profile;
                      $profile=$profile*3.281;

                      $crimp=$value->crimp;
                      $crimp=$crimp*3.281;



            }

            if($value->uom=='6')
            {

                      $length_data= $value->profile+$crimp;
                     

                      $conversion=$length_data*25.4;
                      $meconversion=$length_data/39.37;


                      $profile=$value->profile;
                      $profile=$profile/12;


                      $crimp=$value->crimp;
                      $crimp=$crimp/12;



            }






             $reference_image="";
             if($value->reference_image!="")
             {
                  $reference_image=base_url().$value->reference_image; 
             }
                

          
             
           if($value->reference_image!='')
           {


           $subarraydata=array();
            foreach ($additional_information as $vl)
            {
                        $label_name = strtolower($vl->label_name);

                       
                        if($value->$label_name!='')
                        {



                        $subarraydata[] =ucfirst($label_name) .' : '.$value->$label_name;


                        }

                        
            }


           $subvalues= implode(' , ', $subarraydata);
          

             if($uomstatus=='Nos')
              {
                     $value->nos=$value->qty;
              }

 $uom_image='';
             if($value->uom_image=='6')
            {
                $uom_image='INCH';
            }
            if($value->uom_image=='3')
            {
                $uom_image='FEET';
            }
            if($value->uom_image=='4')
            {
                $uom_image='MM';
            }
            if($value->uom_image=='5')
            {
                $uom_image='MTR';
            }
            



            $subarray[] = array('no' => $k, 'id' => $value->id,
             'same' => $same, 
             'imagestatus' => $imagestatus,
              'subvalues' => $subvalues,
              'uom_image' => $uom_image,
              'order_id' => $value->order_id,
               'labelid' => $value->labelid,
                'order_no' => $value->order_no,
                'reason' => $value->reason,
                 'type' => $type,
                  'product_name_tab' => $product_name,
                  'colors' => $colors,
                   'categories' => $categories,
                    'description' => $description,
                     'color_style'=>$color_style,
                     'product_id' => $value->product_id,
                      'tile_material_name' => $value->tile_material_name,
                       'tile_material_id' => $value->tile_material_id,
                        'categories_id' => $value->categories_id, 
                        'profile_tab' => round($profile,3),
                         'crimp_tab' =>  round($crimp,3), 
                         'dim_two' => $value->dim_two, 
                         'dim_one' => $value->dim_one,
                          'dim_three' => $value->dim_three,
                          'reference_image' => $reference_image,
                           'image_length' => $value->image_length, 
                           'product_name_sub' => $product_name_sub, 
                           'remarks' => $value->remarks, 
                           'colors_sub' => $colors_sub,
                          'gst' => $value->gst,
                           'gst_check' => $value->gst_check, 
                           'extra_crimp' => $value->extra_crimp, 
                          'back_crimp' => $value->back_crimp, 
                          'checked' => $value->checked, 
                          'nos_tab' => $value->nos, 
                          'unit_tab' => $value->unit,
                           'return_status' => $value->return_status,
                           'fact_tab' => $value->fact,
                            'conversion' => round($conversion), 
                            'meconversion' => round($meconversion,2), 
                           'uom' => $value->uom, 
                           'billing_options' => $value->billing_options,
                            'commission_tab' => $value->commission,
                             'cate_status' => $cate_status, 
                            'categories_id_get' => $categories_id,
                             'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 
                             'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2),
                              'rate_tab' => $value->rate,
                               'qty_tab' => round($value->qty,3));
           

            }


            $k++;
        }


          $array[] = array('no' => $i, 
            'company_name' => $company_name, 
             'sales_name'=>$sales_name,
            'sales_phone'=>$sales_phone,
            'order_no' => $valuecs->order_no,
            'order_id' => $valuecs->id,
            'delivery_date_time' => $valuecs->delivery_date_time,
            'SSD_check' => $valuecs->SSD_check,
            'excess_payment_status' => $valuecs->excess_payment_status,
            'base_id' => base64_encode($valuecs->id),
            'create_date' => date('d-m-Y',strtotime($valuecs->create_date)),
            'subarray' => $subarray
           );




          $i++;
        }



      
        echo json_encode($array);










    }












    
    public function fetch_data_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $status = $_GET['status'];
        $sqlstatus = '';
        if ($status == 1) {
            $sqlstatus = ' AND  b.production_status=1 OR b.production_status=-1 OR b.production_status=2';
        } elseif ($status == 3) {
            $sqlstatus = ' AND   b.production_status=4 OR b.production_status=5 OR b.production_status=' . $status;
        } elseif ($status == 4) {
            $sqlstatus = ' AND   b.production_status=5 OR b.production_status=' . $status;
        } elseif ($status == 10) {
            $sqlstatus = ' AND  b.production_status=4 OR b.production_status=-1 OR b.production_status=5 OR b.production_status=3';
        } else {
            $sqlstatus = ' AND  b.production_status=' . $status;
        }
        $product_id = $_GET['product_id'];
        $customer_id = 0;
       
        $result = $this->db->query("SELECT a.*,b.color,b.color_qty,b.thickness,b.thickness_qty,b.corners,b.corners_qty,b.crimp_check,b.crimp_check_qty,b.bay_info,b.bin_info,b.proudtcion_no as proudtcion_no_val,b.id as labelid,b.production_status as production_status,b.proudtcion_id as proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE b.product_id='" . $product_id . "' AND  a.deleteid=0 $sqlstatus ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE  a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            if ($value->proudtcion_no_val == 0 || $value->proudtcion_no_val == '') {
                $proudtcion_no_val = $value->nos;
                $cmp_no = 0;
            } else {
                $cmp_no = $value->proudtcion_no_val;
                $proudtcion_no_val = $value->nos - $value->proudtcion_no_val;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'labelid' => $value->labelid, 'order_no' => $value->order_no, 'type' => $type, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'proudtcion_id' => $value->proudtcion_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($value->profile,3), 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'SSD_check' => $value->SSD_check, 'excess_payment_status' => $value->excess_payment_status, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'checked' => $value->checked, 'production_status' => $value->production_status, 'bay_info' => $value->bay_info, 'bin_info' => $value->bin_info, 'color' => $value->color, 'color_qty' => $value->color_qty, 'thickness' => $value->thickness, 'thickness_qty' => $value->thickness_qty, 'corners' => $value->corners, 'corners_qty' => $value->corners_qty, 'crimp_check' => $value->crimp_check, 'crimp_check_qty' => $value->crimp_check_qty, 'proudtcion_no' => $proudtcion_no_val, 'cmp_no' => $cmp_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
   
    public function fetch_data_order_process_by_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablenamemain = $_GET['tablename'];
        $order_product_id = $_GET['order_product_id'];
        $order_product_id=explode(",",$order_product_id);
        
        
        $order_product_id=implode("','",$order_product_id);
        
        
        $result = $this->db->query("SELECT * FROM $tablenamemain  WHERE product_id='" . $_GET['product_id'] . "' AND order_product_id IN ('" . $order_product_id . "') AND deleteid=0 ORDER BY sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'order_id' => $value->order_id, 'product_id' => $value->product_id, 'order_product_id' => $value->order_product_id, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name, 'sort_order' => $value->sort_order, 'create_date' => $value->create_date, 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
   
    public function fetch_data_order_process() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablenamemain = $_GET['tablename'];
        $order_id = $_GET['order_id'];
        $order_product_id = $_GET['order_product_id'];
        $result = $this->db->query("SELECT * FROM $tablenamemain  WHERE order_id='" . $_GET['order_id'] . "' AND order_product_id='" . $_GET['order_product_id'] . "' AND deleteid=0 ORDER BY sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'order_id' => $value->order_id, 'product_id' => $value->product_id, 'order_product_id' => $value->order_product_id, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name, 'sort_order' => $value->sort_order, 'create_date' => $value->create_date, 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    public function fetch_data_vendor() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT a.* FROM $tablename_sub as a JOIN product_list as b ON b.id=a.product_id WHERE a.order_id='" . $_GET['order_id'] . "' AND b.link_to_purchase=1 AND a.deleteid=0 ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $gst = $csval->gst;
                $type = $csval->type;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') 
            {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($value->profile,3), 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_similer() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id!='" . $_GET['order_id'] . "' AND product_id='" . $product_id . "' AND deleteid=0 ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            if ($convert == 3) {
                $profile = $value->profile;
            }
            if ($convert == 4) {
                $profile = round($value->profile * 304.8, 4);
            }
            if ($convert == 5) {
                $profile = round($value->profile *0.305, 4);
            }
            if ($convert == 6) {
                $profile = round($value->profile * 12, 4);
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($profile,3), 'type' => $type, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_commission() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0 AND product_id!='0' ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $gst = $csval->gst;
                $type = $csval->type;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '630') {
                    $cate_status = 1;
                }elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                }
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                 else {
                    $cate_status = 0;
                }
            }
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            } else {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($value->profile,3), 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchDataCategorybase_by_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE b.id='" . $_GET['product_id'] . "' AND a.deleteid=0 GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            if ($convert == 1) {
                $qty = $value->qty_total;
            } else {
                $qty = $value->Sqr_feet_to_Meter;
            }
            if ($value->categories_name == 'Puff panel') {
                $value->type = '13';
            }
            $lablenos = 'Nos';
            if ($value->type == '2') {
                $lable = 'Height';
                $lable2 = 'Length';
                $lablenos = 'Nos';
                $labletype = 2;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '4') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $lablenos = 'Nos';
                $labletype = 4;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '5') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 5;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '6') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 6;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '15') {
                $lable = 'Length';
                $lable2 = 'Width';
                $labletype = 15;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '16') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 16;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '19') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 19;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '7') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 7;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                if ($value->categories_name == 'Polynum') {
                     $lable = 'QTY';
                    $lablenos = 'Full Roll (Nos)';
                    $lablefact1 = 'Partial Roll (Rmt)';
                    $lablefact2 = '';
                    $value->uom='QTY';
                }
            } elseif ($value->type == '10') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 10;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '11') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 11;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '12') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 12;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '9') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 9;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '8') {
                $lable = 'Crimp';
                $lable2 = 'Crimp';
                $labletype = 8;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '0') {
                $lable = 'Profile';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '13') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '14') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 14;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } else {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            }
            if ($value->uom != '') {
                $value->uom = $value->uom;
            } else {
                $value->uom = 'QTY';
            }
                
                
                $categories_id=$value->categories_id;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            
            
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id,'cate_status' => $cate_status, 'type' => $value->type, 'lable' => $lable, 'lable2' => $lable2, 'lablenos' => $lablenos, 'labletype' => $labletype, 'lablefact1' => $lablefact1, 'lablefact2' => $lablefact2, 'categories_name' => $value->categories_name, 'uom' => $value->uom, 'commission_total' => round($value->commission_total,2), 'nos_total' => round($value->nos_total,2), 'fact_total' => round($value->fact_total,2), 'qty_total' => round($qty,3), 'amount_total' => round($value->amount_total,2));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    public function fetchDataCategorybase() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
$convertion = $_GET['convertion'];

        $order_id = $_GET['order_id'];
    $order_query = $this->db->query("SELECT mobile_order FROM orders WHERE id = '$order_id'");
    $order_result = $order_query->row();
    $mobile_order = $order_result->mobile_order;
        if( $tablename_sub == 'order_version_product_quatation' ){ //|| $tablename_sub == 'order_version_product_list'
            $result = $this->db->query("SELECT a.c_file_1,a.c_file_2,a.c_file_3,a.competitor_name1,a.competitor_name2,a.competitor_name3,b.type,b.uom,a.id,a.billing_options,a.categories_name,SUM(a.commssion_amount) as commssion_amount,SUM(a.commission_fact_status) as commission_fact_status,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.activel_qty) as activel_qty_total_set,a.activel_qty_total,SUM(a.amount) as amount_total,SUM(a.net_rate1) as net_rate1,SUM(a.net_rate2) as net_rate2,SUM(a.net_rate3) as net_rate3,SUM(a.total_1) as total_1,SUM(a.total_2) as total_2,SUM(a.total_3) as total_3,SUM(a.weight) as weight_tot ,b.tile_validation,a.product_id,b.accessories_name FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.version='" . $_GET['version'] . "' AND a.deleteid=0 GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");
            
        }else{
            $result = $this->db->query("SELECT a.c_file_1,a.c_file_2,a.c_file_3,a.competitor_name1,a.competitor_name2,a.competitor_name3,b.type,b.uom,a.id,a.billing_options,a.categories_name,SUM(a.commssion_amount) as commssion_amount,SUM(a.commission_fact_status) as commission_fact_status,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.activel_qty) as activel_qty_total_set,a.activel_qty_total,SUM(a.amount) as amount_total,SUM(a.net_rate1) as net_rate1,SUM(a.net_rate2) as net_rate2,SUM(a.net_rate3) as net_rate3,SUM(a.total_1) as total_1,SUM(a.total_2) as total_2,SUM(a.total_3) as total_3,SUM(a.weight) as weight_tot,b.tile_validation,a.product_id,b.accessories_name FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0 GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");
            
        }
        
        $result = $result->result();
        foreach ($result as $value) {
            if ($convert == 1) {
                $qty = $value->qty_total;
            } else {
                $qty = $value->Sqr_feet_to_Meter;
            }


              $categories_idset=$value->categories_id;


              $arraycate=array('3','19','26','30','32','5','36');
               $fact_commission_view=0;
              if(in_array($categories_idset, $arraycate))
              {

                  $fact_commission_view=1;
              }
            

            if ($value->categories_name == 'Puff panel') {
                $value->type = '13';
            }
            $lablenos = 'Nos';
            if ($value->type == '2') {
                $lable = 'Height';
                $lable2 = 'Length';
                $lablenos = 'Nos';
                $labletype = 2;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '4') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $lablenos = 'Nos';
                $labletype = 4;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '5') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 5;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '6') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 6;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '15') {
                $lable = 'Length';
                $lable2 = 'Width';
                $labletype = 15;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '16') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 16;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '19') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 19;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '7') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 7;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                if ($value->categories_name == 'Polynum') {
                    $lable = 'QTY';
                    $lablenos = 'Full Roll (Nos)';
                    $lablefact1 = 'Partial Roll (Rmt)';
                    $lablefact2 = '';
                    $value->uom='QTY';
                }
                if ($value->categories_id == 613) {
                    $lable = 'Length';
                    $lable2 = 'Width';
                    $labletype = 7;
                    $lablefact1 = 'Fact';
                    $lablefact2 = '';
                }
            } elseif ($value->type == '10') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 10;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '11') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 11;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '12') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 12;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '9') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 9;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '8') {
                $lable = 'Crimp';
                $lable2 = 'Crimp';
                $labletype = 8;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '0') {
                $lable = 'Profile';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '13') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '14') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 14;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } else {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            }
            if($value->billing_options>0)
            {


                 if($value->billing_options==2)
                 {
                    $value->uom = 'Qty';
                 }
                 else
                 {
                    $value->uom = 'Qty';
                 }


            }
            else
            {

                if($value->uom != '') 
                {
                    $value->uom = $value->uom;
                } 
                else 
                {
                    $value->uom = 'Qty';
                }

            }
       
            //AStockUpdate-live-01/07
             if($value->categories_id == 611 || $value->categories_id == 627 || $value->categories_id == 626 || $value->categories_id == 36 || $value->categories_id == 34){ 
                
                   $value->uom = 'Qty';
            }



            if($convertion==2)
            {

                  if($value->categories_id == 611 || $value->categories_id == 627 || $value->categories_id == 626 || $value->categories_id == 36 || $value->categories_id == 34){
                
                   $value->uom = 'Kg';

                  }

            }
            
            //AStockUpdate-live-01/07
                
                $categories_id=$value->categories_id;


              $sub_product_id_class="";
               if(($categories_id == '1' || $categories_id == '591' || $categories_id == '32') && 
              $value->accessories_name != " LASER CUTTING (MS PLATE )")
              {
                      

                      $sub_product_id_class='sub_product_id';

              }


               //tile validation set in productlist table
              $tile_valid = $value->tile_validation;
              $tile_material_name_class="";
              if($tile_valid == '1' || $tile_valid == 1){
                $tile_material_name_class='tile_material_name';
              }else{
                $tile_material_name_class="";
              }
              // if($categories_id=='26')
              // {
                      

              //         $tile_material_name_class='tile_material_name';

              // }
              // if($categories_id=='590' || $categories_id=='599') //tile validation cate added.
              // {
                      

              //         $tile_material_name_class='tile_material_name';

              // }

              $attachment = "";
              $resultventat = $this->Main_model->where_names_two_order_by('product_images', 'product_id', $value->product_id, 'deleteid', '0', 'id', 'ASC');
              if (count($resultventat) > 0) {
                  $attachment = "attachment_yes";
              }
              if($value->product_id == 9 || $value->product_id == 1069 || $value->product_id == 1070 || $value->product_id == 701){
                    $attachment = "attachment_yes";
              }



                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 0;
                }
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '611' || $categories_id == '627') {
                    $cate_status = 1;
                }
                 else {
                    $cate_status = 0;
                }


                if($value->commission_fact_status>0)
                {
                    $commission_check_fact=1;
                }
                else
                {
                    $commission_check_fact=0;
                }

                 
                $activel_qty_total_set_overall=$value->activel_qty_total_set;
                $activel_qty_total_set=$qty;
            if($value->c_file_1=='')
            {
                $value->c_file_1=0;
            }

            if($value->c_file_2=='')
            {
                $value->c_file_2=0;
            }

            if($value->c_file_3=='')
            {
                $value->c_file_3=0;
            }












        if($labletype==1 || $labletype==2 || $labletype==3 || $labletype==4 || $labletype==5 || $labletype==6  || $labletype==16 || $labletype==8 || $labletype==10 || $labletype==11 || $labletype==12 || $labletype==13 || $labletype==14)
        {
            $col=4;
        }
        else
        {
            $col=3;
        }





        if($value->net_rate1=='')
        {
            //$value->total_1=$value->amount_total;
            $value->net_rate1=$activel_qty_total_set;
        }

            if($value->net_rate2=='')
        {
            //$value->total_2=$value->amount_total;
            $value->net_rate2=$activel_qty_total_set;
        }

        if($value->net_rate3=='')
        {
            //$value->total_3=$value->amount_total;
            $value->net_rate3=$activel_qty_total_set;
        }

        $test3 = "testcheck";
        // echo $value->weight_tot;exit();
                // gg changes 
                $amount_total = $value->amount_total;    
        $array[] = array('no' => $i,
        'tile_material_name'=>$tile_material_name_class,
        'attachment'=>$attachment,
        'sub_product_id'=>$sub_product_id_class,
        'fact_commission_view'=>$fact_commission_view,
         'commission_check_fact' => $commission_check_fact,
         'id' => $value->id, 
          'col' => $col, 
         'categories_id' => $value->categories_id,
         'commssion_amount' => round($value->commssion_amount),
         'activel_qty_total_set_overall' => round($activel_qty_total_set_overall,3),
         'activel_qty_total_set' => round($activel_qty_total_set,3),
         'cate_status' => $cate_status,
         'net_rate1' => round($value->net_rate1,2),
         'net_rate2' => round($value->net_rate2,2),
         'net_rate3' => round($value->net_rate3,2),
         'total_1' => round($value->total_1,2),
         'total_2' => round($value->total_2,2),
         'total_3' => round($value->total_3,2),
         'c_file_1' => $value->c_file_1,
         'c_file_2' => $value->c_file_2,
         'c_file_3' => $value->c_file_3,         
         'weight_tot' => round($value->weight_tot,3),
         'type' => $value->type,         
         'tile_check' => $value->tile_check > 0 ? $value->tile_check : '0',

           'lable' => $lable, 'lable2' => $lable2, 'lablenos' => $lablenos, 'labletype' => $labletype,'activel_qty_total'=>$activel_qty_total, 'lablefact1' => $lablefact1, 'lablefact2' => $lablefact2, 'categories_name' => $value->categories_name, 'uom' => $value->uom, 'commission_total' => round($value->commission_total,2), 'nos_total' => round($value->nos_total,2), 'fact_total' => round($value->fact_total,2),
        'competitor_name1' =>$value->competitor_name1,
        'competitor_name2' =>$value->competitor_name2,
        'competitor_name3' =>$value->competitor_name3,        
        'test' =>$test3,
         'qty_total' => round($qty,3),
         // gg changes
             //'amount_total' => round($value->amount_total,2),
             'amount_total' => $amount_total,
            
            );
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    public function fetchDataCategorybase_delivery() 
    {

         $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        
        $driver_pickip=0;
         $loadset="";
         if(isset($_GET['driver_pickip']))
         {
             $driver_pickip = $_GET['driver_pickip'];
             
             if($driver_pickip==1)
             {
                //$loadset=" AND a.loadstatus='".$driver_pickip."'";
              
             }
             
         }


         if (isset($_GET['DC_id']))
         {

                $DC_id = $_GET['DC_id'];
                $loadset=' AND ds.randam_id="'.$DC_id.'"';

         }
        
        $JOIN=' JOIN order_delivery_order_status as ds ON a.order_id=ds.order_id';


        if($_GET['driver_pickip']==0)
        {
          $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id $JOIN WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0  $loadset GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");
           
        }
        else
        {
             $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id $JOIN WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0  $loadset GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");
        
        }

            // if gate orders means show only loaded items

         
            if($_GET['convertion'] == '2'){
              
                $JOIN=' JOIN order_delivery_order_status as ds ON a.order_id=ds.order_id LEFT JOIN sales_load_products as sl ON a.id=sl.order_product_id ';

                $result = $this->db->query("SELECT sl.order_product_id,b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id $JOIN WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0 AND sl.randam_id='".$_GET['randam_id']."' AND sl.loadstatus=1 AND sl.dispatch_load=1 $loadset GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");

            }

          
       
        $result = $result->result();
     
        foreach ($result as $value) { 
            if ($convert == 1) {
                $qty = $value->qty_total;
            } else {
                $qty = $value->Sqr_feet_to_Meter;
            }
            if ($value->categories_name == 'Puff panel') {
                $value->type = '13';
            }
            $lablenos = 'Nos';
            if ($value->type == '2') {
                $lable = 'Height';
                $lable2 = 'Length';
                $lablenos = 'Nos';
                $labletype = 2;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '4') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $lablenos = 'Nos';
                $labletype = 4;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '5') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 5;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '6') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 6;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '15') {
                $lable = 'Length';
                $lable2 = 'Width';
                $labletype = 15;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '16') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 16;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '19') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 19;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                $lablenos = 'QTY';
            } elseif ($value->type == '7') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 7;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                if ($value->categories_name == 'Polynum') {
                    $lable = 'QTY';
                    $lablenos = 'Full Roll (Nos)';
                    $lablefact1 = 'Partial Roll (Rmt)';
                    $lablefact2 = '';
                    $value->uom='QTY';
                }
            } elseif ($value->type == '10') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 10;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '11') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 11;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '12') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 12;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '9') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 9;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '8') {
                $lable = 'Crimp';
                $lable2 = 'Crimp';
                $labletype = 8;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '0') {
                $lable = 'Profile';
                $lable2 = 'Crimp';
                $labletype = 0;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '13') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '14') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 14;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } else {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            }
            if ($value->uom != '') {
                $value->uom = $value->uom;
            } 
            else 
            {
                $value->uom = 'QTY';
            }
            
            
                $categories_id=$value->categories_id;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 0;
                } elseif ($categories_id == '41') {
                    $cate_status = 0;
                } 
                elseif ($categories_id == '591' || $categories_id == '611' || $categories_id == '627' || $categories_id == '626'   ) {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }



//  change uom for kg orders itms
$convertion = $_GET['convertion'];
if($convertion==2)
{

      if($value->categories_id == 611 || $value->categories_id == 627 || 
      $value->categories_id == 626 || $value->categories_id == 36 || $value->categories_id == 34 || $value->categories_id == 5){
    
       $value->uom = 'Kg';

      }

}
             

            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'cate_status' => $cate_status,'type' => $value->type, 'lable' => $lable, 'lable2' => $lable2, 'lablenos' => $lablenos, 'labletype' => $labletype, 'lablefact1' => $lablefact1, 'lablefact2' => $lablefact2, 'categories_name' => $value->categories_name, 'uom' => $value->uom, 'commission_total' => round($value->commission_total,2), 'nos_total' => round($value->nos_total,2), 'fact_total' => round($value->fact_total,2), 'qty_total' => round($qty,3), 'amount_total' => round($value->amount_total,2));
            $i++;
        }
        echo json_encode($array);
       
    }

    
    

//gg changes

public function fetch_data_delivery_data_by_picklist() {
    $i = 1;
    $array = array();
    $cate_status = '0';
    $tablename_sub = $_GET['tablename_sub'];
    $tablenamemain = $_GET['tablenamemain'];
    $convert = $_GET['convert'];
   

    $DC_id = $_GET['DC_id'];


                        $driver_pickip=0;
                        $loadset="";
                        if(isset($_GET['driver_pickip']))
                        {
                            $driver_pickip = $_GET['driver_pickip'];
                            
                            if($driver_pickip==1)
                            {
                                //$loadset=" AND loadstatus='".$driver_pickip."'";
                            
                            }
                            
                        }
                        
                        $customer_id = 0;
                        $paricel_mode = 0;
                        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
                        $resultcs = $resultmain->result();
                        foreach ($resultcs as $valuecs) {
                            //$paricel_mode = $valuecs->paricel_mode;
                            $customer_id = $valuecs->customer_id;
                            $delivery_date_status = $valuecs->delivery_date_status;
                        }
                        
                        if($driver_pickip==0)
                        {
                            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
                        }
                        else
                        {
                            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
                        }

// if gate orders means show only loaded items

                    if($_GET['convertion'] == '2'){
                                                            
                        $result = $this->db->query("
                        SELECT 
                            a.*, 
                            sl.order_product_id 
                        FROM 
                            $tablename_sub as a 
                        LEFT JOIN 
                            sales_load_products as sl 
                        ON 
                            a.id = sl.order_product_id 
                        WHERE 
                            a.order_id = '" . $_GET['order_id'] . "' 
                            AND a.paricel_mode = '" . $paricel_mode . "' 
                            AND a.deleteid = 0 
                            AND a.loadstatus_by_cate = 0 
                            AND a.product_id != '' 
                            AND sl.randam_id = '".$DC_id."' 
                            AND sl.loadstatus = 1 
                            AND sl.dispatch_load = 1 
                            $loadset 
                        ORDER BY 
                            categories_id, 
                            sort_id ASC
                    ");


                    }




                        
                        $result = $result->result();



    foreach ($result as $value) {
        
        $rate=$value->rate+$value->commission;
        $amountdata = $rate * $value->qty;


        $bill_nos ='-1';
        if($value->nos>0)
        {
            $bill_nos = $value->nos;
        }
       



        $bill_qty = $value->qty;
        $amount = $amountdata;
        if ($value->paricel_mode == '1')
        {
            
                if($value->modify_qty==0)
                {
                    $value->modify_qty=$value->qty;
                }
            
               $amountdata = $rate * $value->modify_qty;
               $amount = $amountdata;
        }
           
    if($_GET['DC_id'] == "")  

    {


 $query_scope = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $value->order_id . "' AND dispatch_status=0 AND dispatch_load_status=0 AND randam_id IS NULL AND deleteid=0 ORDER BY id DESC LIMIT 1");
            $scope_changes = $query_scope->row(); 
$return_id = $scope_changes->return_id;

        
                $dispatch_nos='0';
                $dispatch_qty='0';

                $resultload = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND loadstatus=1   AND order_id='".$value->order_id."'  ORDER BY id ASC");
                $resultload = $resultload->result();
                foreach ($resultload as $valueload)
                {
                     $dispatch_nos= $valueload->nos;
                     $dispatch_qty= $valueload->qty;
                }






                
    }
    else
    {

        // For confirmed page dispatch completed logic is here .......
                        $randam_id = $_GET['DC_id'];  // Current random_id from request
                        $order_id = $value->order_id; // Order ID for filtering
                        
                        // Step 1: Fetch the ID corresponding to the current randam_id
                        $current_id_query = "
                            SELECT id 
                            FROM sales_load_products 
                            WHERE randam_id = '" . $randam_id . "' 
                            AND order_id = '" . $order_id . "' 
                            LIMIT 1
                        ";
                        $current_id_result = $this->db->query($current_id_query)->row();
                        $current_id = $current_id_result ? $current_id_result->id : '';
                        
                       
                                if($current_id != ''){

                                // Step 2: Query to get all randam_ids up to the current ID
                                $query = "
                                    SELECT randam_id 
                                    FROM sales_load_products 
                                    WHERE order_id = '" . $order_id . "' 
                                    AND loadstatus = 1 
                                    AND id <= " . $current_id . "
                                    GROUP BY randam_id
                                    ORDER BY id ASC
                                ";
                                $resultload = $this->db->query($query)->result();


                                if(!empty($resultload)){
                             
                                // Collect randam_ids into an array
                                $randam_ids = [];
                                foreach ($resultload as $row) {
                                    $randam_ids[] = $row->randam_id;
                                }
                                
                                // Step 3: Ensure randam_ids array is properly formatted for SQL `IN` clause
                                $randam_ids_string = implode(',', array_map(function($id) {
                                    return "'" . $id . "'";
                                }, $randam_ids));
                                
                                // Step 4: Query to get cumulative dispatch nos and qty
                                $dispatch_query = "
                                    SELECT SUM(nos) as nos, SUM(amount) as amount, SUM(qty) as qty 
                                    FROM sales_load_products 
                                    WHERE order_product_id = '" . $value->id . "' 
                                    AND loadstatus = 1 
                                    AND order_id = '" . $order_id . "' 
                                    AND randam_id IN (" . $randam_ids_string . ")
                                    ORDER BY id ASC
                                ";
                                $resultload = $this->db->query($dispatch_query)->result();

                            }else {
                                $resultload=array();
                            }
                            }else {
                                $resultload=array();
                            }
                        
                        // Step 5: Fetch dispatch data
                        $dispatch_nos = 0;
                        $dispatch_qty = 0;
                        foreach ($resultload as $valueload) {
                            $dispatch_nos = $valueload->nos;
                            $dispatch_qty = $valueload->qty;
                        }


    }

                $resultload = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1   AND order_id='".$value->order_id."'  ORDER BY id ASC");
                $resultload = $resultload->result();


                foreach ($resultload as $valueload)
                {
                    



                        $loadnos= $valueload->nos;
                        $value->nos= $value->nos-$valueload->nos;
                        $loadamount= $valueload->amount;
                        $loadqty= $valueload->qty;
                        //$empty_loadnos= $valueload->nos;
                    
                    }


 $edit_nos=0;
 $edit_qty=0;

$resultmainss = $this->db->query("SELECT b.edit_nos,b.rate,b.qty,b.purchase_order_product_id as order_product_id FROM order_sales_return_complaints as a JOIN sales_return_products as b ON a.id=b.c_id  WHERE a.id='" . $return_id . "' AND a.deleteid=0 AND b.deleteid=0 AND a.order_base=5 AND b.purchase_order_product_id='" . $value->id . "'");
                                                       $resultcss = $resultmainss->result();
                                                       if(count($resultcss)>0)
                                                       {


                                                           foreach($resultcss as $vl)
                                                           {


                                                            $edit_nos=$vl->edit_nos;
                                                            $edit_qty=$vl->qty;
                                                               
                                                                $bill_nos= $bill_nos-$vl->edit_nos;
                                                                $value->qty= $value->qty-$vl->qty;
                                                             
                                          
                                                              
                                                           }


                                                       }



//exit;

// echo'<pre>';print_r($loadnos);
// echo'<pre>';print_r($value->nos);
// echo'<pre>';print_r($loadamount);
// echo'<pre>';print_r($loadqty);
// echo'<pre>';
// echo '-------------------------';




                $empty_loadqty=0;
                $resultload = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1   AND order_id='".$value->order_id."'   ORDER BY id ASC");
                $resultload = $resultload->result();
                foreach ($resultload as $valueload)
                {

                  
                    
                       $empty_loadnos=$valueload->nos;
                       $empty_loadqty=$valueload->qty;
                        
                      
                    
                }

               $empty_loadqty_input=0;
                $resultload = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1   AND order_id='".$value->order_id."' AND randam_id IS NULL  ORDER BY id ASC");
                $resultload = $resultload->result();
                foreach ($resultload as $valueload)
                {

                  
                        $empty_loadnos_input=$valueload->nos;


                        // gg changes
                        $valueload_qty = $valueload->qty;
                        if (strpos($loadamount, '.') !== false && strlen(substr(strrchr($loadamount, "."), 1)) > 3) {
                            // Only truncate if more than 2 digits after decimal
                            $valueload_qty = sprintf("%.3f", $valueload->qty);
                        }

                        $empty_loadqty_input=$valueload_qty;
                        $loadamount= $valueload->amount;

                    
                }


                if($empty_loadnos>0)
                {

                   
                    
                }
                else
                {
                    $empty_loadnos=0;
                    $empty_loadnos_input=0;
                }


                 if($empty_loadqty>0)
                {

                   
                    
                }
                else
                {
                    $empty_loadqty=0;
                    $empty_loadqty_input=0;
                }
   

                if($dispatch_nos>0)
                {
                   
                    if($empty_loadnos_input<=0)
                    {
                        $empty_loadnos_input=$bill_nos-$dispatch_nos;
                        //$bill_nos=$bill_nos-$dispatch_nos;
                    }
                   
                    
                    
                }
                else
                {
                    $dispatch_nos=0;
                    if($delivery_date_status==1)
                    {
                        $empty_loadnos_input=$empty_loadnos;
                    }
                    
                }


                 if($dispatch_qty>0)
                {
                   
                    if($empty_loadqty_input<=0)
                    {
                        $empty_loadqty_input=$bill_qty-$dispatch_qty;
                        //$bill_nos=$bill_nos-$dispatch_nos;
                    }
                   
                    
                    
                }
                else
                {
                    $dispatch_qty=0;
                    if($delivery_date_status==1)
                    {
                        $empty_loadqty_input=$empty_loadqty;
                    }
                    
                }
       
      
        
        $address_id = $value->address_id;
        $addresstopariel = "";
        if ($value->paricel_mode == 1) {
            $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
            foreach ($customers_adddrss as $customers_adddrss_v) {
                $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
            }
        }
        $description = "";
        $product_name = "";
        $kg_price = 0;
        $og_price = 0;
        $og_formula = 0;
        $kg_formula2 = 0;
        $stock = 0;
        $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
        foreach ($product_list as $csval) {
            $description = $csval->description;
            $product_name = $csval->product_name;
            $categories = $csval->categories;
            $categories_id = $csval->categories_id;
            $type = $csval->type;
            $gst = $csval->gst;
            $kg_price = $csval->kg_price;
            $og_price = $csval->price;
            $stock = round($csval->stock);
            $og_formula = $csval->formula;
            $kg_formula2 = $csval->formula2;
            $fact2 = $csval->formula2; // fact2 changes
            $fact1 = $csval->formula; // fact2 changes

            
            // gg changes
            $weight = $csval->weight;
            $thickness= $csval->thickness;                
            $density= $csval->density;
            $dimensions= $csval->dimensions;
            $price= $csval->price;
            $standard_weight = $csval->standard_weight;       
            $kg_rmtr_weight = $csval->kg_rmtr_weight;



            if($tablenamemain=='purchase_orders_process')
            {    
                 if($csval->purchase_name!='')
                 {
                     $product_name = $csval->purchase_name;
                 }
                 
            }

            if ($csval->categories_id == '1') {
                if($csval->sub_product_id > 0){
                $product_list1 = $this->Main_model->where_names('product_list', 'id', $csval->sub_product_id);
                foreach ($product_list1 as $csval1) {
                    $thickness= $csval1->thickness;
                    $standard_weight = $csval1->standard_weight;       
                    $kg_rmtr_weight = $csval1->kg_rmtr_weight;      
                }
                }
            }

            //tile product
            $thickness_tile_prod = "";
            if($value->tile_material_id > 0){
                $product_list2 = $this->Main_model->where_names('product_list', 'id', $value->tile_material_id);
                foreach ($product_list2 as $val1) {
                    $thickness_tile_prod= $val1->thickness;
                    $standard_weight = $val1->standard_weight;       
                    $kg_rmtr_weight = $val1->kg_rmtr_weight;      
                }
            }else if($value->sub_product_id > 0){
                $product_list3 = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
                foreach ($product_list3 as $val3) {
                    $thickness_tile_prod= $val3->thickness;
                    $standard_weight = $val3->standard_weight;       
                    $kg_rmtr_weight = $val3->kg_rmtr_weight;      
                }
            }else{
                $standard_weight = $csval->standard_weight;       
                $kg_rmtr_weight = $csval->kg_rmtr_weight;      
            }
    

            if ($csval->categories_id == '30') {
                $top_thickness= $csval->top_sheet_thickness;
                $bottom_thickness= $csval->bottom_sheet_thickness;
                $foarm_thickness= $csval->foam_denstiy;
                if($foarm_thickness == '40(+/- 2) kgs/m3'){
                    $foarm = '40';
                }else if($foarm_thickness == '50(+/- 2) kgs/m3'){
                    $foarm = '50';
                }else{
                    $foarm = '';
                }
            }
    

            $categories = $csval->categories;
            $categories_id = $csval->categories_id;
            
            $formula = $csval->formula;

            $type = $csval->type;
            $gst = $csval->gst;
            $kg_price = $csval->kg_price;
            $og_price = $csval->price;
            $stock = round($csval->stock);
            

            $og_formula = $csval->length;
            $kg_formula2 = $csval->width;








            if ($categories_id == '1') {
                $cate_status = 1;
            } elseif ($categories_id == '2622') {
                $cate_status = 1;
            } elseif ($categories_id == '5') {
                $cate_status = 0;
            } elseif ($categories_id == '32') {
                $cate_status = 1;
            } elseif ($categories_id == '40') {
                $cate_status = 0;
            } elseif ($categories_id == '41') {
                $cate_status = 0;
            }
            elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '611' || $categories_id == '627'   ) {
                $cate_status = 1;
            }
             else {
                $cate_status = 0;
            }
        }
        $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
        $resultsameqty = $resultsameqty->result();
        $same = 0;
        if (count($resultsameqty) > 0) {
            $same = 1;
        }
        $qty = round($value->qty, 4);
        if ($value->paricel_mode == '1') {
            $qty = $value->modify_qty;
        }
        $profile = $value->profile;
        $crimp = $value->crimp;
        $imagestatus = 1;
        if ($value->reference_image == '') {
            $imagestatus = 0;
        }
        if ($value->gst == '') {
            $value->gst = $gst;
        }
        $profile_val = '';
        if ($value->profile) {
            $data = [2 => 'SQMTR', 3 => 'FEET', 4 => 'MM', 5 => 'MTR', 6 => 'INCH'];
            
            $profile = $value->profile;
            $uom = $value->uom;
            
            if ($uom === '2') {
                // Convert from square meters to feet
                $profile_val = $profile * 10.7639;
            } elseif ($uom === '4') {
                // Convert from millimeters to feet
                $profile_val = $profile * 0.00328084;
            } elseif ($uom === '5') {
                // Convert from meters to feet
                $profile_val = $profile * 3.28084;
            } elseif ($uom === '6') {
                // Convert from inches to feet
                $profile_val = $profile * 0.0833333;
            } else {
                $profile_val = $profile; // If uom is '3' (FEET), no conversion needed
            }
        }


// if ($categories_id == 593 || $categories_id == 28) { //steel coil
        //     $this->db->query("UPDATE $tablename_sub SET weight='".$qty1."', nos=1 WHERE id='" . $value->id . "'");

        //     $weg = $this->Main_model->where_names($tablename_sub, 'id', $value->id);
        //     foreach ($weg as $weightval)
        //     {
        //         $weight=$weightval->weight;
        //     }
        // }else{
            $weight = $value->weight;
        // }

           $sub_product_id_check='';
            if($value->sub_product_id>0)
            {
                 $sub_product_id_check= $value->sub_product_id.'-';
            }

            if($value->fact2 > 0){ // fact2 changes
                $fact2 = $value->fact2;
            }

        //decking roll sheet
        $fact_tab =$value->fact;
        if(($value->categories_id == '626' || $value->categories_id == '611') && $value->sub_product_id > 0){
            $prod_li_sub = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
                foreach ($prod_li_sub as $sub)
                {
                    $fact1=$sub->formula;
                    $fact2=$sub->formula2  ;
                }
                if($value->fact > 0){
                    $fact_tab = $value->fact;
                }else{
                    $fact_tab = $fact1;
                }

                 if($value->fact2 > 0){
                    $fact2 = $value->fact2;
                }
                
         }
        $billing_options = $value->billing_options;
         if($value->categories_id == '611' || $value->categories_id == '627'){
           if($value->billing_options > 0){
                $billing_options = $value->billing_options;
           }else{
                $billing_options = 4;
           }

         }

         $prod_li = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
            foreach ($prod_li as $subs)
            {
                $basefact=$subs->formula;
                $basecat=$subs->categories_id;
            }




       $read= '0';
       if($value->categories_id == 34)
       { 
        
            if($value->billing_options!=2)
            {
                 $read= '1';
            }
          


        }
         if($value->categories_id == 36)
        { 

            if($value->billing_options!=2)
            {
                 $read= '1';
            }
            


        }
         if($value->categories_id == 626)
        {

            if($value->billing_options!=2)
            {
                 $read= '1';
            }
          
        }




        // gg changes

        if (strpos($amount, '.') !== false && strlen(substr(strrchr($amount, "."), 1)) > 2) {
            // Only truncate if more than 2 digits after decimal
            $amount = floor($amount * 100) / 100;
        }
        $amount = sprintf("%.2f", $amount);
        if (strpos($loadamount, '.') !== false && strlen(substr(strrchr($loadamount, "."), 1)) > 2) {
            // Only truncate if more than 2 digits after decimal
            $loadamount = floor($loadamount * 100) / 100;
        }
        $loadamount = sprintf("%.2f", $loadamount);

        if($type != 9){
            $empty_loadqty_input = sprintf("%.3f", $empty_loadqty_input);

        }


  


                        $resultloadss = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM packed_details  WHERE order_product_id='" . $value->id . "'  AND order_id='".$value->order_id."' AND randam_id='".$DC_id."' ORDER BY id ASC");
                        $resultloads = $resultloadss->result();
                        foreach ($resultloads as $valueloads)
                        {


                            // print_r($valueloads);exit;
                                if($valueloads->nos>0)
                                {
                                       $value->nos= $valueloads->nos;
                                }
                                
                                $qty_loaded= $valueloads->qty;
                               
                        }


                              // for confirmed purpose
        $rates_values=round($rate,2);
        $confirmed_amount=$qty_loaded*$rates_values;


        if (strpos($confirmed_amount, '.') !== false && strlen(substr(strrchr($confirmed_amount, "."), 1)) > 2) {
            // Only truncate if more than 2 digits after decimal
            $confirmed_amount = floor($confirmed_amount * 100) / 100;
        }
        $confirmed_amount = sprintf("%.2f", $confirmed_amount);



// conditions to zero the qty and amount after delivered

        if($bill_nos == $dispatch_nos) {
            $loadamount='0.00';
            $empty_loadqty_input='0.00';
        }


// attachment to show

$attachment = "";
$resultventat = $this->Main_model->where_names_two_order_by('product_images', 'product_id', $value->product_id, 'deleteid', '0', 'id', 'ASC');
if (count($resultventat) > 0) {
$attachment = "attachment_yes";
}
if($value->product_id == 9 || $value->product_id == 1069 || $value->product_id == 1070 || $value->product_id == 701){
  $attachment = "attachment_yes";
}




// sub products to show


$product_name_sub="";
$product_list_sub = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
foreach ($product_list_sub as $csval_sub)
{

 $product_name_sub=$csval_sub->product_name;
}




       if($value->categories_id == 13)
       { 
        

              if($empty_loadqty_input>0)
              {
                 $profile_load=$empty_loadqty_input;


                 

                                                           $setformula=$kg_formula2*$og_formula;
                                                           $toat=$profile_load/$setformula;
                                                           if($value->uom==2)
                                                           {
                                                                 $toat=$profile_load/$setformula;

                                                           }

                                                           if($value->uom==8)
                                                           {
                                                                 $toat=$profile_load/10.765;
                                                                 $toat=$toat/$setformula;
                                                           }
                                                          
                                                     
                                                           $toat=floor($toat);
                                                           if($value->uom==2)
                                                           {



                                                                 $p_roll=$profile_load/$kg_formula2;
                                                                 $p_roll2=$toat*$og_formula;
                                                                 $pp_roll_tot=$p_roll-$p_roll2;
                                                                 $pp_roll_tot=$pp_roll_tot;
                                                                 $fact_tab=round($pp_roll_tot,2);
                                                                 $value->nos=round($toat,2);


                                                                 
                                                           }

                                                            if($value->uom==8)
                                                           {

                                                                 $convert=$profile_load/10.765;
                                                                 $p_roll=$convert/$kg_formula2;
                                                                 $p_roll2=$toat*$og_formula;
                                                                 $pp_roll_tot=$p_roll-$p_roll2;
                                                                 $pp_roll_tot=$pp_roll_tot;
                                                                 $fact_tab=round($pp_roll_tot,2);
                                                                 $value->nos=round($toat,2);

                                                           }

              }
              else
              {
                $profile_load=$profile;
              }



              $ssload=round($value->profile-$profile_load,2);
              if($ssload<0)
              {
                $ssload=0;
              }
        
        }


          if($value->categories_id == 593)
          { 
                    
                  $bill_nos=round($value->qty);

          }

          
        if($qty_loaded == ""){

            $nos_tab_values="";   
        }else {
            $nos_tab_values=round($value->nos, 2);
        }

// gg changes for uom values 
        $uom_kg=$csval->uom;
       

        $convertion = $_GET['convertion'];
        if($convertion==2)
        {

              if($value->categories_id == 611 || $value->categories_id == 627 || $value->categories_id == 626 || $value->categories_id == 36 || $value->categories_id == 34 || $value->categories_id == 5){

                if($value->billing_options==2)
                {
                    $uom_kg= 'Kg';
                }
                elseif($value->categories_id == 5)
                {
                    $uom_kg= 'Kg';
                }else
                {
                   $uom_kg = 'Qty';
                }

                
                           
              }

        }
        


// get orignal packed quantity

$resultloadss23 = $this->db->query("SELECT activel_qty as activel_qty FROM packed_details  WHERE order_product_id='" . $value->id . "'  AND order_id='".$value->order_id."' AND randam_id='".$DC_id."' ORDER BY id ASC");
$activel_qtys = $resultloadss23->row();


$resultloadss234 = $this->db->query("SELECT dispatch_load FROM sales_load_products  WHERE order_product_id='" . $value->id . "'  AND order_id='".$value->order_id."' AND randam_id='".$DC_id."' ORDER BY id ASC");
$activel_qtys_234 = $resultloadss234->row();
$dispatch_status_load=isset($activel_qtys_234->dispatch_load) ? $activel_qtys_234->dispatch_load : '0';




            $array[] = array(
            'no' => $i, 
            'id' => $value->id,
            'loadnos' => round($loadnos,2),
            'loadamount' => $loadamount,
            'ssload' => $ssload,
            'loadqty' => $empty_loadqty_input, 
            'same' => $same, 
            'attachment'=>$attachment,
            'sub_product_name_tab'=>$product_name_sub,
            'profile_load'=>round($profile_load,2),
            'imagestatus' => $imagestatus, 
            'loadstatus' => $value->loadstatus,
            'img_width' => $value->img_width,      
            'thickness'=>$thickness,
            'thickness_tile_prod' => $thickness_tile_prod,
            'top' => $top_thickness,
            'bottom' => $bottom_thickness,      
            'weight' => round($weight,3),
            'default_weight'=>round($weight,3),
            'standard_weight'=>round($standard_weight,3), 
            'kg_rmtr_weight'=>round($kg_rmtr_weight,3), 
            'dis_nos'=>$dispatch_nos,
            'dispatch_qty'=>$dispatch_qty,
            'fact2'=> $fact2, // fact2 changes
            'basefact'=> $basefact, // fact2 changes
            'basecat'=> $basecat, // fact2 changes
            'fact1'=> $fact1, // fact2 changes
            'delivery_status' => $value->delivery_status,
            'order_id' => $value->order_id, 
            'empty_loadnos'=>$empty_loadnos,
            'empty_loadnos_input'=>$empty_loadnos_input,
            'empty_loadqty'=>$empty_loadqty,
            'empty_loadqty_input'=>$empty_loadqty_input,
            'bill_qty'=>$bill_qty,
            'paricel_mode' => $value->paricel_mode,
            'product_name_tab' => $product_name,
            'tile_material_name' => $value->tile_material_name,
            'tile_material_id' => $value->tile_material_id,
            'categories' => $categories, 
            'type' => $type, 
            'edit_nos'=>$edit_nos,
            'order_bill_no'=>$bill_nos+$edit_nos,
            'order_qty'=>$qty+$edit_qty,
            'description' => $description,
            'product_id' => $value->product_id, 
            'categories_id' => $value->categories_id,
            'dispatch_status' => $value->dispatch_status	,
            'dispatch_status_load' => $dispatch_status_load	,
            'profile_tab' => round($profile,3),
            'crimp_tab' => round($crimp,3),
            'checked' => $value->checked,
            'dim_two' => $value->dim_two,
            'dim_one' => $value->dim_one, 
            'dim_three' => $value->dim_three,
            'image_length' => $value->image_length,
            'picked_status' => $value->picked_status,
            'gst' => $value->gst,
            'gst_check' => $value->gst_check, 
            'extra_crimp' => round($value->extra_crimp,3),
            'back_crimp' => round($value->back_crimp,3),
            'proudtcion_no' => $value->proudtcion_no,
            'nos_tab' => round($value->nos,2),
            'bill_nos'=>$bill_nos,
            'unit_tab' => $value->unit,
            'return_status' => $value->return_status, 
            // 'fact_tab' => round(num: $value->fact,2),
            // gg changes
            'fact_tab' => round($fact_tab,2), 
            'uom' => $value->uom,
            'uom_kg' => $uom_kg,
            'stock' => $stock,
            'kg_price' => $kg_price,
            'og_price' => $og_price, 
            'og_formula' => $og_formula,
            'kg_formula2' => $kg_formula2,
            'default_fact'=>$formula,
            'billing_options' => $value->billing_options,
            'commission_tab' => $value->commission,
            'cate_status' => $cate_status,
            'categories_id_get' => $categories_id, 
            'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2),
            'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 
            'rate_tab' => round($rate,2), 
            'cul' => $value->cul, 
            'qty_tab' => round($qty+$edit_qty,3),
            'reference_image' => $value->reference_image,
            'remark' => $value->remark,
            'otherremark' => $value->otherremark,
            'profile_val'=> round($profile_val,3),
            'addresstopariel' => $addresstopariel,
            'amount_tab' => $amount,
            'confirmed_amount'=>$confirmed_amount,
            'nos_qty'=>$qty_loaded,
            'nos_tab_value'=> $nos_tab_values,
            'activel_qty' => $value->activel_qty,
            'activel_qty_packlist'=>isset($activel_qtys->activel_qty) ? $activel_qtys->activel_qty : '',

        );
            $i++;
    }
    echo json_encode($array);
}


    
    
    
    
    
    
    
    

    
    public function fetchDataCategorybase_order_process_group()
    {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        $sqlstatus = ' AND  b.production_status=' . $convert;
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0 $sqlstatus  GROUP BY b.proudtcion_id ORDER BY b.sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
     public function fetchDataCategorybase_order_process_group_base_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        
        if($convert==1)
        {
            $sqlstatus = ' AND  b.production_status IN (1,2,-1)';
        }
        else
        {
            $sqlstatus = ' AND  b.production_status IN (3,4,5)';
        }
        
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0 $sqlstatus  GROUP BY b.proudtcion_id ORDER BY b.sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    public function fetchDataCategorybase_order_process_panel_base_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        
        if($convert==1)
        {
           $sqlstatus = ' AND  b.production_status IN (1,2,-1)';
        }
        else
        {
            $sqlstatus = ' AND  b.production_status IN (3,4,5)';
        }
        
      
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0  $sqlstatus GROUP BY a.categories_id ORDER BY a.categories_id,a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    public function fetchDataCategorybase_order_process_group_by_order() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $order_id = $_GET['order_id'];
        $sqlstatus = '';
        //$sqlstatus = ' AND  b.production_status=' . $convert;
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.order_id='" . $order_id . "' AND a.deleteid=0 $sqlstatus  GROUP BY b.proudtcion_id ORDER BY b.sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    public function fetchDataCategorybase_order_process_panel() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        
        
        $sqlstatus = ' AND  b.production_status=' . $convert;
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0  $sqlstatus GROUP BY a.categories_id ORDER BY a.categories_id,a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    public function fetchDataCategorybase_order_process_panel_order_by() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $order_id = $_GET['order_id'];
        $sqlstatus = '';
        
        
        //$sqlstatus = ' AND  b.production_status=' . $convert;
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.order_id='" . $order_id . "' AND a.deleteid=0  $sqlstatus GROUP BY a.categories_id ORDER BY a.categories_id,a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function getcounttl_md_approvel_request() 
     {
            $tablename = $_GET['tablename'];
            $price_requerst_status = 3;
            $discount= $this->Main_model->where_names_three_order_by($tablename, 'order_base', '20', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $commission = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '21', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $cancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '22', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $edit = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '23', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $excess_payment = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '121', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $driver_return = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '25', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $approvel_order = $this->Main_model->where_names_two_order_by($tablename,  'deleteid', '0', 'md_approved_status', '1', 'id', 'DESC');
            $rejected_order = $this->Main_model->where_names_two_order_by($tablename,  'deleteid', '0', 'md_approved_status', '2', 'id', 'DESC');
        

             $super_admin = $this->Main_model->where_names_three_order_by($tablename,  'edit_user_id', '1777','deleteid','0', 'md_approved_status', '0', 'id', 'DESC');

             $sql="";
             if($this->session->userdata['logged_in']['access']==12)
             {

  
                 $sql = " AND user_id='".$this->userid."'";


             }

        $where_sls = "";
             if ($this->session->userdata['logged_in']['access'] == '11') {
                $sales_team_id = array($this->userid);
                $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                foreach ($resultsales_team as $values) {
                    $sales_team_id[] = $values->sales_member_id;
                }
                
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                

                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $where_sls = ' AND  user_id IN (' . $sales_team_id . ')';

            }

  $discount_from_nb=$this->db->query("SELECT id from all_ledgers WHERE md_verification IN ('147') AND deleteid IN ('0','147') AND party_type=1 $sql $where_sls")->result();
  $excess_return=$this->db->query("SELECT id from all_ledgers WHERE md_verification IN ('150','151','153') AND party_type=1 $sql $where_sls")->result();
  $discount_from_rj=$this->db->query("SELECT id from all_ledgers WHERE md_verification IN ('148') AND party_type=1 AND deleteid=148 $sql $where_sls")->result();

        

            $array = array('super_admin' => count($super_admin),'discount' => count($discount),'rejected_order' => count($rejected_order), 'commission' => count($commission), 'cancel' => count($cancel), 'edit' => count($edit), 'excess_payment' => count($excess_payment),'discount_form_nb' =>count($discount_from_nb),'discount_form_rj' =>count($discount_from_rj), 'driver_return' => count($driver_return), 'approvel_order' => count($approvel_order),'excess_return' => count($excess_return));
            echo json_encode($array);
     }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function getcounttl_price_request() {
        $tablename = $_GET['tablename'];
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
         
            
            $resultpending = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '1', 'price_requerst_status', '3', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'price_requerst_status', '3', 'order_base', '3', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '5', 'price_requerst_status', '3', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
         
         
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $resultpending = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '1', 'price_requerst_status', '3', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'price_requerst_status', '3', 'order_base', '3', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '5', 'price_requerst_status', '3', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $resultpending = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '1', 'price_requerst_status', '3', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'price_requerst_status', '3', 'order_base', '3', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '5', 'price_requerst_status', '3', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
         
         
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } elseif ($this->session->userdata['logged_in']['access'] == '4' || $this->session->userdata['logged_in']['access'] == '10') {
            $price_requerst_status = 3;
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'deleteid', 'price_requerst_status', '3', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } else {
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        }
        $array = array('pending' => count($resultpending), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'rejected' => count($resultcancel), 'purchase_team' => count($purchase_team), 'request' => count($resultrequest), 'requestp' => count($purchase_team), 'md_team' => count($md_team), 'reassign' => count($reassign), 'finance_team' => count($finance_team), 'waiting' => count($waiting), 'vendor_po_order' => count($vendor_po_order));
        echo json_encode($array);
    }
    
    
    
    
    public function getcount() {
        $tablename = $_GET['tablename'];
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            
            
            $resultpending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           


           $remainder = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-4', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           


            $p_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'paricel_mode', '1', 'entry_user_id', $sales_team_id, 'id', 'DESC');


 $p_d_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'full_delivery', '1', 'entry_user_id', $sales_team_id, 'id', 'DESC');



            $missing = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');

            $pending_driver = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '10', 'paricel_mode', '1', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            
            $rejected_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            
            $request_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '0', 'order_base>=', '20', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        }
        elseif ($this->session->userdata['logged_in']['access'] == '20') 
        {
            
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           

            $archive = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');


 $remainder = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-4', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');



 $pending_driver = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '10', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');



            $missing = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           
           
            $rejected_order = $this->Main_model->where_names_three_order_by($tablename, 'md_approved_status', '2', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           $request_order = $this->Main_model->where_names_three_order_by($tablename, 'md_approved_status', '0', 'user_id', $this->userid, 'order_base>=', '20', 'id', 'DESC');
           
           
            $p_completed = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1', 'user_id', $this->userid, 'paricel_mode', '1','deleteid', '0', 'id', 'DESC');
           
            $p_d_completed = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1', 'user_id', $this->userid, 'full_delivery', '1','deleteid', '0', 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '31') 
        {
            
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           

            $archive = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');


 $remainder = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-4', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');



 $pending_driver = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '10', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');



        
 $missing = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           
           
            $rejected_order = $this->Main_model->where_names_three_order_by($tablename, 'md_approved_status', '2', 'customer_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           $request_order = $this->Main_model->where_names_three_order_by($tablename, 'md_approved_status', '0', 'customer_id', $this->userid, 'order_base>=', '20', 'id', 'DESC');
           
           
            $p_completed = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1', 'customer_id', $this->userid, 'paricel_mode', '1','deleteid', '0', 'id', 'DESC');
           
            $p_d_completed = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1', 'customer_id', $this->userid, 'full_delivery', '1','deleteid', '0', 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            $poin_to_member_base = $this->Main_model->where_names_two_order_by('admin_users','id',$this->userid,'assign_base',1,'id','Desc');

            if(count($poin_to_member)>0 && count($poin_to_member_base)>0)
            {

                 

                    
   
                   if($tablename!='orders_process')
                   {

                            foreach ($poin_to_member as $point) 
                            {
                                $sales_team_id[] = $point->id;
                            }
                       
                         $userslog = 'entry_user_id';



                   }
                   else
                   {

                    
                      $userslog = 'user_id';

                   }

             
                    

            }
            else
            {

                   $userslog = 'user_id';
             

            }
           
            

            
            
            $resultpending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '3', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '5', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
           

  $remainder = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-4', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
           

            $p_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'paricel_mode', '1', $userslog, $sales_team_id, 'id', 'DESC');



 $p_d_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'full_delivery', '1', $userslog, $sales_team_id, 'id', 'DESC');


       $pending_driver = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '10', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');


            $missing = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'missing_customer', '1', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            
            
            $rejected_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', $userslog, $sales_team_id, 'id', 'DESC');
            $request_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '0', 'order_base>=', '20', $userslog, $sales_team_id, 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $resultpending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');

$remainder = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-4', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');

            $pending_driver = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '10', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
          
            $missing = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'missing_customer', '1', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
          
            
            $rejected_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $request_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '0', 'order_base>=', '20', 'sales_group', $sales_team_id, 'id', 'DESC');
          
            
            
             $p_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'deleteid', '0', 'paricel_mode', '1', 'sales_group', $sales_team_id, 'id', 'DESC');
          
              $p_d_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'deleteid', '0', 'full_delivery', '1', 'sales_group', $sales_team_id, 'id', 'DESC');
          
          
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } else {
            $resultpending = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'id', 'DESC');
            $archive = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'id', 'DESC');
            $remainder = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-4', 'deleteid', '0', 'id', 'DESC');


               $pending_driver = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '10', 'deleteid', '0', 'id', 'DESC');
            
            $missing = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'id', 'DESC');
           
            $rejected_order = $this->Main_model->where_names_two_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'id', 'DESC');
            $request_order = $this->Main_model->where_names_two_order_by($tablename, 'order_base>=', '20', 'deleteid', '0', 'id', 'DESC');
           
            
            $p_completed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'paricel_mode', '1','deleteid', '0', 'id', 'DESC');

              $p_d_completed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'full_delivery', '1','deleteid', '0', 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        }
        $array = array('pending' => count($resultpending),'remainder' => count($remainder),'request_order' => count($request_order),'p_d_completed' => count($p_d_completed),'pending_driver' => count($pending_driver),'rejected_order' => count($rejected_order),'missing' => count($missing),'p_completed' => count($p_completed), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'purchase_team' => count($purchase_team), 'request' => count($resultrequest), 'requestp' => count($purchase_team), 'md_team' => count($md_team), 'reassign' => count($reassign), 'archive' => count($archive), 'finance_team' => count($finance_team), 'vendor_po_order' => count($vendor_po_order));
        echo json_encode($array);
    }
    public function getcount_finance() {
        $tablename = $_GET['tablename'];
        $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '0', 'deleteid', '0', 'order_base', '1');
        $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '-1', 'deleteid', '0', 'order_base', '1');
        $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '1', 'deleteid', '0', 'order_base', '1');
        
        
        
        
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
           
            
            
           $transpot = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 3, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 4, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           $reconciliation = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 5, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           $b_c_pending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 6, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
         
            
             $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 AND b.entry_user_id IN ('".implode("','", $sales_team_id)."') GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;




             $query = $this->db->query("SELECT a.delivery_status,a.km_reading_end,a.trip_end_date FROM order_delivery_order_status as a LEFT JOIN customers as b ON a.customer_id=b.id  LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.finance_status='4' AND a.delivery_status IN ('2','1') AND a.entry_user_id IN ('".implode("','", $sales_team_id)."') AND a.reconcilation_status=0 ORDER BY a.id DESC");
                 $result = $query->result();

  $k=0;
  foreach ($result as $value) 
        {
               if ($value->delivery_status == '1') {
               
                $km_reading_end=1;
               }
             
             if ($value->delivery_status == '2')
             {

                
                $km_reading_end=$value->km_reading_end;

                   $date='2023-05-12';
                  if($value->trip_end_date<$date)
                  {
                        
                     $km_reading_end=1;

                  }

                

             }
             if($km_reading_end>0)
             {
                $k+=1;
             }

        }
      
      
       
       
       
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $transpot = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 3, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 4, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 5, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $b_c_pending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 6, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
         
            
            $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 AND b.user_id IN ('".implode("','", $sales_team_id)."') GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;






             $query = $this->db->query("SELECT a.delivery_status,a.km_reading_end,a.trip_end_date FROM order_delivery_order_status as a LEFT JOIN customers as b ON a.customer_id=b.id  LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.finance_status='4' AND a.delivery_status IN ('2','1') AND a.user_id IN ('".implode("','", $sales_team_id)."') AND a.reconcilation_status=0 ORDER BY a.id DESC");
                 $result = $query->result();

  $k=0;
  foreach ($result as $value) 
        {
               if ($value->delivery_status == '1') {
               
                $km_reading_end=1;
               }
             
             if ($value->delivery_status == '2')
             {

                
                $km_reading_end=$value->km_reading_end;

                   $date='2023-05-12';
                  if($value->trip_end_date<$date)
                  {
                        
                     $km_reading_end=1;

                  }

                

             }
             if($km_reading_end>0)
             {
                $k+=1;
             }

        }
      
      
      
      
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $transpot = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 3, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 4, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 5, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
      
      $b_c_pending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 6, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
      
      
      
      
            $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 AND b.sales_group IN ('".implode("','", $sales_team_id)."') GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;
      
      
      


       $query = $this->db->query("SELECT a.delivery_status,a.km_reading_end,a.trip_end_date FROM orders_process as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.finance_status='4' AND a.delivery_status IN ('2','1') AND a.sales_group IN ('".implode("','", $sales_team_id)."') ORDER BY a.id DESC");
                 $result = $query->result();

  $k=0;
  foreach ($result as $value) 
        {
               if ($value->delivery_status == '1') {
               
                $km_reading_end=1;
               }
             
             if ($value->delivery_status == '2')
             {

                
                $km_reading_end=$value->km_reading_end;

                   $date='2023-05-12';
                  if($value->trip_end_date<$date)
                  {
                        
                     $km_reading_end=1;

                  }

                

             }
             if($km_reading_end>0)
             {
                $k+=1;
             }

        }
      
      
      
      
            
      
      
      
      
        } else {
            $transpot = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '3', 'deleteid', '0', 'order_base', '1');
            $delivered = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '4', 'deleteid', '0', 'order_base', '1');
            $reconciliation = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '5', 'deleteid', '0', 'order_base', '1');
            $b_c_pending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '6', 'deleteid', '0', 'order_base', '1');
      
      
      
      
      
      
      
      
      
      
      
            $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;
      
      
      


       $query = $this->db->query("SELECT a.delivery_status,a.km_reading_end,a.trip_end_date FROM order_delivery_order_status as a LEFT JOIN customers as b ON a.customer_id=b.id  LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.finance_status='4' AND a.delivery_status IN ('2','1')  AND a.reconcilation_status=0 ORDER BY a.id DESC");
       $result = $query->result();

  $k=0;
  foreach ($result as $value) 
        {
               if ($value->delivery_status == '1') {
               
                $km_reading_end=1;
               }
             
             if ($value->delivery_status == '2')
             {

                
                $km_reading_end=$value->km_reading_end;

                   $date='2023-05-12';
                  if($value->trip_end_date<$date)
                  {
                        
                     $km_reading_end=1;

                  }

                

             }
             if($km_reading_end>0)
             {
                $k+=1;
             }

        }
      
      
      
      
      
      
      
        }
        
        
        
        
        
        
        $array = array('pending' => count($resultpending),'km_delivered' => $k,'Self' => count($self), 'b_c_pending' => count($b_c_pending),'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'request' => count($resultrequest), 'transpot' => count($transpot), 'delivered' => count($delivered), 'reconciliation' => count($reconciliation));
        echo json_encode($array);
    }
    
    
    
    
    public function getcount_transpotcount() {
        $tablename = $_GET['tablename'];
        $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '0', 'deleteid', '0', 'order_base', '1');
        $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '-1', 'deleteid', '0', 'order_base', '1');
        $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '1', 'deleteid', '0', 'order_base', '1');
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
              $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            
            
              
            $ready_for_delivery = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '11','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $ready_for_driver = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '12','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $transpot = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '1','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $opentrip = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', '3', 'assign_status', '1', 'entry_user_id', $sales_team_id, 'deleteid', '0', 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 4, 'assign_status', '3','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 5, 'assign_status', '3','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '8', 'loading_status', '0','entry_user_id', $sales_team_id, 'id', 'DESC');
            $return = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'return_status', 1, 'assign_status', '3', 'loading_status', '0','entry_user_id', $sales_team_id, 'id', 'DESC');
            $tripstart = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '2', 'loading_status', '0','entry_user_id', $sales_team_id, 'id', 'DESC');
        
        
           
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base IN ('1','120') AND loading_status='1' AND entry_user_id IN ('".implode("','", $sales_team_id)."') ORDER BY id DESC");
            $result = $query->result();
            $partialLoaded=$result;
       
          
       
        } 
        elseif($this->session->userdata['logged_in']['access'] == '13') 
        {
            
            $ready_for_delivery = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '11', 'id', 'DESC');
            
            $ready_for_driver = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '12', 'id', 'DESC');
            
            
            $transpot = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '1', 'id', 'DESC');
          
            $opentrip = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '1', 'id', 'DESC');
          
          
            $delivered = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 4, 'driver_id', $this->userid, 'assign_status', '3', 'id', 'DESC');



















            $reconciliation = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 5, 'driver_id', $this->userid, 'assign_status','3',  'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '8', 'id', 'DESC');
          
          
            $return = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'return_status', 1, 'driver_id', $this->userid, 'assign_status', '3', 'id', 'DESC');
          
          
            $tripstart = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '2', 'id', 'DESC');
            
       
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base IN ('1','120') AND loading_status='1' AND driver_id='".$this->userid."' ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
       
       
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            
            $query = $this->db->query(
                "SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('3') AND assign_status IN('11')   AND order_base='1' AND loading_status='0' AND user_id IN ('" .
                    implode("','", $sales_team_id) .
                    "') AND tl_approved_status>0 ORDER BY id DESC"
            );
            $ready_for_delivery = $query->result();



            $ready_for_driver = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '12','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $transpot = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '1','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $opentrip = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', '3', 'assign_status', '1', 'user_id', $sales_team_id, 'deleteid', '0', 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 4, 'assign_status', '3','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 5, 'assign_status', '3','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '8', 'loading_status', '0','user_id', $sales_team_id, 'id', 'DESC');
            $return = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'return_status', 1, 'assign_status', '3', 'loading_status', '0','user_id', $sales_team_id, 'id', 'DESC');
            $tripstart = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '2', 'loading_status', '0','user_id', $sales_team_id, 'id', 'DESC');
        
        
        
        
       
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base IN ('1','120') AND loading_status='1' AND user_id IN ('".implode("','", $sales_team_id)."') ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
       
       
       
       
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
           
            $ready_for_delivery = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '11','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
           $ready_for_driver = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '12','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
           
            $transpot = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '1','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
           
           $opentrip = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', '3', 'assign_status', '1', 'sales_group', $sales_team_id, 'deleteid', '0', 'id', 'DESC');
            
           
           
           
            $delivered = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 4, 'assign_status', '3','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 5, 'assign_status', '3','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '8', 'loading_status', '0','sales_group', $sales_team_id, 'id', 'DESC');
            
            
            $return = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'return_status', 1, 'assign_status', '3', 'loading_status', '0','sales_group', $sales_team_id, 'id', 'DESC');
            
            
            $tripstart = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '2', 'loading_status', '0','sales_group', $sales_team_id, 'id', 'DESC');
       
             
             
            
       
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base IN ('1','120') AND loading_status='1' AND sales_group IN ('".implode("','", $sales_team_id)."') ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
       
       
        } else {
            
            
            
            
           
           
               $ready_for_delivery = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '11', 'order_base', '1','deleteid', '0', 'id', 'DESC');
               $ready_for_driver = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '12', 'order_base', '1','deleteid', '0', 'id', 'DESC');
            
               $transpot = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1','deleteid', '0', 'id', 'DESC');
            
               $opentrip = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1','deleteid', '0',  'id', 'DESC');
            
            
            




    $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND  order_base IN ('1','120','121','21','23','20')   AND finance_status=4  AND assign_status=3  ORDER BY id DESC");
    $result = $query->result();
    $delivered=$result;












               $reconciliation = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '5', 'assign_status', '3', 'order_base', '1','deleteid', '0', 'id', 'DESC');
               $re_sudule = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '8', 'order_base', '1','deleteid', '0', 'id', 'DESC');
            
            
               $return = $this->Main_model->where_names_four_order_by_new($tablename, 'return_status', '1', 'assign_status', '3', 'order_base', '1','deleteid', '0', 'id', 'DESC');
               $tripstart = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '2', 'order_base', '1','deleteid', '0', 'id', 'DESC');
       
           
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base IN ('1','120') AND loading_status='1'  ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
        
        
       
        }
        $array = array('ready_for_delivery' => count($ready_for_delivery),'return' => count($return),'opentrip' => count($opentrip),'ready_for_driver'=>count($ready_for_driver),'pending' => count($resultpending),'partialLoaded' => count($partialLoaded), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'request' => count($resultrequest), 'transpot' => count($transpot), 'delivered' => count($delivered), 're_sudule' => count($re_sudule), 'tripstart' => count($tripstart), 'reconciliation' => count($reconciliation));
        echo json_encode($array);
    }
    
    
    
    public function getcount_transpotcount_driver() {
        $tablename = $_GET['tablename'];
        $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '0', 'deleteid', '0', 'order_base', '1');
       // $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        $resultprocessed = 0;
        $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '-1', 'deleteid', '0', 'order_base', '1');
        $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '1', 'deleteid', '0', 'order_base', '1');
        
        $define_driver_id=0;
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
        $define_driver_id = $valuesales->define_driver_id;
        }
        
       if($this->session->userdata['logged_in']['access']==13)
       {
           
           
               $ready_for_delivery = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '11', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
               $ready_for_driver = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '12', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
               $transpot = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
               $opentrip = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
            
            
            


$query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND  order_base IN ('1','120','121','21','23','20')   AND selforder=0 AND finance_status=4  AND assign_status=3 AND driver_id='".$define_driver_id."' ORDER BY id DESC");
                $result = $query->result();
                $delivered=$result;



               $reconciliation = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '5', 'assign_status', '3', 'driver_id', $define_driver_id,'order_base','1','selforder', '0',  'id', 'DESC');


 $party_not_found = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '10', 'assign_status', '3', 'driver_id', $define_driver_id,'order_base','1','selforder', '0',  'id', 'DESC');

               $re_sudule = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '8', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
            
               $return = $this->Main_model->where_names_five_order_by_new($tablename, 'return_status', '1', 'assign_status', '3','driver_id',$define_driver_id, 'order_base', '1','selforder', '0', 'id', 'DESC');
               $tripstart = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '2','driver_id', $define_driver_id, 'order_base', '1','selforder', '0', 'id', 'DESC');
               
       
       
       
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('3') AND assign_status IN('1','3') AND order_base='1'  AND driver_id='".$define_driver_id."' AND selforder=0 AND gate_status=0 ORDER BY id DESC");
                $result = $query->result();
                $gate_status1=$result;
                
                
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND order_base='1'  AND driver_id='".$define_driver_id."' AND selforder=0 AND gate_status=1 ORDER BY id DESC");
                $result = $query->result();
                $gate_status2=$result;
       
       
       
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND driver_id='".$define_driver_id."' AND selforder=0 ORDER BY id DESC");
                $result = $query->result();
                $partialLoaded=$result;
               
        
        
       
        }
        else
        {
            
               $ready_for_delivery = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '11', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
               $ready_for_driver = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '12', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
            
               $transpot = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
            
               $opentrip = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
            
            
 

$query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND  order_base IN ('1','120','121','21','23','20')   AND selforder=0 AND finance_status=4  AND assign_status=3 ORDER BY id DESC");
                $result = $query->result();
                $delivered=$result;






               $reconciliation = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '5', 'assign_status', '3', 'order_base','1','selforder', '0','deleteid', '0',  'id', 'DESC');


 $party_not_found = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '10', 'assign_status', '3', 'order_base','1','selforder', '0','deleteid', '0',  'id', 'DESC');

               $re_sudule = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '8', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
            
            
               $return = $this->Main_model->where_names_five_order_by_new($tablename, 'return_status', '1', 'assign_status', '3', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
               $tripstart = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '2', 'order_base', '1','selforder', '0','deleteid', '0', 'id', 'DESC');
               
               
               
               
               
               
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('3') AND assign_status IN('1','3') AND order_base='1'   AND selforder=0 AND gate_status=0 ORDER BY id DESC");
                $result = $query->result();
                $gate_status1=$result;
                
                
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND  order_base='1'   AND selforder=0 AND gate_status=1 ORDER BY id DESC");
                $result = $query->result();
                $gate_status2=$result;
               
               
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND selforder=0  ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;



            
        }
        
        
        
        
        $array = array('gate_status1' => count($gate_status1),'gate_status2' => count($gate_status2),'party_not_found' => count($party_not_found),'ready_for_delivery' => count($ready_for_delivery),'return' => count($return),'opentrip' => count($opentrip),'ready_for_driver'=>count($ready_for_driver),'pending' => count($resultpending),'partialLoaded' => count($partialLoaded), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'request' => count($resultrequest), 'transpot' => count($transpot), 'delivered' => count($delivered), 're_sudule' => count($re_sudule), 'tripstart' => count($tripstart), 'reconciliation' => count($reconciliation));
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function getcount_transpotcount_driver_return() {
        $tablename = 'order_sales_return_complaints';
        $define_driver_id=0; 

        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        
       if($this->session->userdata['logged_in']['access']==13)
       {
           
           
               
                   $opentrip = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1',  'driver_assign', '1', 'driver_id', $define_driver_id,'deleteid', '0', 'id', 'DESC');
                   $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename,'driver_id', $define_driver_id, 'deleteid', '0','order_base', array('5','2','8'), 'id', 'DESC');
                   $re_sudule = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1', 'driver_assign', '6', 'driver_id', $define_driver_id,'deleteid', '0', 'id', 'DESC');
                   $tripstart = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '4', 'driver_assign', '1','driver_id', $define_driver_id,'deleteid', '0', 'id', 'DESC');
                   
                   $canceled= $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '3', 'driver_assign', '1','driver_id', $define_driver_id,'deleteid', '0', 'id', 'DESC');
                   
       
        
        
       
        }
        else
        {
            
             
                 $opentrip = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '1','deleteid', '0', 'id', 'DESC');
                 
                 $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename,'driver_assign', '1', 'deleteid', '0','order_base', array('5','2','8'), 'id', 'DESC');
                 
                 $re_sudule = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '6','deleteid', '0', 'id', 'DESC');
                 $tripstart = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '4','deleteid', '0', 'id', 'DESC');
                $canceled = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '3','deleteid', '0', 'id', 'DESC');
            
        }
        
        
        
        
        $array = array('opentrip' => count($opentrip),'delivered' => count($delivered),'canceled' => count($canceled), 're_sudule' => count($re_sudule), 'tripstart' => count($tripstart));
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
      public function getcount_production_start() {
        $tablename = $_GET['tablename'];
        
        
        
        
        $result = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '0' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $allprocess = count($result->result());
        
        
        $result1 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '1' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_assign = count($result1->result());
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '3' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_assign_completed = count($result2->result());
        
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '2' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_inprogress = count($result2->result());
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '-1' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_re_assign = count($result2->result());
        
          $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '4' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $qc_verifived = count($result2->result());
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '5' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $moveto_transpot= count($result2->result());
        
        
        
         $array = array(
            'production_assign' => $production_assign, 
            'production_assign_completed' => $production_assign_completed,
            'allprocess' => $allprocess,
            'production_inprogress' => $production_inprogress,
            'production_re_assign' => $production_re_assign,
            'qc_verifived' => $qc_verifived,
             'moveto_transpot' => $moveto_transpot
         );
         echo json_encode($array);
         
         
    }
    
    public function getcount_production() {
        $tablename = $_GET['tablename'];
        $allprocess = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'production_assign', '0');
        $production_assign = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '1', 'deleteid', '0', 'id', 'DESC');
        $production_inprogress = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '2', 'deleteid', '0', 'id', 'DESC');
        $production_re_assign = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '-1', 'deleteid', '0', 'id', 'DESC');
        $production_assign_completed = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '3', 'deleteid', '0', 'id', 'DESC');
        $production_qc_completed = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '4', 'deleteid', '0', 'id', 'DESC');
        $moveto_transpot = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '5', 'deleteid', '0', 'id', 'DESC');
        $array = array('production_assign' => count($production_assign), 'production_assign_completed' => count($production_assign_completed), 'production_inprogress' => count($production_inprogress), 'production_re_assign' => count($production_re_assign), 'production_qc_completed' => count($production_qc_completed), 'moveto_transpot' => count($moveto_transpot), 'allprocess' => count($allprocess));
        echo json_encode($array);
    }
    
    
    
   

    public function fetch_data_table() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        $this->db->query("UPDATE orders_process SET  assign_status_11_date = null, assign_status_12_date = null, assign_status_1_date = null, assign_status_2_date = null, assign_status_3_date = null WHERE finance_status = 2 AND assign_status = 0");


        $this->db->query("UPDATE order_delivery_order_status SET  assign_status_0_date=create_date,assign_status_11_date = null, assign_status_12_date = null, assign_status_1_date = null, assign_status_2_date = null, assign_status_3_date = null WHERE finance_status = 2 AND assign_status = 0 AND deleteid=0");
        

        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_val=$_GET['order_base'];
        $where = "";
        $where1 = "";
        
        $filterOrders = "";
        $filterOrders = $_GET['orders'];


        $order_by=" a.id";  
       
        
       
        if($search == "")
        {
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                  
                    $from_date = $_GET['from_date'];
                    $to_date = $_GET['to_date'];
                    $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";

                      if($tablename=='orders_process')
                      {
                        $order_by=" a.count";
                      } 

                
                   
                
            }
            else
            {

                  if($order_base==1)
                  {

                    $from_date = date('Y-m-d');
                    $to_date = date('Y-m-d');
                    $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";

                      if($tablename=='orders_process')
                      {
                        $order_by=" a.count";
                      }


                  
                  }

            }
             
        }
   $limitExtend = " SET SESSION group_concat_max_len = 9999999 ";
        $this->db->query( $limitExtend);

         if($filterOrders != ''){
             $filterOrders = base64_decode($filterOrders);
        // echo "<script> console.log($filterOrders) </script>";

             $where .= "  AND a.id IN ( $filterOrders ) ";
             $where1 .= "  AND  id IN ( $filterOrders ) ";
        }
        

       }
        
        
        
       
        
        
        $sqls = "";
        
        
        
       
        
       
        
        if($order_base==110)
        {
            $where .=" AND a.paricel_mode=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==111)
        {


            $where .=" AND a.full_delivery=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";





        }
        elseif($order_base==156)
        {
            
            $where .=" AND a.mobile_order=1";
            $order_base=1;
            $where .= " AND a.order_base='-2'";

        }
        elseif($order_base==157)
        {
            
            $where .=" AND a.mobile_order=1";
            $order_base=1;
            $where .= " AND a.order_base NOT IN ('-2','-1')";

        }
        elseif($order_base==26)
        {
            $where .= " AND a.md_approved_status = '1'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==27)
        {
            $where .= " AND a.md_approved_status = '2'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==28)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '20'";
            
        }
        elseif($order_base==1)
        {
            //$where .= " AND a.md_approved_status = '0'";
            if($this->session->userdata['logged_in']['access']=='31') // Customer Group ID
            {
            //$where .= " AND a.md_approved_status = '0'";
                 $where .= " AND a.order_base NOT IN('-2','0')";

            }
            else
            {
                 $where .= " AND a.order_base NOT IN('-1','-2','0')";
            }

            
        }
         elseif($order_base==121)
        {
            //$where .= " AND a.md_approved_status = '0'";
            // $where .= " AND a.order_base >= '1'";
            
        }
        else
        {
             $where .= " AND a.order_base = '".$order_base."'";
        }
        

         if($this->session->userdata['logged_in']['access']=='31')
        {


                  $where .= " AND a.customer_id='" . $this->userid . "' AND a.mobile_order=1";
                  $where1 .= " AND customer_id='" . $this->userid . "' AND mobile_order=1";


                  if($search != "")
                  {
                          $where .= " AND a.order_no LIKE '%" . $search. "%'";
                          $where1 .= " AND order_no LIKE '%" . $search . "%'";
                  }
                 

        }
        else
        {
                if($search != "")
                {
                           
                      
                            if($this->session->userdata['logged_in']['access']!=12)
                            {

                                
                               $where .=" AND c.name LIKE '%" . $search . "%'";
                               $where .= " OR a.order_no LIKE '%". $search ."%' OR a.trip_id LIKE '%" . $search . "%' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                               
                               $where1 .= " AND order_no='" . $search . "'";
                               
                            }
                            else
                            {
                                 $where .= " AND a.order_no LIKE '%" . $search . "%' OR a.trip_id LIKE '%" . $search . "%' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                                 $where1 .= " AND order_no='" . $search . "'";
                            }
                           
                            
                            
                    
                    
                }

                        
        }
        
        
        
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
     
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
              $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                    $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            $poin_to_member_base = $this->Main_model->where_names_two_order_by('admin_users','id',$this->userid,'assign_base',1,'id','Desc');

            if(count($poin_to_member)>0 && count($poin_to_member_base)>0)
            {

                 

                    
   
                   if($tablename!='orders_process')
                   {

                            foreach ($poin_to_member as $point) 
                            {
                                $sales_team_id[] = $point->id;
                            }
                         $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                         $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                   }
                   else
                   {

                      $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                       if($filterOrders == ''){
                      $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
                  }


                   }

             
                    

            }
            else
            {

                   $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                     if($filterOrders == ''){
                   $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
               }
             

            }
            
            
              $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            if($filterOrders != ''){
                 $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id   JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
             }else{
                 $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
             }
           
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
             
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
          $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY $order_by DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
           




            $order_by = $value->name;

             if($value->old_user_id=='0')
            {
                $order_by_name = $value->name;
                $order_by = $value->name;
            } 
            else
            {
                $old_salesperson = $this->Main_model->where_names('admin_users','id',$value->old_user_id);
                foreach ($old_salesperson as $old) {
                    $order_by_name = $old->username;
                    $order_by = $old->username;
                }


            }



            //  if($value->old_user_id=='0')
            // {
            //     $order_by_name = $value->name;
            // } 
            // else
            // {
            //     $old_salesperson = $this->Main_model->where_names('admin_users','id',$value->old_user_id);
            //     foreach ($old_salesperson as $old) {
            //         $order_by_name = $old->username;
            //     }


            // }


           
  
                // $old_salesperson = $this->Main_model->where_names('admin_users','id',$value->entry_user_id);
                // foreach ($old_salesperson as $old) {
                //     $order_by = $old->username;
                // }


          


           
            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;
        
            

            



            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            
            
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                // gg changes for scope task name change
                $value->delivery_status = 'Zaron Scope';
             }


             
             $delivery_date_time="";
             if($tablename == 'orders_process') 
             {


                          $delivery_date_time=date('d-m-Y', strtotime($value->delivery_date_time));
                          



             }
              


           
           $le_amount=$value->bill_total;
           $discountfulltotal=$value->bill_total;



            $pending_amount='';
            if($order_base_val==111)
            {
               

                                                              
                                                                
                                                           $resultsub_production=$this->db->query("SELECT SUM(a.qty*a.rate) as totalvalue FROM order_product_list_process as a  WHERE a.deleteid=0 AND a.order_id='".$value->id."' AND a.return_status=0 ORDER BY a.id DESC");
                                                                 $resultsub_production=$resultsub_production->result();
                                                                 $production=0;
                                                                 foreach($resultsub_production as $val)
                                                                 { 

                                                                         $production+=$val->totalvalue;
                                                                 }

                                                                $resultload = $this->db->query("SELECT SUM(qty*rate) as totalvalue FROM sales_load_products  WHERE order_id='" . $value->id . "' AND loadstatus=1 AND delivered_products=1  ORDER BY id ASC");
                                                                    $resultload = $resultload->result();
                                                                    foreach ($resultload as $valueload)
                                                                    {
                                                                        
                                                                          $loadamount= $valueload->totalvalue;
                                                                        
                                                                    }
                                                                 if($loadamount>0)   
                                                                 {   

                                                                 $production=$production-$loadamount;   
                                                                                                                        
                                                                 if($production>0)
                                                                 {

                                                                   $pending_amount='Partial Pending Amount :'.round($production);

                                                                 }
                                                                 }


            }
            
            


             if($value->delivery_date_status==1)
             {
                $delivery_date_status='Date confirmed';
             }
             else
             {
                $delivery_date_status='Date yet to be confirmed';
             }







          $commission=$value->commission_check+$value->commission_check_fact;


               
         if($tablename=='orders')
         {
                    
                    if($value->order_base==0)
                    {


                    $date=date('Y-m-d',strtotime("-1 days"));
                    $this->db->query("UPDATE orders SET order_base='-3',reason='Archive' WHERE create_date < '".$date."' AND bill_total=0 AND order_base=0");
                   
                   }



            
         }
        



  $trip_id='';
            $vehicle_name = "";
                                    $driver_name="";
               
         if($tablename=='orders_process')
         {

                        
                       $this->db->query("UPDATE orders_process SET  assign_status_3_date = assign_date WHERE assign_status_3_date IS NULL AND assign_status = 3");

         	           $sscheck = $this->db->query("SELECT order_id,delivery_date_status,reason,assign_status,finance_status FROM order_delivery_order_status WHERE  order_id='".$value->id."'  ORDER BY id DESC");
                        $sscheck = $sscheck->result();
                        if(count($sscheck)>0)
                        {



                                foreach ($sscheck as $ssv)
                                {
            $this->db->query("UPDATE orders_process SET delivery_date_status='".$ssv->delivery_date_status."',reason='".$ssv->reason."',assign_status='".$ssv->assign_status."',finance_status='".$ssv->finance_status."' WHERE id='".$ssv->order_id."'");
                                }



                        }




  $this->db->query("UPDATE order_delivery_order_status SET customer_id='".$value->customer_id."' WHERE order_id='".$value->id."' AND  order_no='".$value->order_no."' AND deleteid=0");
                 

                        if($value->order_base=='22')
                        {
                            
$this->db->query("UPDATE orders_process SET reason='MD cancel order request' WHERE id='".$value->id."'");
$this->db->query("UPDATE order_delivery_order_status SET reason='MD cancel order request' WHERE order_id='".$value->id."'");

                        }


                    $trip_id=$value->trip_id;

                                    if($value->vehicle_id>0)
                                    {


                                            $vehicle = $this->Main_model->where_names(
                                                "vehicle",
                                                "id",
                                                $value->vehicle_id
                                            );
                                            foreach ($vehicle as $vehicle_v) {
                                                $vehicle_name = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                                                $vehicle_id = $vehicle_v->id;
                                            }

                                            $driver = $this->Main_model->where_names(
                                                "driver",
                                                "vehicle_id",
                                                $vehicle_id
                                            );
                                            foreach ($driver as $valuess) 
                                            {
                                                $driver_id = $valuess->id;
                                                $driver_name = $valuess->name.' | '.$valuess->phone;

                                            }

                                    }
                                        
                    
                    if($value->order_base=='-1')
                    {

             $this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Cancel Approved' WHERE order_id='".$value->id."' AND  order_no='".$value->order_no."' AND deleteid=0");



    $this->db->query("UPDATE order_delivery_order_status SET reason='Cancel Approved',order_base='-1' WHERE order_id='".$value->id."' AND  order_no='".$value->order_no."'");

$newModOrderNo=$value->order_no;

  $autoroundoff_deletemod='AUTOROUND-'.$newModOrderNo;
  $this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE order_no='".$newModOrderNo."' AND customer_id='372' AND deletemod='".$autoroundoff_deletemod."' AND party_type=5");



  $autoroundoff_deletemod1='ROUND-'.$newModOrderNo;
  $this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE order_no='".$newModOrderNo."' AND customer_id='372' AND deletemod='".$autoroundoff_deletemod1."' AND party_type=5");
  

  $DISCOUNT_DELETEMOD='DISCOUNT-'.$newModOrderNo;
  $this->db->query("UPDATE all_ledgers SET  deleteid=13 WHERE order_no='".$newModOrderNo."' AND customer_id='220' AND deletemod='".$DISCOUNT_DELETEMOD."' AND party_type=5");

   $tcsset='TCS-'.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='166'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$tcsset."'");
$this->db->query("UPDATE all_ledgers SET deleteid='102' WHERE customer_id='166' AND debits='0' AND credits='0' AND party_type='5'  AND deleteid='0'");

                   
   $sgstOut='SGST OUT - '.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='585'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$sgstOut."'");


    $cgstOut='CGST OUT - '.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='586'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$cgstOut."'");

   $igstOut='IGST OUT - '.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='587'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$igstOut."'");

   $sgstIn='SGST IN - '.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='588'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$sgstIn."'");

   $cgstIn='CGST IN - '.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='589'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$cgstIn."'");

   $igstIn='IGST IN - '.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='590'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$igstIn."'");
                   }


$queryc = $this->db->query("SELECT * FROM all_ledgers WHERE  order_id='".$value->id."' AND party_type=1  ORDER BY id DESC");
                        $ress = $queryc->result();

                        foreach ($ress as $ss) {
                            $order_no=$ss->order_no;
                        }

            if($order_no!=$value->order_no)
            {


                  $newModOrderNo=$value->order_no;
            $notes='Order Process-'.$newModOrderNo;
            $deletemod='ORDER'.$newModOrderNo;
            $this->db->query("UPDATE all_ledgers SET deletemod='".$deletemod."',notes='".$notes."',process_by='".$notes."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_id='".$value->id."' AND party_type=1");



                                   



            }



             $this->validateEntry($value->id);
          

                   
            
         }
             


               $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }



            if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                $commision_value = round($commision_value);



            } 


             if($value->commsision_amount>0)
            {
                   $commision_value=$value->commsision_amount;
            }








                         $arr=array('5','6');

                         if (in_array($value->finance_status, $arr))
                         {

                        $querycount = $this->db->query("SELECT * FROM all_ledgers WHERE  order_no='".$value->order_no."' AND commission_customer>0  ORDER BY id DESC");
                        $resultcount = $querycount->result();
                        $countset = count($resultcount);
                        if($countset==0)
                        {

                                   
                        $data_address_refer['order_no'] = $value->order_no;
                        $data_address_refer['difference'] = 0;
                        $data_address_refer['reference_no'] = $value->order_no;
                        $data_address_refer['credits'] = round($commision_value,2);
                        $data_address_refer['order_id'] = 0;
                        $data_address_refer['customer_id'] = 252;
                        $data_address_refer["payment_mode"] = 0;
                        $data_address_refer['user_id'] = 1769;
                        $data_address_refer['account_head_id'] = 48;
                        $data_address_refer['account_heads_id_2'] = 48;
                        $data_address_refer['order_trancation_status'] = 0;
                        $data_address_refer['bank_id'] = 0;
                        $data_address_refer['credits'] = round($commision_value,2);
                        $data_address_refer['debits'] = 0;
                        $data_address_refer['collected_amount'] = $commision_value;
                        $data_address_refer['payment_date'] = $value->payment_recived_date;
                        $data_address_refer['notes'] = 'Order Commission Updated';
                        $data_address_refer['process_by'] = 'Order Commission '.$value->order_no;
                        $data_address_refer['commission_customer'] =1;
                        $data_address_refer['sales_team_id'] =$value->sales_team_id;
                        $data_address_refer['payment_time'] = $value->payment_recived_time;
                        $data_address_refer['party_type'] = 5;
                        $data_address_refer['comission_transfered'] = 0;
                        $data_address_refer['deletemod'] = 'CMM'.$value->order_no;
                        
                       

                           if($commision_value>0)
                           {
                               $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                               if(count($setchek)==0)
                               {

                                       //$insertdatavals=$this->Main_model->insert_commen($data_address_refer, 'all_ledgers');

                                            $data_address_refer['credits'] = 0;
                                            $data_address_refer['debits'] = round($commision_value,2);
                                            $data_address_refer['collected_amount'] = round($commision_value,2);
                                            $data_address_refer['process_by'] = 'Commission Payment Debit Update '.$value->order_no;
                                            $data_address_refer['party_type'] = 5;
                                            $data_address_refer['deletemod'] = 'DPAY_SET_OR'.$insertdatavals;
                                            $deletemodset = 'DPAY_SET_OR'.$insertdatavals;
                                            $data_address_refer['comission_transfered'] = 5;
                                            $data_address_refer['account_head_id'] = 48;
                                            $data_address_refer['account_heads_id_2'] = 48;
                                            $result_cmm= $this->Main_model->where_names('all_ledgers','deletemod',$deletemodset);
                                            if(count($result_cmm)==0)
                                            {


                                                  //$this->Main_model->insert_commen($data_address_refer, 'all_ledgers');


                                            }


                                }
                           }
                           else
                           {


//$this->db->query("UPDATE all_ledgers SET credits='".round($commision_value,2)."' WHERE order_no='".$value->order_no."' AND commission_customer='1' AND customer_id='252'  AND party_type=1");




                           }
                           

                                
                                   


                        }

                    }






             $colorcount=1;
             if($tablename=='orders_process')
             {

            // $getcount = $this->db->query("SELECT count(order_no) as totcount FROM orders_process WHERE  order_no='".$value->order_no."' AND deleteid=0");
            //          $getcount = $getcount->result();
                           
            //               foreach($getcount as $st)
            //               {
            //                      $colorcount=$st->totcount;
            //               }


             }







                if($value->deleteid==0)
                {


                    if($value->order_no=='APR/30')
                    {
                        $commision_value='4231';
                    }

                    if($value->payment_mode_old!='')
                    {
                         $value->payment_mode=$value->payment_mode_old;
                    }




                        $enqDate = '';
                    $quoteDate = '';
                    $orderDate = '';
                    if($tablename == 'orders'){
                        $enqDate = date('d-m-Y',strtotime($value->create_date)).' '.$value->create_time;
                        $sqlQuote = $this->db->query("SELECT id,create_date,create_time,move_id FROM orders_quotation WHERE move_id = '$value->id' ")->row();
                        if(isset($sqlQuote->create_date)){
                            $quoteDate = date('d-m-Y',strtotime($sqlQuote->create_date)).' '.$sqlQuote->create_time;
                            $sqlOrder = $this->db->query("SELECT id,create_date,create_time,move_id FROM orders_process WHERE move_id = '$sqlQuote->id' ")->row();
                            if(isset($sqlOrder->create_date)){
                            $orderDate = date('d-m-Y',strtotime($sqlOrder->create_date)).' '.$sqlOrder->create_time;
                        }
                        }
                    }elseif($tablename == 'orders_quotation'){
                        $quoteDate =  date('d-m-Y',strtotime($value->create_date)).' '.$value->create_time;
                        $sqlEnq = $this->db->query("SELECT id,create_date,create_time,move_id FROM orders WHERE id = '$value->move_id' ")->row();
                        if(isset($sqlEnq->create_date)){
                            $enqDate = date('d-m-Y',strtotime($sqlEnq->create_date)).' '.$sqlEnq->create_time;
                        }
                        $sqlOrder = $this->db->query("SELECT id,create_date,create_time,move_id FROM orders_process WHERE move_id = '$value->id' ")->row();
                        if(isset($sqlOrder->create_date)){
                            $orderDate = date('d-m-Y',strtotime($sqlOrder->create_date)).' '.$sqlOrder->create_time;
                           
                        }
                    }elseif($tablename == 'orders_process'){
                        $orderDate =  date('d-m-Y',strtotime($value->create_date)).' '.$value->create_time;
                        $sqlQuote = $this->db->query("SELECT id,create_date,create_time,move_id FROM orders_quotation WHERE id = '$value->move_id' ")->row();

                        if(isset($sqlQuote->create_date)){
                            $quoteDate = date('d-m-Y',strtotime($sqlQuote->create_date)).' '.$sqlQuote->create_time;
                            $sqlEnq = $this->db->query("SELECT id,create_date,create_time,move_id FROM orders WHERE id = '$sqlQuote->move_id' ")->row();
                            if(isset($sqlEnq->create_date)){
                                $enqDate = date('d-m-Y',strtotime($sqlEnq->create_date)).' '.$sqlEnq->create_time;
                            }
                        }
                    }
           




        if($value->tcs_status==0)
        {
             $value->tcsamount='';
        }


                   $mobile_order=$value->mobile_order;
                   $color='';
                   if($mobile_order=='1')
                   {
                     //$order_by='Customer';
                     if ($this->session->userdata['logged_in']['access'] != '31') {
                          $color='Customer-bg';
                     }
                   }


             if($tablename=='orders_process')
             {     

                if(round($commision_value)<0)
                {

                                                      
                                                                    

$this->db->query("UPDATE all_ledgers SET deleteid='65' WHERE customer_id='252' AND deleteid='0'  AND order_no='".$value->order_no."' AND party_type=5");

                }
                if($value->tcsamount<0)
                {

       
   
$this->db->query("UPDATE all_ledgers SET deleteid='64' WHERE customer_id='166' AND deleteid='0' AND order_no='".$value->order_no."' AND party_type=5");

                }

             }
  


             if($value->return_id>0)
             {

                  $update_date_return = "";
                  $orderby = $this->Main_model->where_names_two_order_by('order_sales_return_complaints', 'id', $value->return_id, 'deleteid', '0', 'id', 'DESC');
                   foreach ($orderby as $orderbyval) {
                    $update_date_return = date('d-M',strtotime($orderbyval->update_date));
                  }
                  $value->reason='Driver Returned on . '.$update_date_return.'. '.$value->reason;
             }




            
            $array[] = array('no' => $i,
                  'trip_id'=>$trip_id,
                  'vehicle_name'=>$vehicle_name,
                  'driver_name'=>$driver_name,
                  'color'=>$color,
                  'delivery_confirm_person' => $value->delivery_confirm_person,'delivery_confirm_date_time' => $value->delivery_confirm_date_time,'finance_status' => $value->finance_status,'id' => $value->id,'tcsamount' => $value->tcsamount,'colorcount' => $colorcount,'pending_amount' => $pending_amount,'le_amount' => $le_amount,'payment_mode' => $value->payment_mode,'payment_mode_re' => $value->payment_mode_reconciliation, 'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'deleteid' => $value->deleteid, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time,'delivery_date' => $delivery_date_time,
                'enquiry_date' => $enqDate,
                'quotation_date' => $quoteDate,
                'order_date' => $orderDate,
                'reason_by' => $value->reason_by,
                'customer_id' => $value->customer_id,
                'delivery_date_status' => $delivery_date_status);

               }


            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    public function fetch_data_table_commission() {


        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_val=$_GET['order_base'];
        $where = "";
        $where1 = "";
        
        
        
        
        if($search == "")
        {
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                  if($order_base==1)
                  {
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                   }
                
            }
            else
            {

                  if($order_base==1)
                  {

                  $from_date = date('Y-m-d');
                  $to_date = date('Y-m-d');
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                  
                  }

            }
             
        }

       }
        
        
        
       
        
        
        $sqls = "";
        
        
        
       
        
       
        
        if($order_base==110)
        {
            $where .=" AND a.paricel_mode=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==111)
        {


            $where .=" AND a.full_delivery=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";





        }
        elseif($order_base==156)
        {
            
            $where .=" AND a.missing_customer=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==26)
        {
            $where .= " AND a.md_approved_status = '1'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==27)
        {
            $where .= " AND a.md_approved_status = '2'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==28)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '20'";
            
        }
        elseif($order_base==1)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '1'";
            
        }
        else
        {
             $where .= " AND a.order_base = '".$order_base."'";
        }
        
        
        
        if($search != "")
        {
                   
              
                    if($this->session->userdata['logged_in']['access']!=12)
                    {
                       $where .=" AND c.name LIKE '%" . $search . "%'";
                       $where .= " OR a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                       $where1 .= " AND order_no='" . $search . "'";
                    }
                    else
                    {
                         $where .= " AND a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                         $where1 .= " AND order_no='" . $search . "'";
                    }
                   
                    
                    
            
            
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND (a.commission_check=1 OR a.commission_check_fact=1) $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND (a.commission_check=1 OR a.commission_check_fact=1) $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
           




            $order_by = $value->name;



           



           
            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;
        
            

            



            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            
            
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Zaron Scope';
             }


             
             $delivery_date_time="";
             if($tablename == 'orders_process') 
             {


                          $delivery_date_time=date('d-m-Y', strtotime($value->delivery_date_time));



             }
              


           
           $le_amount=$value->bill_total;
           $discountfulltotal=$value->bill_total;



            $pending_amount='';
            if($order_base_val==111)
            {
               

                                                              
                                                                
                                                           $resultsub_production=$this->db->query("SELECT SUM(a.qty*a.rate) as totalvalue FROM order_product_list_process as a  WHERE a.deleteid=0 AND a.order_id='".$value->id."' AND a.return_status=0 ORDER BY a.id DESC");
                                                                 $resultsub_production=$resultsub_production->result();
                                                                 $production=0;
                                                                 foreach($resultsub_production as $val)
                                                                 { 

                                                                         $production+=$val->totalvalue;
                                                                 }

                                                                $resultload = $this->db->query("SELECT SUM(qty*rate) as totalvalue FROM sales_load_products  WHERE order_id='" . $value->id . "' AND loadstatus=1 AND delivered_products=1  ORDER BY id ASC");
                                                                    $resultload = $resultload->result();
                                                                    foreach ($resultload as $valueload)
                                                                    {
                                                                        
                                                                          $loadamount= $valueload->totalvalue;
                                                                        
                                                                    }
                                                                 if($loadamount>0)   
                                                                 {   

                                                                 $production=$production-$loadamount;   
                                                                                                                        
                                                                 if($production>0)
                                                                 {

                                                                   $pending_amount='Partial Pending Amount :'.round($production);

                                                                 }
                                                                 }


            }
            
            


             if($value->delivery_date_status==1)
             {
                $delivery_date_status='Date confirmed';
             }
             else
             {
                $delivery_date_status='Date yet to be confirmed';
             }







          $commission=$value->commission_check+$value->commission_check_fact;


               
         if($tablename=='orders')
         {
                    
                    if($value->order_base==0)
                    {


                    $date=date('Y-m-d',strtotime("-1 days"));
                    $this->db->query("UPDATE orders SET order_base='-3',reason='Archive' WHERE create_date < '".$date."' AND bill_total=0 AND order_base=0");
                   
                   }
            
         }
        
             


               $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }



            if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                $commision_value = round($commision_value);

      
            } 

            if($value->commsision_amount>0)
            {
                   $commision_value=$value->commsision_amount;
            }



  $sales_team_id=$value->sales_team_id;

$order_no=$value->order_no;
$de='CMM'.$value->order_no;
$this->db->query("UPDATE all_ledgers SET sales_team_id='".$sales_team_id."',credits='".$commision_value."',debits=0 WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0  AND deletemod='".$de."'");



$this->db->query("UPDATE all_ledgers SET sales_team_id='".$sales_team_id."',debits='".$commision_value."',credits=0 WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0 AND account_head_id=154 AND credits=0");







                         $arr=array('5','6');

                         if (in_array($value->finance_status, $arr))
                         {

                        $querycount = $this->db->query("SELECT * FROM all_ledgers WHERE  order_no='".$value->order_no."' AND commission_customer>0  ORDER BY id DESC");
                        $resultcount = $querycount->result();
                        $countset = count($resultcount);
                        if($countset==0)
                        {

                                   
                        $data_address_refer['order_no'] = $value->order_no;
                        $data_address_refer['difference'] = 0;
                        $data_address_refer['reference_no'] = $value->order_no;
                        $data_address_refer['credits'] = round($commision_value,2);
                        $data_address_refer['order_id'] = 0;
                        $data_address_refer['customer_id'] = 252;
                        $data_address_refer["payment_mode"] = 0;
                        $data_address_refer['user_id'] = 1769;
                        $data_address_refer['account_head_id'] = 48;
                        $data_address_refer['account_heads_id_2'] = 48;
                        $data_address_refer['order_trancation_status'] = 0;
                        $data_address_refer['bank_id'] = 0;
                        $data_address_refer['credits'] = round($commision_value,2);
                        $data_address_refer['debits'] = 0;
                        $data_address_refer['collected_amount'] = $commision_value;
                        $data_address_refer['payment_date'] = $value->payment_recived_date;
                        $data_address_refer['notes'] = 'Order Commission Updated -';
                        $data_address_refer['process_by'] = 'Order Commission '.$value->order_no;
                        $data_address_refer['commission_customer'] =1;
                        $data_address_refer['sales_team_id'] =$value->sales_team_id;
                        $data_address_refer['payment_time'] = $value->payment_recived_time;
                        $data_address_refer['party_type'] = 5;
                        $data_address_refer['comission_transfered'] = 0;
                        $data_address_refer['deletemod'] = 'CMM'.$value->order_no;
                        
                       

                           if($commision_value>0)
                           {

                            $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                               if(count($setchek)==0)
                               {


                                            $insertdatavals=$this->Main_model->insert_commen($data_address_refer, 'all_ledgers');

                                           
                                            $data_address_refer['credits'] = 0;
                                            $data_address_refer['debits'] = round($commision_value,2);
                                            $data_address_refer['collected_amount'] = round($commision_value,2);
                                            $data_address_refer['process_by'] = 'Commission Payment Debit update '.$value->order_no;
                                            $data_address_refer['party_type'] = 5;
                                            $data_address_refer['deletemod'] = 'DPAY_SET_OR'.$insertdatavals;
                                            $deletemodset = 'DPAY_SET_OR'.$insertdatavals;
                                            $data_address_refer['comission_transfered'] = 5;
                                            $data_address_refer['account_head_id'] = 154;
                                            $data_address_refer['account_heads_id_2'] = 154;
                                            $result_cmm= $this->Main_model->where_names('all_ledgers','deletemod',$deletemodset);
                                            if(count($result_cmm)==0)
                                            {


                                                  $this->Main_model->insert_commen($data_address_refer, 'all_ledgers');


                                            }





                                }
                           }
                           

                                
                                   


                        }

                    }






             $colorcount=1;
             if($tablename=='orders_process')
             {

            $getcount = $this->db->query("SELECT count(order_no) as totcount FROM orders_process WHERE  order_no='".$value->order_no."' AND deleteid=0");
                     $getcount = $getcount->result();
                           
                          foreach($getcount as $st)
                          {
                                 $colorcount=$st->totcount;
                          }


             }







                if($value->deleteid==0)
                {
            





            
            $array[] = array('no' => $i, 'finance_status' => $value->finance_status,'id' => $value->id,'colorcount' => $colorcount,'pending_amount' => $pending_amount,'le_amount' => $le_amount,'payment_mode' => $value->payment_mode,'payment_mode_re' => $value->payment_mode_reconciliation, 'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'deleteid' => $value->deleteid, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time,'delivery_date' => $delivery_date_time,'delivery_date_status' => $delivery_date_status);

               }


            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
   
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_single_data_totaldel_pickup() {
         $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $loadamount=0;
        $unbilledloadamount=0;
           $deliveredamount=0;
           $picked_amount=0;
           $picked_amount_full=0;
           
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $DC_id = $form_data->DC_id;
        
        
         $driver_pickip=0;
        
         if(isset($form_data->driver_pickip))
         {
             $driver_pickip = $form_data->driver_pickip;
             
         }
        
        $loadset="";
        
        // if($driver_pickip==0)
        // {
            
        //  $result = $this->Main_model->where_names_three_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','loadstatus_by_cate', '0', 'id', 'DESC');
         
        // }
        // else
        // {
        
        // //$result = $this->Main_model->where_names_three_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','delivery_status', '0', 'id', 'DESC');
        //  $result = $this->Main_model->where_names_three_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','loadstatus_by_cate', '0', 'id', 'DESC');
       
        // }
        
        if($DC_id=='')
        {


 $order_id=$_GET['order_id'];
 $this->db->query("UPDATE sales_load_products SET randam_id=NULL WHERE randam_id IS NOT NULL AND loadstatus=0 AND dispatch_load='0' AND order_id='".$order_id."'"); 
 $this->db->query("UPDATE order_product_list_process SET dispatch_status=0,loadstatus=0  WHERE randam_id IS NULL AND order_id='".$order_id."'"); 


        }

        if($driver_pickip==0)
        {
            $result = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $_GET['order_id'] . "' AND   deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
            $result = $result->result();
        }
        else
        {
             $result = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $_GET['order_id'] . "' AND    deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
             $result = $result->result();
        }
        

       
        
         
       
        foreach ($result as $value)
        {


              $rate= $value->rate+$value->commission;
           

            if ($value->paricel_mode == 1) {
                
               
               
                
                if($value->modify_qty==0)
                {
                    $value->modify_qty=$value->qty;
                }
                
                $amounttotals+= round($rate*$value->modify_qty,2);


                $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty, 2);
                $fullqtys+= $value->modify_qty;
            }
            
            
            $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
           
           
            foreach ($resultload as $valueload)
            {

                 if($valueload->order_id==$value->order_id)
                 {




                            if($valueload->loadstatus==1)
                            {
                                $loadamount+= $valueload->amount;
                            }

                            if($value->picked_status==1)
                            {
                                            $picked_amount_full+= $valueload->amount;
                            }
                            
                            if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                            {
                                $unbilledloadamount+= $valueload->amount;
                            }


                            if(is_null($valueload->randam_id))
                            {

                                        if($value->picked_status==1)
                                        {
                                            $picked_amount+= $valueload->amount;
                                        }

                            }
                            else
                            {
                                   
                            }

                         
                           

                 }
                
            }

            
            $amounttotal+= $rate*$value->qty;
            $amounttotal_with_out_commission+= $value->rate * $value->qty;
            $fullqty+= $value->qty;
            $amounttotalgst+= $rate * $value->qty * $value->gst / 100;
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }



        $deliveredamount=0;
        $picked_amount_alreay_packed=0;
        $picked_amount_random_id=0;
        $resultloads = $this->Main_model->where_names('sales_load_products', 'order_id', $_GET['order_id']);
        foreach ($resultloads as $valueloads)
        {

                                   if($valueloads->loadstatus==1 && $valueloads->delivered_products==1)
                                    {
                                        $deliveredamount+= $valueloads->amount;
                                    }
                                    if($valueloads->randam_id!='')
                                    {


                                                if($valueloads->pickedstatus==1 && $valueloads->delivered_products==0)
                                                {
                                                    $picked_amount_alreay_packed+= $valueloads->amount;
                                                }

                                    }



                                if($DC_id==$valueloads->randam_id)
                                {

                                        if($valueloads->pickedstatus==1)
                                        {
                                            $picked_amount_random_id+= $valueloads->amount;
                                        }

                                }
       }
        


       $lengeth=0;
       $driver_name="";
       $vehicle_name="";
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $paricel_mode = $valuedis->paricel_mode;
            $delivery_mode = $valuedis->delivery_mode;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $create_date_val = $valuedis->create_date;
            $reason = $valuedis->reason;
            $start_reading = $valuedis->start_reading;
            $customer_id= $valuedis->customer_id;
            $tcs_status = $valuedis->tcs_status;
            $tcsamount = $valuedis->tcsamount;
             $bill_total = $valuedis->bill_total;
            $delivery_charge = $valuedis->delivery_charge;
             $trip_id = $valuedis->trip_id;



                                    if($valuedis->vehicle_id>0)
                                    {


                                            $vehicle = $this->Main_model->where_names(
                                                "vehicle",
                                                "id",
                                                $valuedis->vehicle_id
                                            );
                                            foreach ($vehicle as $vehicle_v) {
                                                $vehicle_name = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                                                $vehicle_id = $vehicle_v->id;
                                            }

                                            $driver = $this->Main_model->where_names(
                                                "driver",
                                                "vehicle_id",
                                                $vehicle_id
                                            );
                                            foreach ($driver as $valuess) 
                                            {
                                                $driver_id = $valuess->id;
                                                $driver_name = $valuess->name.' | '.$valuess->phone;

                                            }

                                    }



            $delivery_date_time = $valuedis->delivery_date_time;
            $SSD_check = $valuedis->SSD_check;
            $excess_payment_status = $valuedis->excess_payment_status;



            $company_name_data = "";
            $email = "";
            $phone = "";
            $address = "";
            $localityid=0;
            $customers = $this->Main_model->where_names('customers', 'id', $valuedis->customer_id);
            foreach ($customers as $csval)
             {
                $localityid=$csval->locality;
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }



             $assign_date = date('d-m-Y', strtotime($valuedis->assign_date));
             $assign_time = $valuedis->assign_time;

             $lengeth=$this->maxlength($valuedis->id);
          



            
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        if ($paricel_mode == 1) {
            $amounttotal = $amounttotals;
            $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
            $fullqty = $fullqtys;
        }
        $roundoff = $amounttotal;
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }




          


          
           $table = array("orders","orders_process", "orders_quotation");
          if (in_array($tablenamemain, $table))
          {
             


              if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              


          }


            
           $discountfulltotal=$discountfulltotal+$tcsamount;
           
           if($picked_amount==0)
           {
                $pickedtotalamount=round($discountfulltotal,2);
                
           }
           else
           {



                if($roundoffstatus == 1) 
                {
                      $fulllpicked = $picked_amount_full-$discount+$minisroundoff;
                } else {
                      $fulllpicked = $picked_amount_full-$discount-$minisroundoff;
                }
                
                $pickedtotalamount=$discountfulltotal-$fulllpicked-$tcsamount;
           

           }



        
           if($loadamount==0)
           {
                $loadtotalamount=round($discountfulltotal,2);

           }
           else
           {    



               
                if($roundoffstatus == 1) 
                {
                    $fullloaded = $loadamount-$discount+$minisroundoff;
                } else {
                    $fullloaded = $loadamount-$discount-$minisroundoff;
                }


               
                
               
                
           }


 







               if($unbilledloadamount>0)
               {


                    if($roundoffstatus == 1) 
                    {
                        $unbilledloadamount = $unbilledloadamount-$discount+$minisroundoff;
                    } 
                    else
                    {
                        $unbilledloadamount = $unbilledloadamount-$discount-$minisroundoff;
                    }



                }



               if($picked_amount>0)
               {


                    if($roundoffstatus == 1) 
                    {
                        $picked_amount = $picked_amount-$discount+$minisroundoff;
                    } else {
                        $picked_amount = $picked_amount-$discount-$minisroundoff;
                    }



                }




               
         
               
               if($deliveredamount>0)
               {


               
                 
               if($roundoffstatus == 1) 
                {
                    $deliveredamount = $deliveredamount-$discount+$minisroundoff;
                } else {
                    $deliveredamount = $deliveredamount-$discount-$minisroundoff;
                }
            

            }


                 




if($picked_amount_random_id>0)
               {


                    if($roundoffstatus == 1) 
                    {
                        $picked_amount_random_id = $picked_amount_random_id-$discount+$minisroundoff;
                    } else {
                        $picked_amount_random_id = $picked_amount_random_id-$discount-$minisroundoff;
                    }



                }



 
               if($picked_amount_alreay_packed>0)
               {


                    if($roundoffstatus == 1) 
                    {
                        $picked_amount_alreay_packed = $picked_amount_alreay_packed-$discount+$minisroundoff;
                    } else {
                        $picked_amount_alreay_packed = $picked_amount_alreay_packed-$discount-$minisroundoff;
                    }



                }














            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



           
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                            $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }



               //babu

             if($create_date_val>'2024-05-31')
             {


        
                 $gstamountata=$pickedtotalamount*0.18;
                 $pickedtotalamount=round($pickedtotalamount+$gstamountata);


                 $gstamountata_delviery=$loadtotalamount*0.18;
                 $loadtotalamount=round($loadtotalamount+$gstamountata_delviery);


                 $gstamountata_full=$discountfulltotal*0.18;
                 $discountfulltotal=round($discountfulltotal+$gstamountata_full);
                 //$discountfulltotal=$bill_total;


                 $gstamountata_picked=$picked_amount*0.18;
                 $picked_amount=round($picked_amount+$gstamountata_picked);



                   
              $gstamountata_unbilled=$unbilledloadamount*0.18;
              $unbilledloadamount=round($unbilledloadamount+$gstamountata_unbilled);


              $gstamountata_unbilless=$picked_amount_alreay_packed*0.18;
              $picked_amount_alreay_packed=round($picked_amount_alreay_packed+$gstamountata_unbilless);




                 $gstamountata_picked_rand=$picked_amount_random_id*0.18;
                 $picked_amount_random_id=round($picked_amount_random_id+$gstamountata_picked_rand);


                    $gstdeliveredamount=$deliveredamount*0.18;
                    $deliveredamount=round($deliveredamount+$gstdeliveredamount);





             }


             //babu




              if($tcs_status==1)
             {


                    $poin_to_member = $this->Main_model->where_names('order_delivery_order_status','order_id',$_GET['order_id']);





                    if(count($poin_to_member)==1)
                    {


                             if($picked_amount>0)
                             {
                                $tcsamount_get= $tcsamount;
                                $picked_amount=$picked_amount+$tcsamount_get;
                             }




                     } 
                     else
                     {
                             if($picked_amount>0)
                             {
                                 $tcsamount_get=0;
                                 $picked_amount=$picked_amount+0;
                             }
                     }
                     

                    
             }



        if($picked_amount>0)
        {




        $this->db->query("UPDATE orders_process SET collection_remarks='".round($picked_amount)."'  WHERE id='".$_GET['order_id']."'");
        $this->db->query("UPDATE order_delivery_order_status SET tcs_amount_get='".round($tcsamount_get)."',collection_remarks='".round($picked_amount)."' WHERE order_id='".$_GET['order_id']."'  AND dispatch_status=0 AND deleteid=0");


        }



        if($picked_amount_random_id>0)
        {




        $this->db->query("UPDATE orders_process SET collection_remarks='".round($picked_amount_random_id)."'  WHERE id='".$_GET['order_id']."'");
        $this->db->query("UPDATE order_delivery_order_status SET tcs_amount_get='".round($tcsamount_get)."',collection_remarks='".round($picked_amount_random_id)."' WHERE order_id='".$_GET['order_id']."'  AND randam_id='".$DC_id."' AND deleteid=0");


        }



                        $poin_to_member = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='" . $_GET['order_id']. "'  AND tcs_amount_get>0");
                        $poin_to_member = $poin_to_member->result();

                        $tcs_amount_get=0;
                        foreach($poin_to_member as $tcs)
                        {
                               $tcs_amount_get=$tcs->tcs_amount_get;
                        }
                      

                        if($deliveredamount>0)
                        {
                             $deliveredamount=$deliveredamount+$tcs_amount_get;
                        }

                       

     

          $array = array(

            'order_no_id' => $order_no,
            'picked_amount_random_id' => $picked_amount_random_id,
             'trip_id' => $trip_id,
             'vehicle_name'=>$vehicle_name,
              'driver_name'=>$driver_name,
              'picked_amount_alreay_packed'=>round($picked_amount_alreay_packed),
              'picked_amount'=>round($picked_amount),
              'pickedtotalamount'=>round($pickedtotalamount),
              'phone'=>$phone,'address'=>$address,'company_name_data'=>$company_name_data,'lengeth'=>$lengeth,'delivery_charge'=>$delivery_charge,'assign_date' => $assign_date . ' ' . $assign_time,'delivery_date_time' => $delivery_date_time,'SSD_check' => $SSD_check,'excess_payment_status' => $excess_payment_status,'order_no' => $order_no,'tcsamount' => $tcsamount, 'unbilledloadamount' => round($unbilledloadamount),'deliveredamount' => round($deliveredamount),'loadtotalamount' => round($loadtotalamount),'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal,2), 'discountfulltotal' => round($discountfulltotal), 'totalitems' => count($result), 'discount' => round($discount,2), 'gsttotal' => $amounttotalgst, 'commission' => round($commission,2), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 2), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 2), 'NOS' => round($nos, 2), 'UNIT' => round($unit, 2), 'FACT' => round($fact, 2), 'fullqty' => round($fullqty, 2));
          echo json_encode($array);
    }

    

// gg changes 

    
    
    
public function fetch_single_data_totaldel_pickup_test() 
{

   

    
       $amounttotal = 0;
       $Meter_to_Sqr_feet = 0;
       $Sqr_feet_to_Meter = 0;
       $discount = 0;
       $fullqty = 0;
       $nos = 0;
       $unit = 0;
       $fact = 0;
       $commission = 0;
       $amounttotal_with_out_commission = 0;
       $amounttotal_with_out_commissions = 0;
       $amounttotals = 0;
       $fullqtys = 0;
       $amounttotalgst = 0;
       $loadamount=0;
       $unbilledloadamount=0;
          $deliveredamount=0;
          $picked_amount=0;
          $picked_amount_full=0;
          
       $form_data = json_decode(file_get_contents("php://input"));
       $tablenamemain = 'orders_process';
       $tablename = 'order_product_list_process';
      
       $convert = $form_data->convert;

       $get_convertion = $form_data->convertion;
       $DC_id = $form_data->DC_id;
       
           
        $driver_pickip=0;
       
        if(isset($form_data->driver_pickip))
        {
            $driver_pickip = $form_data->driver_pickip;
            
        }
       
       $loadset="";
       
       
       if($driver_pickip==0)
       {
           $result = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $_GET['order_id'] . "' AND   deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
           $result = $result->result();
       }
       else
       {
            $result = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $_GET['order_id'] . "' AND    deleteid=0 AND loadstatus_by_cate=0   AND product_id!='' $loadset ORDER BY categories_id,sort_id ASC");
            $result = $result->result();
       }
       

      
       
        
      
       foreach ($result as $value)
       {


             $rate= $value->rate+$value->commission;
          

           if ($value->paricel_mode == 1) {
               
              
              
               
               if($value->modify_qty==0)
               {
                   $value->modify_qty=$value->qty;
               }
               
               $amounttotals+= round($rate*$value->modify_qty,2);


               $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty, 2);
               $fullqtys+= $value->modify_qty;
           }
           
           
           $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
          

          
           foreach ($resultload as $valueload)
           {

                if($valueload->order_id==$value->order_id)
                {




                           if($valueload->loadstatus==1)
                           {
                               $loadamount+= $valueload->amount;
                           }

                           if($value->picked_status==1)
                           {
                                           $picked_amount_full+= $valueload->amount;
                           }
                           
                           if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                           {
                               $unbilledloadamount+= $valueload->amount;
                           }


                           if(is_null($valueload->randam_id))
                           {

                                       if($value->picked_status==1)
                                       {
                                           $picked_amount+= $valueload->amount;
                                       }

                           }
                           else
                           {
                                  
                           }

                }



                if($value->picked_status==1 && $valueload->loadstatus == '0' &&  $valueload->dispatch_load == '0' )
                {
                                $picked_amount_full+= $valueload->amount;

                                $amounttotal_data+= $rate*$value->qty;
                                $amounttotal_with_out_commission+= $value->rate * $value->qty;
                                $fullqty+= $value->qty;
                                $amounttotalgst+= $rate * $value->qty * $value->gst / 100;
                                $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
                                $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
                                $commission+= $value->commission;
                                $nos+= $value->nos;
                                $unit+= $value->unit;
                                $fact+= $value->fact;



                                //For GST Task, Creating SGST and CGST from july 1

                                $create_date_check_gst= date('Y-m-d',strtotime($value->create_date));

                                if($create_date_check_gst>'2024-02-20')
                                {
                                    //For GST Task, Creating SGST and CGST from july 1

                                $base_rate=round($rate*0.18,2);
                                $gst_price=round($base_rate*$value->qty,2);


                                }
                                else
                                {

                                //For GST Task, Creating SGST and CGST from july 1

                                    $base_rate=round($rate*0.18,2);
                                $gst_price=round($base_rate*$value->qty,2);



                                }


                                $amountset= $rate*$value->qty;
                                $get_gst_price+=$gst_price;


                }





               
           }





           


          
       }
      //gg changes 

      foreach ($result as $value)
      {

       $resultload = $this->db->query("SELECT * FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND pickedstatus=1   AND order_id='".$value->order_id."'  ORDER BY id ASC");
       $resultload = $resultload->result(); 
        foreach($resultload as $valueload){

                        
                    if($value->picked_status==1 && $valueload->loadstatus == '0' &&  $valueload->dispatch_load == '0' )
                    {

                            // $amounttotal_details = floor($valueload->amount * 100) / 100;
                            // $amounttotal_data = sprintf("%.2f", $amounttotal_details);
                            // $amounttotal+=$amounttotal_data;


                            /*$amounttotal_details=$valueload->amount;
                            if (strpos($valueload->amount , '.') !== false && strlen(substr(strrchr($valueload->amount , "."), 1)) > 2) {
                                // Only truncate if more than 2 digits after decimal
                                $amounttotal_details = floor($valueload->amount * 100) / 100;
                            }
    
                                // $amounttotal_details = floor($valueload->amount * 100) / 100;
                                $amounttotal_data = sprintf("%.2f", $amounttotal_details);
                                $amounttotal+=$amounttotal_data;*/

                                $amount_things=$valueload->rate*$valueload->qty;
                                $decimalPosition1 = strpos((string)$amount_things, '.');
        
                                // Check if there's a decimal point and more than 2 digits after it
                                if ($decimalPosition1 !== false && strlen(substr((string)$amount_things, $decimalPosition1 + 1)) > 2) {
                                    // Truncate to 2 decimal places without rounding
                                    $amount_things = floor($amount_things * 100) / 100;
                                }
                                $amounttotal+=$amount_things;
    
    










                            
                    }
        }

     }

    //    $amounttotal = floor($amounttotal * 100) / 100;
    //    $amounttotal = sprintf("%.2f", $amounttotal);


       $amounttotalgst=$get_gst_price;

    



       $picked_amount_alreay_packed=0;
       $picked_amount_random_id=0;
       $resultloads = $this->Main_model->where_names('sales_load_products', 'order_id', $_GET['order_id']);
       foreach ($resultloads as $valueloads)
       {

                                  if($valueloads->loadstatus==1 && $valueloads->delivered_products==1)
                                   {
                                       //$deliveredamount+= $valueloads->amount;
                                   }
                                   if($valueloads->randam_id!='')
                                   {


                                               if($valueloads->pickedstatus==1 && $valueloads->delivered_products==0)
                                               {
                                                   $picked_amount_alreay_packed+= $valueloads->amount;
                                               }

                                   }



                               if($DC_id==$valueloads->randam_id)
                               {

                                       if($valueloads->pickedstatus==1)
                                       {
                                           $picked_amount_random_id+= $valueloads->amount;
                                       }

                               }
      }
       
// gg canges 

$picked_amount_sub=$amounttotal;
$picked_amount_gst_picked= $picked_amount_sub * 0.18/2 ;

if (strpos($picked_amount_gst_picked , '.') !== false && strlen(substr(strrchr($picked_amount_gst_picked , "."), 1)) > 2) {
    // Only truncate if more than 2 digits after decimal
    $picked_amount_gst_picked = floor($picked_amount_gst_picked * 100) / 100;
}

// $truncatedValue_gsts_picked = floor($picked_amount_gst_picked * 100) / 100;
$picked_amount_gst = sprintf("%.2f", $picked_amount_gst_picked);
















      $lengeth=0;
      $driver_name="";
      $vehicle_name="";
       $start_reading = "";
       $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
       foreach ($resultdis as $valuedis) {
           $production_assign = $valuedis->production_assign;
           $discount = $valuedis->discount;
           $order_no = $valuedis->order_no;
           $user_id = $valuedis->user_id;
           $minisroundoff = $valuedis->roundoff;
           $roundoffstatus = $valuedis->roundoffstatus;
           $paricel_mode = $valuedis->paricel_mode;
           $delivery_mode = $valuedis->delivery_mode;
           $create_date_check= $valuedis->create_date;
           $create_date = date('d/m/Y', strtotime($valuedis->create_date));
           $create_time = $valuedis->create_time;
           $reason = $valuedis->reason;
           $start_reading = $valuedis->start_reading;
           $customer_id= $valuedis->customer_id;
           $tcs_status = $valuedis->tcs_status;
           $tcsamount = $valuedis->tcsamount;

           // gg changes scope task feature changes

           if($DC_id !='') {

            $query_scope = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "' AND randam_id='" . $DC_id. "' ORDER BY id DESC LIMIT 1");
            $scope_changes = $query_scope->row(); 
            
            $delivery_status = $scope_changes->delivery_status;
            $delivery_charge = $scope_changes->delivery_charge;
            $payment_mode = $scope_changes->payment_mode;

            $utr_status = $scope_changes->utr_status;
            $sample_load_status = $scope_changes->sample_load_status;
            $cash_bill_status = $scope_changes->cash_bill_status;
            $site_status = $scope_changes->site_status;
            $tax_status = $scope_changes->tax_status;

      

        }else {

            $query_scope = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "' AND dispatch_status=0 AND dispatch_load_status=0 
                AND deleteid IN ('0','1002') AND randam_id IS NULL ORDER BY id DESC LIMIT 1");
            $scope_changes = $query_scope->row(); 
            
            $delivery_status = $scope_changes->delivery_status;
            $delivery_charge = $scope_changes->delivery_charge;
            $payment_mode = $scope_changes->payment_mode;

            $utr_status = $scope_changes->utr_status;
            $return_id = $scope_changes->return_id;
            $sample_load_status = $scope_changes->sample_load_status;
            $cash_bill_status = $scope_changes->cash_bill_status;
            $site_status = $scope_changes->site_status;
            $tax_status = $scope_changes->tax_status;

      
        }


$return_amount_return_to_resale=0;
$resultmainss = $this->db->query("SELECT * FROM order_sales_return_complaints  WHERE id='" . $return_id . "' AND deleteid=0 AND order_base=5");
$resultcss = $resultmainss->result();
if(count($resultcss)>0)
{


                                                               foreach($resultcss as $vl)
                                                               {
                                                                   
                                                                  $return_amount_return_to_resale= $vl->bill_total;
                                                                 
                                              
                                                                  
                                                               }


}



$return_amount_return_to_sale=0;
$resultmainss_ss = $this->db->query("SELECT * FROM order_sales_return_complaints  WHERE id='" . $return_id . "' AND deleteid=0 AND order_base=2 AND remarks NOT IN ('Driver Return Trip Assigned','Driver Delivered The Order')");
$resultcss_gg = $resultmainss_ss->result();
if(count($resultcss_gg)>0)
{


                                                               foreach($resultcss_gg as $vlvd)
                                                               {
                                                                   
                                                                  $return_amount_return_to_sale= $vlvd->bill_total;
                                                                 
                                              
                                                                  
                                                               }


}




           $bill_total = $valuedis->bill_total;

            // gg changes for hide scope task
           //$delivery_charge = $valuedis->delivery_charge;
            $trip_id = $valuedis->trip_id;


           $create_date_val = $valuedis->create_date;




                                   if($valuedis->vehicle_id>0)
                                   {


                                           $vehicle = $this->Main_model->where_names(
                                               "vehicle",
                                               "id",
                                               $valuedis->vehicle_id
                                           );
                                           foreach ($vehicle as $vehicle_v) {
                                               $vehicle_name = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                                               $vehicle_id = $vehicle_v->id;
                                           }

                                           $driver = $this->Main_model->where_names(
                                               "driver",
                                               "vehicle_id",
                                               $vehicle_id
                                           );
                                           foreach ($driver as $valuess) 
                                           {
                                               $driver_id = $valuess->id;
                                               $driver_name = $valuess->name.' | '.$valuess->phone;

                                           }

                                   }



           $delivery_date_time = $valuedis->delivery_date_time;
           $SSD_check = $valuedis->SSD_check;
           $excess_payment_status = $valuedis->excess_payment_status;



           $company_name_data = "";
           $email = "";
           $phone = "";
           $address = "";
           $localityid=0;
           $customers = $this->Main_model->where_names('customers', 'id', $valuedis->customer_id);
           foreach ($customers as $csval)
            {
               $localityid=$csval->locality;
               $company_name_data = $csval->company_name;
               $email = $csval->email;
               $phone = $csval->phone;
               $map = $csval->google_map_link;
               $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
           }



            $assign_date = date('d-m-Y', strtotime($valuedis->assign_date));
            $assign_time = $valuedis->assign_time;

            $lengeth=$this->maxlength($valuedis->id);
         



           
       }


       if ($minisroundoff == '') {
           $minisroundoff = 0;
       }
       $salesphone = "";
       $salesname = "";
       $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
       foreach ($resultsales as $valuesales) {
           $salesphone = $valuesales->phone;
           $salesphone2 = $valuesales->phone2;
           $salesname = $valuesales->name;
       }
       if ($paricel_mode == 1) {
           $amounttotal = $amounttotals;
           $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
           $fullqty = $fullqtys;
       }
     
       $roundoff = $amounttotal;
       if ($roundoffstatus == 1) {
           $discountfulltotal = $roundoff - $discount + $minisroundoff;
       } else {
           $discountfulltotal = $roundoff - $discount - $minisroundoff;
       }


//For GST Task, Creating SGST and CGST from july 1

// if($create_date_check > '2024-05-20'){
   
    $roundoff = sprintf("%.2f", $roundoff);

   $roundoffWithGst = $roundoff * 1.18;

   $total_sub_total_with_commission=$roundoffWithGst;
   $total_sub_total_with_out_commission=round($amounttotal_with_out_commission * 1.18,2);
   // }
   if($roundoffstatus == 1)
   {
   
         $discountfulltotal = $roundoff - $discount + $minisroundoff;
         //For GST Task, Creating SGST and CGST from july 1
   
   if($create_date_check > '2024-05-31'){
   $discountfulltotal = $roundoffWithGst - $discount + $minisroundoff;
   }
   $amounttotal_with_out_commission_val = $amounttotal_with_out_commission - $discount + $minisroundoff;
   $discountfulltotal_base = $roundoff - $discount;
   $roundoff_val='+'; 
   
   
   } 
   else 
   {
   
   
         $discountfulltotal = $roundoff - $discount - $minisroundoff;
   
   //For GST Task, Creating SGST and CGST from july 1
   
   if($create_date_check > '2024-05-31'){
         $discountfulltotal = $roundoffWithGst - $discount - $minisroundoff;
     }
         $amounttotal_with_out_commission_val = $amounttotal_with_out_commission - $discount - $minisroundoff;
         $discountfulltotal_base = $roundoff - $discount;
         $roundoff_val='-';
   
   }
   
      
          $discountfulltotal=$discountfulltotal+$tcsamount;
          
          if($picked_amount==0)
          {
               $pickedtotalamount=round($discountfulltotal,2);
               
          }
          else
          {



               if($roundoffstatus == 1) 
               {
                     $fulllpicked = $picked_amount_full-$discount+$minisroundoff;
               } else {
                     $fulllpicked = $picked_amount_full-$discount-$minisroundoff;
               }
               
               $pickedtotalamount=$discountfulltotal-$fulllpicked-$tcsamount;
          

          }



       
          if($loadamount==0)
          {
               $loadtotalamount=round($discountfulltotal,2);

          }
          else
          {    



              
               if($roundoffstatus == 1) 
               {
                   $fullloaded = $loadamount-$discount+$minisroundoff;
               } else {
                   $fullloaded = $loadamount-$discount-$minisroundoff;
               }


              
               
              
               
          }










              if($unbilledloadamount>0)
              {


                   if($roundoffstatus == 1) 
                   {
                       $unbilledloadamount = $unbilledloadamount-$discount+$minisroundoff;
                   } 
                   else
                   {
                       $unbilledloadamount = $unbilledloadamount-$discount-$minisroundoff;
                   }



               }





              if($picked_amount>0)
              {


                  $picked_amount = $picked_amount;


               }




              
        
              
           if($deliveredamount>0)
           {


              $deliveredamount = $deliveredamount;

           }


                




              if($picked_amount_random_id>0)
              {


                    $picked_amount_random_id = $picked_amount_random_id;



               }




              if($picked_amount_alreay_packed>0)
              {


                   $picked_amount_alreay_packed = $picked_amount_alreay_packed;


               }

               $amounttotalgst_roundoff=$roundoff*0.18/2;
               $truncatedValue_gsts = floor($amounttotalgst_roundoff * 100) / 100;
               $amounttotalgst_roundoff_total = sprintf("%.2f", $truncatedValue_gsts);
   

   
               $discountfulltotal_roundoff=$roundoff + $amounttotalgst_roundoff_total + $amounttotalgst_roundoff_total;
   
     




           $whole = floor($discountfulltotal_roundoff); 
           $decimal1 = $discountfulltotal_roundoff - $whole;
           $totalval= round($decimal1,3);


// gg changes



$roundoffstatusval_data="";
$getdataminis=0;


if($totalval!=0)
           {


                   if($totalval>0.5)
                   {
                        

                          $getplusevalue=1-$totalval;
                          $discountfulltotal=$discountfulltotal+$getplusevalue;
                         
                          if($getplusevalue>0)
                          {
                            $roundoffstatusval_data=" (+) ".$getplusevalue;
                            $autoRoundStat = 'plus';
                            $autoRound = $getplusevalue;
                          }

                         


                   }
                   elseif($totalval == 0.5)
                   {


                          $getplusevalue=$totalval;
                          $discountfulltotal=$discountfulltotal+$getplusevalue;
                         
                          if($getplusevalue>0)
                          {
                            $roundoffstatusval_data=" (+) ".$getplusevalue;
                            $autoRoundStat = 'plus';
                            $autoRound = $getplusevalue;
                          }


                   }
                   else
                   {

                           $discountfulltotal=round($discountfulltotal-$totalval);
                          if($totalval>0)
                          {
                              $roundoffstatusval_data=" (-) ".$totalval;
                               $autoRoundStat = 'minus';
                               $autoRound = $totalval;
                          }
                          

                   }


           }

     

                 //babu




            
                   

            if($create_date_val>'2024-05-31')
            {


       
                $gstamountata=$pickedtotalamount*0.18;
                $pickedtotalamount=round($pickedtotalamount+$gstamountata);


                $gstamountata_delviery=$loadtotalamount*0.18;
                $loadtotalamount=round($loadtotalamount+$gstamountata_delviery);




                $gstamountata_full=$discountfulltotal*0.18;
                $discountfulltotal=round($discountfulltotal+$gstamountata_full);
                $discountfulltotal=$bill_total;

                $gstamountata_picked=$picked_amount*0.18;
               $picked_amount=round($picked_amount+$gstamountata_picked,2);




                 $gstamountata_unbilled=$unbilledloadamount*0.18;
                 $unbilledloadamount=round($unbilledloadamount+$gstamountata_unbilled);


                 $gstamountata_unbilless=$picked_amount_alreay_packed*0.18;
                 $picked_amount_alreay_packed=round($picked_amount_alreay_packed+$gstamountata_unbilless,2);


                 $picked_amount_random_id_set=$picked_amount_random_id*0.18;
                 $picked_amount_random_id=round($picked_amount_random_id+$picked_amount_random_id_set,2);







                 $deliveredamount_set=$deliveredamount*0.18;
                 $deliveredamount=round($deliveredamount+$deliveredamount_set,2);




            }


            //babu




            

                 
                    

                   
            
                   $firstroundoff=0;
                   $tcs_amount_get_first=0;
                   $poin_to_member = $this->Main_model->where_names('order_delivery_order_status','order_id',$_GET['order_id']);
                   foreach ($poin_to_member as $gettcsval) {

                      //if($gettcsval->randam_id==$DC_id)
                      //{
                                   $tcs_amount_get_first=$gettcsval->tcs_amount_get;
                                   $firstroundoff_get=$gettcsval->firstroundoff;
                                   


                      //}



                      
                   }
                   if(count($poin_to_member)==1)
                   {


                            if($picked_amount>0)
                            {

                                   if($tcs_status==1)
                                   {

                                       $tcsamount_get=$tcsamount;
                                       $picked_amount=$picked_amount+$tcsamount_get;
                                       

                                   }


                                   if($roundoffstatus == 1) 
                                   {
                                       $picked_amount = $picked_amount-$discount+$minisroundoff;
                                   } 
                                   else 
                                   {
                                       $picked_amount = $picked_amount-$discount-$minisroundoff;
                                   }
                                 $firstroundoff=$minisroundoff;

                            }


                            if($picked_amount_alreay_packed>0)
                            {

                                   if($tcs_status==1)
                                   {

                                       $tcsamount_get=$tcsamount;
                                       $picked_amount_alreay_packed=$picked_amount_alreay_packed+$tcsamount_get;

                                   }


                                   if($roundoffstatus == 1) 
                                   {
                                       $picked_amount_alreay_packed = $picked_amount_alreay_packed-$discount+$minisroundoff;
                                   } 
                                   else 
                                   {
                                       $picked_amount_alreay_packed = $picked_amount_alreay_packed-$discount-$minisroundoff;
                                   }


                            }


                             if($picked_amount_random_id>0)
                            {

                                   if($tcs_status==1)
                                   {

                                       $tcsamount_get=$tcsamount;
                                       $picked_amount_random_id=$picked_amount_random_id+$tcsamount_get;

                                   }


                                   if($roundoffstatus == 1) 
                                   {
                                       $picked_amount_random_id = $picked_amount_random_id-$discount+$minisroundoff;
                                   } 
                                   else 
                                   {
                                       $picked_amount_random_id = $picked_amount_random_id-$discount-$minisroundoff;
                                   }


                            }


                            if($deliveredamount>0)
                            {

                                   if($tcs_status==1)
                                   {

                                       $tcsamount_get=$tcsamount;
                                       $deliveredamount=$deliveredamount+$tcsamount_get;

                                   }


                                   if($roundoffstatus == 1) 
                                   {
                                       $deliveredamount = $deliveredamount-$discount+$minisroundoff;
                                   } 
                                   else 
                                   {
                                       $deliveredamount = $deliveredamount-$discount-$minisroundoff;
                                   }


                            }




                    }
                    else
                    {


                                    if($roundoffstatus == 1) 
                                   {
                                       $picked_amount_alreay_packed = $picked_amount_alreay_packed-$discount+$firstroundoff_get;
                                       $picked_amount_random_id = $picked_amount_random_id-$discount+$firstroundoff_get;
                                       $deliveredamount = $deliveredamount-$discount+$firstroundoff_get;

                                   } 
                                   else 
                                   {
                                       $picked_amount_alreay_packed = $picked_amount_alreay_packed-$discount-$firstroundoff_get;
                                       $picked_amount_random_id = $picked_amount_random_id-$discount+$firstroundoff_get;
                                       $deliveredamount = $deliveredamount-$discount+$firstroundoff_get;
                                   }


                                   if($picked_amount_alreay_packed>0)
                                   {
                                       $picked_amount_alreay_packed =$picked_amount_alreay_packed+$tcs_amount_get_first;
                                   }

                                   if($picked_amount_random_id>0)
                                   {
                                              $picked_amount_random_id =$picked_amount_random_id+$tcs_amount_get_first;
                                   }

                                   if($deliveredamount>0)
                                   {
                                            $deliveredamount =$deliveredamount+$tcs_amount_get_first;
                                   }


                                  
                                  


                    }


       if($tcs_status == 1){
           $tcsamount_picked=round(($picked_amount_sub+$picked_amount_gst+$picked_amount_gst)*0.1/100);
           $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$tcsamount_picked+$minisroundoff;
       }else {
           $tcsamount_picked='0';
           $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$minisroundoff;
       }




// gg changes

// If picked_amount is greater than 0, set unbilledloadamount and setpickedamount accordingly
if ($picked_amount > 0) {
    $current_packed = $picked_amount + $picked_amount_alreay_packed;
    $setpickedamount = $picked_amount + $picked_amount_alreay_packed;
} else {
    $current_packed = $picked_amount_alreay_packed;
    $setpickedamount = $picked_amount_alreay_packed;
}

// Set deliveredamount
$deliveredamount = round($deliveredamount);

// Calculate final balance
$current_packed_balence = intval(round($discountfulltotal)) - intval(round($setpickedamount)) - intval($deliveredamount);

// Set final balance if it’s positive, otherwise set it to 0
$current_packed_balence = ($current_packed_balence > 0) ? $current_packed_balence : 0;


       if($picked_amount>0 && $DC_id == '')
       {


            $this->db->query("UPDATE order_delivery_order_status SET firstroundoff='".round($firstroundoff)."',tcs_amount_get='".round($tcsamount_get)."',collection_remarks_2='".round($total_show_value)."',collect_sub_amount='".$picked_amount_sub."',collect_gst='".$picked_amount_gst."',collect_tcs='".$tcsamount_picked."',collect_roundoff='".$roundoffstatusval_data."',collect_tcs_status='".$tcs_status."',total_picked_amount='".round($total_show_value)."',current_packed_balence='".round($current_packed_balence)."',current_packed='".round($current_packed)."' WHERE order_id='".$_GET['order_id']."'  AND dispatch_status=0 AND deleteid=0");


       }

            
       if($total_show_value==0)
       {

           

              $this->db->query("UPDATE order_delivery_order_status SET total_picked_amount='".round($total_show_value)."',collection_remarks_2='".round($total_show_value)."' WHERE order_id='".$_GET['order_id']."'  AND dispatch_status=0 AND deleteid=0 AND finance_status=2");

          

       }



       if($picked_amount_random_id>0 && $DC_id == '')
       {


       $this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".round($total_show_value)."',collect_sub_amount='".$picked_amount_sub."',collect_gst='".$picked_amount_gst."',collect_tcs='".$tcsamount_picked."',collect_roundoff='".$roundoffstatusval_data."',collect_tcs_status='".$tcs_status."',total_picked_amount='".round($total_show_value)."',current_packed_balence='".round($current_packed_balence)."',current_packed='".round($current_packed)."' WHERE order_id='".$_GET['order_id']."'  AND randam_id='".$DC_id."' AND deleteid=0");


       }

       $deliveredamount=0;



      // $resultloads_data = $this->Main_model->where_names('order_delivery_order_status', 'order_id', $_GET['order_id']);
     $resultloads_data = $this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_id',$_GET['order_id'], 'finance_status >=','4', 'id', 'DESC');

       foreach ($resultloads_data as $valueloads_data)
       {
                  //  $deliveredamount+= $valueloads_data->driver_recived_payment;

                            if($valueloads_data->return_amount>0)
                            {

$deliveredamount+= $valueloads_data->total_picked_amount_confirmed-$valueloads_data->return_amount;

                            }
                            else
                            {
                                     
    $deliveredamount+= $valueloads_data->total_picked_amount_confirmed;
                                
                            }
                    
       }


    // $resultmainss = $this->db->query("SELECT * FROM  sales_load_products  WHERE order_id='" . $_GET['order_id'] . "' AND loadstatus=1 AND delivered_products=1 AND pickedstatus=1 AND dispatch_load=1");
    //                                      $resultloads_data = $resultmainss->result();

    //    foreach ($resultloads_data as $valueloads_data)
    //    {
    //               //  $deliveredamount+= $valueloads_data->driver_recived_payment;
    //                 $deliveredamount+= round($valueloads_data->amount,3);
    //    }


    //     $deliveredamount_gsts = $deliveredamount * 1.18;
    //     $deliveredamount=$deliveredamount+$deliveredamount_gsts;

// get gate status value

        $gate_status = $this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_id',$_GET['order_id'], 'randam_id', $DC_id, 'id', 'DESC');
        $gate_login_view_status = $gate_status[0]->gate_login_view_status;
        $convertion = $gate_status[0]->convertion;

// gg changes for total picked value


    $order_id=$_GET['order_id'];
    $DC_id=$form_data->DC_id;

    $resultmain_picked1 = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE randam_id ='".$DC_id."' AND order_id='".$order_id."' AND delivery_date_status ='1' AND dispatch_status ='1'  GROUP BY randam_id  ORDER BY id DESC");
    $resultcs_picked1 = $resultmain_picked1->result();
 

        $total_picked_amount=0;
        foreach($resultcs_picked1 as $picked_summary1) { 

                $total_picked_amount=$picked_summary1->total_picked_amount;

          }


// already loaded dc amount

$already_loaded_value_onpage=[];
$query = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "' AND delivery_notes_status=1 AND randam_id IS NOT NULL ");
$DC_list = $query->result();                                                       
foreach ($DC_list as $dd) { 

    $this->db->select('SUM(qty * rate) AS amount'); // Sum of qty * rate as amount
    $this->db->where('sales_load_products.randam_id', $dd->randam_id);
    $this->db->where('sales_load_products.loadstatus', 1);
    $dc_amount_data = $this->db->get('sales_load_products');
    $dc_amount = $dc_amount_data->row();

    $decimalPosition1 = strpos((string)$dc_amount->amount, '.');
            
    // Check if there's a decimal point and more than 2 digits after it
    if ($decimalPosition1 !== false && strlen(substr((string)$dc_amount->amount, $decimalPosition1 + 1)) > 2) {
        // Truncate to 2 decimal places without rounding
        $dc_amount->amount = floor($dc_amount->amount * 100) / 100;
    }

    $dc_amount_get=$dc_amount->amount*0.18;
    $this->db->where('orders_process.id', $dd->order_id);
    $orders_process_tcs_check = $this->db->get('orders_process');
    $tcs_check = $orders_process_tcs_check->row();


    if($tcs_check->tcs_status == '1') {
        $tcsamount_picked=round(($dc_amount->amount+$dc_amount_get)*0.1/100);
        $already_loaded_value_onpage[]=round($dc_amount->amount+$dc_amount_get+$tcsamount_picked);
    }else {
        $already_loaded_value_onpage[]=round($dc_amount->amount+$dc_amount_get);
    }

}

 
    $already_loaded_value_onpage_per=[];
    $this->db->select('SUM(qty * rate) AS amount'); // Sum of qty * rate as amount
    $this->db->where('sales_load_products.randam_id', $DC_id);
    $this->db->where('sales_load_products.loadstatus', 1);
    $dc_amount_data_per = $this->db->get('sales_load_products');
    $dc_amount_per = $dc_amount_data_per->row();


                                $decimalPosition = strpos((string)$dc_amount_per->amount, '.');
            
                                // Check if there's a decimal point and more than 2 digits after it
                                if ($decimalPosition !== false && strlen(substr((string)$dc_amount_per->amount, $decimalPosition + 1)) > 2) {
                                    // Truncate to 2 decimal places without rounding
                                    $dc_amount_per->amount = floor($dc_amount_per->amount * 100) / 100;
                                }



    $dc_amount_get_per=$dc_amount_per->amount*0.18;
    $this->db->where('orders_process.id', $dd->order_id);
    $orders_process_tcs_check_per = $this->db->get('orders_process');
    $tcs_check_per = $orders_process_tcs_check_per->row();

    if($tcs_check_per->tcs_status == '1') {
        $tcsamount_picked_per=round(($dc_amount_per->amount+$dc_amount_get_per)*0.1/100);
        $already_loaded_value_onpage_per[]=round($dc_amount_per->amount+$dc_amount_get_per+$tcsamount_picked_per);
    }else {
        $already_loaded_value_onpage_per[]=round($dc_amount_per->amount+$dc_amount_get_per);
    }





  // For 1 rupees issue

  $is_final_partial=$_GET['sum_total_nos'];
  $bill_roundoff_show='';
  $finalbalnce=0;
  if($is_final_partial == '0') {

                              $dc_amount=array_sum($already_loaded_value_onpage);
                          
                              $finalbalnce = $discountfulltotal - $dc_amount - round($total_show_value);

                              if($finalbalnce == 1) {


                                $total_show_value=$total_show_value+1;
                                $picked_amount=$picked_amount+1;
                                $bill_roundoff_show='1';

                                          // update collection_remarks_2 for 1 rupee issue
        $this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".round($total_show_value)."' WHERE order_id='".$_GET['order_id']."'  AND dispatch_status=0 AND deleteid=0");

                              }

  }







if(isset($_GET['DC_id']))
{

    if(isset($_GET['convertion']))
    {

        if($_GET['convertion']=='2')
        {

            if($_GET['DC_id']!='')
            {

               $randam_id= $_GET['DC_id'];
               $this->db->query("UPDATE order_delivery_order_status SET total_picked_amount_confirmed='".round($current_packed)."' WHERE order_id='".$_GET['order_id']."'  AND randam_id='".$randam_id."' AND deleteid=0"); 
            }

        }


    }

}



if($return_amount_return_to_sale>0)
{

$resultsub_inproduction_all=$this->db->query(
                                                                "SELECT 
                                                                   
                                                                     SUM(ss.qty*c.rate) as totaldelivery_amount,
                                                                     b.id
                                                                      FROM  
                                                                      order_sales_return_complaints as b JOIN sales_return_products as c ON b.id=c.c_id
                                                                      JOIN sales_load_products as ss  ON ss.order_product_id=c.purchase_order_product_id

                                                                        WHERE b.deleteid=0 AND ss.order_id='" . $return_id . "' AND  b.order_base=2 AND ss.delivered_products=1 AND ss.return_status=1 GROUP BY b.id   ORDER BY b.id DESC");
$resultsub_inproduction_all=$resultsub_inproduction_all->result();

$totaldelivery_amount_val_all=0;
if(count($resultsub_inproduction_all)>0)
{
     foreach($resultsub_inproduction_all as $rrrrv)
     {

     
        $totaldelivery_amount_all=$rrrrv->totaldelivery_amount;
        $gstreturn_de_all=$totaldelivery_amount_all*18/100;
        $totaldelivery_amount_val_all=round($totaldelivery_amount_all+$gstreturn_de_all);
       
     }

}






$total_return_pickup=0;
$resultmainss_ss = $this->db->query("SELECT SUM(b.qty*b.rate) as return_picked_amount  FROM order_product_list_process as a JOIN sales_load_products as b ON a.id=b.order_product_id  WHERE a.order_id='" . $order_id . "' AND a.deleteid=0 AND a.return_status=1 AND a.randam_id IS NULL AND b.randam_id IS NULL AND a.picked_status=1");
$resultcss_gg = $resultmainss_ss->result();
if(count($resultcss_gg)>0)
{


                                                               foreach($resultcss_gg as $vlvd)
                                                               {
                                                                   
                                                                   
                                                            $return_picked_amount=$vlvd->return_picked_amount;
                                                            $gstreturn=$return_picked_amount*18/100;
                                                            $inproduction_total_return=round($return_picked_amount+$gstreturn);
                                                            $total_return_pickup= $inproduction_total_return;
                                                                 
                                              
                                                                  
                                                               }


}


$return_amount_return_to_sale=round($return_amount_return_to_sale-$total_return_pickup);
if($totaldelivery_amount_val_all>0)
{
     $return_amount_return_to_sale=round($return_amount_return_to_sale-$totaldelivery_amount_val_all);
}

if($return_amount_return_to_sale<0)
{
      $return_amount_return_to_sale=0;
}

}


          

         $array = array(

           'order_no_id' => $order_no,
           'picked_amount_random_id' => $picked_amount_random_id,
           'tcs_status_amount'=>$tcsamount_picked,
           'return_amount_return_to_sale'=>$return_amount_return_to_sale,
           'tcs_status_picked'=>$tcs_status,
            'trip_id' => $trip_id,
            'vehicle_name'=>$vehicle_name,
             'driver_name'=>$driver_name,
             'picked_amount_alreay_packed'=>round($picked_amount_alreay_packed),
             'picked_amount'=>round($picked_amount),
             'picked_amount_sub'=>$picked_amount_sub,
             'picked_amount_gst'=>$picked_amount_gst,
             'pickedtotalamount'=>round($total_show_value),
             'phone'=>$phone,'address'=>$address,'company_name_data'=>$company_name_data,'lengeth'=>$lengeth,'delivery_charge'=>$delivery_charge,'assign_date' => $assign_date . ' ' . $assign_time,'delivery_date_time' => $delivery_date_time,'SSD_check' => $SSD_check,'excess_payment_status' => $excess_payment_status,'order_no' => $order_no,'tcsamount' => $tcsamount_picked, 'unbilledloadamount' => round($unbilledloadamount),'deliveredamount' => round($deliveredamount),'loadtotalamount' => round($loadtotalamount),'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 
             'fulltotal' => round($discountfulltotal,2),
             'return_amount_return_to_resale' => round($return_amount_return_to_resale,2),
              'discountfulltotal' => round($discountfulltotal), 'totalitems' => count($result), 'discount' => round($discount,2), 'gsttotal' => $amounttotalgst, 'commission' => round($commission,2), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 2), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 2), 'NOS' => round($nos, 2), 'UNIT' => round($unit, 2), 'FACT' => round($fact, 2), 'fullqty' => round($fullqty, 2),
             'roundoffstatusval_data_picked'=>$roundoffstatusval_data,
             'current_packed_balence'=>round($current_packed_balence),
             'current_packed'=>round($current_packed),
             'gate_login_view_status'=>$gate_login_view_status,
             'convertion'=>$convertion,
             'get_convertion'=>$get_convertion,
             'total_picked_amount'=>$total_picked_amount,
             'already_loaded_value_onpage'=>array_sum($already_loaded_value_onpage),
             'already_loaded_value_onpage_per'=>array_sum($already_loaded_value_onpage_per),

               // gg chnages for scope task
               'delivery_status'=>$delivery_status,
               'payment_mode'=>$payment_mode,
               'utr_status'=>$utr_status,
               'sample_load_status'=>$sample_load_status,
               'cash_bill_status'=>$cash_bill_status,
               'site_status'=>$site_status,
               'tax_status'=>$tax_status,
               'return_id'=>$return_id,
               'update_id'=>$scope_changes->id,
               'bill_roundoff_show'=>$bill_roundoff_show,
               'finalbalnce_partial'=>$finalbalnce
             
            );
         echo json_encode($array);


       
   }


// gg changes scope task 

public function update_scope_details() {

    // Retrieve form data from POST
    $form_data = json_decode(file_get_contents("php://input"));
    $order_id = $form_data->order_id;
    $update_id = $form_data->update_id;
    $delivery_charge = $form_data->delivery_charge;
    $delivery_status = $form_data->delivery_status;
    $payment_mode = $form_data->payment_mode;

    $utr_status = $form_data->utr_status;
    $sample_load_status = $form_data->sample_load_status;
    $site_status = $form_data->site_status;
    $tax_status = $form_data->tax_status;
    $cash_bill_status = $form_data->cash_bill_status;
    $packed_balance = $form_data->packed_balance;
    $return_id=$form_data->return_id;
    $return_pick_up_value=$form_data->return_pick_up_value;


    
    // Perform the update query
    $this->db->query("UPDATE order_delivery_order_status 
                      SET delivery_charge='" . $delivery_charge . "', 
                          delivery_status='" . $delivery_status . "' ,
                          payment_mode='" . $payment_mode . "',
                          deleteid='0',
                          utr_status='" . $utr_status . "' ,
                          sample_load_status='" . $sample_load_status . "',
                          cash_bill_status='" . $cash_bill_status . "' ,
                          site_status='" . $site_status . "',
                          tax_status='" . $tax_status . "',
                          collection_remarks_2='" . $packed_balance . "',
                          total_picked_amount='" . $packed_balance . "'
                          WHERE order_id='".$order_id."' 
                          AND id='".$update_id."' AND deleteid IN ('0','1002')");

                          $this->db->query("UPDATE orders_process 
                          SET delivery_status='" . $delivery_status . "',
                           payment_mode='" . $payment_mode . "'
                          WHERE id='".$order_id."'");



date_default_timezone_set("Asia/Kolkata"); 
                                                                    $date= date('Y-m-d');
                                                                    $time= date('h:i A');
 $results = $this->Main_model->where_names("orders_process","id",$order_id);
foreach ($results as $orders) {

 $bill_total = $orders->bill_total;
 $order_no = $orders->order_no;
 $customer_id = $orders->customer_id;
  $create_date = $orders->create_date;
 }


     
$collection_remarks_2_set=$form_data->finalbalnce;




        $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE order_id='" . $order_id . "'  AND deleteid=0 ORDER BY id DESC");
               $checkcount = $checkcount->result();

        $resultmainss = $this->db->query("SELECT SUM(qty) as totalqty FROM sales_load_products  WHERE order_id='" . $order_id . "' AND pickedstatus=1   ORDER BY id DESC");
              $resultcss = $resultmainss->result();
                                                 
$this->db->query("DELETE FROM order_delivery_order_status WHERE order_id='".$order_id."' AND deleteid='88' AND finance_status=2");
$this->db->query("DELETE FROM order_delivery_order_status WHERE order_id='".$order_id."' AND deleteid='1001' AND finance_status=1001");
                                
                $firsttotal=round($checkcount[0]->totalqty);
                $secondtotal=round($resultcss[0]->totalqty);




                 if($firsttotal!=$secondtotal)
                 {



                              $dil_status_first['dispatch_status'] = 0;
                              $dil_status_first['assign_status'] = 0;
                              $dil_status_first['collection_remarks'] = 0;
                              $dil_status_first['order_id'] = $order_id;
                              $dil_status_first['order_no'] = $order_no;
                              $dil_status_first['customer_id'] = $customer_id;
                             
                              $dil_status_first['reason'] = 'Partial Pick Pending';
                              $dil_status_first['delivery_mode'] = 'Partial';
                              $dil_status_first['create_date'] = $date;
                              $dil_status_first['create_time'] = $time;
                              $dil_status_first['delivery_date'] =$date;
                              $dil_status_first['delivery_time'] =$time;
                              
                              $dil_status_first['assign_status_0_date'] = date('Y-m-d');
                              
 $returncheck_by = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $order_id. "'  AND return_id>0 AND deleteid='0'");
 $returncheck_by = $returncheck_by->result();
                          if(count($returncheck_by)>0)
                          {
                             

                             
                              // $returncheck_by_baseee = $this->db->query("SELECT total_picked_amount FROM order_delivery_order_status  WHERE order_id='" . $order_id. "' AND finance_status='11' AND deleteid='0'");
                              // $returncheck_by_baseee = $returncheck_by_baseee->result();
                              // if(count($returncheck_by_baseee)>0)
                              // {
                              //   foreach($returncheck_by_baseee as $ddd)
                              //   {
                              //       $total_picked_amount=$ddd->total_picked_amount;
                              //   }

                              // }
                              

                               if($return_pick_up_value==0)
                               {
                                  $dil_status_first['deleteid'] = 88;
                                  $dil_status_first['finance_status'] = 2;
                               }
                               else
                               {
                                  $dil_status_first['deleteid'] = 88;
                                  $dil_status_first['finance_status'] = 2;

                                  $collection_remarks_2_set=abs($collection_remarks_2_set-$return_pick_up_value);
                               }

                              
                               $dil_status_first['return_id'] = $return_id;
                               $dil_status_first['collection_remarks_2'] = $collection_remarks_2_set;
                               $dil_status_first['total_picked_amount'] = $collection_remarks_2_set;




                          }
                          else
                          {


                               $dil_status_first['deleteid'] = 88;
                               $dil_status_first['finance_status'] = 2;
                               $dil_status_first['return_id'] = $return_id;
                               $dil_status_first['collection_remarks_2'] = $collection_remarks_2_set;
                               $dil_status_first['total_picked_amount'] = $collection_remarks_2_set;



                          }


                              //$dil_status_first['deleteid'] = 88;
                              //$dil_status_first['return_id'] = $return_id;



                          $allcheck = $this->db->query("SELECT id FROM order_delivery_order_status  WHERE order_id='" . $form_data->order_id . "' AND finance_status=2 AND deleteid='88'");
                                            $allcheck = $allcheck->result();



                          if(count($allcheck)==0)
                          {
                                 

                               if($collection_remarks_2_set>0)
                               {

                                  //if($return_id=='0')
                                  //{
                                        $this->Main_model->insert_commen($dil_status_first, 'order_delivery_order_status');
                                  //}  

                               }  
                               
                              
                          }




                 }
    // Check if any rows were updated
 
    $array = array(
        'status' => '1',
        'message' => 'Updated Successfully'
    );

    // Return response as JSON
    echo json_encode($array);
}



   
   

//pickup_summary
public function pickup_summary() {

   
    $form_data = json_decode(file_get_contents("php://input"));
    $order_id=$_GET['order_id'];
 
    $resultmain_picked = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='".$order_id."' AND delivery_date_status ='1' AND dispatch_status ='1' AND dispatch_load_status ='1' AND dispath_load_status_view ='1' AND seq_status ='1' GROUP BY randam_id  ORDER BY id ASC");
    $resultcs_picked = $resultmain_picked->result();

      // 1 rupee issues
    $resultmain_picked_count = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='".$order_id."' ORDER BY id ASC");
    $resultmain_picked_counts = $resultmain_picked_count->result();

    $count=count($resultmain_picked_counts);

 
    $details=array();
        $i=1;

        foreach($resultcs_picked as $picked_summary) { 

            $resultmain_picked1 = $this->db->query("SELECT * FROM sales_load_products  WHERE randam_id ='".$picked_summary->randam_id."' AND order_id='".$order_id."' ORDER BY id DESC");
            $result_qty = $resultmain_picked1->result();

            $partial_orignal_kg_weight=array();
            $partial_delivered_kg_weight=0;

                $sub_amount=0;
                foreach($result_qty as $values_check) {

                                        // gg changes kg weight purpose
                                        $result = $this->db->query("SELECT a.categories_id,a.delivery_status,b.uom,a.id,a.billing_options FROM order_product_list_process as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.id='".$values_check->order_product_id."'AND a.deleteid=0 GROUP BY a.categories_id,b.type ORDER BY a.categories_id,a.sort_id ASC");
                                        $result1_check = $result->row();

                                        if ($result1_check->uom == 'Kg' || $result1_check->billing_options == 2 || $result1_check->categories_id == 5 ) {

                                            $partial_orignal_kg_weight[] = $values_check->activel_qty;
                            
                                            // Query to get the sum of 'qty' in 'sales_load_products' table
                                            $this->db->select_sum('qty');
                                            $this->db->where('order_product_id', $values_check->order_product_id);
                                           // $this->db->where('delivered_products', '1');
                                            $this->db->where('randam_id', $picked_summary->randam_id);
                                            $query = $this->db->get('sales_load_products');
                                            $result23 = $query->row();

                                            
                                    
                                            if ($result23) {
                                                $partial_delivered_kg_weight += $result23->qty;  // Sum the qty values
                                            }
                                        
                                        }

                                // get loaded data values

                                $amounttotal_datas= $values_check->rate*$values_check->qty;
                                $decimalPosition = strpos((string)$amounttotal_datas, '.');
                                
                                // Check if there's a decimal point and more than 2 digits after it
                                if ($decimalPosition !== false && strlen(substr((string)$amounttotal_datas, $decimalPosition + 1)) > 2) {
                                    // Truncate to 2 decimal places without rounding
                                    $amounttotal_datas = floor($amounttotal_datas * 100) / 100;
                                }
                                
                                // Format the number to two decimal places (this is optional if you just want to display it)
                                $amounttotal_data = sprintf("%.2f", $amounttotal_datas);
                                $sub_amount += $amounttotal_data;

                }

                $amounttotal=$sub_amount;
                // gg canges 
                $picked_amount_sub=$amounttotal;
                $picked_amount_gst_picked= $picked_amount_sub * 0.18/2 ;

                $roundoff = $amounttotal;
                $roundoff = sprintf("%.2f", $roundoff);

                if (strpos($picked_amount_gst_picked , '.') !== false && strlen(substr(strrchr($picked_amount_gst_picked , "."), 1)) > 2) {
                    // Only truncate if more than 2 digits after decimal
                    $picked_amount_gst_picked = floor($picked_amount_gst_picked * 100) / 100;
                }

                // $truncatedValue_gsts_picked = floor($picked_amount_gst_picked * 100) / 100;
                $picked_amount_gst = sprintf("%.2f", $picked_amount_gst_picked);

              
                      //GET TCS STATUS

                      $resultdis12 = $this->Main_model->where_names_two_order_by('orders_process', 'id', $order_id, 'deleteid', '0', 'id', 'DESC');
                      foreach ($resultdis12 as $valuedis12) {
                      
                          $tcs_status = $valuedis12->tcs_status;
                       }

                          if($tcs_status == 1){
                          $tcsamount_picked=round(($picked_amount_sub+$picked_amount_gst+$picked_amount_gst)*0.1/100);
                          $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$tcsamount_picked+$minisroundoff;
                          }else {
                              $tcsamount_picked='0';
                              $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$minisroundoff;
                          }
           
                $amounttotalgst_roundoff=$roundoff*0.18/2;
                $truncatedValue_gsts = floor($amounttotalgst_roundoff * 100) / 100;
                $amounttotalgst_roundoff_total = sprintf("%.2f", $truncatedValue_gsts);
        
                $discountfulltotal_roundoff=$roundoff + $amounttotalgst_roundoff_total + $amounttotalgst_roundoff_total;



                $bill_roundoff_show_dc='';
                // 1 rupee issues
                if($count == $i){
                    $is_final_partial=$_GET['sum_total_nos'];
                    $is_balence=$_GET['is_balence'];
                            if($is_final_partial == '0' && $is_balence == '1') {

                                $total_show_value +=1;
                                $bill_roundoff_show_dc='1';
                            }
                }


                $whole = floor($discountfulltotal_roundoff); 
                $decimal1 = $discountfulltotal_roundoff - $whole;
                $totalval= round($decimal1,3);

                // gg changes

                $roundoffstatusval_data="";
                $getdataminis=0;

                if($totalval!=0)
                        {

                                if($totalval>0.5)
                                {
                                 
                                        $getplusevalue=1-$totalval;
                                        $discountfulltotal=$discountfulltotal+$getplusevalue;
                                        
                                        if($getplusevalue>0)
                                        {
                                            $roundoffstatusval_data=" (+) ".$getplusevalue;
                                            $autoRoundStat = 'plus';
                                            $autoRound = $getplusevalue;
                                        }

                                }
                                elseif($totalval == 0.5)
                                {


                                        $getplusevalue=$totalval;
                                        $discountfulltotal=$discountfulltotal+$getplusevalue;
                                        
                                        if($getplusevalue>0)
                                        {
                                            $roundoffstatusval_data=" (+) ".$getplusevalue;
                                            $autoRoundStat = 'plus';
                                            $autoRound = $getplusevalue;
                                        }

                                }
                                else
                                {

                                        $discountfulltotal=round($discountfulltotal-$totalval);
                                        if($totalval>0)
                                        {
                                            $roundoffstatusval_data=" (-) ".$totalval;
                                            $autoRoundStat = 'minus';
                                            $autoRound = $totalval;
                                        }
                                        
                                }

                        }

    // Calculate original weight and absolute difference
    $og_weight =number_format(array_sum($partial_orignal_kg_weight), 3, '.', '');
    $partial_delivered_kg_weight=number_format($partial_delivered_kg_weight, 3, '.', '');
    $weight_difference = $og_weight - $partial_delivered_kg_weight;
    $weight_difference=number_format($weight_difference, 3, '.', '');
    $difference_type = ($og_weight > $partial_delivered_kg_weight) ? 'Negative' : 'Positive';
  
                    // pickup details
                    /* $details[]=array(
                            'pickup_message'=>'Pickup '.$i.'- ( '.$picked_summary->delivery_confirm_date_time.' )',
                            'sub_total_pickup'=>$picked_summary->collect_sub_amount,
                            'total_gst_pickup'=>$picked_summary->collect_gst,
                            'roundoff_pickup'=>$picked_summary->collect_roundoff,
                            'tcsamount_pickup'=>$picked_summary->collect_tcs,
                            'full_total_pickup'=>$picked_summary->collection_remarks,
                            'tcsamount_pickup_status'=>$picked_summary->collect_tcs_status,
                            'reason'=>$picked_summary->reason,
                            'total_picked_amount'=>$picked_summary->total_picked_amount,
                            'dc_ids'=>$picked_summary->randam_id,
                            'id'=>$picked_summary->order_id,
                            'packing_delivered_kg_weight'=>$partial_delivered_kg_weight,
                            'packing_orignal_kg_weight'=>$og_weight,
                            'packing_weight_difference'=>$weight_difference,
                            'packing_difference_type'=>$difference_type,

                        );*/

                        // loaded details

                $details[]=array(
                        'pickup_message'=>'Pickup '.$i.'- ( '.$picked_summary->delivery_confirm_date_time.' )',
                        'sub_total_pickup'=>$picked_amount_sub,
                        'total_gst_pickup'=>$picked_amount_gst,
                        'roundoff_pickup'=>$roundoffstatusval_data,
                        'tcsamount_pickup'=>$tcsamount_picked,
                        'full_total_pickup'=>$picked_summary->collection_remarks,
                        'tcsamount_pickup_status'=>$picked_summary->collect_tcs_status,
                        'reason'=>$picked_summary->reason,
                        'total_picked_amount'=>$picked_summary->total_picked_amount,
                        'total_picked_amount_summary'=>round($total_show_value),
                        'dc_ids'=>$picked_summary->randam_id,
                        'id'=>$picked_summary->order_id,
                        'packing_delivered_kg_weight'=>$partial_delivered_kg_weight,
                        'packing_orignal_kg_weight'=>$og_weight,
                        'packing_weight_difference'=>$weight_difference,
                        'packing_difference_type'=>$difference_type,
                          // one rupee issue
                        'bill_roundoff'=>$bill_roundoff_show_dc

                    );


        $i++; 
    }
        $myData = array('data' => $details);

        echo json_encode($myData);


        }


    
//pickup_summary
   public function pickup_summary_previous() {


    $form_data = json_decode(file_get_contents("php://input"));
    $order_id=$_GET['order_id'];
    $DC_id=$form_data->DC_id;
    $convertion=$form_data->convertion;
    $resultmain_picked = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE randam_id ='".$DC_id."' AND order_id='".$order_id."' AND delivery_date_status ='1' AND dispatch_status ='1'  GROUP BY randam_id  ORDER BY id DESC");
    $resultcs_picked = $resultmain_picked->result();
 


    $details=array();
        $i=1;
        foreach($resultcs_picked as $picked_summary) { 

            


            if($convertion == '2'){

                // for Gate orders
                $resultmain_picked1 = $this->db->query("SELECT * FROM sales_load_products  WHERE randam_id ='".$picked_summary->randam_id."' AND order_id='".$order_id."' ORDER BY id DESC");
                $result_qty = $resultmain_picked1->result();
    
                $partial_orignal_kg_weight=array();
                $partial_delivered_kg_weight=0;
    
                    $sub_amount=0;
                    foreach($result_qty as $values_check) {
    
                                    // get loaded data values
    
                                    $amounttotal_datas= $values_check->rate*$values_check->qty;
                                    $decimalPosition = strpos((string)$amounttotal_datas, '.');
                                    
                                    // Check if there's a decimal point and more than 2 digits after it
                                    if ($decimalPosition !== false && strlen(substr((string)$amounttotal_datas, $decimalPosition + 1)) > 2) {
                                        // Truncate to 2 decimal places without rounding
                                        $amounttotal_datas = floor($amounttotal_datas * 100) / 100;
                                    }
                                    
                                    // Format the number to two decimal places (this is optional if you just want to display it)
                                    $amounttotal_data = sprintf("%.2f", $amounttotal_datas);
                                    $sub_amount += $amounttotal_data;
    
                    }
    
                    $amounttotal=$sub_amount;
                    // gg canges 
                    $picked_amount_sub=$amounttotal;
                    $picked_amount_gst_picked= $picked_amount_sub * 0.18/2 ;
    
                    $roundoff = $amounttotal;
                    $roundoff = sprintf("%.2f", $roundoff);
    
                    if (strpos($picked_amount_gst_picked , '.') !== false && strlen(substr(strrchr($picked_amount_gst_picked , "."), 1)) > 2) {
                        // Only truncate if more than 2 digits after decimal
                        $picked_amount_gst_picked = floor($picked_amount_gst_picked * 100) / 100;
                    }
    
                    // $truncatedValue_gsts_picked = floor($picked_amount_gst_picked * 100) / 100;
                    $picked_amount_gst = sprintf("%.2f", $picked_amount_gst_picked);
    
                  
                          //GET TCS STATUS
    
                          $resultdis12 = $this->Main_model->where_names_two_order_by('orders_process', 'id', $order_id, 'deleteid', '0', 'id', 'DESC');
                          foreach ($resultdis12 as $valuedis12) {
                          
                              $tcs_status = $valuedis12->tcs_status;
                           }
    
                              if($tcs_status == 1){
                              $tcsamount_picked=round(($picked_amount_sub+$picked_amount_gst+$picked_amount_gst)*0.1/100);
                              $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$tcsamount_picked+$minisroundoff;
                              }else {
                                  $tcsamount_picked='0';
                                  $total_show_value=$picked_amount_sub+$picked_amount_gst+$picked_amount_gst+$minisroundoff;
                              }
               
                    $amounttotalgst_roundoff=$roundoff*0.18/2;
                    $truncatedValue_gsts = floor($amounttotalgst_roundoff * 100) / 100;
                    $amounttotalgst_roundoff_total = sprintf("%.2f", $truncatedValue_gsts);
            
                    $discountfulltotal_roundoff=$roundoff + $amounttotalgst_roundoff_total + $amounttotalgst_roundoff_total;
    
                    $whole = floor($discountfulltotal_roundoff); 
                    $decimal1 = $discountfulltotal_roundoff - $whole;
                    $totalval= round($decimal1,3);
    
                    // gg changes
    
                    $roundoffstatusval_data="";
                    $getdataminis=0;
    
                    if($totalval!=0)
                            {
    
                                    if($totalval>0.5)
                                    {
                                     
                                            $getplusevalue=1-$totalval;
                                            $discountfulltotal=$discountfulltotal+$getplusevalue;
                                            
                                            if($getplusevalue>0)
                                            {
                                                $roundoffstatusval_data=" (+) ".$getplusevalue;
                                                $autoRoundStat = 'plus';
                                                $autoRound = $getplusevalue;
                                            }
    
                                    }
                                    elseif($totalval == 0.5)
                                    {
    
    
                                            $getplusevalue=$totalval;
                                            $discountfulltotal=$discountfulltotal+$getplusevalue;
                                            
                                            if($getplusevalue>0)
                                            {
                                                $roundoffstatusval_data=" (+) ".$getplusevalue;
                                                $autoRoundStat = 'plus';
                                                $autoRound = $getplusevalue;
                                            }
    
                                    }
                                    else
                                    {
    
                                            $discountfulltotal=round($discountfulltotal-$totalval);
                                            if($totalval>0)
                                            {
                                                $roundoffstatusval_data=" (-) ".$totalval;
                                                $autoRoundStat = 'minus';
                                                $autoRound = $totalval;
                                            }
                                            
                                    }
    
                            }

                        $details[]=array(
                                'pickup_message'=>'Pickup '.$i,
                                'sub_total_pickup'=>$picked_amount_sub,
                                'total_gst_pickup'=>$picked_amount_gst,
                                'roundoff_pickup'=>$roundoffstatusval_data,
                                'tcsamount_pickup'=>$tcsamount_picked,
                                'full_total_pickup'=>$picked_summary->collection_remarks,
                                'tcsamount_pickup_status'=>$picked_summary->collect_tcs_status,
                                'reason'=>$picked_summary->reason,
                                'total_picked_amount_summary_gate'=>$picked_summary->total_picked_amount,
                                'total_picked_amount'=>round($total_show_value),
                                'current_packed_balence'=>$picked_summary->current_packed_balence,
                                'current_packed'=>$picked_summary->current_packed,
                        );


            }else {

                // one rupee issue
                $resultmain_picked12 = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='".$order_id."' ORDER BY id DESC");
                $resultcs_picked_pic = $resultmain_picked12->row();

                // check last randam_id for bill rounding
                $bill_roundoff_show_dc='';
                if($resultcs_picked_pic->randam_id == $DC_id){

                           
                            $is_final_partial=$_GET['sum_total_nos'];
                            $is_balence=$_GET['is_balence'];
                            if($is_final_partial == '0' && $is_balence == '1') {

                                  $picked_summary->total_picked_amount=$picked_summary->total_picked_amount+1;
                                  $bill_roundoff_show_dc='1';
   
                            }


                }


                // for normal all pages
                $details[]=array(
                    'pickup_message'=>'Pickup '.$i,
                    'sub_total_pickup'=>$picked_summary->collect_sub_amount,
                    'total_gst_pickup'=>$picked_summary->collect_gst,
                    'roundoff_pickup'=>$picked_summary->collect_roundoff,
                    'tcsamount_pickup'=>$picked_summary->collect_tcs,
                    'full_total_pickup'=>$picked_summary->collection_remarks,
                    'tcsamount_pickup_status'=>$picked_summary->collect_tcs_status,
                    'reason'=>$picked_summary->reason,
                    'total_picked_amount'=>$picked_summary->total_picked_amount,
                    'current_packed_balence'=>$picked_summary->current_packed_balence,
                    'current_packed'=>$picked_summary->current_packed,
                      // one rupee issue
                    'bill_roundoff'=>$bill_roundoff_show_dc
                );
            }

        $i++;  }
        $myData = array('data' => $details);

        echo json_encode($myData);


        }









// kg weight showing
public function get_kg_weight_data() {


    $form_data = json_decode(file_get_contents("php://input"));
    $order_id=$_GET['order_id'];
   
    $result = $this->db->query("SELECT a.categories_id,a.delivery_status,b.uom,a.id,a.billing_options,a.qty,a.activel_qty FROM order_product_list_process as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0  ORDER BY a.categories_id,a.sort_id ASC");
    $result1 = $result->result();

    


    $kg_weight = array();
    $delivered_kg_weight = 0;  // Initialize to zero for sum
    
    foreach ($result1 as $value) {
        if ($value->uom == 'Kg' || $value->billing_options == 2 || $value->categories_id == 5 ) {
            $kg_weight[] = $value->activel_qty;
        
    
       
            // Query to get the sum of 'qty' in 'sales_load_products' table
            $this->db->select_sum('qty');
            $this->db->where('order_product_id', $value->id);
           // $this->db->where('delivered_products', '1');
            $query = $this->db->get('sales_load_products');
            $result = $query->row();
    
            if ($result) {
                $delivered_kg_weight += $result->qty;  // Sum the qty values
            }
        }
    }
    

 
    // Calculate original weight and absolute difference
    $og_weight =number_format(array_sum($kg_weight), 3, '.', '');
    $delivered_kg_weight =number_format($delivered_kg_weight, 3, '.', '');
    $weight_difference = $og_weight - $delivered_kg_weight;
    $weight_difference=number_format($weight_difference, 3, '.', '');
    $difference_type = ($og_weight > $delivered_kg_weight) ? 'Negative' : 'Positive';
    
    // Store details in array
    $details = array(
        'og_weight' => $og_weight,
        'delivered_weight' => $delivered_kg_weight,
        'weight_difference' => $weight_difference,
        'difference_type' => $difference_type
    );

        $myData = array('data' => $details);

        echo json_encode($myData);



    }


    
    
    
    
      public function fetch_data_table_delivery_confirmed() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_val=$_GET['order_base'];
        $where = "";
        $where1 = "";
        
        
        
        
        
        
        
        
        
        
       
        
        
        $sqls = "";
        
        
        
       
        
       
        
        if($order_base==110)
        {
            $where .=" AND a.paricel_mode=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==111)
        {


            $where .=" AND a.full_delivery=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";





        }
        elseif($order_base==156)
        {
            
            $where .=" AND a.missing_customer=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==26)
        {
            $where .= " AND a.md_approved_status = '1'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==27)
        {
            $where .= " AND a.md_approved_status = '2'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==28)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '20'";
            
        }
        elseif($order_base==1)
        {
            //$where .= " AND a.md_approved_status = '0'";
             $where .= " AND a.order_base > 0   AND a.delivery_date_status=1 AND a.delivery_status=2";
            
        }
        else
        {
             //$where .= " AND a.order_base = '".$order_base."'  AND a.delivery_date_status=1 AND a.delivery_status=2";
        }
        
        
        
        if($search != "")
        {
                   
              
                   
                    $where .=" AND a.order_no LIKE '%" . $search . "%'";
                    
                    //$where .= " OR c.name='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                    $where1 .= " AND order_no LIKE '%" . $search . "'";
                   
                     

            
        }
        else
        {

                 if(isset($_GET['from_date'])) 
                {     
                    if($_GET['from_date']!='')
                    {
                        
                          $from_date = $_GET['from_date'];
                          $to_date = $_GET['to_date'];
                          $where .= " AND a.delivery_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                        
                    }
                    else
                    {

                          if($order_base==1)
                          {

                              $from_date = date('Y-m-d');
                              $to_date = date('Y-m-d');
                              $where .= " AND a.delivery_date BETWEEN  '".$from_date."' AND '".$to_date."'";


                          }
                         
                    }
                     
                }


               
                       
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {


            $order_by = $value->name;
           




            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;
        

            



            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
           
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Zaron Scope';
             }






              


           $le_amount=$value->bill_total;
           $discountfulltotal=$value->bill_total;


            $pending_amount='';
            
          
           


          $commission=$value->commission_check+$value->commission_check_fact;



  $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }

if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 

          if($value->deleteid==0)
          {


            
            $array[] = array('no' => $i,'delivery_confirm_person' => $value->delivery_confirm_person,'delivery_confirm_date_time' => $value->delivery_confirm_date_time, 'finance_status' => $value->finance_status,'id' => $value->id,'pending_amount' => $pending_amount,'le_amount' => $le_amount,'payment_mode' => $value->payment_mode,'payment_mode_re' => $value->payment_mode_reconciliation, 'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'deleteid' => $value->deleteid, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->delivery_date)),'create_date_new' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;


            }





        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
      
      public function order_date_confirmation_list_get_data() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_val=$_GET['order_base'];
        $where = "";
        $where1 = "";
        
        
        
        
        
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.delivery_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
            else
            {

                  if($order_base==1)
                  {

                      $from_date = date('Y-m-d');
                      $to_date = date('Y-m-d');
                      $where .= " AND a.delivery_date BETWEEN  '".$from_date."' AND '".$to_date."'";


                  }
                 
            }
             
        }
        
        
        
       
        
        
        $sqls = "";
        
        
        
       
        
       
        
        if($order_base==110)
        {
            $where .=" AND a.paricel_mode=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==111)
        {


            $where .=" AND a.full_delivery=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";





        }
        elseif($order_base==156)
        {
            
            $where .=" AND a.missing_customer=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==26)
        {
            $where .= " AND a.md_approved_status = '1'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==27)
        {
            $where .= " AND a.md_approved_status = '2'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==28)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '20'";
            
        }
        elseif($order_base==1)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base IN ('1','21','23','20') AND a.finance_status=2 AND a.assign_status=0 AND a.delivery_date_status=1 AND a.delivery_status=2";
            
        }
        else
        {
             $where .= " AND a.order_base = '".$order_base."' AND a.finance_status=2 AND a.assign_status=0 AND a.delivery_date_status=1 AND a.delivery_status=2";
        }
        
        
        
        if($search != "")
        {
                   
              
                   
                    $where .=" AND c.name LIKE '%" . $search . "%'";
                    
                    $where .= " OR a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                    $where1 .= " AND order_no LIKE '%" . $search . "'";
            
            
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.sales_team_id,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id,b.sales_team_id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,b.sales_team_id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id,b.sales_team_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.sales_team_id,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id,b.sales_team_id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.sales_team_id,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id,b.sales_team_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.sales_team_id,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id,b.sales_team_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.sales_team_id,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id,b.sales_team_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }


        $trip_id_array=array();
        foreach ($result as $value) {


            $order_by = $value->name;
           


            $trip_id_array[]=$value->sales_team_id;

            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;
        

            



            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
           
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Zaron Scope';
             }






              


           $le_amount=$value->bill_total;
           $discountfulltotal=$value->bill_total;


            $pending_amount='';
            
          
            


          $commission=$value->commission_check+$value->commission_check_fact;



            $commision_value = 0;       
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
              $delivery_date_time=date('d-m-Y', strtotime($value->delivery_date_time));

           
            

            if($value->deleteid==0)
            {




            $array[] = array('no' => $i,'sales_team_id' => $value->sales_team_id,'delivery_date' => $delivery_date_time,'delivery_confirm_person' => $value->delivery_confirm_person,'delivery_confirm_date_time' => $value->delivery_confirm_date_time, 'finance_status' => $value->finance_status,'id' => $value->id,'pending_amount' => $pending_amount,'le_amount' => $le_amount,'payment_mode' => $value->payment_mode,'payment_mode_re' => $value->payment_mode_reconciliation, 'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'deleteid' => $value->deleteid, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->delivery_date)),'create_date_new' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;


            }




        }



         $trip_id_array_data= array_unique($trip_id_array);
          $trip_array=array();



           foreach ($trip_id_array_data as  $tripid) 
         { 
        
            $arraysub=array();
            $payment_mode_arr=array();
            $status=0;
            foreach ($array as $value)
            {
              
                     

                     if($tripid==$value['sales_team_id'])
                     {


                        
                        $arraysub[] = array(

                        'no' => $i,
                        'sales_team_id' => $value['sales_team_id'],
                        'delivery_date' => $value['delivery_date'],
                        'delivery_confirm_person' => $value['delivery_confirm_person'],
                        'delivery_confirm_date_time' => $value['delivery_confirm_date_time'], 
                        'finance_status' => $value['finance_status'],
                        'id' => $value['id'],
                        'pending_amount' => $value['pending_amount'],
                        'le_amount' => $value['le_amount'],
                        'payment_mode' => $value['payment_mode'],
                        'payment_mode_re' => $value['payment_mode_reconciliation'],
                         'delivery_status' => $value['delivery_status'],
                          'base_id' => $value['id'],
                           'order_no' => $value['order_no'],
                           'deleteid' => $value['deleteid'], 
                           'reason' => $value['reason'],
                            'name' => $value['name'],
                             'email' => $value['email'], 
                             'phone' => $value['phone'], 
                             'totalamount' => $value['totalamount'], 
                             'commission' => $value['commision_value'],
                              'delivery_charge' => $value['delivery_charge'],
                               'address' => $value['address'],
                                'order_by' => $value['order_by'],
                                 'order_base' => $value['order_base'],
                                  'create_date' => $value['create_date'],
                                  'create_date_new' => $value['create_date_new'], 
                                  'create_time' => $value['create_time']

                        );


                     }

                       
              }

                $poin_to_member = $this->Main_model->where_names('admin_users','id',$tripid);
                foreach ($poin_to_member as $point) {
                    $sales_team_name = $point->name;
                }
                

                 $trip_array[]=array("sales_team_name"=>$sales_team_name,"subarray"=>$arraysub);
          

          }




        $myData = array('PortalActivity' => $trip_array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
    
      public function fetch_data_table_discount_approvel() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_val=$_GET['order_base'];
        $where = "";
        $where1 = "";
        
        
        
        
        
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
            else
            {

                  
                 
            }
             
        }
        
        
        
       
        
        
        $sqls = "";
        
        
        
       
        
       
        
        if($order_base==110)
        {
            $where .=" AND a.paricel_mode=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==111)
        {


            $where .=" AND a.full_delivery=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";





        }
        elseif($order_base==156)
        {
            
            $where .=" AND a.missing_customer=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==26)
        {
            $where .= " AND a.md_approved_status = '1'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==27)
        {
            $where .= " AND a.md_approved_status = '2'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==28)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base= '120'";
            
        }
        elseif($order_base==1)
        {
            //$where .= " AND a.md_approved_status = '0'";
             $where .= " AND a.order_base= '120'";
            
        }
        else
        {
              $where .= " AND a.order_base= '120'";
        }
        
        
        
        if($search != "")
        {
                   
              
                    $where .=" AND c.name LIKE '%" . $search . "%'";
                   
                    
                    $where .= " OR a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                    $where1 .= " AND order_no LIKE '%" . $search . "'";
            
            
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {


            $order_by = $value->name;
           



            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;
            


            

            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
           
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Zaron Scope';
             }






              


         
             
              $discountfulltotal=$value->bill_total;
              $le_amount=$le_amount;
           


            $pending_amount='';
          
           
          $commission=$value->commission_check+$value->commission_check_fact;




           $total= $discountfulltotal-$value->driver_recived_payment;

           if($total==0)
           {

               $ss='Trip Completed Trip ID'.$value->trip_id;
               $this->db->query("UPDATE orders_process SET order_base='1',reason='".$ss."'  WHERE id='".$value->id."' AND finance_status=4");

               $ss1='Payment Received  Trip ID'.$value->trip_id;
               $this->db->query("UPDATE orders_process SET order_base='1',reason='".$ss1."'  WHERE id='".$value->id."' AND finance_status=5");


           }
               

               if($value->payment_mode!='Cash')
               {

                 //$ss='Trip Completed Trip ID'.$value->trip_id;
                  //$this->db->query("UPDATE orders_process SET order_base='1',reason='".$ss."'  WHERE id='".$value->id."' AND finance_status=4");

               }

          


           $this->db->query("UPDATE orders_process SET difference='".$total."' WHERE id='".$value->id."'");




           if($value->deleteid==0)
           {


            
            $array[] = array('no' => $i, 'finance_status' => $value->finance_status,'difference' => $value->difference,'collectamount' => $value->driver_recived_payment,'id' => $value->id,'pending_amount' => $pending_amount,'le_amount' => $le_amount,'payment_mode' => $value->payment_mode,'payment_mode_re' => $value->payment_mode_reconciliation, 'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'deleteid' => $value->deleteid, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;


            }





        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function delivery_date_update() {


                 date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));


                 $person="";
                $poin_to_member = $this->Main_model->where_names('admin_users','id',$this->userid);
                foreach ($poin_to_member as $point) {
                    $person = $point->name;
                }
              
                $order_id=$form_data->order_id;
                $delivery_date=$form_data->delivery_date;
                $order_id=explode('|',$order_id);
                for($i=0;$i<count($order_id);$i++)
                {
                  


                            $resultp= $this->Main_model->where_names('orders_process','id',$order_id[$i]);
                            foreach ($resultp as  $valuep)
                            {


                             $delivery_date_time=$valuep->delivery_date_time;

                             $time=date('g:i A',strtotime($delivery_date_time));
                             $delivery_date_time=date('d-m-Y',strtotime($delivery_date)).' '.$time;


                             $delivery_confirm_person=$person;
                             $delivery_confirm_date_time=date('d-m-Y').' '.date('h:i A');

                        $this->db->query("UPDATE orders_process SET delivery_confirm_date_time='".$delivery_confirm_date_time."',delivery_confirm_person='".$delivery_confirm_person."',delivery_date_time='".$delivery_date_time."',reason='Rescheduled Delivery Date',delivery_date='".$delivery_date."' WHERE id='".$order_id[$i]."'");


                              $this->db->query("UPDATE order_delivery_order_status SET delivery_confirm_date_time='".$delivery_confirm_date_time."',delivery_confirm_person='".$delivery_confirm_person."',delivery_date_time='".$delivery_date_time."',reason='Rescheduled Delivery Date',delivery_date='".$delivery_date."' WHERE order_id='".$order_id[$i]."' AND finance_status IN ('2','11') AND deleteid=0");
                                       
                                      
                            }



                }

     }
    
    
    
    

    
     public function delivery_date_coniform() {


        date_default_timezone_set("Asia/Kolkata");
       $date = date('Y-m-d');
       $time = date('h:i A');
       $form_data = json_decode(file_get_contents("php://input"));
     
       $order_id=$form_data->order_id;

       
       // gg changes for scope task

       $query_scope = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $order_id. "' AND dispatch_status=0 AND dispatch_load_status=0 AND deleteid=0 AND randam_id IS NULL ORDER BY id DESC LIMIT 1");
       $scope_changes = $query_scope->row(); 
       
           if($scope_changes->delivery_status == ''){


                   echo 'scope not defined';
                   exit;


           }else {

       $person="";
       $poin_to_member = $this->Main_model->where_names('admin_users','id',$this->userid);
       foreach ($poin_to_member as $point) {
           $person = $point->name;
       }
    
       $order_id=explode('|',$order_id);
       for($i=0;$i<count($order_id);$i++)
       {
         


                   $resultp= $this->Main_model->where_names('orders_process','id',$order_id[$i]);
                   foreach ($resultp as  $valuep)
                    {








                         $delivery_confirm_person=$person;
                         $delivery_confirm_date_time=date('d-m-Y').' '.date('h:i A');






           $lengeth=0;
           
           $lengeth_array=array(0);
           $query_profle_get = $this->db->query("SELECT MAX(profile) as profile FROM order_product_list_process  WHERE order_id='".$order_id[$i]."' AND deleteid=0");
           $result_lengeth = $query_profle_get->result();
           foreach ($result_lengeth as $valuess) {
               $lengeth_array[] = $valuess->profile;
           }
           
           $lengeth=max($lengeth_array);
           $lengeth=round($lengeth,2);




           $weighttotal=0;
           $query_weight_get = $this->db->query("SELECT SUM(weight) as totalweight FROM order_product_list_process  WHERE order_id='".$order_id[$i]."' AND deleteid=0");
           $result_totalweight = $query_weight_get->result();
           foreach ($result_totalweight as $we) {
               $weight = $we->totalweight;

               $weighttotal += $we->totalweight;
           }
   
   
         

                
                  


$this->db->query("UPDATE order_delivery_order_status SET delivery_confirm_date_time='".$delivery_confirm_date_time."',delivery_confirm_person='".$delivery_confirm_person."',delivery_date_status='1',km_reading_end=0,start_reading=0  WHERE order_id='".$order_id[$i]."' AND dispatch_status=0 AND return_base=0 AND deleteid=0");


$this->db->query("UPDATE orders_process SET reason='Order Date Confirmed and picked',delivery_confirm_date_time='".$delivery_confirm_date_time."',delivery_confirm_person='".$delivery_confirm_person."',delivery_date_status='1',full_delivery=0,km_reading_end=0,start_reading=0  WHERE id='".$order_id[$i]."'");


       
$this->db->query("UPDATE order_delivery_order_status SET reason='Order Date Confirmed and picked',lengeth_max='".$lengeth."',weighttotal='".$weighttotal."'  WHERE order_id='".$order_id[$i]."' AND dispatch_status=0 AND return_base=0 AND deleteid=0");
$this->db->query("UPDATE orders_process SET lengeth_max='".$lengeth."',weighttotal='".$weighttotal."'  WHERE id='".$order_id[$i]."'");








                                   $datassh['userid'] = $this->userid;
                                   $datassh['order_id'] = $order_id[$i];
                                   $datassh['tablename'] = 'orders_process';
                                   $datassh['order_no'] = $order_id[$i];
                                   $datassh['inputname'] ='Order Date Confirmed BY '.$delivery_confirm_person;
                                   $datassh['notes'] ='Order Date Confirmed'.$delivery_confirm_date_time;
                                   $this->Main_model->insert_commen($datassh, 'bill_changes_log');
























$results = $this->Main_model->where_names(
           "orders_process",
           "id",
           $order_id[$i]
       );
       foreach ($results as $orders)
       {
           $delivery_date_time = date(
               "d-m-Y",
               strtotime($orders->delivery_date)
           );
           
           $order_no = $orders->order_no;
           $id = $orders->id;
           $customer_id = $orders->customer_id;
           $bill_total = $orders->bill_total;
           $delivery_status = $orders->delivery_status;
           $assign_status = $orders->assign_status;


           $reason = $orders->reason;
           if($reason=='Rescheduled Delivery Date')
           {

           $this->db->query("UPDATE orders_process SET reason='Order confirmed'  WHERE id='".$id."'"); 
           
           }



           $finance_status = $orders->finance_status;
           if($finance_status==11)
           {

           $this->db->query("UPDATE orders_process SET reason='Driver Return Order Date confirmed'  WHERE id='".$id."'");    

           }


           $customers_data = $this->Main_model->where_names(
               "customers",
               "id",
               $customer_id
           );
           $userid_sales=0;
           foreach ($customers_data as $csvalv) {
               $phone = $csvalv->phone;
                $userid_sales = $csvalv->sales_team_id;
           }



                              $msg =
           'Greetings from Zaron Industries

Your order number  ' .
           $order_no .
           " has been confirmed and will be delivered on " .
           $delivery_date_time;

      // $this->whats_app_send($phone, $msg, "orders_process", $id,$userid_sales);




       }



                             
                   }



       }

   }

}





    
    
        
     public function discount_request_for_md() 
     {


                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
              
                $order_id=$form_data->order_id;
                $order_id=explode('|',$order_id);
                for($i=0;$i<count($order_id);$i++)
                {
                  


                     $this->db->query("UPDATE orders_process SET order_base='121',reason='Payment Difference Verification request MD' WHERE id='".$order_id[$i]."'");
             


                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $order_id[$i];
                                            $datassh['tablename'] = 'orders_process';
                                            $datassh['order_no'] = $order_id[$i];
                                            $datassh['inputname'] ='discount_request_for_md';
                                            $datassh['notes'] =' discount_request_for_md';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');


                }

     }
    
    
    
    
    
       public function discount_rejected_for_sale() {


                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
              
                $order_id=$form_data->order_id;
                $order_id=explode('|',$order_id);
                for($i=0;$i<count($order_id);$i++)
                {
                         


                          $resultp= $this->Main_model->where_names('orders_process','id',$order_id[$i]);
                          foreach ($resultp as  $value)
                          {

                             $trip_id=$value->trip_id;
                             $reason=$value->reason;

                          }

                          $reason=$reason.' - Discount Rejected';
                          $this->db->query("UPDATE orders_process SET order_base='1',reason='".$reason."' WHERE id='".$order_id[$i]."'");



                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $order_id[$i];
                                            $datassh['tablename'] = 'orders_process';
                                            $datassh['order_no'] = $order_id[$i];
                                            $datassh['inputname'] ='discount_rejected_for_sale';
                                            $datassh['notes'] =' discount_rejected_for_sale';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');
             



                }

     }
    
    
    
    
       
     public function discount_approved_for_md() 
     {


                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
              
                $order_id=$form_data->order_id;
                $order_id=explode('|',$order_id);
                for($i=0;$i<count($order_id);$i++)
                {
                          



                        




                          $resultp= $this->Main_model->where_names('orders_process','id',$order_id[$i]);
                          foreach ($resultp as  $value)
                          {

                             $id=$value->id;
                             $order_no=$value->order_no;
                             $finance_status=$value->finance_status;
                             $customer_id=$value->customer_id;
                             $difference_val=$value->difference;
                             $trip_id=$value->trip_id;


                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $id;
                                            $datassh['tablename'] = 'orders_process';
                                            $datassh['order_no'] = $order_no;
                                            $datassh['inputname'] ='discount_approved_for_md';
                                            $datassh['notes'] =' discount_approved_for_md';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');

                             

                              $arrayset=array(5,4);
                             if(in_array($finance_status, $arrayset))
                             {

                                        $discount_data['order_id'] = 0;
                                        $discount_data['customer_id'] = $customer_id;
                                        $discount_data['user_id'] = $this->userid;
                                        $discount_data['notes'] = 'Collection Verified By MD';
                                        $discount_data['payment_mode'] = '0';
                                        $discount_data['difference'] = 0;
                                        $discount_data['reference_no'] = $order_no;
                                        $discount_data['amount'] = round($difference_val);
                                        $discount_data['account_head_id'] = 68;
                                        $discount_data['account_heads_id_2'] = 116;
                                        $discount_data['order_trancation_status'] = 0;
                                        $discount_data['order_no'] = $order_no;
                                        $discount_data['bank_id'] = 25;
                                        $discount_data['paid_status'] = 1;
                                        $discount_data['debits'] = 0;
                                        $discount_data['credits'] = round($difference_val,2);
                                        $discount_data['collected_amount'] = $difference_val;
                                        $discount_data['payment_date'] = $date;
                                        $discount_data['process_by'] = 'Collection Verified By MD';
                                        $discount_data['payment_time'] = $time;
                                        $discount_data['party_type'] = 1;
                                        $discount_data['deletemod'] = 'CV1'.$order_no;
                                        if($difference_val>0)
                                        {


                                             $setcheks_1 = $this->Main_model->where_names('all_ledgers','deletemod',$discount_data['deletemod']);
                                             if(count($setcheks_1)==0)
                                             {


                            $insertdataval=$this->Main_model->insert_commen($discount_data, 'all_ledgers');

                                        $discount_data_base2['order_id'] = 0;
                                        $discount_data_base2['customer_id'] = 332;
                                        $discount_data_base2['user_id'] = $this->userid;
                                        $discount_data_base2['notes'] = 'Collection Verified By MD';
                                        $discount_data_base2['payment_mode'] = '0';
                                        $discount_data_base2['difference'] = 0;
                                        $discount_data_base2['reference_no'] = $order_no;
                                        $discount_data_base2['amount'] = round($difference_val);
                                        $discount_data_base2['account_head_id'] = 417;
                                        $discount_data_base2['account_heads_id_2'] = 417;
                                        $discount_data_base2['order_trancation_status'] = 0;
                                        $discount_data_base2['order_no'] = $order_no;
                                        $discount_data_base2['bank_id'] = 0;
                                        $discount_data_base2['paid_status'] = 1;
                                        $discount_data_base2['debits'] = round($difference_val,2);
                                        $discount_data_base2['credits'] = 0;
                                        $discount_data_base2['collected_amount'] = $difference_val;
                                        $discount_data_base2['payment_date'] = $date;
                                        $discount_data_base2['process_by'] = 'Collection Verified By MD';
                                        $discount_data_base2['payment_time'] = $time;
                                        $discount_data_base2['party_type'] = 5;
                                        $discount_data_base2['deletemod'] = 'CV1'.$order_no;
                                        $insertdataval=$this->Main_model->insert_commen($discount_data_base2, 'all_ledgers');



                                           }

                                         }


                                            

                                        

                                        $reason='Collection Verified By MD';

                             }
                             else
                             {
                                        $reason='Collection Verified By MD';
                             }



                          }




                            
$this->db->query("UPDATE orders_process SET order_base='1',reason='".$reason."',md_approved_status=1,approved_by_user='".$this->userid."',approved_md_date='".$date."',approved_md_time='".$time."' WHERE id='".$order_id[$i]."'");
           
             



                }

     }
    
    
    
    
    
       public function discount_rejected_for_md() 
       {


                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
              
                $order_id=$form_data->order_id;
                $order_id=explode('|',$order_id);
                for($i=0;$i<count($order_id);$i++)
                {
                  

                          $resultp= $this->Main_model->where_names('orders_process','id',$order_id[$i]);
                          foreach ($resultp as  $value)
                          {

                                  $trip_id=$value->trip_id;
                                  $order_no=$value->order_no;
                                  $finance_status=$value->finance_status;

                                  if($finance_status==4)
                                  {
                                      $reason='Rejected Discount Trip Completed Trip ID '.$trip_id;
                                  }
                                  else
                                  {
                                      $reason='Rejected Discount Payment Received  Trip ID '.$trip_id;
                                  }


                          }

                         
                          $this->db->query("UPDATE orders_process SET order_base='1',reason='".$reason."',md_approved_status=2,approved_by_user='".$this->userid."',approved_md_date='".$date."',approved_md_time='".$time."' WHERE id='".$order_id[$i]."'");



                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) 
                                             {
                                                
                                                                $username=$team->name;
                                                                
                                             }
                  
                                             $day_log['username'] = $username;
                                             $day_log['changes'] = '';
                                             $day_log['table_name'] = 'orders_process';
                                             $day_log['reference_no'] = $order_no;
                                             $day_log['create_date'] =$date;
                                             $day_log['create_time'] =$time;
                                             $day_log['details'] ="Rejected Discount";
                                             $this->Main_model->insert_commen($day_log, 'day_log');

             




                }

     }
    
    
    public function fetch_data_table_all() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $where1 = "";
        
        $valueorder=explode("|",$order_base);
        
        
        
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }
        
        
        
        
        
        
        $sqls = "";
        
        
        
       
        
       if($order_base!='')
       {
           
      
          if (in_array("0", $valueorder))
          {
           
          }
          else
          {  
              
              if (in_array("28", $valueorder))
              {
               
                  $valueorder=implode("','",$valueorder);
                  $where .= " AND a.order_base IN ('".$valueorder."','20','21','22','23','24','25')";
               
              }
              else
              {
                  
                    $valueorder=implode("','",$valueorder);
                    $where .= " AND a.order_base IN ('".$valueorder."')";
                  
              }
              
              
              
          }
       
       }
        
        if($search != "")
        {
                   
              
                    $where .=" AND c.name LIKE '%" . $search . "%'";
                    
                    $where .=" OR a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                    $where1 .=" AND order_no LIKE '%" . $search . "'";
            
            
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
           
            
            







  $order_by = $value->name;
            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            
           
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Zaron Scope';
             }

             $discountfulltotal=$value->bill_total;

          $commission=$value->commission_check+$value->commission_check_fact;

     
            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;
        
             $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 

            if($value->deleteid==0)
            {
 


            $array[] = array('no' => $i, 'finance_status' => $value->finance_status,'id' => $value->id,'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;


            }




        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_tl_price_request() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND order_no LIKE '%" . $search . "'";
        }
        $i = 1;
        $array = array();
        if($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            
            $price_requerst_status = 3;
           
            
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $userslog1 $where ORDER BY id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $userslog1 $where ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
              $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $price_requerst_status = 3;
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  user_id IN (' . $sales_team_id . ')';
          
           
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $price_requerst_status = 3;
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  sales_group IN (' . $sales_team_id . ')';
           
            
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '4' || $this->session->userdata['logged_in']['access'] == '10') {
            $price_requerst_status = 3;
           
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'  AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where ORDER BY id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'  AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        } else {
            $price_requerst_status = 3;
            
            
            
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0' AND price_requerst_status='" . $price_requerst_status . "' AND order_base='" . $order_base . "' $where ORDER BY id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND price_requerst_status='" . $price_requerst_status . "' AND order_base='" . $order_base . "' $where ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {

                 if($tot->deleteid==0)
                   {

                    $rate=$tot->rate+$tot->commission;
                    $totalamount+= $rate*$tot->qty;
                    $commission+= $tot->commission;

                   }
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => $value->bill_total, 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_md_approved_request() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $discount_status = $_GET['discount_status'];

        $excess_status = $_GET['excess_status'];

        $where = "";
        $where_sls = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%'";
        }
        $i = 1;
        $array = array();
        $price_requerst_status = 3;
        
        $sql= " AND a.order_base='" . $order_base . "'";
        if($order_base==26)
        {
            $sql = " AND a.md_approved_status = '1'";
           
        }
        
        if($order_base==27)
        {
            $sql = " AND a.md_approved_status = '2'";
        }

        if($order_base==1777)
        {
           

                $edit_by=1777;
                $sql= " AND a.edit_user_id = '".$edit_by."' AND a.md_approved_status=0";

        }


        $where1 = "AND a.deleteid=0";
        if($discount_status!='undefined')
        {

             if($order_base==148)
             {


                  $sql = "";
                  $where1 = "AND a.md_verification IN ('148','152') AND a.party_type=1";


             }
             else
             {
                  $sql = "";
                  $where1 = "AND a.md_verification IN ('147') AND a.party_type=1 AND a.deleteid IN ('147','0')";
             }

          
        }

            


         if($excess_status !== 'undefined'){
            $sql = "";
            $where1 = "AND a.md_verification IN ('150','151','153') AND a.party_type=1";
        }
        


        if($this->session->userdata['logged_in']['access']==12)
        {

  
              $sql = " AND a.user_id='".$this->userid."'";


        }


        $where_sls = "";
        if($this->session->userdata['logged_in']['access'] == '11')
        {
                    $sales_team_id = array($this->userid);
                    $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                    foreach ($resultsales_team as $values) {
                        $sales_team_id[] = $values->sales_member_id;
                    }
                    
                    $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                    foreach ($poin_to_member as $point) {
                        $sales_team_id[] = $point->id;
                    }
                    

                    $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                    $where_sls = ' AND  a.user_id IN (' . $sales_team_id . ')';

         }

        
     
        $queryss = $this->db->query("SELECT count(a.id) as totalcount  FROM $tablename as a JOIN customers as b ON a.customer_id=b.id  WHERE a.id>0   $sql  $where $where1 $where_sls ORDER BY a.id DESC");
        $resultcount = $queryss->result();
        foreach ($resultcount as $cc) {
                $count = $cc->totalcount;
        }
        $query = $this->db->query("SELECT a.* FROM $tablename as a JOIN customers as b ON a.customer_id=b.id WHERE a.id>0 $sql $where $where1 $where_sls ORDER BY a.id DESC LIMIT $offset, $pagesize");
        $result = $query->result();
            
            
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) 
        {
            
          
         


    



          












            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }



            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $route_name= "";
            $net_balance=0;
             $sales_team_id_customer=0;

            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval)
            {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $sales_team_id_customer = $csval->sales_team_id;
                $phone = $csval->phone;
                $locality = $csval->locality;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
              
                $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$value->customer_id,'party_type',1,'deleteid','0','id','ASC');
                foreach($res as $val)
                {
                                                                                      $debitsamount+=$val->debits;
                                                                                      $creditsamount+=$val->credits;
                                                                                     
                }
                                                                      
                                                                     $balancetotal=round($creditsamount-$debitsamount,2);

                                                                      if($balancetotal>0)
                                                                      {

                                                                        $getstatus1=1;
                                                                      }
                                                                      else
                                                                      {
                                                                            $getstatus1=0;
                                                                      }


                                                                     $net_balance= abs($balancetotal);
                                                                       $net_balance= $value->net_balance;


            }



                   $sales_team_name = "";
            $sales_team = $this->Main_model->where_names_two_order_by('admin_users', 'id', $sales_team_id_customer, 'deleteid', '0', 'id', 'DESC');
            foreach ($sales_team as $sales) {
                $sales_team_name = $sales->name;
            }



            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }











         $create_time= $value->create_time;

        


         // if($net_balance>0)
         // {
         //      $credit =   $value->credits;
         //      $debit  =   $value->debits;
         // }
         // else
         // {
         //      $credit =   $value->debits;
         //      $debit  =   $value->debits;
         // }


         if($value->credits>0)
         {
            $credit =   $value->credits;
         } 

          if($value->debits>0)
         {
             $credit =   $value->debits;
         } 
       


       
         $approved_by  =   $value->approved_by;
           
           
          $d1 = strtotime($create_time);
          $currenttime=date('h:i A');
          $d2 = strtotime($currenttime);
          $totalSecondsDiff = abs($d1-$d2);
          $totalHoursDiff   = $totalSecondsDiff/60/60;
          $totalmimis=$totalHoursDiff*60;



            $created_by="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $created_by = $val->name;
                
            }


           $edited_by="";
            $sales_team_ids = $this->Main_model->where_names('admin_users', 'id', $value->edit_user_id);
            foreach ($sales_team_ids as $val) {
                $edited_by = $val->name;
                
            }



             $approved_by_user="";
            $sales_team_idss = $this->Main_model->where_names('admin_users', 'id', $value->approved_by_user);
            foreach ($sales_team_idss as $val) {
                $approved_by_user = $val->name;
                
            }




           $discountfulltotal=$value->bill_total;


            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }

if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
            $edit_date=date('d-m-Y',strtotime($value->edit_date));
                  
              $approved_md_date="";

              if($value->approved_md_date!='')
              {
                $approved_md_date=date('d-m-Y',strtotime($value->approved_md_date));
              }
              

              if($value->driver_recived_payment>0)
              {
                $value->collectamount=$value->driver_recived_payment;
              }

               
        
              $route_name="";
              $result_account_head=$this->db->query("SELECT r.name FROM locality as a JOIN route as r ON a.route_id=r.id WHERE  a.id='".$locality."'");
              $result_account_head_text=$result_account_head->result();
              foreach($result_account_head_text as $ass)
              {
                $route_name=$ass->name;
                                                                                       
              }

                $current_net_bl = abs($net_balance) - $credit;


                 $trip_id='';
                $vehicle_name = "";
                $driver_name="";
                 if($tablename=='orders_process')
                 {



                                          $trip_id=$value->trip_id;
                                          
                                           
                                            if($value->vehicle_id>0)
                                            {


                                                    $vehicle = $this->Main_model->where_names(
                                                        "vehicle",
                                                        "id",
                                                        $value->vehicle_id
                                                    );
                                                    foreach ($vehicle as $vehicle_v) {
                                                        $vehicle_name = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                                                        $vehicle_id = $vehicle_v->id;
                                                    }

                                                    $driver = $this->Main_model->where_names(
                                                        "driver",
                                                        "vehicle_id",
                                                        $vehicle_id
                                                    );
                                                    foreach ($driver as $valuess) 
                                                    {
                                                        $driver_id = $valuess->id;
                                                        $driver_name = $valuess->name.' | '.$valuess->phone;

                                                    }

                                            }


                }

            $array[] = array('no' => $i,
            'sales_team_name'=>$sales_team_name,    
            'approved_md_date' => $value->approved_md_date,
            'approved_md_time' => $value->approved_md_time,
            'reference_no' => $value->reference_no,
            'md_verification' => $value->md_verification,
            'edited_by' => $edited_by,
            'driver_name' => $driver_name, 
            'vehicle_name' => $vehicle_name, 
            'trip_id' => $trip_id, 
            'approved_by_user' => $approved_by_user, 
            'id' => $value->id,
            'edit_date' => $value->edit_date,
            'edit_time' => $value->edit_time,
            'edit_time' => $value->edit_time,
            'totalmimis'=>round($totalmimis),
            'totalmimishrs'=>round($totalmimis/60,2),
            'md_approved_status' => $value->md_approved_status,
            'return_id' => $value->return_id,
            'return_status' => $value->return_status, 
            'base_id' => base64_encode($value->id), 
            'order_no' => $value->order_no, 
            'customer_id' =>$value->customer_id,
            'reason' => $value->reason, 
            'name' => $company_name, 
            'email' => $email, 
            'phone' => $phone, 
            'closing' => $closing,
            'closing_bal'=>$value->amount,
            'credit'  =>$credit,
            'debit' =>$debit,
            'net_balance' =>$net_balance,
            'totalamount' => round($discountfulltotal), 
              'current_net_bl' => $current_net_bl,
             'totalsum' => $value->totalsum,
            'commission' => round($commision_value,2), 
            'delivery_charge' => $value->delivery_charge, 
            'notes' =>$value->notes,
            'created_by' => $created_by, 
            'update_by' => $updated_by,
            'route_name'=> $route_name,
            'address' => $address, 
            'order_by' => $order_by, 
            'difference' => $value->difference,
            'collectamount' => $value->collectamount,
            'discount_status' =>$value->discount_status,
            'payment_date' => date('d-m-Y', strtotime($value->payment_date)), 
            'changed_date' => $changed_date,
            'order_base' => $value->order_base, 
            'approved_by'=>$approved_by,
            'create_date' => date('d-m-Y', strtotime($value->create_date)), 
            'create_time' => $value->create_time);
            $i++;




        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    public function fetch_data_table_po() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $where = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND a.order_no='" . $search . "'";
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        $resultsameqty = $this->db->query("SELECT a.id FROM $tablename as a JOIN $tablename_sub as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 $where GROUP BY b.order_id ORDER BY a.id DESC");
        $result = $resultsameqty->result();
        $count = count($result);
        
        $resultsameqty = $this->db->query("SELECT a.* FROM $tablename as a JOIN $tablename_sub as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 $where GROUP BY b.order_id ORDER BY a.id DESC LIMIT $offset, $pagesize");
        $result = $resultsameqty->result();
        foreach ($result as $value) {
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {

                 if($tot->deleteid==0)
                   {

                $rate=$tot->rate+$tot->commission;
                    $totalamount+= $rate*$tot->qty;
                    $commission+= $tot->commission;

                  }
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => 'Vendor PO Order', 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission,2), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }




    public function fetch_data_table_finance() {



        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        

        
         $viewstatus=0;
         if(isset($_GET['viewstatus'])) 
         {  
                 
                $viewstatus= $_GET['viewstatus'];
               
         }
          $whereview="";
         if($viewstatus==0)
         {
             $whereview .= " AND b.uom='Kg'";
         }
         else
         {
             $whereview .= " AND b.uom!='Kg'";
         }
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }



         if($order_base==5)
        {
            $where .=" AND os.finance_status>=5";
        }
        else
        {
            $where .=" AND os.finance_status='" . $order_base . "'";
        }

        
        
        if ($search != "") 
        {
                     if($this->session->userdata['logged_in']['access']!=12)
                     {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                     }
                   
                     $where .= " AND a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%' $sales_search";
            
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];






        $i = 1;
        $array = array();
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
            
              $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')   $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
    $query = $this->db->query("SELECT a.*,os.delivery_status as delivery_status_val,os.driver_recived_payment as driver_recived_payment_val,os.randam_id,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON os.driver_id=d.id LEFT JOIN vehicle as v ON os.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')   $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
           
           
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a  JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')   $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,os.delivery_status as delivery_status_val,os.driver_recived_payment as driver_recived_payment_val,os.randam_id,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON os.driver_id=d.id LEFT JOIN vehicle as v ON os.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')  $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
           
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a  JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,os.delivery_status as delivery_status_val,os.driver_recived_payment as driver_recived_payment_val,os.randam_id,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a  JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON os.driver_id=d.id LEFT JOIN vehicle as v ON os.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')   $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } else {
            if ($order_base == 111) {
                
                
              
                
         $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')  $where ORDER BY a.id DESC");
                 $resultcount = $querycount->result();
                 $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,os.delivery_status as delivery_status_val,os.driver_recived_payment as driver_recived_payment_val,os.randam_id,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON os.driver_id=d.id LEFT JOIN vehicle as v ON os.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')  $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } else {
                
                
             
                
                
        $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')  $where ORDER BY a.id DESC");
                 $resultcount = $querycount->result();
                 $count=count($resultcount);
                
                
                 $query = $this->db->query("SELECT a.*,os.delivery_status as delivery_status_val,os.driver_recived_payment as driver_recived_payment_val,os.randam_id,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a JOIN order_delivery_order_status as os ON a.id=os.order_id LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON os.driver_id=d.id LEFT JOIN vehicle as v ON os.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20')  $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                 $result = $query->result();
                 
            }
        }







        foreach ($result as $value) 
        {




            $discountfulltotal = $value->bill_total;

            $order_by = $value->name;
        $order_byd = $value->dname;
                
                $vehicle_number = $value->vehicle_name.' | '.$value->vehicle_number;
           
            
            
                $company_name = $value->company_name;
                $email = $value->email;
                $phone = $value->phone;


            if ($value->delivery_status_val == '1') {
                $value->delivery_status = 'Client Scope';
                
             }
             
             if ($value->delivery_status_val == '2')
             {

                $value->delivery_status = 'Zaron Scope';
                
                

             }



            $array[] = array('no' => $i, 'randam_id'=>$value->randam_id,'payment_id_base' => $payment_id_base,'id' => $value->id,'driver_recived_payment' => $value->driver_recived_payment_val,'delivery_status' => $value->delivery_status,'vehicle_number' => $vehicle_number, 'base_id' => base64_encode($value->id), 'selforder' => $value->selforder,'customer_id' => $value->customer_id,'finance_status' => $value->finance_status,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => $value->bill_total, 'delivery_charge' => $value->delivery_charge, 'phone' => $phone, 'reason' => $value->reason, 'order_by' => $order_by, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;












        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    




















































































































































    public function fetch_data_table_finance_trip_grouped() { 

        
          $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        

         $viewstatus=0;
         if(isset($_GET['viewstatus'])) 
         {  
                 
                $viewstatus= $_GET['viewstatus'];
               
         }


           $sort=" a.trip_end_date DESC";
         if(isset($_GET['sortFilter'])) 
         {  
                 
                $sortFilterdate_val= $_GET['sortFilter'];

                if($sortFilterdate_val==1)
                {


                      $sort=" ds.trip_end_date DESC";

                } 
                else
                {


                      $sort=" ds.trip_end_date ASC";

                }
               
         }


          $whereview="";
         if($viewstatus==0)
         {
             $whereview .= " AND b.uom='Kg'";
         }
         else
         {
             $whereview .= " AND b.uom!='Kg'";
         }
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }


        if($search != "")
        {
                   
                   
                     $where .= " AND ds.trip_id='".$search."' OR a.order_no='".$search."'";
            
        }

          $where .=" AND ds.finance_status IN ('" . $order_base . "') AND a.delivery_status IN ('2','1') AND ds.reconcilation_status=0";
          $tablename = $_GET['tablename'];
          $order_base = $_GET['order_base'];
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';


        $i = 1;
        $array = array();
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
              $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11') AND a.reason!='Driver Full Return'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,ds.return_amount,ds.delivery_mode as delivery_mode_last,ds.payment_mode as payment_mode_last,ds.randam_id,ds.km_reading_end as km_reading_end_last,ds.trip_end_date as trip_end_date_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.trip_end_time as trip_end_time_last,ds.reason as reason_last,ds.collection_remarks,ds.collection_remarks_2 as collection_remarks_last,ds.finance_status as finance_status_last,ds.trip_id as trip_id_last,ds.driver_recived_payment as driver_recived_payment_last,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  AND ds.reason!='Driver Full Return' $userslog $where ORDER BY $sort LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  AND ds.reason!='Driver Full Return'  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,ds.return_amount,ds.delivery_mode as delivery_mode_last,ds.payment_mode as payment_mode_last,ds.randam_id,ds.km_reading_end as km_reading_end_last,ds.trip_end_date as trip_end_date_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.trip_end_time as trip_end_time_last,ds.reason as reason_last,ds.collection_remarks,ds.collection_remarks_2 as collection_remarks_last,ds.finance_status as finance_status_last,ds.trip_id as trip_id_last,ds.driver_recived_payment as driver_recived_payment_last,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11') AND ds.reason!='Driver Full Return' $where $userslog ORDER BY $sort LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11') AND ds.reason!='Driver Full Return'  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,ds.return_amount,ds.delivery_mode as delivery_mode_last,ds.payment_mode as payment_mode_last,ds.randam_id,ds.km_reading_end as km_reading_end_last,ds.trip_end_date as trip_end_date_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.trip_end_time as trip_end_time_last,ds.reason as reason_last,ds.collection_remarks,ds.collection_remarks_2 as collection_remarks_last,ds.finance_status as finance_status_last,ds.trip_id as trip_id_last,ds.driver_recived_payment as driver_recived_payment_last,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a  $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11') AND ds.reason!='Driver Full Return'   $where $userslog ORDER BY $sort LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } else {
            if ($order_base == 111) {
                
                
        $querycount = $this->db->query("SELECT a.id FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11') AND ds.reason!='Driver Full Return' $where ORDER BY a.id DESC");
                 $resultcount = $querycount->result();
                 $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.*,ds.return_amount,ds.delivery_mode as delivery_mode_last,ds.payment_mode as payment_mode_last,ds.randam_id,ds.km_reading_end as km_reading_end_last,ds.trip_end_date as trip_end_date_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.trip_end_time as trip_end_time_last,ds.reason as reason_last,ds.collection_remarks,ds.collection_remarks_2 as collection_remarks_last,ds.finance_status as finance_status_last,ds.trip_id as trip_id_last,ds.driver_recived_payment as driver_recived_payment_last,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  AND ds.reason!='Driver Full Return' $where ORDER BY $sort LIMIT $offset, $pagesize");
                $result = $query->result();
            } else {
                
                
         $querycount = $this->db->query("SELECT a.id FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  AND ds.reason!='Driver Full Return' $where ORDER BY a.id DESC");
                 $resultcount = $querycount->result();
                 $count=count($resultcount);
                
                
                 $query = $this->db->query("SELECT a.*,ds.return_amount,ds.delivery_mode as delivery_mode_last,ds.payment_mode as payment_mode_last,ds.randam_id,ds.km_reading_end as km_reading_end_last,ds.trip_end_date as trip_end_date_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.trip_end_time as trip_end_time_last,ds.reason as reason_last,ds.collection_remarks,ds.collection_remarks_2 as collection_remarks_last,ds.finance_status as finance_status_last,ds.trip_id as trip_id_last,ds.driver_recived_payment as driver_recived_payment_last,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  AND ds.reason!='Driver Full Return' $where ORDER BY $sort LIMIT $offset, $pagesize");
                 $result = $query->result();
                 
            }
        }


        $trip_id_array=array();
        foreach ($result as $value) 
        {


                 $tablename_sub = "order_product_list_process";


$discountfulltotal = $value->bill_total;

              $order_by = $value->name;
            $order_byd = $value->dname;
            
                $vehicle_number = $value->vehicle_name.' | '.$value->vehicle_number;
            
            
             $company_name = $value->company_name;
                $email = $value->email;
                $phone = $value->phone;
          

             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
                $km_reading_end=1;
             }
             
             if ($value->delivery_status == '2')
             {

                $value->delivery_status = 'Zaron Scope';
                $km_reading_end=$value->km_reading_end_last;


                   $date='2023-05-12';
                   if($value->trip_end_date<$date)
                   {
                        
                     $km_reading_end=1;

                   }

                
             }

  if($value->reason=='Driver Return Order Date confirmed')
  {

             $km_reading_end=1;
  
  }

            if($km_reading_end>0)
            {

                $trip_id_array[]=$value->trip_id_last;

                
                if($value->trip_end_date=='')
                {
                    $value->trip_end_date=$value->assign_date_last.' '.$value->assign_time_last;
                }


                $trip_end_date=date('d-m-Y',strtotime($value->trip_end_date_last));
                $create_date=date('d-m-Y',strtotime($value->create_date));

    
             if($value->finance_status_last=='4' || $value->finance_status_last=='11')
             {



                      $full_delivery=$value->delivery_mode_last;

                      if($value->payment_mode_last=='')
                      {
                        $value->payment_mode_last=$value->payment_mode;
                      }   


                      
                      // gg changes collection remarks
                    if($value->collection_remarks>0)
                    {
                        $value->collection_remarks=$value->collection_remarks;
                    // gg changes for return amount not included in amount to collect edit time
                           $value->return_amount=0;
                    
                    }
                    else
                    {
                    
                        $value->collection_remarks=$value->collection_remarks_last;
                    }

                 

                     $array[] = array('no' => $i, 'payment_id_base' => $payment_id_base,'full_delivery' => $full_delivery,'delivery_status' => $value->delivery_status,'trip_id' => $value->trip_id_last,'driver_recived_payment' => $value->driver_recived_payment_last,'id' => $value->id,'vehicle_number' => $vehicle_number, 'base_id' => base64_encode($value->id), 'selforder' => $value->selforder,'customer_id' => $value->customer_id,'finance_status' => $value->finance_status_last,'collection_remarks' => $value->collection_remarks-$value->return_amount,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => $value->bill_total,  'delivery_charge' => $value->delivery_charge, 'phone' => $phone, 'reason' => $value->reason_last,'payment_mode' => $value->payment_mode_last,  'order_by' => $order_by, 'randam_id' => $value->randam_id,'order_base' => $value->finance_status_last, 'create_date' => $trip_end_date, 'create_time' => $value->trip_end_time_last,'create_date_c' => $create_date, 'create_time_c' => $value->create_time);
 
             }




             

               $i++;

            }  















        }


          $trip_id_array_data= array_unique($trip_id_array);
          $trip_array=array();
        
           
          foreach ($trip_id_array_data as  $tripid) 
         { 
        
           $arraysub=array();
            $payment_mode_arr=array();
           $status=0;
          foreach ($array as $value)
          {
              
                     
                     if($tripid==$value['trip_id'])
                     {


                        $payment_mode_arr[]=$value['payment_mode'];
                        $arraysub[] = array('no' => $value['no'],
                        'payment_id_base' => $value['payment_id_base'],
                        'trip_id' => $value['trip_id'],
                        'collection_remarks' => $value['collection_remarks'],
                        'driver_recived_payment' => $value['driver_recived_payment'],
                        'id' => $value['id'],
                        'vehicle_number' => $value['vehicle_number'], 
                        'base_id' => base64_encode($value['base_id']),
                        'selforder' => $value['selforder'],
                        'delivery_status' => $value['delivery_status'],
                        'customer_id' => $value['customer_id'],
                        'finance_status' => $value['finance_status'],
                        'order_no' => $value['order_no'], 
                        'name' => $value['name'], 
                        'email' => $value['email'],
                        'randam_id' => $value['randam_id'],
                        'full_delivery'=>$value['full_delivery'],
                        'order_byd' => $value['order_byd'], 
                        'totalamount' => $value['totalamount'], 
                        'commission' => round($value['commission']), 
                        'delivery_charge' => $value['delivery_charge'],
                        'phone' => $value['phone'], 
                        'reason' => $value['reason'],
                        'payment_mode' => $value['payment_mode'],
                        
                        'order_by' => $value['order_by'], 
                        'order_base' => $value['finance_status'], 
                        'create_date_c' => $value['create_date_c'], 
                        'create_time_c' => $value['create_time_c'], 
                        'create_date' => $value['create_date'], 
                        'create_time' => $value['create_time']);


                     }

                       
              }

             if(in_array('Cash', $payment_mode_arr))
             {
                $status=1;
             }
         

             $trip_array[]=array("trim_id"=>$tripid,"payment_mode_status"=>$status,"subarray"=>$arraysub);
          

          }


           $myData = array('PortalActivity' => $trip_array,'totalCount' => $count);
           echo json_encode($myData);
           
    }
    





































 public function fetch_data_table_finance_with_uom() {


    
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        

        
         $viewstatus=0;
         if(isset($_GET['viewstatus'])) 
         {  
                 
                $viewstatus= $_GET['viewstatus'];
               
         }





         $whereview="";

         if($search == "")
         {


                 if($viewstatus==0)
                 {
                     $whereview .= " AND ps.uom='Kg'";
                 }
                 else
                 {
                     $whereview .= " AND ps.uom!='Kg'";
                 }

         }
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }





         $filter=0;
         if(isset($_GET['filter'])) 
         {  
                
                $filter= $_GET['filter'];
                if($filter>0)
                {
                    $where .=" AND a.convertion=2";
                }
               
         }  


          $filter_parcel=0;
         if(isset($_GET['filter_parcel'])) 
         {  
                 
                $filter_parcel= $_GET['filter_parcel'];
                if($filter_parcel>0)
                {
                    $whereview="";
                    $where .=" AND a.full_delivery=1";
                }
               
         } 


        if($filter_parcel>0)
        {
                       $where .=" AND a.finance_status>=2";
        }
        else
        {



                         if($order_base==50)
                        {
                            $where .=" AND a.finance_status>=3";
                        }
                        else
                        {
                            $where .=" AND a.finance_status='" . $order_base . "'";
                        }

        }
           
        
        
        if ($search != "") {
                     if($this->session->userdata['logged_in']['access']!=12)
                     {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                     }
                   
                     $where .= " AND a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%' $sales_search";
            
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];






        $i = 1;
        $array = array();
     
           $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id  JOIN order_product_list_process as pp ON pp.order_id=a.id JOIN product_list as ps ON ps.id=pp.product_id WHERE a.deleteid='0' AND a.order_base>0 $whereview $where   GROUP BY a.id ORDER BY a.id DESC");
           $resultcount = $querycount->result();
           $count=count($resultcount);
                
                
           $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,d.name as dname,v.vehicle_name,v.vehicle_number FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id JOIN order_product_list_process as pp ON pp.order_id=a.id JOIN product_list as ps ON ps.id=pp.product_id WHERE a.deleteid='0' AND a.order_base>0  $whereview  $where GROUP BY a.id ORDER BY a.id DESC LIMIT $offset, $pagesize");
           $result = $query->result();




        foreach ($result as $value) 
        {




                 $tablename_sub = "order_product_list_process";


              


            


$discountfulltotal = $value->bill_total;

              $order_by = $value->name;
            $order_byd = $value->dname;
            
                $vehicle_number = $value->vehicle_name.' | '.$value->vehicle_number;
            
            
             $company_name = $value->company_name;
                $email = $value->email;
                $phone = $value->phone;
          



            $array[] = array('no' => $i, 'payment_id_base' => $payment_id_base,'gate_login_view_status'=>$value->gate_login_view_status,'convertion' => $value->convertion,'id' => $value->id,'vehicle_number' => $vehicle_number, 'base_id' => base64_encode($value->id), 'selforder' => $value->selforder,'customer_id' => $value->customer_id,'finance_status' => $value->finance_status,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'phone' => $phone, 'reason' => $value->reason, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;












        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    

    
    
    public function fetch_data_table_trasport_base() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_set = $_GET['order_base'];
        
        $assign = $_GET['assign'];
          
        if($order_base_set==6666)
        {
            $tablename='orders_process_return';
            $order_base = 0;
            $assign = 0;
        }
        
        
        $i = 1;
        $array = array();
        $ $where = " AND a.tl_approved_status>0";
        $sqls = " AND tl_approved_status>0";
        
        
        if($assign==13)
        {
            
            
                 $where.= " AND a.loading_status='1'";
                 $sqls.= " AND loading_status='1'";
                 
                 $where.= " AND ds.assign_status IN ('1','3')";
                 $sqls.= " AND assign_status IN ('1','3')";
                 
                 $where.= " AND ds.finance_status IN ('4','5','6','3')";
                 $sqls.= " AND finance_status IN ('4','5','6','3')";
             
        }
        else
        { 
                 $where.= " AND a.loading_status IN ('0','1')";
                 $sqls.= " AND loading_status IN ('0','1')";
            
                 $where.= " AND ds.assign_status='" . $assign . "'";
                 $sqls.= " AND assign_status='" . $assign . "'";
                 

                 if($order_base==5)
                 {

                     $where.= " AND ds.finance_status>='" . $order_base . "'";
                     $sqls.= " AND finance_status>='" . $order_base . "'";


                 }
                 else
                 {

                     $where.= " AND ds.finance_status='" . $order_base . "'";
                      $sqls.= " AND finance_status='" . $order_base . "'";


                 }
                

        }


        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
    $where = " AND a.order_no='" . $search . "' OR ds.trip_id='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' $sales_search";
            
            
        }





          $JOIN="";
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
          $where .= ' AND ds.dispatch_status=1';
         
         
       

          if($this->session->userdata['logged_in']['access'] == '17') {
           
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
           
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')   $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,ds.reason as reason_last,ds.seq_status as seq_status_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.collection_remarks as collection_remarks_last,ds.assign_status as assign_status_l,ds.finance_status as finance_status_1,ds.randam_id,c.name,ds.trip_id as trip_id_latest,ds.sort_id as sort_id_latest,b.company_name,b.email,b.phone,d.name as dname,d.phone as dphone,v.vehicle_name,v.vehicle_number FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id  LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')   $userslog $where ORDER BY a.id,a.trip_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  user_id IN (' . $sales_team_id . ')';
            
            
                  $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,ds.reason as reason_last,ds.seq_status as seq_status_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.collection_remarks as collection_remarks_last,ds.assign_status as assign_status_l,ds.finance_status as finance_status_1,ds.randam_id,c.name,ds.trip_id as trip_id_latest,ds.sort_id as sort_id_latest,b.company_name,b.email,b.phone,d.name as dname,d.phone as dphone,v.vehicle_name,v.vehicle_number FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  $where $userslog ORDER BY a.id,a.trip_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  sales_group IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.*,ds.reason as reason_last,ds.seq_status as seq_status_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.collection_remarks as collection_remarks_last,ds.assign_status as assign_status_l,ds.finance_status as finance_status_1,ds.randam_id,c.name,ds.trip_id as trip_id_latest,ds.sort_id as sort_id_latest,b.company_name,b.email,b.phone,d.name as dname,d.phone as dphone,v.vehicle_name,v.vehicle_number FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id $JOIN LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  $where $userslog ORDER BY a.id,a.trip_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } else {
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
           
            
            $query = $this->db->query("SELECT a.*,ds.reason as reason_last,ds.seq_status as seq_status_last,ds.assign_date as assign_date_last,ds.assign_time as assign_time_last,ds.collection_remarks as collection_remarks_last,ds.assign_status as assign_status_l,ds.finance_status as finance_status_1,ds.randam_id,c.name,ds.trip_id as trip_id_latest,ds.sort_id as sort_id_latest,b.company_name,b.email,b.phone,d.name as dname,d.phone as dphone,v.vehicle_name,v.vehicle_number FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20','11')  $where ORDER BY a.id,a.trip_id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        
        
        foreach ($result as $value) {
           
            
            $totalamount = 0;
            $commission = 0;
        
           
            $loadamount=0;
            
            $resultmain = $this->db->query("SELECT SUM(a.amount) as amount FROM sales_load_products as a   WHERE a.order_id='".$value->id."' AND a.loadstatus='1' AND a.randam_id='".$value->randam_id."'  ORDER BY a.id DESC");
            $resultcs = $resultmain->result();
            $loadamount=$resultcs[0]->amount;
           
           
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
           
            
            $discountfulltotal=$value->collection_remarks_last;
            
            
                if($loadamount>0)
                {
                   
                  
                     $loadamount = $loadamount+$value->tcsamount;
                }
            
              
              $loadamount=$loadamount;
            
     
               $order_by = $value->name;
               $order_byd = $value->dname.' | '.$value->dphone;
            
               $vehicle_number = $value->vehicle_name.' | '.$value->vehicle_number;
            
            
                $company_name = $value->company_name;
                $email = $value->email;
                $phone = $value->phone;


            if ($value->delivery_status=='1')
            {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Zaron Scope";
            }
           
         
            if($value->order_base>0)
            {


            $array[] = array('no' => $i,'randam_id' => $value->randam_id,'seq_status' => $value->seq_status_last,'trip_id' => $value->trip_id_latest,'sort_id' => $value->sort_id_latest, 'id' => $value->id,'loadamount' => round($loadamount),'delivery_status' => $delivery_status,'vehicle_number' => $vehicle_number, 'return_id' => base64_encode($returnid),'base_id' => base64_encode($value->id), 'loading_status' => $value->loading_status,'selforder' => $value->selforder,'return_status' => $value->return_status,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => $value->bill_total, 'commission' => round($commission,2), 'driver_recived_payment' => $value->driver_recived_payment,'delivery_charge' => $value->delivery_charge, 'assign_status' => $value->assign_status_l, 'phone' => $phone, 'reason' => $value->reason_last, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->finance_status_1, 'create_date' => date('d-m-Y', strtotime($value->assign_date_last)), 'create_time' => $value->assign_time_last);


           }


            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
  public function fetch_data_table_trasport_base_mass_search() {
          $pagenum = $_GET['page'];
        
         $pagesize = $_GET['size'];
         $offset = ($pagenum - 1) * $pagesize;
        
        
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_set = $_GET['order_base'];
        
        $assign = $_GET['assign'];
          
        if($order_base_set==6666)
        {
            $tablename='orders_process_return';
            $order_base = 0;
            $assign = 0;
        }
        
        
        $i = 1;
        $myData=array();
        $array = array();
        $where = "";
        $sqls = "";
        $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
                    $where .= " AND a.order_no='" . $search . "'  OR a.trip_id LIKE '%" . $search . "%' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' $sales_search";
            
            
        if ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  a.user_id IN (' . $sales_team_id . ')';
           
           
            
            
        } 
       



         $querycount = $this->db->query("SELECT a.id FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id  WHERE a.deleteid='0'  $userslog1 $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,
                ds.delivery_confirm_person as delivery_confirm_person_last,
                ds.collection_remarks as collection_remarks_last,
                ds.collection_remarks_2 as collection_remarks_2_last,
                ds.assign_date as assign_date_last,
                ds.trip_end_date as trip_end_date_last,
                ds.trip_end_time as trip_end_time_last,
                ds.trip_start_date as trip_start_date_last,
                ds.trip_start_time as trip_start_time_last,
                ds.return_status as return_status_last,
                ds.return_amount as return_amount_last,
                ds.return_id as return_id_last,
                ds.delivery_confirm_date_time as delivery_confirm_date_time_last,
                ds.randam_id,ds.tcs_amount_get,ds.vehicle_id as vehicle_id_last,ds.driver_id as driver_id_last,
                ds.assign_status as assign_status_last,ds.finance_status as finance_status_last,ds.km_reading_end as km_reading_end_last,ds.start_reading as start_reading_last,ds.delivery_date_status as delivery_date_status_last,ds.trip_id as trip_id_last,ds.reason as reason_last
                FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id  WHERE a.deleteid='0' $userslog  $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        
        
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            
            
            $totalamount = 0;
            $commission = 0;
        
           
     $loadstatus=1;
     $resulttotal = $this->Main_model->where_names_three_order_by_new($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode,'deleteid', '0', 'id', 'DESC');
             
           
            $loadamount=0;
            foreach ($resulttotal as $tot)
            {
                
              
$resultload = $this->Main_model->where_names_two_order_by('sales_load_products',  'order_product_id', $tot->id, 'randam_id', $value->randam_id, 'id', 'DESC');

              
                 foreach ($resultload as $valueload)
                 {


                    if($valueload->loadstatus==1)
                    {
                       
                        $loadamount+= $valueload->amount;
                        
                    }
                    
    
                 }
                    
                
            }
            
            
               $tcs_status=$value->tcs_status;
               $tcsamount= $value->tcs_amount_get;
           

                $discountfulltotal=$value->bill_total;


                if($loadamount!=0)
                {
                   
                   
                    if ($roundoffstatus == 1) 
                    {
                        $loadamount = $loadamount - $discount + $minisroundoff;
                    } 
                    else 
                    {
                        $loadamount = $loadamount - $discount - $minisroundoff;
                    }
                   
                   
                }
            
            
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $order_byd = "";
            $vehicle_id="";
            $orderbyd = $this->Main_model->where_names_two_order_by('driver', 'id', $value->driver_id_last, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderbyd as $orderbyvald) {
                $order_byd = $orderbyvald->name;
                $vehicle_id = $orderbyvald->vehicle_id;
            }
            
            $vehicle_number="";
            
            if($value->vehicle_id!=0)
            {
                
            
                   $vehicleorderbyd = $this->Main_model->where_names_two_order_by('vehicle', 'id', $value->vehicle_id_last, 'deleteid', '0', 'id', 'DESC');
                    foreach ($vehicleorderbyd as $orderbyvaldvv) {
                        
                        $vehicle_number = $orderbyvaldvv->vehicle_name.' | '.$orderbyvaldvv->vehicle_number;

                    }
            }
            
            
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->assign_status_last == 8) {
                $value->finance_status_last = 8;
            }
            if ($value->assign_status_last == 2) {
                $value->finance_status_last = 2;
            }
            
            
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Zaron Scope";
            }
              

               $total_km=0;
            

            if($value->finance_status_last>3)
            {



                    if($value->km_reading_end_last>0)
                    {
                        $total_km=$value->km_reading_end_last-$value->start_reading_last;
                    }


            }
            else
            {
                     $value->km_reading_end_last=0;
            }


        





                    if($value->payment_mode_old!='')
                    {
                         $value->payment_mode=$value->payment_mode_old;
                    }


            $viewstatus=1;
            if($value->finance_status_last==4)
            {
                // $viewstatus=0;
            }
            if($value->finance_status_last==5)
            {
               //  $viewstatus=0;
            }
            if($value->finance_status_last==6)
            {
               //  $viewstatus=0;
            }
            

            $statuscheck=1;

            $che=array(0);
            if(in_array($value->assign_status_last, $che))
            {
                    if($value->delivery_date_status_last==1)
                    {
                         $statuscheck=7;
                    }
                    
            }

            $che=array(11);
            if(in_array($value->assign_status_last, $che))
            {
                $statuscheck=2;
            }


             $che=array(12);
            if(in_array($value->assign_status_last, $che))
            {
                $statuscheck=3;
            }


            $che=array(1);
            if(in_array($value->assign_status_last, $che))
            {
                $statuscheck=4;
            }


            $che2=array(2);
            if(in_array($value->assign_status_last, $che2))
            {
                $statuscheck=5;
            }


            $che2=array(4);
            if(in_array($value->finance_status_last, $che2))
            {
                $statuscheck=6;
            }


            $che4=array(5,6);
            if(in_array($value->finance_status_last, $che4))
            {
                $statuscheck=9;
            }

             
             if($value->return_status==1)
             {

                    $statuscheck=8;

             }


              if($value->return_id_last>0)
             {

                  $update_date_return = "";
                  
                  $orderby = $this->Main_model->where_names_two_order_by('order_sales_return_complaints', 'id', $value->return_id_last, 'deleteid', '0', 'id', 'DESC');
                   foreach ($orderby as $orderbyval) {
                    $update_date_return = date('d-M',strtotime($orderbyval->update_date));
                  }
                  $value->reason_last='Driver Returned on '.$update_date_return.'. '.$value->reason_last;
             }


             if($value->collection_remarks_last==0)
             {
                $value->collection_remarks_last=$value->collection_remarks_2_last-$value->return_amount_last;
             }
       

            $array[] = array('no' => $i,'randam_id' => $value->randam_id, 'viewstatus' => $viewstatus,'statuscheck' => $statuscheck,
                'delivery_status' => $delivery_status,
                'delivery_confirm_person' => $value->delivery_confirm_person_last,
                'delivery_confirm_date_time' => $value->delivery_confirm_date_time,
                'payment_mode' => $value->payment_mode,
                'gate_weight' => $value->gate_weight,
                'id' => $value->id,'loadamount' => round($loadamount),
                'vehicle_number' => $vehicle_number,
                 'base_id' => base64_encode($value->id),
                  'loading_status' => $value->loading_status,
                  'selforder' => $value->selforder,
                  'return_status' => $value->return_status,
                  'trip_end_date' => date('d-m-Y', strtotime($value->trip_end_date_last)),
                  'trip_start_date' => date('d-m-Y', strtotime($value->trip_start_date_last)),
                  'trip_end_time' => $value->trip_end_time_last,
                  'trip_start_time' => $value->trip_start_time_last,
                  'trip_id' => $value->trip_id_last,
                  'order_no' => $value->order_no, 
                  'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd,
                   'totalamount' => round($discountfulltotal,2), 
                   'commission' => round($commission,2),
                    'delivery_charge' => $value->delivery_charge,
                    'assign_status' => $value->assign_status_last,
                     'phone' => $phone,'total_km' => $total_km,'start_reading' => $value->start_reading_last,'km_reading_end' => $value->km_reading_end_last, 'reason' => $value->reason_last, 'address' => $address, 'order_by' => $order_by, 'collection_remarks' => $value->collection_remarks_last,'order_base' => $value->finance_status_last, 'assign_date' => date('d-m-Y', strtotime($value->assign_date_last)), 'assign_time' => $value->assign_time_last,'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        }
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    public function fetch_data_table_production() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        
        
        
        
        
        
        $result = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '".$order_base."' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY a.id DESC");
        $result = $result->result();
        
        
        foreach ($result as $value)
        {
            
            
            $array[] = array('no' => $i, 
            'id' => $value->order_id,
            'order_no' => $value->order_no,
            'product_id' => $value->product_id,
            'product_name' => $value->product_name,
            'categories_id' => $value->categories_id,
            'categories_name' => $value->categories_name,
            'reason' => $value->reason,
            'order_base' => $value->production_start,
            'create_date' => date('d-m-Y', strtotime($value->create_date)),
            'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
        
        
        
        
    }
    public function fetch_data_table_transpot() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $array = array();
        if ($route_id != '0') {
            $result = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'route_id', $route_id, 'id', 'DESC');
        } else {
            //$date=date('Y-m-d');
            //$result= $this->Main_model->where_names_four_order_by_new($tablename,'finance_status',$order_base,'order_base','1','deleteid','0','create_date',$date,'id','DESC');
            $result = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        }
        $i = 1;
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                 if($tot->deleteid==0)
                   {

                $rate=$tot->rate+$tot->commission;
                    $totalamount+= $rate*$tot->qty;
                    $commission+= $tot->commission;

                    }
            }
            $route_id_base = $value->route_id;
            if ($value->assign_status == 0) {
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id == "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($vehicle as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'loading_status' => $value->loading_status, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value->reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_return_table_transpot_by_server() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $where = "";
        $sqls = "";


        $fromdate = $_GET['fromdate'];
        $todate = $_GET['todate'];


      
  $array = array();
        
        
        $wheresearch="";
        if ($search != "") {
            $wheresearch = " AND  a.order_no LIKE '%" . $search . "%' OR  c.company_name LIKE '%" . $search . "%' OR  c.phone LIKE '%" . $search . "%'";
        }
        else
        {

             if($route_id != '0') 
             {
                
                $sqls=" AND a.route_id='" . $route_id . "'";
                
             }
             else
             {
                 $where=" AND a.update_date BETWEEN '".$fromdate."' AND '".$todate."'";
             }

        }

      
      

        
       
        
        $result=array();
        $count=0;
       
    
        $query = $this->db->query("SELECT a.remarks,a.re_order_no,a.order_no,a.user_id,a.id,c.company_name,c.phone,a.route_id,a.order_id,c.id as customer_id,a.update_date,a.update_time  FROM order_sales_return_complaints as a  JOIN customers as c ON a.customer=c.id WHERE a.deleteid='0' AND a.order_base=0 $where $sqls $wheresearch ORDER BY a.create_date DESC  LIMIT $offset, $pagesize");
        $result = $query->result(); 


       
      

     
 




   
        
        
        $i = 1;
        foreach ($result as $value)
        {
            
            
            
            
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."' AND deleteid=0");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess) {
                    $totalamount += round($valuess->qty*$valuess->rate,2);
                }
                
                $route_id_base = $value->route_id;
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                        $route_name = $route_v->name;
                }
            
            
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                      $locality = $csval->locality;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id == "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }





               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            


            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            







              $create_date=date('d-m-Y', strtotime($value->update_date)).' '.$value->update_time;


               
               $array[] = array('no' => $i, 'remarks' => $value->remarks,'old_order_no' => $value->order_no,'id' => $value->id,'route_names_val'=>$route_name,'loc_name'=>$loc_name,'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'order_no' => $value->re_order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone,  'totalamount' => round($totalamount),  'address' => $address, 'create_date' => $create_date);
            
               $i++;
        }





        




        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_by_server() {
       $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $where = "";
        $sqls = "";
        

        $fromdate = $_GET['fromdate'];
        $todate = $_GET['todate'];

        $where = "";
      
                    if($fromdate!='')
                    {

                        $this->db->query("UPDATE admin_users SET from_date_filter='".$fromdate."',to_date_filter='".$todate."' WHERE id='" .$this->userid . "'");
             
                    }

                    $wheresearch="";
                    if($search != "") 
                    {
                          

                            //$where.=" AND ds.delivery_date BETWEEN '".$fromdate."' AND '".$todate."'";
                            $wheresearch.= " AND  a.order_no LIKE '%" . $search . "%'";


                    }
                    else
                    {

                          $where.=" AND ds.delivery_date BETWEEN '".$fromdate."' AND '".$todate."'";
                    
                    }


                    if($this->session->userdata['logged_in']['access']==12)
                    {

                           $where.=" AND a.user_id='".$this->userid."'";
                    }



          $JOIN="";
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
          //$where .= ' AND ds.dispatch_status=0';
          $where .= ' AND ds.assign_status=0';
          $where .= ' AND ds.finance_status IN ("11","2")';
          $where .= ' AND ds.delivery_date_status=1';
          //$where .= ' AND ds.delivery_status=1';

       
        $array = array();
        if ($route_id != '0') {
           
           
            $count=0;
            
                 $query = $this->db->query("
                    SELECT a.*,a.delivery_status as delivery_status_last,ds.randam_id,ds.assign_status as assign_status_last,ds.order_id as order_id_last,ds.reason as reason_last,ds.collection_remarks as collection_remarks_final,d.driver_return,d.remarks,d.id as return_ids,d.delivery_status as delivery_status_return
                    FROM $tablename as a $JOIN
                    LEFT JOIN order_sales_return_complaints as d ON a.id = d.order_id
                    LEFT JOIN customers as b ON a.customer_id = b.id
                    LEFT JOIN admin_users as c ON a.user_id = c.id
                    WHERE
                         a.deleteid = '0' 
                        $where
                        $wheresearch
                    ORDER BY a.delivery_date DESC
                  ");
       
       
        } else {
           
           
            $count=0;
           
            
                $query = $this->db->query("
                SELECT a.*,ds.finance_status,ds.assign_status,a.delivery_status as delivery_status_last,ds.randam_id,ds.assign_status as assign_status_last,ds.order_id as order_id_last,ds.reason as reason_last,ds.collection_remarks as collection_remarks_final,d.driver_return,d.remarks,d.id as return_ids,d.delivery_status as delivery_status_return,d.delivery_date_status as delivery_date_status_return,d.delivery_date_time as delivery_date_time_return 
                FROM $tablename as a $JOIN
                LEFT JOIN order_sales_return_complaints as d ON a.id = d.order_id
                LEFT JOIN customers as b ON a.customer_id = b.id
                LEFT JOIN admin_users as c ON a.user_id = c.id
                WHERE a.deleteid = '0'
                $where
                $wheresearch
                ORDER BY a.delivery_date DESC
                
              ");
            
        }
        
        
        $result = $query->result();
        $i = 1;
        foreach ($result as $value) {
            


            $tablename_sub = "order_product_list_process";

            $query = $this->db->query("SELECT *
            FROM `order_sales_return_complaints` as a 
            WHERE a.id = '". $value->return_id."'   ");
            $v = $query->row();
            
    $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='".$value->delivery_status_last."' WHERE order_id='" . $value->order_id_last ."'"); 


            $route_id_base = $value->route_id;
            if($value->assign_status_last == 0 || $value->assign_status_last == '3')
            {




                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                 $locality = 0;
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $locality = $csval->locality;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }


                if($value->customer_address_id>0)
                {

                        $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                        foreach ($customers_adddrss as $customers_adddrss_v) 
                        {
                            $locality = $customers_adddrss_v->locality;
                            $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                        }


                }


                if($value->shipping_address>0)
                {

                        $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                        foreach ($customers_adddrss as $customers_adddrss_v) 
                        {
                            $locality = $customers_adddrss_v->locality;
                            $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                        }


                }


                $vehicle_number = "";
                // $value_route_id = $value->return_id ? $v->route_id : $value->route_id;
                $value_route_id = $value->route_id;
                $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value_route_id);
                foreach ($vehicle as $vehicle_v) {
                     $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($vehicle as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                

                $loc_name = "";
           
                $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
                foreach ($loc_name_id as $valc) {
                  
                    $loc_name = $valc->name;
                    $route_id = $valc->route_id;

                }


                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
            
                
   $sales_name = "";
            $sales_phone="";
            $value_user_id = $value->return_id ? $v->sales_id : $value->user_id;
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value_user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
                
$discountfulltotal = $value->return_id ? $v->bill_total : $value->bill_total;


$weight = $value->weighttotal;
$lengeth = $value->lengeth_max;
$lengeth=round($lengeth,2);


             if($value->order_base>0)
              {

   
                     $pending_amount='';
                     if($value->full_delivery==1 && $value->return_id>0)
                     {



                                                           $resultsub_production=$this->db->query("SELECT SUM(a.qty*a.rate) as totalvalue FROM order_product_list_process as a  WHERE a.deleteid=0 AND a.order_id='".$value->id."' AND a.return_status=0 ORDER BY a.id DESC");
                                                                 $resultsub_production=$resultsub_production->result();
                                                                 $production=0;
                                                                 foreach($resultsub_production as $val)
                                                                 { 

                                                                         $production+=$val->totalvalue;
                                                                 }

                                                                $resultload = $this->db->query("SELECT SUM(qty*rate) as totalvalue FROM sales_load_products  WHERE order_id='" . $value->id . "' AND loadstatus=1 AND delivered_products=1  ORDER BY id ASC");
                                                                    $resultload = $resultload->result();
                                                                    foreach ($resultload as $valueload)
                                                                    {
                                                                        
                                                                          $loadamount= $valueload->totalvalue;
                                                                        
                                                                    }

                                                                   if($loadamount>0)   
                                                                 {   

                                                                 $production=$production-$loadamount;   
                                                                                                                        
                                                                 if($production>0)
                                                                 {

                                                                   $pending_amount='Partial Pending Amount :'.round($production);

                                                                 }
                                                                 }


                       }


                       

                        $value_rescheduling_date = $value->return_id ? $v->rescheduling_date : $value->rescheduling_date;
                        // $value_id = $value->return_id ? $v->order_id : $value->id;
                        //$v->remarks='Return Order';
                        $value_reason = $value->return_id ? $v->remarks : $value->reason_last;
                        $value_delivery_date_time = $value->return_id ? $v->assign_date : $value->delivery_date_time;
                        $value_create_date = $value->return_id ? $v->create_date : $value->create_date;


                        // if($value->driver_return==2)
                        // {
                        //        $value->return_ids=0;
                        // }
                       

              if($value->return_ids>0)
              {



                         
                              $driver_delivery_status=0;
                              $resultsub_inproduction=$this->db->query("SELECT SUM(c.qty*c.rate) as bill_total,b.remarks,b.driver_delivery_status FROM  order_sales_return_complaints as b JOIN sales_return_products as c ON b.id=c.c_id  WHERE b.deleteid=0 AND b.id='".$value->return_ids."'  AND c.deleteid=0 AND c.in_status_val='Return To Sale'  ORDER BY b.id DESC");
                                                                 $resultsub_inproduction=$resultsub_inproduction->result();
                                                                 $inproduction_total_return=0;
                                                                  $remarks_data="";
                                                                 foreach($resultsub_inproduction as $vals)
                                                                 {

                                                                             $remarks_data=$vals->remarks;
                                                                             $driver_delivery_status=$vals->driver_delivery_status;
                                                                             $inproduction_total_return=round($vals->bill_total);

                                                                 }


                                                                 if($driver_delivery_status=='')
                                                                 {
                                                                     $driver_delivery_status=0;
                                                                 }
   
                      


                                if($value->delivery_status_return == 1) {
                                $delivery_status = "Client Scope";
                                } else {
                                    $delivery_status_return = "Zaron Scope";
                                }


                       if($driver_delivery_status=='0')
                       {



                             if($inproduction_total_return>0)
                             {


                                      
                                     if($value->delivery_status_return==1)
                                     {


                                          $discountfulltotal=$inproduction_total_return;
                                          $array[] = array('no' => $i,'bgcolor'=>'bgcolor','delivery_status'=>$delivery_status,'pending_amount'=>$pending_amount,'loc_name'=>$loc_name,'rescheduling_date' => $value_rescheduling_date, 'id' => $value->id,'lengeth'=>$lengeth,'weight' => round($weight,3),'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value_reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode,'SSD_check' => $value->SSD_check,'collection_remarks' => $value->collection_remarks,'excess_payment_status' => $value->excess_payment_status,'delivery_date_time' => $value->delivery_date_time_return, 'payment_mode' => $value->payment_mode,'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value_create_date)), 'delivery_date' => $value->delivery_date,'randam_id' => $value->randam_id,'create_time' => $value->create_time, 'return' => $value->return_ids);

                                    }




                            }
                            else
                            {



                                 $resultsub_inproduction=$this->db->query("SELECT SUM(c.qty*c.rate) as bill_total,b.remarks FROM  order_sales_return_complaints as b JOIN sales_return_products as c ON b.id=c.c_id  WHERE b.deleteid=0 AND b.id='".$value->return_ids."'  AND c.deleteid=0   ORDER BY b.id DESC");
                                                                 $resultsub_inproduction=$resultsub_inproduction->result();
                                                                 $inproduction_total_return=0;
                                                                  $remarks_data="";
                                                                 foreach($resultsub_inproduction as $vals)
                                                                 {

                                                                             $remarks_data=$vals->remarks;
                                                                             $inproduction_total_return=round($vals->bill_total);

                                                                 }
                                                                 $discountfulltotal=$inproduction_total_return;



                                     if($value->delivery_status_return==1)
                                     {



                                            $array[] = array('no' => $i,'bgcolor'=>'bgcolor','delivery_status'=>$delivery_status,'pending_amount'=>$pending_amount,'loc_name'=>$loc_name,'rescheduling_date' => $value_rescheduling_date, 'id' => $value->id,'lengeth'=>$lengeth,'weight' => round($weight,3),'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value_reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'collection_remarks' => $value->collection_remarks,'delivery_mode' => $value->delivery_mode,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status,'delivery_date_time' => $value->delivery_date_time_return, 'payment_mode' => $value->payment_mode,'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value_create_date)),'delivery_date' => $value->delivery_date,'randam_id' => $value->randam_id, 'create_time' => $value->create_time, 'return' => $value->return_ids);




                                     }




                            }


                     } 


                        
              } 
              else
              {

     
                                if($value->delivery_status == 1) {
                                $delivery_status = "Client Scope";
                                } else {
                                    $delivery_status = "Zaron Scope";
                                }
                            // AND a.delivery_date_status=1
                            // AND a.reason!='".$sta."'  AND a.delivery_status = '2'
                            if($value->delivery_status==1)
                            {

                                 $sttt=array('11','2');
                                if(in_array($value->finance_status, $sttt))
                                {


         
                                 if($value_reason=='Return Order')
                                 {
                                      $bgcolor='bgcolor';
                                 }

                                 $discountfulltotal =$value->bill_total;

                                $array[] = array('no' => $i,'bgcolor'=>$bgcolor,'delivery_status'=>$delivery_status,'pending_amount'=>$pending_amount,'loc_name'=>$loc_name,'rescheduling_date' => $value_rescheduling_date, 'id' => $value->id,'lengeth'=>$lengeth,'weight' => round($weight,3),'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value_reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode,'SSD_check' => $value->SSD_check,'collection_remarks' => $value->collection_remarks,'excess_payment_status' => $value->excess_payment_status,'delivery_date_time' => $value_delivery_date_time, 'payment_mode' => $value->payment_mode,'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value_create_date)),'delivery_date' => $value->delivery_date,'randam_id' => $value->randam_id, 'create_time' => $value->create_time, 'return' => $value->return_id);






                               }


                            }


              }         

                 }


            }
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_by_server_own() 
    {
       
                $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];


        $fromdate = $_GET['fromdate'];
        $todate = $_GET['todate'];

        $where = "";
        $sqls = "";
        $wheresearch="";
        $limit="";


        if($fromdate!='')
        {

            $this->db->query("UPDATE admin_users SET from_date_filter='".$fromdate."',to_date_filter='".$todate."' WHERE id='" .$this->userid . "'");
 
        }



        //$wheresearch=" AND a.finance_status=2 AND d.order_base=12";
        if($search != "") 
        {
           

            // $wheresearch = " AND  a.order_no LIKE '%" . $search . "%' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%' OR  d.re_order_no LIKE '%" . $search . "%'" ;
            $where.=" AND a.delivery_date BETWEEN '".$fromdate."' AND '".$todate."'";
            $wheresearch.= " AND  a.order_no LIKE '%" . $search . "%'" ;

             
        }
        else
        {

             
           $where=" AND a.delivery_date BETWEEN '".$fromdate."' AND '".$todate."'";
             

        }

          $JOIN="";
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
          //$where .= ' AND ds.dispatch_status=0';
          $where .= ' AND ds.assign_status=0';
          $where .= ' AND ds.finance_status IN ("2")';
          $where .= ' AND ds.delivery_date_status=1';
          //$where .= ' AND ds.randam_id IS NULL';

         // $where .= ' AND a.delivery_status=2';
         
        // gg changes scope task
        $where .= ' AND ds.delivery_status=2';
          


        $sta="Return To sale";
        $array = array();
        if ($route_id != '0') {
            
            
            $count=0; 
            
          

                
                    $query = $this->db->query("
                    SELECT a.*,ds.randam_id,ds.order_id as order_id_last,ds.reason as reason_last,
                    ds.collection_remarks as collection_remarks_final,
                    ds.collection_remarks_2 as collection_remarks_2_final,
                    d.driver_return,d.remarks,d.id as return_ids,d.delivery_status as delivery_status_return
                    FROM $tablename as a
                    LEFT JOIN order_sales_return_complaints as d ON a.id = d.order_id
                    LEFT JOIN customers as b ON a.customer_id = b.id
                    LEFT JOIN admin_users as c ON a.user_id = c.id
                    $JOIN
                    WHERE
                         a.deleteid = '0'
                        $where
                        $wheresearch
                    ORDER BY a.delivery_date DESC
                    
                ");
           
       
        } else {
           
             // gg changes for groupby qurey
            $count=0; 
            
            
 
            $query = $this->db->query("
                SELECT a.*,ds.randam_id,ds.order_id as order_id_last,ds.reason as reason_last,
                ds.collection_remarks as collection_remarks_final,
                ds.collection_remarks_2 as collection_remarks_2_final,
                d.driver_return,d.remarks,d.id as return_ids,d.delivery_status as delivery_status_return,d.delivery_date_status as delivery_date_status_return,d.delivery_date_time as delivery_date_time_return 
                FROM $tablename as a
                LEFT JOIN order_sales_return_complaints as d ON a.id = d.order_id
                LEFT JOIN customers as b ON a.customer_id = b.id
                LEFT JOIN admin_users as c ON a.user_id = c.id
                $JOIN
                WHERE a.deleteid = '0'
                    
                    $where
                    $wheresearch
                
                GROUP BY ds.order_id
                ORDER BY a.delivery_date DESC
                
            ");

            

        }  
        
       

        $result = $query->result();





        $i = 1;
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";

            $query = $this->db->query("SELECT *
            FROM `order_sales_return_complaints` as a 
            WHERE a.id = '". $value->return_id."'   ");
            $v = $query->row();
            
       
            $route_id_base = $value->route_id;
           
 $this->db->query("UPDATE order_sales_return_complaints SET delivery_status='2' WHERE order_id='" . $value->order_id_last ."'"); 


                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $locality = 0;
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $locality = $csval->locality;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }


                if($value->customer_address_id>0)
                {

                        $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                        foreach ($customers_adddrss as $customers_adddrss_v) 
                        {
                            $locality = $customers_adddrss_v->locality;
                            $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                        }


                }


                if($value->shipping_address>0)
                {

                        $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                        foreach ($customers_adddrss as $customers_adddrss_v) 
                        {
                            $locality = $customers_adddrss_v->locality;
                            $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                        }


                }


                $vehicle_number = "";
                // $value_route_id = $value->return_id ? $v->route_id : $value->route_id;
                $value_route_id = $value->route_id;
                $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value_route_id);
                foreach ($vehicle as $vehicle_v) {
                     $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($vehicle as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                

                $loc_name = "";
           
                $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
                foreach ($loc_name_id as $valc) {
                  
                    $loc_name = $valc->name;
                    $route_id = $valc->route_id;

                }


                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
            
                
   $sales_name = "";
            $sales_phone="";
            $value_user_id = $value->return_id ? $v->user_id : $value->user_id;
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value_user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
                
$discountfulltotal = $value->return_id ? $v->bill_total : $value->bill_total;


$weight = $value->weighttotal;
$lengeth = $value->lengeth_max;
$lengeth=round($lengeth,2);
         

              if($value->order_base>0)
              {

   
                     $pending_amount='';
                     if($value->full_delivery==1 && $value->return_id>0)
                     {


                                                           $resultsub_production=$this->db->query("SELECT SUM(a.qty*a.rate) as totalvalue FROM order_product_list_process as a  WHERE a.deleteid=0 AND a.order_id='".$value->id."' AND a.return_status=0 ORDER BY a.id DESC");
                                                                 $resultsub_production=$resultsub_production->result();
                                                                 $production=0;
                                                                 foreach($resultsub_production as $val)
                                                                 { 

                                                                         $production+=$val->totalvalue;
                                                                 }

                                                                $resultload = $this->db->query("SELECT SUM(qty*rate) as totalvalue FROM sales_load_products  WHERE order_id='" . $value->id . "' AND loadstatus=1 AND delivered_products=1  ORDER BY id ASC");
                                                                    $resultload = $resultload->result();
                                                                    foreach ($resultload as $valueload)
                                                                    {
                                                                        
                                                                          $loadamount= $valueload->totalvalue;
                                                                        
                                                                    }

                                                                   if($loadamount>0)   
                                                                 {   

                                                                 $production=$production-$loadamount;   
                                                                                                                        
                                                                 if($production>0)
                                                                 {

                                                                   $pending_amount='Partial Pending Amount :'.round($production);

                                                                 }
                                                                 }


                     }


                if($value->delivery_status == 1) {
                    $delivery_status = "Client Scope";
                } else {

                    // gg changes for scope task name change
                    $delivery_status = "Zaron Scope";
                }

                $value_rescheduling_date = $value->return_id ? $v->rescheduling_date : $value->rescheduling_date;
                // $value_id = $value->return_id ? $v->order_id : $value->id;
                //$v->remarks='Return Order';
                //$value_reason = $value->return_id ? $v->remarks : $value->reason_last;

                $value_reason = $value->reason_last;

                $value_delivery_date_time = $value->return_id ? $v->assign_date : $value->delivery_date_time;
                $value_create_date = $value->return_id ? $v->create_date : $value->create_date;


                if($value->driver_return==2)
                {
                       $value->return_ids=0;
                }
               

              if($value->return_ids>0)
              {



                         
                          $driver_delivery_status=0;

                            $resultsub_inproduction=$this->db->query("SELECT SUM(c.qty*c.rate) as bill_total,b.remarks,b.driver_delivery_status FROM  order_sales_return_complaints as b JOIN sales_return_products as c ON b.id=c.c_id  WHERE b.deleteid=0 AND b.id='".$value->return_ids."'  AND c.deleteid=0 AND c.in_status_val='Return To Sale'  ORDER BY b.id DESC");
                                                                 $resultsub_inproduction=$resultsub_inproduction->result();
                                                                 $inproduction_total_return=0;
                                                                  $remarks_data="";
                                                                 foreach($resultsub_inproduction as $vals)
                                                                 {

                                                                             $remarks_data=$vals->remarks;
                                                                             $driver_delivery_status=$vals->driver_delivery_status;
                                                                             $inproduction_total_return=round($vals->bill_total);

                                                                 }


                                                                 if($driver_delivery_status=='')
                                                                 {
                                                                     $driver_delivery_status=0;
                                                                 }
   

                       if($driver_delivery_status=='0')
                       {



                             if($inproduction_total_return>0)
                             {


                                        $discountfulltotal=$inproduction_total_return;
           if($value->collection_remarks_final==0)
           {
                        $value->collection_remarks_final=$value->collection_remarks_2_final;
           }

                                        $array[] = array('no' => $i,'bgcolor'=>'bgcolor','delivery_status'=>$delivery_status,'pending_amount'=>$pending_amount,'loc_name'=>$loc_name,'rescheduling_date' => $value_rescheduling_date, 'id' => $value->id,'lengeth'=>$lengeth,'weight' => round($weight,3),'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value_reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode,'SSD_check' => $value->SSD_check,'collection_remarks' => $value->collection_remarks_final,'excess_payment_status' => $value->excess_payment_status,'delivery_date_time' => $value->delivery_date_time_return, 'payment_mode' => $value->payment_mode,'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value_create_date)), 'delivery_date' => $value->delivery_date,'randam_id' => $value->randam_id,'create_time' => $value->create_time, 'return' => $value->return_ids);




                            }
                            else
                            {



                                  $resultsub_inproduction=$this->db->query("SELECT SUM(c.qty*c.rate) as bill_total,b.remarks FROM  order_sales_return_complaints as b JOIN sales_return_products as c ON b.id=c.c_id  WHERE b.deleteid=0 AND b.id='".$value->return_ids."'  AND c.deleteid=0   ORDER BY b.id DESC");
                                                                 $resultsub_inproduction=$resultsub_inproduction->result();
                                                                 $inproduction_total_return=0;
                                                                  $remarks_data="";
                                                                 foreach($resultsub_inproduction as $vals)
                                                                 {

                                                                             $remarks_data=$vals->remarks;
                                                                             $inproduction_total_return=round($vals->bill_total);

                                                                 }
                                                                 $discountfulltotal=$inproduction_total_return;



                                     if($value->delivery_date_status_return==1)
                                     {


            if($value->collection_remarks_final==0)
           {
                        $value->collection_remarks_final=$value->collection_remarks_2_final;
           }
                                            $array[] = array('no' => $i,'bgcolor'=>'bgcolor','delivery_status'=>$delivery_status,'pending_amount'=>$pending_amount,'loc_name'=>$loc_name,'rescheduling_date' => $value_rescheduling_date, 'id' => $value->id,'lengeth'=>$lengeth,'weight' => round($weight,3),'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value_reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'collection_remarks' => $value->collection_remarks_final,'delivery_mode' => $value->delivery_mode,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status,'delivery_date_time' => $value->delivery_date_time_return, 'payment_mode' => $value->payment_mode,'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value_create_date)),'delivery_date' => $value->delivery_date,'randam_id' => $value->randam_id, 'create_time' => $value->create_time, 'return' => $value->return_ids);




                                     }




                            }


                     } 


                        
              } 
              else
              {




                              if($value->delivery_status_return=='0')
                              {
                                //$value->delivery_status_return=2;
                              }


$value->delivery_status_return=2;


                              if($value->delivery_status_return==2)
                              {


                  
                               

             
                                     if($value_reason=='Return Order')
                                     {
                                          $bgcolor='bgcolor';
                                     }

                                     $discountfulltotal =$value->bill_total;

           if($value->collection_remarks_final==0)
           {
                        $value->collection_remarks_final=$value->collection_remarks_2_final;
           }

                                    $array[] = array('no' => $i,'bgcolor'=>$bgcolor,'delivery_status'=>$delivery_status,'pending_amount'=>$pending_amount,'loc_name'=>$loc_name,'rescheduling_date' => $value_rescheduling_date, 'id' => $value->id,'lengeth'=>$lengeth,'weight' => round($weight,3),'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value_reason, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode,'SSD_check' => $value->SSD_check,'collection_remarks' => $value->collection_remarks_final,'excess_payment_status' => $value->excess_payment_status,'delivery_date_time' => $value_delivery_date_time, 'payment_mode' => $value->payment_mode,'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value_create_date)),'delivery_date' => $value->delivery_date, 'create_time' => $value->create_time, 'randam_id' => $value->randam_id,'return' => $value->return_id);




                            }    


              }         

                 }


           
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);

    }
    
    
    
    public function fetch_data_table_transpot_vehicle() {
        $route_id = $_GET['route_id'];

        $orderset = $_GET['orderset'];

        $array = array();
        $sql = "";
        if ($route_id != 0) {
            //$sql="AND a.route_id='".$route_id."' ";
            
        }

        if($orderset=='2')
        {
            
            $sql="AND b.deleteid=0";
            
        }

        if($this->session->userdata['logged_in']['access']=='12')
        {

// 500 limit 

    $result = $this->db->query("SELECT b.id as driver_id,b.id as route_id,b.id as route_name,a.vehicle_number as vehicle_number,a.vehicle_name as vehicle_name,b.phone as driver_phone,b.name as driver_name,a.id as vehicle_id,a.assiend_count FROM vehicle as a LEFT JOIN driver as b ON a.id=b.vehicle_id  WHERE  a.deleteid=0  AND a.approved_status > 0 AND a.user_id='".$this->userid."' $sql ORDER BY a.id ASC limit 500");

        }
        else
        {
            
// gg changes scope task
// 500 limit 

             $result = $this->db->query("SELECT c.name as route_name,c.id as route_id,b.id as driver_id,a.vehicle_number as vehicle_number,a.vehicle_name as vehicle_name,b.phone as driver_phone,b.name as driver_name,a.id as vehicle_id,a.assiend_count FROM vehicle as a LEFT JOIN driver as b ON a.id=b.vehicle_id LEFT JOIN route as c ON c.id=a.route_id WHERE   a.deleteid=0  AND a.approved_status > 0 $sql ORDER BY a.id ASC limit 500");


        }
       
        $result = $result->result();
        $i = 1;
        foreach ($result as $value) {



            $loc_name = "";
           
            //$loc_name_id = $this->Main_model->where_names('locality', 'route_id', $value->route_id);
            //foreach ($loc_name_id as $valc) {
              
                //$loc_name = $valc->name;
            //}
            

                  


           if($value->assiend_count>0)
            {
                $ordercount="[".$value->assiend_count."]";
            }
            else
            {
                $ordercount="";
            }   
            
            


                


           

            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id,'loc_name'=>$loc_name,'ordercount'=>$ordercount,'driver_id' => $value->driver_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name);
            $i++;




        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_with_retail_shop() {
        $status = $_GET['status'];
        $order_base = $_GET['order_base'];
        $vehicle_id = $_GET['vehicle_id'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        
        
        
      
            
        $result = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid,b.order_no,b.payment_mode,b.customer_id,b.delivery_mode,b.id as order_id,b.create_date as trip_end_date,b.create_time as trip_end_time FROM  orders_process as b  WHERE  b.finance_status='4' AND b.selforder=1 GROUP BY b.payment_mode,b.create_date  ORDER BY b.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value)
        {
             
            $array[] = array('no' => $i,  'order_id' => base64_encode($value->groupid),'payment_mode' => $value->payment_mode,  'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time,  'delivery_mode' => $value->delivery_mode,  'count' => count($result));
            $i++;
            
            
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list() { 



        $status = $_GET['status'];
        $order_base = $_GET['order_base'];
        $vehicle_id = $_GET['vehicle_id'];


          $from_date = $_GET['from_date'];
          $to_date = $_GET['to_date'];
        
          
        $sql = "";

        if($from_date!=0)
        {
             $sql .= ' AND  b.create_date BETWEEN  "' . $from_date . '" AND "' . $to_date . '"';
        }
       

        if ($this->session->userdata['logged_in']['access'] == '17') {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql .= ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql .= ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql .= ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        
        
          if($vehicle_id!=0)
          {


          $sql .=" AND b.vehicle_id='" . $vehicle_id . "'";

          }

      


        if($order_base==10000)
        {
            
            $JOIN=' JOIN order_delivery_order_status as ds ON b.id=ds.order_id';

             $result = $this->db->query("SELECT ds.randam_id,b.create_date,b.create_time,b.order_no,b.user_id,ds.km_reading_end,ds.reason,b.delivery_status,ds.assign_date,b.assign_date_time,ds.assign_time,b.customer_id,b.customer_address_id,b.shipping_address,b.delivery_mode,b.id as order_id,ds.trip_end_date,ds.trip_end_time FROM  orders_process as b $JOIN WHERE  ds.finance_status IN ('4') AND ds.reason!='Driver Full Return' AND b.selforder=1   ORDER BY b.id DESC");
        
        }
        else
        {


            $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.vehicle_id';

            
             $result = $this->db->query("SELECT ds.randam_id,b.create_date,b.create_time,b.order_no,b.user_id,ds.km_reading_end,ds.reason,b.delivery_status,ds.assign_date,b.assign_date_time,ds.assign_time,b.customer_id,b.customer_address_id,b.shipping_address,b.delivery_mode,b.id as order_id,ds.trip_end_date,ds.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a $JOIN JOIN orders_process as b ON b.id=ds.order_id LEFT JOIN route as c ON c.id=a.route_id LEFT JOIN driver as d ON d.id=ds.driver_id  WHERE  ds.finance_status IN ('4')  AND b.order_base IN ('1','120','121','21','23','20','11') AND b.md_approved_status IN ('1','0') AND ds.reason!='Driver Full Return' $sql ORDER BY b.id DESC");
        
            
        }

        $rec_type = $_GET['rec_type'];

       if($rec_type == 'return'){
        $result = $this->db->query("SELECT
                b.create_date,
                b.create_time,
                b.order_no,
                b.user_id,
                b.km_reading_end,
                b.reason,
                b.delivery_status,
                b.assign_date,
                b.assign_date_time,
                b.assign_time,
                b.customer_id,
                b.customer_address_id,
                b.shipping_address,
                b.delivery_mode,
                b.id as order_id,
                b.trip_end_date,
                b.trip_end_time,
                c.name as route_name,
                a.vehicle_number as vehicle_number,
                d.phone as driver_phone,
                d.name as driver_name,
                a.id as vehicle_id
            FROM
                vehicle as a
            JOIN
                orders_process as b ON a.id = b.vehicle_id
            LEFT JOIN
                route as c ON c.id = a.route_id
            LEFT JOIN
                driver as d ON d.id = b.driver_id
            LEFT JOIN
                order_sales_return_complaints as oc ON oc.order_no = b.order_no AND oc.km_reading_end_trip = 1
            WHERE
                b.finance_status = '4'
                AND b.order_base IN ('1', '120', '121', '21', '23')
                AND b.md_approved_status IN ('1', '0') $sql
                AND (oc.km_reading_end_trip = 1 OR oc.order_no IS NULL);");

       }
        
        
        $result = $result->result();
        $array = array();
        $i = 1;


       
        foreach ($result as $value) {


            if($value->delivery_status == 1) 
            {
                $delivery_status = "Client Scope";
                $km_reading_end=1;

            }
            else
            {


                $delivery_status = "Zaron Scope";
                $km_reading_end=$value->km_reading_end;


                   $date='2023-05-12';
                   if($value->trip_end_date<$date)
                   {
                        
                     $km_reading_end=1;

                   }

            }

            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $company_name_data="";

            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) 
            {
                $company_name = $csval->company_name;
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $locality = $csval->locality;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }

             
            if($value->customer_address_id>0) 
            {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
            }

            if($value->shipping_address>0) 
            {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
            }

            
            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }


            $loc_name = "";
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
                 $route_id = $valc->route_id;
            }
            
                
           $route_name = "";
           $route = $this->Main_model->where_names('route', 'id', $route_id);
           foreach ($route as $route_v) {
                    $route_name = $route_v->name;
           }
                
          

                  if($value->reason=='Driver Return Order Date confirmed')
                  {

                       $km_reading_end=1;

                  }
                  

                   if($km_reading_end>0)
                   {


                    $array[] = array('no' => $i, 'company_name' => $company_name,'company_name_data' => $company_name_data,'address' => $address,'delivery_status'=>$delivery_status,'delivery_status_no'=>$value->delivery_status,'assign_date' => date('d-M-Y', strtotime($value->assign_date)),'sales_name' => $sales_name,'sales_phone' => $sales_phone, 'phone' => $phone, 'reason' => $value->reason,'order_id' => $value->order_id, 'assign_time' => $value->assign_time, 'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)),'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time,'trip_end_time' => $value->trip_end_time, 'vehicle_id' => $value->vehicle_id,'loc_name' => $loc_name, 'delivery_mode' => $value->delivery_mode, 'route_name' => $route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone,'randam_id' => $value->randam_id, 'driver_name' => $value->driver_name, 'count' => count($result));
                 
                        $i++;

                   }

             


            


        }
        echo json_encode($array);
    }
    public function fetch_data_table_transpot_vehicle_delivered_order_list_assign() {
        $status = $_GET['status'];
        $vehicle_id = $_GET['vehicle_id'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT b.order_no,b.customer_id,b.delivery_mode,b.id as order_id,b.assign_date,b.assign_date_time,b.assign_time,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3'  AND b.vehicle_id='" . $vehicle_id . "' $sql ORDER BY a.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'company_name' => $company_name, 'phone' => $phone, 'order_id' => $value->order_id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->assign_date)), 'trip_end_time' => $value->assign_time, 'vehicle_id' => $value->vehicle_id, 'delivery_mode' => $value->delivery_mode, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => count($result));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function fetch_data_table_transpot_vehicle_delivered_order_list_assign_un_load() 
     {



           $status = $_GET['status'];


        $vehicle_id = $_GET['vehicle_id'];


        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }


          $sql1="";
         
          if($vehicle_id>0)
          {


           $sql1 = " AND ds.vehicle_id='" . $vehicle_id . "'";
         
          }

          $where="";
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.vehicle_id';
          $where .= ' AND ds.dispatch_status=1';
          $where .= ' AND ds.assign_status IN ("11","12")';
          $where .= ' AND ds.finance_status IN ("3")';
          $where .= ' AND ds.dispatch_load_status=0';
      

        $result = $this->db->query("SELECT ds.reason,ds.randam_id,b.delivery_date_time,b.delivery_status,ds.seq_status,b.order_no,ds.trip_id,ds.sort_id,b.route_id,b.customer_id,ds.delivery_mode,b.id as order_id,ds.assign_status,ds.assign_date,b.assign_date_time,ds.assign_time,ds.trip_end_date,ds.trip_end_time,a.vehicle_number as vehicle_number,a.vehicle_name as vehicle_name,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a 
            $JOIN
            JOIN orders_process as b ON b.id=ds.order_id LEFT JOIN driver as d ON d.id=ds.driver_id   WHERE   b.order_base IN ('1','120','121','21','23','20','11')  $sql1 $sql $where  ORDER BY ds.sort_id,ds.seq_status DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
   $trip_id_array=array();

        foreach ($result as $value) 
        {



                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }


                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                
                 $trip_id_array[]=$value->trip_id;

                 if($value->delivery_status==2)
                 {
                      // gg changes for scope task name change
                      $delivery_status='Zaron Scope';
                 }
                 else
                 { 
                    $value->delivery_mode='Full';
                    $delivery_status='Client Scope';
                 }

                 $array[] = array('no' => $i,'reason' => $value->reason,'randam_id' => $value->randam_id,'text_delivery_status' => $delivery_status,'delivery_status' => $value->delivery_status, 'company_name' => $company_name, 'phone' => $phone,'seq_status' => $value->seq_status, 'order_id' => $value->order_id,'trip_id' => $value->trip_id,'sort_id' => $value->sort_id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'trip_end_date' => date('d-m-Y', strtotime($value->assign_date)), 'trip_end_time' => $value->assign_time, 'vehicle_id' => $value->vehicle_id, 'delivery_mode' => $value->delivery_mode,'delivery_date_time'=>$value->delivery_date_time, 'route_name' => $route_name, 'assign_status' => $value->assign_status,'vehicle_number' => $value->vehicle_number,'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => count($result));


            $i++;
        }


$trip_id_array_data=array_unique($trip_id_array);

 $arrayset=array(
        'trip_ids'=>$trip_id_array_data,
        'orders'=>$array

      );


        echo json_encode($arrayset);

        
     }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id_retail() {
        
         $status = $_GET['status'];
         $order_id = $_GET['order_id'];
         $order_id=base64_decode($order_id);
         $order_id=explode(',', $order_id);
         $order_id=implode("','", $order_id);
         
         
         
         
         
         $order_base = $_GET['order_base'];
         $result = $this->db->query("SELECT b.user_id,b.tcs_status,b.tcsamount,b.delivery_mode,b.payment_mode,GROUP_CONCAT(b.id) as groupid,GROUP_CONCAT(b.customer_id) as groupcustomer_id,b.create_date as trip_end_date,b.create_time as trip_end_time FROM  orders_process as b  WHERE  b.finance_status='4' AND b.id IN ('" . $order_id . "') GROUP BY b.payment_mode ORDER BY b.id DESC");
        
        
       
        
        
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            
            $groupcustomer_id=$value->groupcustomer_id;
            $groupcustomer_id=explode(",", $groupcustomer_id);


           

            $groupid=$value->groupid;
            $groupid=explode(",", $groupid);

            $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id IN ('" . $order_id . "')  AND deleteid=0");
            $results = $resultpp->result();
            foreach ($results as $valuep)
            {
                
                $totalamount += round($valuep->rate*$valuep->qty);
                
            }

              

              $tcsamounttotal=0;
             for ($k=0; $k <count($groupcustomer_id) ; $k++)
             { 
                    

                    $customer_id=$groupcustomer_id[$k];
                    $order_id_data=$groupid[$k];







                              $tcsamount=0;
                            $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$order_id_data."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$customer_id."'");
                            $resultset = $resultset->result();




                            $resultsets = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id='".$order_id_data."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$customer_id."'");
                             $resultsets = $resultsets->result();
                             foreach ($resultsets as $salesteam)
                             {

                                     $discountfulltotal=round($salesteam->totalamount,2);
                                   

                             }





                      $tcs_status = $value->tcs_status;
                      $tcsamount= $value->tcsamount;

                      if($tcs_status==1)
                      {

                                    $tcsamount=round($discountfulltotal*0.1/100);

                      }
                      else
                      {

                                    $tcsamount=0;


                        }






                         $tcsamounttotal+=$tcsamount;









                  
              } 





            
            
            $array[] = array('no' => $i, 'order_id' => $value->groupid,'tcsamounttotal' => $tcsamounttotal, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time,  'payment_mode' => $value->payment_mode, 'totalamount' => round($totalamount));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id() {
       $status = $_GET['status'];
        $order_id = $_GET['order_id'];
         $order_base = $_GET['order_base'];
         $randam_id = $_GET['randam_id'];
         
         
         if($order_base==10000)
         {
             
              $JOIN=' JOIN order_delivery_order_status as ds ON b.id=ds.order_id';
              $result = $this->db->query("SELECT ds.return_amount,ds.tcs_amount_get,ds.collection_remarks_2,ds.collection_remarks,b.delivery_status,b.bill_total_rate,b.bill_total_fact,b.bill_total,b.tcsamount,b.tcs_status,b.commission_check,ba.commission_check_fact,b.user_id,b.start_reading_factory,b.end_reading_factory,ds.reason,b.gate_weight,b.roundoff,b.roundoffstatus,b.discount,b.collecttion_id,b.return_excess,ds.km_reading_end,ds.start_reading,b.paricel_mode,b.delivery_mode,b.customer_address_id,b.shipping_address,b.order_no,b.customer_id,b.delivery_charge,a.vehicle_name as vehicle_name,b.payment_mode,b.payment_image,ds.reference_no,b.id as order_id,ds.trip_end_date,ds.trip_end_time, b.create_date FROM  orders_process as b $JOIN  WHERE  ds.finance_status IN ('4','11') AND b.id='" . $order_id . "' AND ds.randam_id='".$randam_id."' ORDER BY b.id DESC");
        
         }
         else
         {

             $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.vehicle_id';
             $result = $this->db->query("SELECT ds.return_amount,ds.tcs_amount_get,ds.collection_remarks_2,ds.collection_remarks,b.delivery_status,b.bill_total_rate,b.bill_total_fact,b.bill_total,b.tcsamount,b.tcs_status,b.commission_check,b.commission_check_fact,b.user_id,b.start_reading_factory,b.end_reading_factory,ds.reason,b.gate_weight,b.roundoff,b.roundoffstatus,b.discount,d.delivery_fixced,d.km_base_charge,b.collecttion_id,ds.return_excess,ds.km_reading_end,ds.start_reading,b.customer_address_id,b.shipping_address,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,ds.reference_no,b.id as order_id,ds.trip_end_date,ds.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,a.vehicle_name as vehicle_name,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a $JOIN JOIN orders_process as b ON b.id=ds.order_id LEFT JOIN route as c ON c.id=a.route_id LEFT JOIN driver as d ON d.id=ds.driver_id  WHERE  ds.finance_status IN ('4','11') AND b.id='" . $order_id . "' AND ds.randam_id='".$randam_id."' ORDER BY a.id DESC");
          
         }
        
         $rec_type = $_GET['rec_type'];

         if($rec_type == 'return'){
          $result = $this->db->query("SELECT
                  b.create_date,
                --   b.create_time,
                  b.order_no,
                  b.user_id,
                  b.km_reading_end,
                --   b.reason,
                  b.delivery_status,
                  b.assign_date,
                --   b.assign_date_time,
                  b.assign_time,
                  b.customer,
                --   b.customer_address_id,
                --   b.shipping_address,
                --   b.delivery_mode,
                  b.id as order_id,
                  b.trip_end_date,
                  b.trip_end_time,
                  c.name as route_name,
                  a.vehicle_number as vehicle_number,
                  d.phone as driver_phone,
                  d.name as driver_name,
                  a.id as vehicle_id
              FROM
                  vehicle as a
              JOIN
              order_sales_return_complaints as b ON a.id = b.vehicle_id
              LEFT JOIN
                  route as c ON c.id = a.route_id
              LEFT JOIN
                  driver as d ON d.id = b.driver_id
             
              WHERE
                  b.finance_status = '4'
                  AND b.order_base IN ('1', '120', '121', '21', '23')
                  AND b.md_approved_status IN ('1', '0') $sql");
  
         }

        //  LEFT JOIN
        //  order_sales_return_complaints as oc ON oc.order_no = b.order_no AND oc.km_reading_end_trip = 1
        // -- AND (oc.km_reading_end_trip = 1 OR oc.order_no IS NULL);
          
          
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {


            $sales_name = "";
             $sales_phone ="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            
            if($order_base==10000)
          {
             
                $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "' AND randam_id='".$randam_id."' AND deleteid=0");
           
          }
          else
          {
                $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "'  AND randam_id='".$randam_id."'AND paricel_mode='" . $paricel_mode . "' AND deleteid=0");
            
         }
            
          
            $loadqty=0;
            $results = $resultpp->result();
            $totalamountload=0;
            $totalamount_withput_commsion=0;
            foreach ($results as $valuep)
            {
                
                    $rate= $valuep->rate+$valuep->commission;
                
                    if($paricel_mode == 1) 
                    {
                        
                        if($valuep->modify_qty==0)
                        {
                            $valuep->modify_qty=$valuep->qty;
                        }
                       
                         $totalamount += round($rate*$valuep->modify_qty,2);

                         $totalamount_withput_commsion += round($valuep->rate*$valuep->modify_qty,2);

                    } else {
                         $totalamount += round($rate*$valuep->qty,2);

                          $totalamount_withput_commsion += round($valuep->rate*$valuep->qty,2);

                    }
                
                
                   
                
                
            }


             $resultload =$this->Main_model->where_names('sales_load_products','randam_id',$randam_id);
                    foreach ($resultload as $valueload)
                    {
                        if($valueload->driver_payment_status==0)
                        {   
                          
                            $loadqty+= $valueload->qty;
                            $totalamountload += round($valueload->rate*$valueload->qty,2);
                        }
                        
                    }

            
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
                $discountfulltotal_without_commsion = $totalamount_withput_commsion - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
                $discountfulltotal_without_commsion = $totalamount_withput_commsion - $discount - $minisroundoff;
            }
            
            
            $tcs_status=$value->tcs_status;
            $tcsamount= $value->tcs_amount_get;
                          


             $discountfulltotal=round($discountfulltotal+$tcsamount,2);
             $discountfulltotal_without_commsion_total=$discountfulltotal_without_commsion+$tcsamount_without_commision;

            
            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);


            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          
                    }
                    else
                    {

                          $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }


            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $company_name_data = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $locality = $csval->locality;
                $company_name = $csval->company_name;
                 $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }


                     if($value->customer_address_id>0) 
            {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
            }

            if($value->shipping_address>0) 
            {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
            }


            $loc_name = "";
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
                 $route_id = $valc->route_id;
            }
            
                
           $route_name = "";
           $route = $this->Main_model->where_names('route', 'id', $route_id);
           foreach ($route as $route_v) {
                    $route_name = $route_v->name;
           }


            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            
            if($value->km_reading_end=='')
            {
                $value->km_reading_end=0;
            }
            
            $totalkm = $value->km_reading_end - $value->start_reading;

            
            $factorykm=0;
            
            if($value->end_reading_factory>0)
            {
                     $factorykm=$value->end_reading_factory-$value->start_reading;
            }
               
            
            if ($totalkm == '') {
                $totalkm = 0;
            }
            

             $totalkm=$totalkm+$factorykm;
            
           
               $result_getfiexed = $this->db->query("SELECT * FROM `driver_charge_fixed` WHERE   `fixed_km_from` <= '".$totalkm."' AND fixed_km >= '".$totalkm."'");
               $result_getfiexed = $result_getfiexed->result();
               if(count($result_getfiexed)>0)
               {
                           $fixed_charge=0;
                           foreach($result_getfiexed as $val)
                           {
                               $fixed_charge=$val->fixed_charge;
                           }
                        
                           $totalcharges=$fixed_charge;
                           
                           
                           $km_base_charge='FIXED';
               }
               else
               {
                   
                        $km_base_charge=$value->km_base_charge;
                       
                        if($loadqty==0)
                        {
                            $totalcharges=$km_base_charge*$totalkm;
                        }
                        else
                        {
                            //$totalcharges=$loadqty*$km_base_charge*$totalkm;
                             $totalcharges=$km_base_charge*$totalkm;

                        }
                     
                   
               }
            
            
             if($totalkm<0)
             {
                  $totalkm="No data";
                  $totalcharges=0;               
             }

             if($value->start_reading<=0)
             {

                  $totalkm="No data Start KM";
                  $totalcharges=0;   

             }


             if($value->delivery_status==1)
             {

                  $totalkm="Client Scope";
                  $totalcharges=0;   

             }


            $value->vehicle_number=$value->vehicle_name.' | '.$value->vehicle_number;

            
            $commision_value=0;
            if($value->commission_check==1)
            {
                    
                   $commision_value=$value->bill_total-$value->bill_total_rate;
                   
            }
           
            if($value->commission_check_fact==1)
            {   
                 $commision_value_fact=$value->bill_total-$value->bill_total_fact;
                 $commision_value=$commision_value_fact;  

            }

          
                    // gg changes collection remarks
                    if($value->collection_remarks>0)
                    {
                        $value->collection_remarks=$value->collection_remarks;
                        $is_collection_remarks=1;
                        $value->return_amount=0;
                    }
                    else
                    {
                     
                        $value->collection_remarks=$value->collection_remarks_2;
                        $is_collection_remarks=0;
                    }
        

           
            $array[] = array('no' => $i,'collection_remarks' => $value->collection_remarks,'gate_weight' => $value->gate_weight,'tcsamount'=>$tcsamount,'loc_name'=>$loc_name,'route_name'=>$route_name,'company_name_data'=>$company_name_data,'reason' => $value->reason, 'totalamountload' => round($totalamountload+$value->tcs_amount_get),'order_id' => $value->order_id,'total_drver_charge' => round($totalcharges,2),'total_driver_kg' => round($loadqty), 'order_no' => $value->order_no, 'company_name' => $company_name, 'phone' => $phone, 'address' => $address, 'sales_name' => $sales_name,'sales_phone' => $sales_phone, 'trip_end_date' => $value->trip_end_date, 'trip_end_time' => $value->trip_end_time,'trip_end_date_view' => $value->trip_end_date, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'driver_id' => $value->driver_id, 'customer_id' => $value->customer_id, 'payment_mode' => $value->payment_mode, 'reference_no' => $value->reference_no, 'delivery_charge' => $value->delivery_charge, 'delivery_fixced' => $value->delivery_fixced, 'km_base_charge' => $km_base_charge, 'return_excess' => $value->return_excess, 'collecttion_id' => $value->collecttion_id, 'payment_image' => $payment_image, 'totalamount' =>$value->bill_total, 'fulltotalamount' =>$value->bill_total,'commision_value'=>round($commision_value), 'totalkm' => $totalkm,'return_amount'=>$value->return_amount,'is_collection_remarks'=>$is_collection_remarks);
            $i++;
        }



        echo json_encode($array);
    }







     public function collection_payment_update()
    {




        date_default_timezone_set("Asia/Kolkata"); 
        $date= date('Y-m-d');
        $time= date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $randam_id = $form_data->randam_id;
        $date=$form_data->payment_date;
        $datass["get_id"] = $form_data->order_id;
        $tablename='orders_process';
        $datass["payment_mode"] = $form_data->payment_mode;
        $datass["collectamount"] = $form_data->collectamount;
        $datass["driver_recived_payment"] = $form_data->collectamount;
        $datass["payment_mode_reconciliation"] = $form_data->payment_mode;

       
        if($form_data->payment_mode!='Cash')
        {
           $datass["driver_recived_payment"]=0;
           //$datass["collectamount"]=0;
           //$this->db->query("DELETE FROM denomination WHERE order_id='".$form_data->order_id."' AND randam_id='".$randam_id."'");
           $this->db->query("UPDATE denomination SET order_id='".$form_data->order_id."-99',randam_id='".$randam_id."-99',trip_id='PAYMENT_MODE_CHANGE' WHERE order_id='".$form_data->order_id."' AND randam_id='".$randam_id."'");
        }


$this->db->query("UPDATE order_delivery_order_status SET 
    payment_mode_reconciliation='".$datass["payment_mode_reconciliation"]."',
    collectamount='".$datass["collectamount"]."',
    driver_recived_payment='".$datass["driver_recived_payment"]."',
    payment_mode='".$datass["payment_mode"]."'
WHERE order_id='".$form_data->order_id."' AND randam_id='".$randam_id."' AND deleteid=0");


          $result_orders = $this->Main_model->where_names("order_delivery_order_status", "randam_id",$form_data->randam_id);
          foreach ($result_orders as  $value) {
                $trip_id = $value->trip_id.$randam_id;
                $driver_id = $value->driver_id;
                $customer_id = $value->customer_id;
                $order_no = $value->order_no;
                $payment_mode_old = $value->payment_mode;
                $delivery_status = $value->delivery_status;
          }



          $datass["payment_mode_old"] = $payment_mode_old;  


          $order_no_set_final=$order_no.$trip_id;

          if($form_data->payment_mode!='Cash')
          {



$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$datass["driver_recived_payment"] =0;


          }
          else
          {



$this->db->query("UPDATE all_ledgers SET deleteid='0',debits='".$form_data->collectamount."' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0',credits='".$form_data->collectamount."' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0',credits='".$form_data->collectamount."' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='0',credit='".$form_data->collectamount."' WHERE deletemod='DRICT-".$order_no_set_final."'");
$datass["driver_recived_payment"] = round($form_data->collectamount,2);


          }


            $company_namec='Sales';
            $sales_team_id=0;
            $resc= $this->Main_model->where_names('customers', 'id', $customer_id);
             foreach ($resc as $valc) {
                    $company_namec = $valc->company_name;
                    $sales_team_id = $valc->sales_team_id;
            }


        $collectamount=$form_data->collectamount;


                            if($collectamount>0)
                            {




                                    $data_address_refer['order_no'] = $order_no;
                                    $data_address_refer['difference'] = 0;
                                    $data_address_refer['reference_no'] = $order_no;
                                    $data_address_refer['order_id'] = 0;
                                    $data_address_refer['customer_id'] = $driver_id;
                                    $data_address_refer["payment_mode"] ='0';
                                    $data_address_refer['user_id'] = $this->userid;
                                    $data_address_refer['account_head_id'] = 52;
                                    $data_address_refer['account_heads_id_2'] = 104;
                                    $data_address_refer['order_trancation_status'] = 0;
                                    $data_address_refer['bank_id'] = 0;
                                    $data_address_refer['credits'] = 0;
                                    $data_address_refer['debits'] = round($collectamount,2);
                                    $data_address_refer['collected_amount'] = $collectamount;
                                    $data_address_refer['payment_date'] = $date;
                                    $data_address_refer['notes'] = 'Reconciliation Received Payment | '.$company_namec;
                                    $data_address_refer['process_by'] = 'Reconciliation Received Payment '.$order_no;
                                    $data_address_refer['payment_time'] = $time;
                                    $data_address_refer['party_type'] = 2;
                                    $data_address_refer['deletemod'] = 'DRI-'.$order_no.$trip_id;

                                           if($form_data->payment_mode=='Cash')
                                           {


                                               
                                                if($delivery_status==2)
                                                {

                     


                                                        $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                                                        if(count($setchek)==0)
                                                        {

                                                             $this->Main_model->insert_commen($data_address_refer, 'all_ledgers');

                                                        }
                                                        else
                                                        {


                                                             $this->db->query("UPDATE all_ledgers SET debits='".round($collectamount,2)."',credits=0 WHERE deletemod='".$data_address_refer['deletemod']."'");


                                                        }


                                                }





                                          }



                                    $data_addressww['order_id'] = 0;
                                    $data_addressww['customer_id'] = $customer_id;
                                    $data_addressww['user_id'] = $this->userid;
                                    $data_addressww['notes'] = 'Order Payment Received By Reconciliation' . $trip_id;
                                    $data_addressww['payment_mode'] = '0';
                                    $data_addressww['order_no'] = $order_no;
                                    $data_addressww['bank_id'] = 25;
                                    $data_addressww['difference'] = 0;
                                    $data_addressww['reference_no'] = $order_no;
                                    $data_addressww['amount'] = round($collectamount,2);
                                    $data_addressww['account_head_id'] = 68;
                                    $data_addressww['account_heads_id_2'] = 116;
                                    $data_addressww['order_trancation_status'] = 0;
                                    $data_addressww['paid_status'] = 1;
                                    $data_addressww['credits'] = round($collectamount,2);
                                    $data_addressww['debits'] = 0;
                                    $data_addressww['collected_amount'] = round($collectamount,2);
                                    $data_addressww['payment_date'] = $date;
                                    $data_addressww['process_by'] = 'Order Payment Received By Reconciliation';
                                    $data_addressww['payment_time'] = $time;
                                    $data_addressww['party_type'] = 1;
                                    $data_addressww['deletemod'] = 'ORPAY'.$order_no.$trip_id;

                           if($form_data->payment_mode=='Cash')
                           {



                                    $setchek1 = $this->Main_model->where_names('all_ledgers','deletemod',$data_addressww['deletemod']);
                                    if(count($setchek1)==0)
                                    {
                                        

                         $this->Main_model->insert_commen($data_addressww, 'all_ledgers');


                                    }
                                    else
                                    {


                            $this->db->query("UPDATE all_ledgers SET credits='".round($collectamount,2)."',debits=0 WHERE deletemod='".$data_addressww['deletemod']."'");


                                    }

                                }


                            }







        $this->Main_model->update_commen($datass, $tablename);





    }





    public function reconciliation_trip_group_details()
    {
        

         $tripid = $_GET["tripid"];

        $array = [];
          $JOIN=' JOIN order_delivery_order_status as ds ON b.id=ds.order_id';
        if ($tripid!='0') {

 // gg changes to comment for collection remarks

         /*   $result = $this->db->query(
                "SELECT SUM(ds.collection_remarks_2) as bill_total,SUM(ds.collection_remarks_2) as collection_remarks,b.delivery_status,SUM(b.bill_total_rate) as bill_total_rate,SUM(b.bill_total_fact) as bill_total_fact,SUM(b.commission_check) as commission_check,SUM(b.commission_check_fact) as commission_check_fact,b.collecttion_id,ds.randam_id,ds.payment_mode,SUM(ds.return_excess) as return_excess,SUM(ds.driver_recived_payment) as driver_recived_payment,SUM(b.delivery_charge) as delivery_charge,ds.km_reading_end as km_reading_end,ds.start_reading as start_reading,d.km_base_charge,b.id as order_id,a.vehicle_number as vehicle_number,b.trip_end_date,a.vehicle_name as vehicle_name,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id,ds.toll_charge,ds.localorlong,ds.deliver_count,ds.rent_approval, b.create_date,ds.return_amount FROM  orders_process as b $JOIN LEFT JOIN vehicle as a ON a.id=ds.vehicle_id LEFT JOIN driver as d ON d.id=ds.driver_id  WHERE  ds.finance_status IN ('4','11') AND ds.trip_id='" .
                    $tripid .
                    "' GROUP BY ds.trip_id"
            );
*/


            $result = $this->db->query(
                "SELECT 
                    SUM(CASE WHEN ds.collection_remarks = 0 THEN ds.collection_remarks_2 ELSE ds.collection_remarks END) as bill_total,
                    SUM(CASE WHEN ds.collection_remarks = 0 THEN ds.collection_remarks_2 ELSE ds.collection_remarks END) as collection_remarks,
                    ds.collection_remarks as collection_remarks_edit,
                    b.delivery_status,
                    SUM(b.bill_total_rate) as bill_total_rate,
                    SUM(b.bill_total_fact) as bill_total_fact,
                    SUM(b.commission_check) as commission_check,
                    SUM(b.commission_check_fact) as commission_check_fact,
                    b.collecttion_id,
                    ds.randam_id,
                    ds.payment_mode,
                    SUM(ds.return_excess) as return_excess,
                    SUM(ds.driver_recived_payment) as driver_recived_payment,
                    SUM(b.delivery_charge) as delivery_charge,
                    ds.km_reading_end as km_reading_end,
                    ds.start_reading as start_reading,
                    d.km_base_charge,
                    b.id as order_id,
                    a.vehicle_number as vehicle_number,
                    b.trip_end_date,
                    a.vehicle_name as vehicle_name,
                    d.id as driver_id,
                    d.phone as driver_phone,
                    d.name as driver_name,
                    a.id as vehicle_id,
                    ds.toll_charge,
                    ds.localorlong,
                    ds.deliver_count,
                    ds.rent_approval,
                    b.create_date,
                    ds.return_amount
                FROM 
                    orders_process as b
                    $JOIN 
                    LEFT JOIN vehicle as a ON a.id = ds.vehicle_id
                    LEFT JOIN driver as d ON d.id = ds.driver_id
                WHERE 
                    ds.finance_status IN ('4', '11') 
                    AND ds.trip_id = '" . $tripid . "'
                GROUP BY 
                    ds.trip_id"
            );

            $result = $result->result();

            $i = 1;
            foreach ($result as $value) {  
                $resultpp = $this->db->query(
                    "SELECT a.id FROM order_product_list_process as a JOIN orders_process as b ON a.order_id=b.id WHERE 
                    b.trip_id='" . $tripid . "' AND a.randam_id='".$value->randam_id."' AND a.deleteid=0"
                       
                       
                );

                $loadqty = 0;
                $results = $resultpp->result();
                $totalamountload = 0;
                $totalamount_withput_commsion = 0;
                foreach ($results as $valuep) {
                    $resultload = $this->Main_model->where_names_two_order_by(
                        "sales_load_products",
                        "order_product_id",
                        $valuep->id,
                        "delivered_products",
                        "1",
                        "id",
                        "ASC"
                    );

                    foreach ($resultload as $valueload) {
                        if ($valueload->driver_payment_status == 0) {
                            $loadqty += $valueload->qty;
                        }
                    }
                }

                if ($value->km_reading_end == "") {
                    $value->km_reading_end = 0;
                }

               $totalkm = $value->km_reading_end - $value->start_reading;



                if ($totalkm == "") {
                    $totalkm = 0;
                }

                $totalkm = $totalkm;

                $result_getfiexed = $this->db->query(
                    "SELECT * FROM `driver_charge_fixed` WHERE   `fixed_km_from` <= '" .
                        $totalkm .
                        "' AND fixed_km >= '" .
                        $totalkm .
                        "'"
                );
                $result_getfiexed = $result_getfiexed->result();
                if (count($result_getfiexed) > 0) {
                    $fixed_charge = 0;
                    foreach ($result_getfiexed as $val) {
                        $fixed_charge = $val->fixed_charge;
                    }

                    $totalcharges = $fixed_charge;

                    $km_base_charge = "FIXED";
                } else {
                    $km_base_charge = $value->km_base_charge;

                    if ($loadqty == 0) {
                        $totalcharges = $km_base_charge * $totalkm;
                    } else {
                        //$totalcharges=$loadqty*$km_base_charge*$totalkm;
                        $totalcharges = $km_base_charge * $totalkm;
                    }
                }

                // if($value->rent_approval>0){
                //     //rent calculation starts here
                //     $localorlong = $value->localorlong;
                //     $trip_km = $totalkm;
                //     $local_price = '25';
                //     $no_order_delivery = $value->deliver_count;
                //     $toll_charge = $value->toll_charge;
                //     $category_charge = 0;
                
                //     $totalcharges = ($trip_km * $localorlong) + ( $no_order_delivery * $local_price) + $toll_charge + $category_charge;
                // }else{
                //     $totalcharges = '0';
                // }

                if ($totalkm < 0) {
                    $totalkm = "No data";
                    $totalcharges = 0;
                }

                if ($value->start_reading <= 0) {
                    $totalkm = "No data Start KM";
                    $totalcharges = 0;
                }

                 if($value->delivery_status==1)
                 {

                      $totalkm="Client Scope";
                      $totalcharges=0;   

                 }


                $commision_value = 0;
                if ($value->commission_check == 1) {
                    $commision_value =
                        $value->bill_total - $value->bill_total_rate;
                }

                if ($value->commission_check_fact == 1) {
                    $commision_value_fact =
                        $value->bill_total - $value->bill_total_fact;
                    $commision_value = $commision_value_fact;
                }


if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 

      // gg changes for collection remarls edit return restrict

      if($value->collection_remarks_edit > 0) {
        $value->return_amount=0;
    }


                

                $array[] = [
                    "no" => $i,
                    "return_amount"=>$value->return_amount,
                    "totalamount" => round($value->bill_total_rate),
                    "collection_remarks" => round($value->collection_remarks),
                    "tripid" => $tripid,
                    "payment_mode" => $value->payment_mode,
                    "vichalnumber" => $value->vehicle_number,
                    "commision_value" => $commision_value,
                    "driver_phone" => $value->driver_phone,
                    "drivename" => $value->driver_name,
                    "return_excess" => $value->return_excess,
                    "trip_end_date" => $value->trip_end_date,
                    "collecttion_id" => $value->collecttion_id,
                    "driver_recived_payment" => $value->driver_recived_payment,
                    "delivery_charge" => $value->delivery_charge,
                    "delivery_fixced" => $value->delivery_fixced,
                    "km_base_charge" => $km_base_charge,
                    "total_drver_charge" => round($totalcharges, 2),
                    "total_driver_kg" => round($loadqty),
                    "totalcharges" => $totalcharges,
                    "totalkm" => $totalkm,
                    "toll_charge" => $value->toll_charge,
                    "localorlong" => $localorlong,
                    "no_order_delivery" => $no_order_delivery,
                ];

                $i++;
            }
        }

        echo json_encode($array);

    }










    
    
      public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id_by_view() {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        
        $order_base = $_GET['order_base'];
        
        
        
        if($order_base==10000)
        {
                $result = $this->db->query("SELECT b.bill_total,b.tcsamount,b.commission_check,b.commission_check_fact,b.bill_total_rate,b.bill_total_fact,b.weight,b.tcs_status,b.user_id,b.roundoff,b.start_reading_factory,b.end_reading_factory,b.roundoffstatus,b.discount,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_address_id,b.shipping_address,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time FROM  orders_process as b  WHERE  b.finance_status IN ('5','4') AND b.id='" . $order_id . "' ORDER BY b.id DESC");
      
        }
        else
        {
             $result = $this->db->query("SELECT b.bill_total,b.tcsamount,b.commission_check,b.commission_check_fact,b.bill_total_rate,b.bill_total_fact,b.weight,b.tcs_status,b.user_id,b.roundoff,b.start_reading_factory,b.end_reading_factory,b.roundoffstatus,b.discount,d.delivery_fixced,d.km_base_charge,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.customer_address_id,b.shipping_address,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id, b.create_date FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id LEFT JOIN route as c ON c.id=a.route_id LEFT JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status IN ('5','4') AND b.id='" . $order_id . "' ORDER BY a.id DESC");
         
        }
        
        
     
       
       
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            $totalamountload=0;
            $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "' AND paricel_mode='" . $paricel_mode . "' AND deleteid=0");
            $results = $resultpp->result();
            foreach ($results as $valuep) {
                
                if ($paricel_mode == 1)
                {
                    
                     if($valuep->modify_qty==0)
                    {
                        $valuep->modify_qty=$valuep->qty;
                    }
                   
                    $totalamount += round($valuep->rate*$valuep->modify_qty);
                } 
                else 
                {
                     $totalamount += round($valuep->rate*$valuep->qty);
                }
                
                
                
                      $resultload =$this->Main_model->where_names_two_order_by('sales_load_products','order_product_id',$valuep->id,'delivered_products','1','id','ASC');
                    
                    foreach ($resultload as $valueload)
                    {
                        if($valueload->driver_payment_status==1)
                        {
                          
                           
                            $totalamountload += round($valueload->rate*$valueload->qty);
                        }
                        
                    }
                
                
                
                
                
                
            }
            
            
            
            
            
       
            
            
            
            
              $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM order_product_list_process  WHERE order_id='".$value->id."' AND deleteid=0");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
            
            
            
            
            
            
            
            
            if($value->weight==0)
            {
                $weight=0;
            }
            else
            {
               $weight=$value->weight; 
            }
            
            
            


            


   $tcs_status=$value->tcs_status;
   $tcsamount=$value->tcsamount;                     



            $tcsamount=0;


              







          






            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $locality = $csval->locality;
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }







            if($value->customer_address_id>0) 
            {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        //$company_name = $customers_adddrss_v->name;
                        //$phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
            }

            if($value->shipping_address>0) 
            {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        //$company_name = $customers_adddrss_v->name;
                        //$phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
            }




            $loc_name = "";
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
                 $route_id = $valc->route_id;
            }
            
                


           $route_name = "";
           $route = $this->Main_model->where_names('route', 'id', $route_id);
           foreach ($route as $route_v) {
                    $route_name = $route_v->name;
           }





            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $totalkm = $value->km_reading_end - $value->start_reading;



            $factorykm=0;


            if($value->end_reading_factory>0)
            {
                      $factorykm=$value->end_reading_factory-$value->start_reading;
            }
               



              $totalkm=$totalkm+$factorykm;





            if ($totalkm == '') {
                $totalkm = 0;
            }

           
              if($totalkm<0)
              {
                  $totalkm="No data";
                  $totalcharges=0;
              }






            $creditsvalue=0;
            $query_amount = $this->db->query("SELECT * FROM all_ledgers  WHERE order_no='".$value->order_no."' AND deleteid=0 AND credits>0 AND party_type=1");
            $query_amount = $query_amount->result();
            foreach ($query_amount as $getamount) {
                $creditsvalue+= $getamount->credits;
            }


            

             $discountfulltotal=$value->bill_total;
            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value = $value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =
                    $value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }

if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 

            $array[] = array('no' => $i,'creditsvalue' => $creditsvalue,'commision_value' => $commision_value,  'totalamountload' => $totalamountload,'base_id' => base64_encode($value->order_id),'order_id' => $value->order_id, 'lengeth' => $lengeth,'weight' =>round($weight,2),'order_no' => $value->order_no, 'company_name' => $company_name, 'phone' => $phone, 'address' => $address, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'driver_id' => $value->driver_id, 'customer_id' => $value->customer_id, 'payment_mode' => $value->payment_mode, 'reference_no' => $value->reference_no, 'delivery_charge' => $value->delivery_charge, 'delivery_fixced' => $value->delivery_fixced, 'km_base_charge' => $value->km_base_charge, 'return_excess' => $value->return_excess, 'collecttion_id' => $value->collecttion_id, 'payment_image' => $payment_image, 'totalamount' => round($discountfulltotal,2), 'fulltotalamount' => round($discountfulltotal + $value->delivery_charge), 'totalkm' => $totalkm);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id_assign() {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $result = $this->db->query("SELECT b.tcsamount,b.assign_date,b.tcs_status,b.assign_time,b.user_id,b.start_reading_factory,b.end_reading_factory,b.roundoff,b.roundoffstatus,b.discount,d.delivery_fixced,d.km_base_charge,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3' AND b.id='" . $order_id . "' ORDER BY a.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "' AND paricel_mode='" . $paricel_mode . "' AND deleteid=0");
            $results = $resultpp->result();
            foreach ($results as $valuep) {
                if ($paricel_mode == 1)
                {
                    
                     if($valuep->modify_qty==0)
                    {
                        $valuep->modify_qty=$valuep->qty;
                    }
                   
                    $totalamount += round($valuep->rate*$valuep->modify_qty);
                } 
                else 
                {
                     $totalamount += round($valuep->rate*$valuep->qty);
                }
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }





   $tcs_status=$value->tcs_status;
   $tcsamount=$value->tcsamount;                           


             $tcsamount=0;


                   if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {


        
            // $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$value->order_id."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$value->customer_id."'");
            // $resultset = $resultset->result();
       
            // foreach ($resultset as $set)
            //      {
                  
            //                   $tcsamountval=round($set->totalamount,2);
            //                   $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
            //                   if($tcsamountvaldata>5000000)
            //                   {
            //                       $tcsamount=round($discountfulltotal*0.1/100);
            //                   }
            //                   $tcsamount=0;
                    
                   
            //      }

                 $tcsamount=0;


             }






             $discountfulltotal=$discountfulltotal+$tcsamount;




          $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



         
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                          $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }










            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $totalkm = $value->km_reading_end - $value->start_reading;






            $factorykm=0;
            if($value->end_reading_factory>0)
            {
                      $factorykm=$value->end_reading_factory-$value->start_reading;
            }
               



  $totalkm=$totalkm+$factorykm;



            if ($totalkm == '') {
                $totalkm = 0;
            }


              if($totalkm<0)
              {
                  $totalkm="No data";
                  $totalcharges=0;
              }
            




            $array[] = array('no' => $i, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'company_name' => $company_name, 'phone' => $phone, 'address' => $address, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->assign_date)), 'trip_end_time' => $value->assign_time, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'driver_id' => $value->driver_id, 'customer_id' => $value->customer_id, 'payment_mode' => $value->payment_mode, 'reference_no' => $value->reference_no, 'delivery_charge' => $value->delivery_charge, 'delivery_fixced' => $value->delivery_fixced, 'km_base_charge' => $value->km_base_charge, 'return_excess' => $value->return_excess, 'collecttion_id' => $value->collecttion_id, 'payment_image' => $payment_image, 'totalamount' => round($discountfulltotal,2), 'fulltotalamount' => round($discountfulltotal + $value->delivery_charge), 'totalkm' => $totalkm);
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_table_transpot_vehicle_delivered() {
        
        
        $status = $_GET['status'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')'; 
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }


        $result = $this->db->query("SELECT count(b.order_no) as cordercount,c.name as route_name,a.vehicle_name as vehicle_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN order_delivery_order_status as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='4' AND b.order_base>0   AND b.deleteid=0 AND b.km_reading_end>0 AND b.reconcilation_status=0 $sql GROUP BY b.vehicle_id  ORDER BY a.id ASC");
        $result = $result->result();


        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => $value->cordercount);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_assign() {
        $status = $_GET['status'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
             
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT count(b.order_no) as cordercount,c.name as route_name,a.vehicle_name as vehicle_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3'  $sql GROUP BY b.vehicle_id  ORDER BY a.id ASC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => $value->cordercount);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
     public function fetch_data_table_transpot_vehicle_assign_un_load() {
        $status = $_GET['status'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }


        $JOIN=' JOIN order_delivery_order_status as ds ON b.id=ds.order_id';
        $result = $this->db->query("SELECT b.delivery_status,count(b.order_no) as cordercount,SUM(ds.seq_status) as seq_status_tot,a.vehicle_name as vehicle_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM orders_process as b $JOIN JOIN vehicle as a ON a.id=ds.vehicle_id   LEFT JOIN driver as d ON d.id=ds.driver_id  WHERE  ds.finance_status='3' AND ds.assign_status IN ('11','12') AND  b.order_base>0 AND ds.dispatch_load_status=0 $sql GROUP BY ds.vehicle_id  ORDER BY a.id ASC");




        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {


            $bgcolor="";
            $seq_status_tot=$value->seq_status_tot;
            if($seq_status_tot==0)
            {
                if($value->delivery_status==1)
                {
                          $bgcolor="bggreen";
                }
                else
                {
                    $bgcolor="bgred";
                } 

                
            }
            else
            {
                 $bgcolor="bggreen";
            }


            $array[] = array('no' => $i,'bgcolor' => $bgcolor, 'vehicle_id' => $value->vehicle_id,  'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => $value->cordercount);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    public function cash_mode() 
    {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $sql="";
        if(isset($_GET['randam_id']))
        {
            $randam_id = $_GET['randam_id'];
            if($randam_id!='')
            {
                if($randam_id!='undefined')
                {

                    $sql=' AND randam_id="'.$randam_id.'"';

                }
                
            }
            
        }
        
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $order_id . "'  $sql   GROUP BY order_id ORDER BY id DESC");
        $result = $result->result();
        $collecttion_id = 0;
        $resultss = $this->db->query("SELECT * FROM orders_process WHERE  id='" . $order_id . "' ORDER BY id DESC");
        $resultss = $resultss->result();
        foreach ($resultss as $value) {
            $collecttion_id = $value->collecttion_id;
            $return_excess = $value->return_excess;
        }
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
           
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            if ($collecttion_id == 1) {
                $denomination_total = $denomination_total - $return_excess;
            }
            $array = array('no' => $i, 'order_id' => $value->order_id, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            

        }
        echo json_encode($array);
    }
    
    
    
    
    public function cash_mode_reconciliation() {
      $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $randam_id = $_GET['randam_id'];
        
        
        $denomination_totalexe=0;
        $resultexest = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=1 AND randam_id='".$randam_id."'  GROUP BY order_id ORDER BY id DESC");
        $resultexe = $resultexest->result();
         foreach ($resultexe as $valuess) {
             
             
            if($valuess->c1rs=='')
            {
                $valuess->c1rs=0;
            }
            
            if($valuess->c2rs=='')
            {
                $valuess->c2rs=0;
            }
            
            if($valuess->c5rs=='')
            {
                $valuess->c5rs=0;
            }
             
            if($valuess->c10rs=='')
            {
                $valuess->c10rs=0;
            }
            
            
            if($valuess->c20rs=='')
            {
                $valuess->c20rs=0;
            }
            
             if($valuess->c50rs=='')
            {
                $valuess->c50rs=0;
            }
            
            
            if($valuess->c100rs=='')
            {
                $valuess->c100rs=0;
            }
            
            if($valuess->c200rs=='')
            {
                $valuess->c200rs=0;
            }
            
            
              if($valuess->c500rs=='')
            {
                $valuess->c500rs=0;
            }
            
            
            if($valuess->c2000rs=='')
            {
                $valuess->c2000rs=0;
            }
            
            
            $denomination_totalexe = 1 * $valuess->c1rs + 2 * $valuess->c2rs + 5 * $valuess->c5rs + 10 * $valuess->c10rs + 20 * $valuess->c20rs + 50 * $valuess->c50rs + 100 * $valuess->c100rs + 200 * $valuess->c200rs + 500 * $valuess->c500rs + 2000 * $valuess->c2000rs;
           
             
         }
        
        
        //$result = $this->db->query("SELECT * FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=0 ORDER BY id DESC");
        //$result = $result->result();
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=0 AND randam_id='".$randam_id."' GROUP BY order_id ORDER BY id DESC");
        $result = $result->result();
        
        
        $collecttion_id = 0;
        $return_excess=0;
        $collection_remarks=0;
        $resultss = $this->db->query("SELECT * FROM orders_process WHERE  id='" . $order_id . "' ORDER BY id DESC");
        $resultss = $resultss->result();
        foreach ($resultss as $value) {
            $collecttion_id = $value->collecttion_id;
            $return_excess = $value->return_excess;
            $collection_remarks = $value->collection_remarks;
        }
        
        
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            if ($collecttion_id == 1) {
                $denomination_total = $denomination_total - $return_excess;
            }
            
            $Fulltotal=$denomination_totalexe+$denomination_total;
            $array = array('no' => $i, 'order_id' => $value->order_id,'alreadycollected'=>$denomination_totalexe,'denomination_totalexe'=>$Fulltotal, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function cash_mode_reconciliation_group() {
        $tripid = $_GET['tripid'];
        
         $order_ids=array();
         $customers= $this->Main_model->where_names('order_delivery_order_status', 'trip_id', $tripid);
         foreach ($customers as $csval) 
         {
                    

                     $order_ids[]= $csval->order_id;

                   
         }
        

        $order_ids=implode("','", $order_ids);
        
        
        $denomination_totalexe=0;
        $resultexest = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  trip_id IN ('" . $tripid . "') AND delivery_status=1");
        $resultexe = $resultexest->result();
         foreach ($resultexe as $valuess) {
             
             
            if($valuess->c1rs=='')
            {
                $valuess->c1rs=0;
            }
            
            if($valuess->c2rs=='')
            {
                $valuess->c2rs=0;
            }
            
            if($valuess->c5rs=='')
            {
                $valuess->c5rs=0;
            }
             
            if($valuess->c10rs=='')
            {
                $valuess->c10rs=0;
            }
            
            
            if($valuess->c20rs=='')
            {
                $valuess->c20rs=0;
            }
            
             if($valuess->c50rs=='')
            {
                $valuess->c50rs=0;
            }
            
            
            if($valuess->c100rs=='')
            {
                $valuess->c100rs=0;
            }
            
            if($valuess->c200rs=='')
            {
                $valuess->c200rs=0;
            }
            
            
              if($valuess->c500rs=='')
            {
                $valuess->c500rs=0;
            }
            
            
            if($valuess->c2000rs=='')
            {
                $valuess->c2000rs=0;
            }
            
            
            $denomination_totalexe = 1 * $valuess->c1rs + 2 * $valuess->c2rs + 5 * $valuess->c5rs + 10 * $valuess->c10rs + 20 * $valuess->c20rs + 50 * $valuess->c50rs + 100 * $valuess->c100rs + 200 * $valuess->c200rs + 500 * $valuess->c500rs + 2000 * $valuess->c2000rs;
           
             
         }
        
        
        //$result = $this->db->query("SELECT * FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=0 ORDER BY id DESC");
        //$result = $result->result();
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  trip_id IN ('" . $tripid . "') AND delivery_status=0");
        $result = $result->result();
        
        
        $collecttion_id = 0;
        $return_excess=0;
         $collection_remarks=0;
        $resultss = $this->db->query("SELECT SUM(return_excess) as return_excess,SUM(collection_remarks) as collection_remarks,collecttion_id FROM orders_process WHERE  id IN ('" . $order_ids . "') ORDER BY id DESC");
        $resultss = $resultss->result();
        foreach ($resultss as $value) {
            $collecttion_id = $value->collecttion_id;
            $return_excess = $value->return_excess;
            $collection_remarks = $value->collection_remarks;
        }
        
        
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            if ($collecttion_id == 1) {
                $denomination_total = $denomination_total - $return_excess;
            }
            
            $Fulltotal=$denomination_totalexe+$denomination_total;
            $array = array('no' => $i, 'order_id' => $value->order_id,'collection_remarks'=>$collection_remarks,'alreadycollected'=>$denomination_totalexe,'denomination_totalexe'=>$Fulltotal, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
     public function cash_mode_retails()
     {
         
         
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $order_id=base64_decode($order_id);
        $order_id=explode(',', $order_id);
        $order_id=implode("','", $order_id);
        
        
        
        
        
        $denomination_totalexe=0;
        $resultexest = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id IN ('" . $order_id . "')   ORDER BY id DESC");
        $resultexe = $resultexest->result();
         foreach ($resultexe as $valuess) {
             
             
               
            if($valuess->c1rs=='')
            {
                $valuess->c1rs=0;
            }
            
            if($valuess->c2rs=='')
            {
                $valuess->c2rs=0;
            }
            
            if($valuess->c5rs=='')
            {
                $valuess->c5rs=0;
            }
             
            if($valuess->c10rs=='')
            {
                $valuess->c10rs=0;
            }
            
            
            if($valuess->c20rs=='')
            {
                $valuess->c20rs=0;
            }
            
             if($valuess->c50rs=='')
            {
                $valuess->c50rs=0;
            }
            
            
            if($valuess->c100rs=='')
            {
                $valuess->c100rs=0;
            }
            
            if($valuess->c200rs=='')
            {
                $valuess->c200rs=0;
            }
            
            
              if($valuess->c500rs=='')
            {
                $valuess->c500rs=0;
            }
            
            
            if($valuess->c2000rs=='')
            {
                $valuess->c2000rs=0;
            }
            
            
           
            
            $denomination_totalexe = 1 * $valuess->c1rs + 2 * $valuess->c2rs + 5 * $valuess->c5rs + 10 * $valuess->c10rs + 20 * $valuess->c20rs + 50 * $valuess->c50rs + 100 * $valuess->c100rs + 200 * $valuess->c200rs + 500 * $valuess->c500rs + 2000 * $valuess->c2000rs;
           
             
         }
        
        
        
        
        
        
        
        
   
   
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id IN ('" . $order_id . "')  ORDER BY id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
           
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            $Fulltotal=$denomination_totalexe+$denomination_total;
            $array = array('no' => $i, 'order_id' => $value->order_id,'alreadycollected'=>$denomination_totalexe,'denomination_totalexe'=>$Fulltotal, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            

        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_driver() {
        $route_id = $_GET['route_id'];
        $result = $this->db->query("SELECT * FROM driver  WHERE deleteid=0  ORDER BY name ASC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'name' => $value->name, 'phone' => $value->phone);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data() 
    {

               $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id=0;
        $where='';
         if($_GET['route_id']>0)
        {
             $route_id = $_GET['route_id'];
            
        }
       
        $assigen_status = $_GET['assaignstates'];
        $dateval = $_GET['dateval'];
        $dateval2 = $_GET['dateval2'];


        $i = 1;
        $array = array();
        if ($route_id > 0) {
             $order_base = 3;
             $where.=" AND a.route_id='".$route_id."'";
        }
        
         $driver_id = $_GET['driver_id'];
        if ($driver_id > 0) {
             $order_base = 3;
             $where.=" AND ds.driver_id='".$driver_id."'";
        }


        $vehicle_id = $_GET['vehicle_id'];
        if ($vehicle_id > 0) {
             $order_base = 3;
             $where.=" AND ds.vehicle_id='".$vehicle_id."'";
        }
        
        
                    if($this->session->userdata['logged_in']['access']==12)
                    {

                           $where.=" AND a.user_id='".$this->userid."'";
                    }

        
        $search = $_GET['search'];
        $limit="";
        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
                    $where.=" AND a.finance_status > 0 AND a.assign_status > 0 AND a.selforder=0";

                    $where .= " AND a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%'  OR d.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR r.name LIKE '%" . $search . "%' $sales_search";
                   $limit="LIMIT 0,10";
            
        }
        else
        {

            if($driver_id==0 && $route_id==0)
            {
                
            
            $where.=" AND ds.assign_date BETWEEN '".$dateval."' AND '".$dateval2."'";
            
            }

             if($assigen_status==11)
            {
               
               $where.=" AND ds.finance_status > 0 AND ds.assign_status IN ('11') AND a.selforder=0";
             
            }
            else
            {
                $where.=" AND ds.finance_status > 0 AND ds.assign_status=".$assigen_status." AND a.selforder=0";
            }

            $limit="LIMIT 0,10";
        }




          $JOIN="";
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
          $where .= ' AND ds.dispatch_status=1';


        
          // gg changes scope task
        
          $query = $this->db->query(" SELECT a.*,
          ds.reason as reason_last,
          ds.randam_id as randam_id,
          ds.sort_id as sort_id_last,
          ds.collection_remarks as collection_remarks_final,
          ds.assign_status as assign_status_last,
          ds.finance_status as finance_status_last,
          ds.seq_status as seq_status_last,
          ds.driver_id as driver_id_last,
          ds.vehicle_id as vehicle_id_last,
          ds.trip_id as trip_id_last,
          ds.assign_date as assign_date_last,
          ds.assign_time as assign_time_last FROM $tablename as a $JOIN LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id LEFT JOIN route as r ON a.route_id=r.id WHERE a.deleteid='0' AND a.order_base='1' AND  ds.delivery_status='1'  $where ORDER BY a.sort_id ASC $limit");
      $result = $query->result();
        
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
           
            $route_id_base = $value->route_id;
           
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $locality=0;
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $locality = $csval->locality;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
               

                if ($value->customer_address_id>0) 
                {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }


                 if ($value->shipping_address>0) 
                {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                    {
                        $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }


                $vehicle_number = "";
                $vehicle_name = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id_last);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_name = $vehicle_v->vehicle_name;
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
               
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }


                $loc_name = "";
           
                $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
                foreach ($loc_name_id as $valc) {
                  
                    $loc_name = $valc->name;
                     $route_id = $valc->route_id;
                }


                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
            
                
                $assigen_status=$value->assign_status_last;
                if ($assigen_status == '11') {
                    $statusval = "Dispatch Ready";
                }
                if ($assigen_status == '12') {
                    $statusval = "Dispatch Loaded";
                }
                if ($assigen_status == '13') {
                    $statusval = "Partial Loaded";
                }
                if ($assigen_status == '1') {
                    $statusval = "Driver Picked";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                 if ($value->finance_status_last == '5') {
                    $statusval = "Reconciliation Completed";
                }
                if ($assigen_status == '8') {
                    $statusval = "Driver Re-scheduled";
                }
                if ($assigen_status == '0') {
                    $statusval = "Not Assigned";
                }
                
                
            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
               
           $tcs_status=$value->tcs_status;
           $tcsamount=$value->tcsamount;
           $discountfulltotal=$value->bill_total;


            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value =$value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =$value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 

            if($value->order_base>0)
            {


                $array[] = array('no' => $i,'loc_name'=>$loc_name,'sales_name' => $sales_name,'sales_phone' => $sales_phone, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'vehicle_name' => $vehicle_name, 'totalamount' => round($discountfulltotal,2), 'tcs_status' => round($tcs_status),'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'randam_id' => $value->randam_id,'reason' => $value->reason_last, 'assign_status' => $value->assign_status_last, 'sort_id' => $value->sort_id_last, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'assigen_status' => $assigen_status,'statusval' => $statusval, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->assign_date_last)), 'create_time' => $value->assign_time_last);


            }


            $i++;
        }
        echo json_encode($array);


        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_return() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id=0;
        $where='';
         if($_GET['route_id']!='')
        {
             $route_id = $_GET['route_id'];
            
        }
       
        $assigen_status = $_GET['assaignstates'];
        $dateval = $_GET['dateval'];
        $dateval2 = $_GET['dateval2'];
        $i = 1;
        $array = array();
        if ($route_id > 0) {
             $order_base = 3;
             $where.=" AND a.route_id='".$route_id."'";
        }
        
        
      
        
        
      
        $search = $_GET['search'];
        $limit="";
        if($search != "") 
        {
            
            $where.=" AND a.order_base > 0";
            $where .= " AND a.re_order_no LIKE '%" . $search . "' OR c.company_name LIKE '%" . $search . "%'  OR d.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' $sales_search";
            
             $limit="LIMIT 0,10";
        }
        else
        {

                if($route_id==0)
                {
                    
                
                $where.=" AND a.assign_date BETWEEN '".$dateval."' AND '".$dateval2."'";
                
                }


                if($assigen_status==11)
                {
                    $where.=" AND a.order_base > 0";
                }
                else
                {
                    $where.=" AND a.order_base='".$assigen_status."'";
                }
       
                 $limit="LIMIT 0,10";
        }
        
        
        $query = $this->db->query("SELECT a.sort_id,a.re_order_no,a.user_id,a.driver_assign,a.assign_date,a.assign_time,a.order_no,a.vehicle_id,a.driver_id,a.order_base,a.id,c.company_name,c.phone,a.route_id,a.order_id,c.id as customer_id,a.create_date  FROM order_sales_return_complaints as a  JOIN customers as c ON a.customer=c.id   JOIN driver as d ON a.driver_id=d.id  JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'  $where ORDER BY a.id DESC  $limit");
        $result = $query->result();
        
        
  
        
        
        
        
        
       
        foreach ($result as $value) {
           
           
           
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."' AND deleteid=0");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess) {
                        $totalamount += round($valuess->qty*$valuess->rate,2);
                }
                    
            
            
                $route_id_base = $value->route_id;
           
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;

            $locality = $csval->locality;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle_name = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_name = $vehicle_v->vehicle_name;
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                
                $assigen_status=$value->order_base;
                if ($assigen_status == '1') {
                    $statusval = "Assigned to Retrun";
                }
                if ($assigen_status == '4') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '5') {
                    $statusval = "Retrun Inward";
                }
                if ($assigen_status == '2') {
                    $statusval = "Retrun Approved";
                }
                if ($assigen_status == '3') {
                    $statusval = "Retrun Rejected";
                }
                 







                                                   $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            


    $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            








                
                
                $array[] = array('no' => $i, 'id' => $value->id,  'order_no' => $value->re_order_no, 'name' => $company_name,'loc_name' => $loc_name,'sales_phone' => $sales_phone,'sales_name' => $sales_name, 'email' => $email, 'phone' => $phone, 'vehicle_name' => $vehicle_name, 'totalamount' => round($totalamount), 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'driver_assign' => $value->driver_assign, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->assign_date)), 'create_time' => $value->assign_time);
           
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_own() {
       

       $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id=0;
        $where='';
         if($_GET['route_id']!='')
        {
             $route_id = $_GET['route_id'];
            
        }
       
        $assigen_status = $_GET['assaignstates'];
        $dateval = $_GET['dateval'];
        $dateval2 = $_GET['dateval2'];
        $i = 1;
        $array = array();
        $arrayorders=array();
        if ($route_id > 0) {
             $order_base = 3;
             $where.=" AND a.route_id='".$route_id."'";
        }


        $driver_id = $_GET['driver_id'];
        if ($driver_id > 0) {
             $order_base = 3;
             $where.=" AND ds.driver_id='".$driver_id."'";
        }


        $vehicle_id = $_GET['vehicle_id'];
        if ($vehicle_id > 0) {
             $order_base = 3;
             $where.=" AND ds.vehicle_id='".$vehicle_id."'";
        }
        
        
        $search = $_GET['search'];
        $limit="";
        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   

                    $where.=" AND ds.finance_status > 0 AND ds.assign_status>0 AND a.selforder=0";

                    $where .= " AND a.order_no='" . $search . "' OR ds.trip_id='" . $search . "' OR b.company_name LIKE '%" . $search . "%'  OR d.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR r.name LIKE '%" . $search . "%' OR ds.randam_id LIKE '%" . $search . "%' $sales_search";
                   
                    $limit="LIMIT 0,10";
        }
        else
        {
           
            
            if($route_id==0 && $driver_id==0)
            {
                
                  $where.=" AND ds.assign_date BETWEEN '".$dateval."' AND '".$dateval2."'";
            
            }

            
            if($assigen_status==11)
            {
               
               $where.=" AND ds.finance_status > 0 AND ds.assign_status IN ('11','12') AND a.selforder=0";
             
            }
            elseif($assigen_status==12)
            {
               
               $where.=" AND ds.finance_status > 0 AND ds.assign_status IN ('11','12') AND a.selforder=0";
             
            }
            else
            {
               $where.=" AND ds.finance_status > 0 AND ds.assign_status=".$assigen_status." AND a.selforder=0";
            }

            $limit="LIMIT 0,10";


        }

          $JOIN="";
          $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
          $where .= ' AND ds.dispatch_status=1';


       
        $query = $this->db->query(" SELECT a.*,
            ds.reason as reason_last,
            ds.randam_id as randam_id,
            ds.sort_id as sort_id_latest,
            ds.collection_remarks as collection_remarks_final,
            ds.assign_status as assign_status_latest,
            ds.finance_status as finance_status_latest,
            ds.seq_status as seq_status_latest,
            ds.driver_id as driver_id_latest,
            ds.vehicle_id as vehicle_id_latest,
            ds.trip_id as trip_id_last,
            ds.assign_date as assign_date_last,
            ds.assign_time as assign_time_last
            FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id $JOIN LEFT JOIN driver as d ON ds.driver_id=d.id LEFT JOIN vehicle as v ON ds.vehicle_id=v.id LEFT JOIN route as r ON a.route_id=r.id  WHERE a.deleteid='0' AND a.order_base>0 AND  a.delivery_status='2'  $where ORDER BY a.sort_id ASC $limit");
        $result = $query->result();
        
        $seq_status=0;
        $trip_id_array=array();
        $newArray=array();

        foreach ($result as $value) {
            

            $route_id_base = $value->route_id;
           
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $locality=0;
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $locality = $csval->locality;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                

                if($value->customer_address_id>0) 
                {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) 
                    {
                        $locality = $customers_adddrss_v->locality;
                        //$company_name = $customers_adddrss_v->name;
                        //$phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }


                if($value->shipping_address>0) 
                {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                    foreach ($customers_adddrss as $customers_adddrss_v)
                     {
                        $locality = $customers_adddrss_v->locality;
                        //$company_name = $customers_adddrss_v->name;
                        //$phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }


                $vehicle_number = "";
                $vehicle_name = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id_latest);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_name = $vehicle_v->vehicle_name;
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
              
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                

            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
                
               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
                 $route_id = $valc->route_id;
            }
            
                
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                
                
                $assigen_status=$value->assign_status_latest;
                $seq_status=$value->seq_status_latest;
                if ($assigen_status == '11') {
                    $statusval = "Dispatch Ready";
                }
                if ($assigen_status == '12') {
                    $statusval = "Dispatch Loaded";
                }
                 if ($assigen_status == '13') {
                    $statusval = "Partial Loaded";
                }
                if ($assigen_status == '1') {
                    $statusval = "Driver Picked";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                if ($value->finance_status_latest == '5') {
                    $statusval = "Reconciliation Completed";
                }
                if ($assigen_status == '8') {
                    $statusval = "Driver Re-scheduled";
                }
                if ($assigen_status == '0') {
                    $statusval = "Not Assigned";
                }

                if($seq_status==0)
                {
                    $statusval = "Driver Sequencing is Pending";
                }
                
               
           $tcsamount=$value->tcsamount;
           $discountfulltotal=$value->bill_total;


            $commision_value = 0;
            if ($value->commission_check == 1) {
                $commision_value =$value->bill_total - $value->bill_total_rate;
            }

            if ($value->commission_check_fact == 1) {
                $commision_value_fact =$value->bill_total - $value->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
if($value->create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                                $commision_value = round($commision_value);

            } 
            
            if($value->order_base>0)
            {


                $trip_id_array[]=$value->trip_id_last;



                $found=0;


               $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
              $trip_id_count = $this->db->query("SELECT ds.trip_id FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.trip_id='".$value->trip_id_last."'  ORDER BY a.id DESC");
              $trip_id_count= $trip_id_count->result();


                           

                 $seq_status=$value->seq_status_latest;
                 $bill_total=$value->bill_total;

                 $array[] = array('no' => $i,'trip_id_count'=> count($trip_id_count),'bill_total'=> $bill_total,'seq_status'=> $seq_status,'loc_name'=> $loc_name,'sales_phone' => $sales_phone,'sales_name' => $sales_name,'trip_id' => $value->trip_id_last, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'vehicle_name' => $vehicle_name, 'totalamount' => round($discountfulltotal,2),'tcsamount' => round($tcsamount), 'commission' => round($commision_value), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason_last, 'assign_status' => $value->assign_status, 'sort_id' => $value->sort_id_latest, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 
                    'delivery_mode' => $value->delivery_mode,
                    'collection_remarks' => $value->collection_remarks_final,
                     'seq_status' => $value->seq_status_latest,
                      'randam_id' => $value->randam_id,
                     'order_base' => $value->finance_status_latest, 'create_date' => date('d-m-Y', strtotime($value->assign_date_last)), 'create_time' => $value->assign_time_last);


            }
            $arrayorders[] = array( 'id' => $value->id,'order_no' => $value->order_no,);

            $i++;
        }


 $trip_id_array_data=array_unique($trip_id_array);
       

      $arrayset=array(
        'trip_ids'=>$trip_id_array_data,
        'arrayorders'=>$arrayorders,
        'orders'=>$array

      );


        echo json_encode($arrayset);
       
    }
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_driver_list() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $assigen_status = $_GET['assaignstates'];
        $i = 1;
        $array = array();
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        $resultsub = $this->db->query("SELECT b.route_id FROM driver as a JOIN vehicle as b ON a.vehicle_id=b.id  WHERE a.id='" . $define_driver_id . "' AND a.deleteid=0");
        $resultsubcheck = $resultsub->result();
        foreach ($resultsubcheck as $valuesalesss) {
            $route_id = $valuesalesss->route_id;
        }
        if ($this->session->userdata['logged_in']['access'] == '1' || $this->session->userdata['logged_in']['access'] == '6') {
            $result = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'sort_id', 'ASC');
        } else {
            $result = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'driver_id', $define_driver_id, 'sort_id', 'ASC');
        }
        $paricel_mode = 0;
        foreach ($result as $value) {
            $paricel_mode = $value->paricel_mode;
            $tablename_sub = "order_product_list_process";
            $delivery_charge = $value->delivery_charge;
            $totalamount_total = 0;
            $commission_total = 0;
            $totalamountparciel = 0;
            $commissionparciel = 0;
            $resulttotal = $this->Main_model->where_names_three_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $paricel_mode, 'deleteid', '0', 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount_total+= $tot->amount + $tot->commission;
                $commission_total+= $tot->commission;
                
                
                    if($tot->modify_qty==0)
                    {
                        $tot->modify_qty=$tot->qty;
                    }
                
                    $totalamountparciel+= $tot->rate * $tot->modify_qty + $tot->commission;
                    $commissionparciel+= $tot->commission;
                    
            }
            if ($paricel_mode == 0) {
                $totalamount = round($totalamount_total + $delivery_charge);
                $commission = $commission_total;
            }
            if ($paricel_mode == 1) {
                $totalamount = round($totalamountparciel + $delivery_charge);
                $commission = $commissionparciel;
            }
            $route_id_base = $value->route_id;
            if ($value->assign_status == $assigen_status) {
                $company_name_company = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name_company = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                if ($assigen_status == '1') {
                    $statusval = "Waiting";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }










   $tcs_status=$value->tcs_status;
    $tcsamount=$value->tcsamount;                          


             $tcsamount=0;


                   if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {
        
            // $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$value->id."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$value->customer_id."'");
            // $resultset = $resultset->result();
       
            // foreach ($resultset as $set)
            //      {
                  
            //                   $tcsamountval=round($set->totalamount,2);
            //                   $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
            //                   if($tcsamountvaldata>5000000)
            //                   {
            //                       $tcsamount=round($discountfulltotal*0.1/100);
            //                   }
            //                   $tcsamount=0;
                    
                   
            //      }

                 $tcsamount=0;


             }






             $discountfulltotal=$discountfulltotal+$tcsamount;







          $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



        
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                           $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }












                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'rescheduling_delivery' => $value->rescheduling_delivery, 'rescheduling_date' => $value->rescheduling_date, 'rescheduling_remarks' => $value->rescheduling_remarks, 'name' => $company_name, 'company_name' => $company_name_company, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_driver_list_limit_return() {
        
        
        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
       
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $assigen_status = $_GET['assaignstates'];
        
        $wheredata=0;
        if($assigen_status==5)
        {
            $wheredata=" AND  order_base IN ('5','8','2')";
            $wheredatas=" AND  a.order_base IN ('5','8','2')";
        }
        else
        {
            $wheredata=" AND  order_base='" . $assigen_status . "'";
            $wheredatas=" AND  a.order_base='" . $assigen_status . "'";
        }



        $orderby='ASC';
         
        if($assigen_status==1)
        {
            $orderby='DESC'; 
        }



        
         $search = $_GET['search'];

                $where="";
                $wheresearch="";
                if ($search != "") {
                    $wheresearch .= " AND  a.re_order_no LIKE '%" . $search . "' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%'";
                }
               
        
                $i = 1;
                $array = array();
                $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
                foreach ($resultsales as $valuesales) {
                    $define_driver_id = $valuesales->define_driver_id;
                }
                $resultsub = $this->db->query("SELECT b.route_id FROM driver as a JOIN vehicle as b ON a.vehicle_id=b.id  WHERE a.id='" . $define_driver_id . "' AND a.deleteid=0");
                $resultsubcheck = $resultsub->result();
                foreach ($resultsubcheck as $valuesalesss) {
                    $route_id = $valuesalesss->route_id;
                }
                
                
        
                
                if($this->session->userdata['logged_in']['access'] == '13') 
                {
                   
                    $wheresearch .= "  AND a.driver_id='".$define_driver_id."'";
                    $where= "  AND driver_id='".$define_driver_id."'";
                  
                    
                }
                
        
        
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN customers as b ON a.customer=b.id  WHERE a.deleteid='0'  AND a.driver_assign='1'  $wheredatas $wheresearch 
                 ORDER BY a.sort_id $orderby");
                $resultcount = $querycount->result();
                $count=count($resultcount);
        
                
                $query = $this->db->query("SELECT a.*,b.address_id FROM $tablename as a JOIN customers as b ON a.customer=b.id  WHERE a.deleteid='0'  AND a.driver_assign='1'  $wheredatas $wheresearch  ORDER BY a.sort_id $orderby LIMIT $offset, $pagesize");
                $result = $query->result();
        
        
 
        
        
        
        
        
        
        
        
        
        $paricel_mode = 0;
        foreach ($result as $value){
            
            
            
            
            
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."' AND deleteid=0");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess) {
                        $totalamount += round($valuess->qty*$valuess->rate,2);
                }
                    
            
                
           
                $company_name_company = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer);
                foreach ($customers as $csval) {
                    $company_name_company = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                     $locality = $csval->locality;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                     $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                
                
                
                
                
                
                
                
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                
                
                
                                                        $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            
                
                
                
                
                
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                if ($value->order_base == '1') {
                    $statusval = "Waiting";
                }
                if ($value->order_base == '4') {
                    $statusval = "Trip Started";
                }
                if ($value->order_base == '5') {
                    $statusval = "Inward";
                }
                
                if ($value->order_base == '6') {
                    $statusval = "Reschedule";
                }
               
            
                
                $array[] = array('no' => $i,
                'id' => $value->id,
                'base_id' => base64_encode($value->id),
                'order_no' => $value->re_order_no,
                'rescheduling_delivery' => $value->rescheduling_delivery,
                'rescheduling_date' => $value->rescheduling_date, 
                'rescheduling_remarks' => $value->rescheduling_remarks,
                'name' => $company_name, 'company_name' => $company_name_company,
                'email' => $email, 'phone' => $phone, 
                'totalamount' => round($totalamount), 
                'reamrks' => $value->reamrks, 
                'sort_id' => $value->sort_id, 
                'loc_name' => $loc_name, 
                'sales_name' => $sales_name, 
                'sales_phone' => $sales_phone, 
                'vehicle_number' => $vehicle_number, 
                'driver_phone' => $driver_phone,
                'driver_name' => $driver_name, 
                'route_name' => $route_name, 
                'address' => $address, 
                'statusval' => $statusval,
                'assign_status' => $value->order_base,
                'otp' => $value->otp,
                'km_reading_end' => $value->km_reading_end,
                'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
           
            $i++;
        }
        
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
        
        
    }    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function fetch_data_table_transpot_assign_data_driver_list_limit() {
        
        
        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
       
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $assigen_status = $_GET['assaignstates'];
        $search = $_GET['search'];
        
        $wheresearch="";
        if(isset($_GET['gate_status']))
        {
            
        
                    $gate_status = $_GET['gate_status'];
                    if($gate_status==0)
                    {
                        $wheresearch .=" AND a.assign_status='".$assigen_status."' AND a.gate_status='".$gate_status."'";
                    }
                    else
                    {
                        $wheresearch .=" AND a.assign_status>='".$assigen_status."' AND a.gate_status='".$gate_status."'";
                    }
        
        
        
        
        }
        else
        {
                     $wheresearch .=" AND a.assign_status='".$assigen_status."'";
        }
        
        
        
        

        if($order_base==5)
        {

               $wheresearch .=" AND a.finance_status>='".$order_base."'";

        }
        else
        {
               $wheresearch .=" AND a.finance_status='".$order_base."'";
        }


        if($search != "")
        {
            $wheresearch .= " AND  (a.order_no='" . $search . "' OR  a.trip_id='" . $search . "' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%')";
        }

        
        
        
        $orderby='ASC';
         
        if($assigen_status==12)
        {
            $orderby='DESC'; 
        }
        
        if($assigen_status==3)
        {
            $orderby='DESC'; 
        }

        
       
        
        $i = 1;
        $array = array();
        $define_driver_id=0;
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        $resultsub = $this->db->query("SELECT b.route_id FROM driver as a JOIN vehicle as b ON a.vehicle_id=b.id  WHERE a.id='" . $define_driver_id . "' AND a.deleteid=0");
        $resultsubcheck = $resultsub->result();
        foreach ($resultsubcheck as $valuesalesss) {
            $route_id = $valuesalesss->route_id;
        }


        if ($this->session->userdata['logged_in']['access'] != '13') {
           
           
         
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN customers as b ON a.customer_id=b.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.selforder=0  $wheresearch  ORDER BY a.sort_id $orderby ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
           
            
            $query = $this->db->query("SELECT a.*,b.company_name,
                b.email as cemail,
                b.locality as clocality,
                b.phone as cphone,
                 b.address1 as address1,
                  b.address2 as address2,
                   b.landmark as landmark,
                    b.zone as zone,
                     b.locality as locality,
                    b.pincode as pincode,
                    b.state as state FROM $tablename as a JOIN customers as b ON a.customer_id=b.id WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.selforder=0   $wheresearch  ORDER BY a.sort_id $orderby LIMIT $offset, $pagesize");
            $result = $query->result();
           
            
            
            
            
        }
        else
        {
            
            
              
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN customers as b ON a.customer_id=b.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.selforder=0  AND a.driver_id='".$define_driver_id."' $wheresearch  ORDER BY a.sort_id $orderby");
                $resultcount = $querycount->result();
                $count=count($resultcount);
           
                
                $query = $this->db->query("SELECT a.*,b.company_name,
                b.email as cemail,
                b.locality as clocality,
                b.phone as cphone,
                 b.address1 as address1,
                  b.address2 as address2,
                   b.landmark as landmark,
                    b.zone as zone,
                     b.locality as locality,
                    b.pincode as pincode,
                    b.state as state FROM $tablename as a JOIN customers as b ON a.customer_id=b.id  WHERE a.deleteid='0' AND a.order_base IN ('1','120','121','21','23','20') AND a.selforder=0  AND a.driver_id='".$define_driver_id."' $wheresearch  ORDER BY a.sort_id $orderby LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
            
        }




        $trip_id_array=array();
        $paricel_mode = 0;
        $weighttotal=0;
        foreach ($result as $value)
        {
            
            
            
            
                        $company_name_company = $value->company_name;
                        $email = $value->cemail;
                        $phone = $value->cphone;

                        $locality = $value->locality;
                        $address = $value->address1 . ' ' . $value->address2 . ' ' . $value->landmark . ' ' . $value->zone . ' ' . $value->pincode. ' ' . $value->state;
               
                
                        $sales_name="";
                        $sales_phone="";
                        $sales_person = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
                        foreach ($sales_person as $sales) {
                            $sales_name = $sales->name;
                            $sales_phone = $sales->phone;
                            
                        }


                            $loc_name = "";
           
                            $loc_name_id = $this->Main_model->where_names('locality', 'id', $locality);
                            foreach ($loc_name_id as $valc) {
                              
                                $loc_name = $valc->name;
                                $route_id = $valc->route_id;

                            }


                            $route_name = "";
                            $route = $this->Main_model->where_names('route', 'id', $route_id);
                            foreach ($route as $route_v) {
                                    $route_name = $route_v->name;
                            }





                            $vehicle_number = "";
                            $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                            foreach ($vehicle as $vehicle_v) {
                                $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                                $vehicle_id = $vehicle_v->id;
                            }
                            
                            $driver_name = "";
                            $driver_phone = "";
                            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                            foreach ($driver as $driver_v) {
                                $driver_name = $driver_v->name;
                                $driver_phone = $driver_v->phone;
                            }
                
            
            
         $trip_id_array[]=$value->trip_id;
          $denomination_total =$value->driver_recived_payment;
            
            
            
            
            
            
            
            
            
            
            
            $paricel_mode = $value->paricel_mode;
            $tablename_sub = "order_product_list_process";
            $delivery_charge = $value->delivery_charge;
            $totalamount_total = 0;
            $commission_total = 0;
            $totalamountparciel = 0;
            $commissionparciel = 0;
            
           
            
             $lengeth=$value->lengeth_max;
             $weighttotal=$value->weighttotal;


            
            $loadamount=0;
           
            
          
            $route_id_base = $value->route_id;
           
            
           

                
                if($value->customer_address_id>0) 
                {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) 
                    {
                          $locality = $customers_adddrss_v->locality;
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }


              


                
                if($value->shipping_address>0) 
                {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                    foreach ($customers_adddrss as $customers_adddrss_v) 
                    {

                         $locality = $customers_adddrss_v->locality;
                         $company_name = $customers_adddrss_v->name;
                         $phone = $customers_adddrss_v->phone;
                         $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }


                


                if ($assigen_status == '1') {
                    $statusval = "Waiting";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                $statusval = $value->reason;
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discountfulltotal = $value->bill_total;
             
                $tcs_status=$value->tcs_status;
                $tcsamount=$value->tcsamount;                        
 


         
                 $first_sort_id=1;
                 

                // $query_profle_gets = $this->db->query("SELECT sort_id FROM $tablename WHERE  assign_status=1 AND  driver_id='".$value->driver_id."' AND trip_id='".$value->trip_id."' AND order_base>0 ORDER BY sort_id ASC LIMIT 1");

                  $query_profle_gets = $this->db->query("SELECT sort_id FROM $tablename WHERE  driver_id='".$value->driver_id."' AND trip_id='".$value->trip_id."' AND order_base>0 ORDER BY sort_id ASC LIMIT 1");
                 $result_lengeths = $query_profle_gets->result();
                 foreach ($result_lengeths as $valuesss) {
                  
                      $first_sort_id=$valuesss->sort_id;
                      

                 }



                $last_sort_id=1;
                 

                 //$query_profle_gets = $this->db->query("SELECT sort_id FROM $tablename WHERE   driver_id='".$value->driver_id."' AND trip_id='".$value->trip_id."' AND order_base>0 AND finance_status=4 ORDER BY sort_id DESC LIMIT 1");


                 $query_profle_gets = $this->db->query("SELECT sort_id FROM $tablename WHERE   driver_id='".$value->driver_id."' AND trip_id='".$value->trip_id."' AND order_base>0  ORDER BY sort_id DESC LIMIT 1");

                 $result_lengeths = $query_profle_gets->result();
                 foreach ($result_lengeths as $valuesss) {
                  
                       $last_sort_id=$valuesss->sort_id;
                     

                 }

               


             if($value->order_base>0)
            {

                    $array[] = array('no' => $value->sort_id,'sales_id'=>$value->id,'sales_phone'=>$sales_phone,'loc_name'=>$loc_name,'first_sort_id'=>$first_sort_id,'last_sort_id'=>$last_sort_id,'sales_name'=>$sales_name,'denomination_total'=>$denomination_total,'weight'=>round($weight),'gate_status'=>$value->gate_status,'end_reading_factory'=>$value->end_reading_factory,'start_reading_factory'=>$value->start_reading_factory,'start_reading'=>$value->start_reading,'km_reading_end'=>$value->km_reading_end,'gate_weight'=>$value->gate_weight,'payment_mode'=>$value->payment_mode,'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'lengeth' => $lengeth, 'rescheduling_delivery' => $value->rescheduling_delivery, 'rescheduling_date' => $value->rescheduling_date, 'rescheduling_remarks' => $value->rescheduling_remarks, 'name' => $company_name, 'company_name' => $company_name_company, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status,'finance_status' => $value->finance_status, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)),'trip_id' => $value->trip_id, 'create_time' => $value->create_time);


             }












           
            $i++;
        }


        $trip_id_array_data=array_unique($trip_id_array);



        
        $myData = array('PortalActivity' => $array,'trip_ids'=>$trip_id_array_data, 'totalCount' => $count,'weighttotal'=>round($weighttotal,2));
        echo json_encode($myData);
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchCustomerdetails() {
        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $order_id = $form_data->id;
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names($tablename, 'id', $order_id);
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {

                if($tot->deleteid==0)
                {
                     $rate=$tot->rate+$tot->commission;
                    $totalamount+= $rate*$tot->qty;
                    $commission+= $tot->commission;
                 }
            }
            if ($route_id == 0) {
                $route_id_base = 0;
            } else {
                $route_id_base = $value->route_id;
            }
            
            
            
            
          
            
            $lengeth=0;
            $weight=0;
            
            
            $lengeth_array=array();
            $query_profle_get = $this->db->query("SELECT profile as profile,crimp,uom FROM order_product_list_process  WHERE order_id='" .$value->id ."' AND deleteid=0 AND profile>0 AND categories_id NOT IN ('13','591')");

            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                    $valuess->profile = $valuess->profile+$valuess->crimp;

                   if($valuess->uom=='3')
                    {
                        $lengeth = $valuess->profile;
                    }
                    if($valuess->uom=='4')
                    {

                        $lengeth = $valuess->profile/304.8;
                        $lengeth=round($lengeth,2);

                    }
                    if($valuess->uom=='5')
                    {

                        $lengeth = $valuess->profile*3.281;
                        $lengeth=round($lengeth,2);

                    }
                    if($valuess->uom=='6')
                    {
                         $lengeth = $valuess->profile/12;
                         $lengeth=round($lengeth,2);
                    }
                    $lengeth_array[] = $lengeth;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
            
            
            
            
            $company_name_data = "";
            $email = "";
            $phone = "";
            $address = "";
            $localityid=0;
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval)
             {
                $localityid=$csval->locality;
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }



            if($value->customer_address_id>0) 
            {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                foreach ($customers_adddrss as $customers_adddrss_v)
                {
                    $localityid=$customers_adddrss_v->locality;
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }



            if($value->shipping_address>0) 
            {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->shipping_address);
                foreach ($customers_adddrss as $customers_adddrss_v) 
                {
                    $localityid=$customers_adddrss_v->locality;
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }



              $localityname = "";
                $route_id="";
                $resultlocality = $this->Main_model->where_names('locality', 'id',  $localityid);
                foreach ($resultlocality as $vl) {
                    $localityname = $vl->name;
                    $route_id = $vl->route_id;
             }





            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            
            
                $sales_name="";
                $sales_phone="";
                 $sales_person = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
                foreach ($sales_person as $sales) {
                    $sales_name = $sales->name;
                    $sales_phone = $sales->phone;
                    
                }
                
            
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            if ($assigen_status == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status == '3') {
                $statusval = "Delivered";
            }
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Zaron Scope";
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }






                              $tcs_status=$value->tcs_status;
                              $tcsamount=$value->tcsamount;
                            
                              $tcsamount=0;


             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {
        
            // $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$value->id."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$value->customer_id."'");
            // $resultset = $resultset->result();
       
            // foreach ($resultset as $set)
            //      {
                  
            //                   $tcsamountval=round($set->totalamount,2);
            //                   $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
            //                   if($tcsamountvaldata>5000000)
            //                   {
            //                       $tcsamount=round($discountfulltotal*0.1/100);
            //                   }
            //                   $tcsamount=0;
                    
                   
            //      }


                // $tcsamount=0;


             }






             $discountfulltotal=$discountfulltotal+$tcsamount;





          $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);


            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                           $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }
            











                    $weight=0;
                    // $query_weight_get = $this->db->query("SELECT SUM(weight) as totalweight FROM $tablename_sub  WHERE order_id='".$value->id."' AND deleteid=0");
                    // $result_totalweight = $query_weight_get->result();
                    // foreach ($result_totalweight as $we) {
                    //     $weight = $we->totalweight;
                    // }
            






            $array = array('no' => $i,'localityname'=>$localityname,'collection_remarks' => $value->collection_remarks, 'sales_phone' => $sales_phone, 'sales_name' => $sales_name,'customer_id' => $value->customer_id,'id' => $value->id,'weight' => round($weight,2), 'base_id' => base64_encode($value->id),'lengeth' => $lengeth, 'order_no' => $value->order_no, 'name' => $company_name, 'company_name_data' => $company_name_data, 'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 'payment_mode' => $value->payment_mode, 'payment_image' => $payment_image, 'reference_no' => $value->reference_no, 'delivery_mode' => $value->delivery_mode, 'delivery_status' => $value->delivery_status, 'delivery_status_name' => $delivery_status, 'delivery_charge' => round($value->delivery_charge, 2), 'totalamount' => round($discountfulltotal + $value->delivery_charge, 2), 'commission' => round($commission, 2), 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status,'delivery_date_time' => $value->delivery_date_time,'SSD_check' => $value->SSD_check,'excess_payment_status' => $value->excess_payment_status, 'order_base' => $value->finance_status,'assign_date' => date('d-m-Y', strtotime($value->assign_date)) . ' ' . $value->assign_time, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date)) . ' ' . $value->trip_start_time,);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchCustomerdetails_return() {
        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $order_id = $form_data->id;
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names($tablename, 'id', $order_id);
        foreach ($result as $value) {
            $tablename_sub = "sales_return_products";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'c_id', $value->id, 'deleteid', 0, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
               $totalamount = round($tot->qty*$tot->rate,2);
            }
           
            
            
            
            
            $company_name_data = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer);
            foreach ($customers as $csval) {
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            
            
            
            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            
            
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            
            if ($assigen_status == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status == '3') {
                $statusval = "Delivered";
            }
           
          
            $array = array('no' => $i, 'customer_id' => $value->customer,'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->re_order_no,
            'name' => $company_name_data, 'company_name_data' => $company_name_data, 
            'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 
            'totalamount' => round($totalamount, 2), 
            'sort_id' => $value->sort_id,
            'lengeth'=>0,
            'vehicle_number' => $vehicle_number, 
            'driver_phone' => $driver_phone, 'driver_name' => $driver_name,
            'route_name' => $route_name, 'address' => $address, 
            'statusval' => $statusval, 'assign_status' => $value->driver_assign, 'order_base' => $value->order_base,'assign_date' => date('d-m-Y', strtotime($value->assign_date)) . ' ' . $value->assign_time, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date)) . ' ' . $value->trip_start_time,);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchInvoiceloop() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->id;
        $array = array();
        $resultsub = $this->db->query("SELECT address_id,order_id FROM $tablename_sub  WHERE order_id='" . $order_id . "' AND deleteid=0 GROUP BY address_id");
        $resultsubcheck = $resultsub->result();
        $i = 1;
        foreach ($resultsubcheck as $value) {
            $array[] = array('no' => $i, 'address_id' => $value->address_id, 'order_id' => $value->order_id, 'base_order_id' => base64_encode($value->order_id));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerdetails_view_order() {
        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->id;
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names($tablename, 'id', $order_id);
        foreach ($result as $value) {
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {

                  if($tot->deleteid==0)
                   {
                            $rate=$tot->rate+$tot->commission;
                            $totalamount+= $rate*$tot->qty;
                            $commission+= $tot->commission;
                   }
            }
            if ($route_id == 0) {
                $route_id_base = 0;
            } else {
                $route_id_base = $value->route_id;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
             $landline ="";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $landline = $csval->landline;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->customer_address_id != "") {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . '  ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            if ($assigen_status == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status == '3') {
                $statusval = "Delivered";
            }
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {

                // gg changes for scope task name change
                $delivery_status = "Zaron Scope";
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }









   $tcs_status=$value->tcs_status;
    $tcsamount=$value->tcsamount;                       

       $tcsamount=0;


             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {
        
            // $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$value->id."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$value->customer_id."'");
            // $resultset = $resultset->result();
       
            // foreach ($resultset as $set)
            //      {
                  
            //                   $tcsamountval=round($set->totalamount,2);
            //                   $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
            //                   if($tcsamountvaldata>5000000)
            //                   {
            //                       $tcsamount=round($discountfulltotal*0.1/100);
            //                   }
            //                   $tcsamount=0;
                    
                   
            //      }


                 $tcsamount=0;


             }






             $discountfulltotal=$discountfulltotal+$tcsamount;











          $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



          
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                          $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }











            $array = array('no' => $i, 'id' => $value->id,'customer_address_id'=>$value->customer_address_id,  'phone2'=>$landline,'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 'payment_mode' => $value->payment_mode, 'delivery_status' => $value->delivery_status, 'delivery_mode' => $value->delivery_mode, 'delivery_status_name' => $delivery_status, 'delivery_charge' => round($value->delivery_charge, 2), 'totalamount' => round($discountfulltotal + $value->delivery_charge, 2), 'commission' => round($commission, 2), 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date)) . ' ' . $value->trip_start_time,);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    public function fetch_single_data_total() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $sst_set=0;
        $unit = 0;
        $fact = 0;
        $commission = 0; 
        $billtotal=0;
        $subtotal=0;
        $amounttotalgst = 0;
        $amounttotal_with_out_commission = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $get_gst_price=0;
        $old_fact_amount=0;
        $result = $this->Main_model->where_names_two_order_by($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($result as $value) {

            // $rate=$value->rate+$value->commission;
            // $amounttotal+= $rate*$value->qty;

            // gg changes

            $rate=$value->rate+$value->commission;
            $amounttotal_datas= $rate*$value->qty;

    
            $decimalPosition = strpos((string)$amounttotal_datas, '.');
            
            // Check if there's a decimal point and more than 2 digits after it
            if ($decimalPosition !== false && strlen(substr((string)$amounttotal_datas, $decimalPosition + 1)) > 2) {
                // Truncate to 2 decimal places without rounding
                $amounttotal_datas = floor($amounttotal_datas * 100) / 100;
            }
            
            // Format the number to two decimal places (this is optional if you just want to display it)
            $amounttotal_data = sprintf("%.2f", $amounttotal_datas);
            
            $amounttotal += $amounttotal_data;








            $amounttotal_with_out_commission+= $value->rate * $value->qty;
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $billtotal+= $rate * $value->qty;
            $commission+= $value->commission;
            $fullqty+= $value->qty;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;

            $sst_set=1;
            $old_fact_amount+= $value->old_fact_amount;

//For GST Task, Creating SGST and CGST from july 1

            $create_date_check_gst= date('Y-m-d',strtotime($value->create_date));

            if($create_date_check_gst>'2024-02-20')
            {
                //For GST Task, Creating SGST and CGST from july 1
   
            $base_rate=round($rate*0.18,2);
            $gst_price=round($base_rate*$value->qty,2);


            }
            else
            {

//For GST Task, Creating SGST and CGST from july 1

                  $base_rate=round($rate*0.18,2);
            $gst_price=round($base_rate*$value->qty,2);



            }


            $amountset= $rate*$value->qty;
            $subtotal+= $rate*$value->qty;
            $get_gst_price+=$gst_price;


            $commssion_amount=round($amountset-$value->old_fact_amount,2);
            if($commssion_amount<0)
            {
                $commssion_amount=0;
            }
            $this->db->query("UPDATE $tablename SET amount='".$amountset."',commssion_amount='".$commssion_amount."' WHERE id='".$value->id."'");



        }



  //$amounttotalgstamt= $billtotal/1.18;
  //$amounttotalgst=$amounttotalgstamt*9/100;
  $subtotal_with_gst=$subtotal*1.18;
 // $amounttotalgst=round($subtotal_with_gst-$subtotal,2);

  // gg changes
  $amounttotalgst=$subtotal_with_gst-$subtotal;
 


 $statusviewdata = $this->db->query("SELECT b.uom FROM $tablename as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='".$_GET['order_id']."' AND  a.deleteid = '0' AND b.uom='Kg'");
 $statusviewdata = $statusviewdata->result();
    if(count($statusviewdata)>0)
    {
        $statusview=0;
    }
    else{
         $statusview=1;
    }               

     

        $user_id_check=0;

        $create_date_check = '';
        //For GST Task, Creating SGST and CGST from july 1

        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $mobile_order= $valuedis->mobile_order;
            $create_date_check= $valuedis->create_date;
            if($create_date_check > '2024-05-31'){
            $id = $valuedis->id;
            $datass_val['get_id'] = $id;
            $datass_val['gst_check'] = 1;
            $this->Main_model->update_commen($datass_val, $tablenamemain);
            $tablename_sub = $tablename;
            $datass['get_id'] = $id;
            $datass['gst_check'] = 1;
            $this->Main_model->update_commen_where($datass, 'order_id', $tablename_sub);

            }

        }
//For GST Task, Creating SGST and CGST from july 1

        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {

            $mobile_order= $valuedis->mobile_order;
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $user_id = $valuedis->user_id;
            $discountPre = $valuedis->discountPre;
            $gate_login_view_status = $valuedis->gate_login_view_status;
              $convertion=$valuedis->convertion;
            $print_status = $valuedis->print_status;
            if($valuedis->user_id>0)
            {
                $user_id_check = $valuedis->user_id;
            }
            $create_date_check= $valuedis->create_date;
           
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $paricel_mode = $valuedis->paricel_mode;
            $order_base = $valuedis->order_base;
            $reason = $valuedis->reason;
            $customer_id = $valuedis->customer_id;
            $collection_remarks=$valuedis->collection_remarks;
            $SSD_check = $valuedis->SSD_check;
            $excess_payment_status = $valuedis->excess_payment_status;
            $payment_mode = $valuedis->payment_mode;


            //For GST Task, Creating SGST and CGST from july 1
            //Checking date for Auto GST
            if($create_date_check > '2024-05-31'){
                $gst_check = 1;
                // echo 'OK';
            }else{
                $gst_check = $valuedis->gst_check;
            }



            $gst_check = $valuedis->gst_check;
            $delivery_date_time = $valuedis->delivery_date_time;
            $mark_date = $valuedis->mark_date;

            $tcs_status=$valuedis->tcs_status;
            $tcsamount=$valuedis->tcsamount;
            $tcsamount_last=$valuedis->tcsamount;

            $create_date_val = $valuedis->create_date;     

            $commission_check = $valuedis->commission_check;
            $commission_check_fact = $valuedis->commission_check_fact;
            $bill_total_rate = $valuedis->bill_total_rate;
            $without_commsision_total = $valuedis->without_commsision_total;

        }


        if($gst_check==0) 
        {
            $amounttotalgst=0;
        }

        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        $roundoff = $amounttotal;


        if($old_fact_amount>0)
        {


           
              
               $chh=date('2024-01-05');
              if($create_date_check>$chh)
              {

                   
                     $amounttotal_with_out_commission=$old_fact_amount;
                 


              }

              
            
        }        


         //For GST Task, Creating SGST and CGST from july 1
 
         // if($create_date_check > '2024-05-20'){
        //  $roundoffWithGst = round($roundoff * 1.18,2);

        // gg changes
        $roundoffWithGst = $roundoff * 1.18;
        //$roundoffWithGst = round($roundoff * 1.18,2);



         $total_sub_total_with_commission=$roundoffWithGst;
         $total_sub_total_with_out_commission=round($amounttotal_with_out_commission * 1.18,2);

        // }
        if($roundoffstatus == 1)
        {

              $discountfulltotal = $roundoff - $discount + $minisroundoff;
              //For GST Task, Creating SGST and CGST from july 1

            if($create_date_check > '2024-05-31'){
              $discountfulltotal = $roundoffWithGst - $discount + $minisroundoff;
             }
              $amounttotal_with_out_commission_val = $amounttotal_with_out_commission - $discount + $minisroundoff;
              $discountfulltotal_base = $roundoff - $discount;
              $roundoff_val='+'; 


        } 
        else 
        {


              $discountfulltotal = $roundoff - $discount - $minisroundoff;

//For GST Task, Creating SGST and CGST from july 1

        if($create_date_check > '2024-05-31'){
              $discountfulltotal = $roundoffWithGst - $discount - $minisroundoff;
          }
              $amounttotal_with_out_commission_val = $amounttotal_with_out_commission - $discount - $minisroundoff;
              $discountfulltotal_base = $roundoff - $discount;
              $roundoff_val='-';

        }





        $credit_limit = 0;
        $approved_status = 1;
        $payment_terms = "";
        $delivery_status_check = "";
        $account_number = "";
        $last_bill_amount_total=0;
        $customers_data = $this->Main_model->where_names(
            "customers",
            "id",
            $customer_id
        );
        foreach ($customers_data as $csvalv) {
            $credit_limit = $csvalv->credit_limit;
            $credit_status = $csvalv->credit;
            $approved_status = $csvalv->approved_status;
            $payment_terms = $csvalv->payment_terms;
            $account_number = $csvalv->account_number;
$tcs_status_customer = $csvalv->tcs_status;
$gst_view = $csvalv->gst;


            if ($payment_terms == "Credit") {
                $delivery_status_check = 2;
            }

            if ($payment_terms == "Cash & Carry") {
                $delivery_status_check = 1;
            }


            $last_bill_amount_total = $csvalv->last_bill_amount_total;
        }


          $tcsamount=0;
          $orgtcsamount=0;
          $withput_tcsamount=0;
          $table = array("orders","orders_process", "orders_quotation");

          if (in_array($tablenamemain, $table))
          {

             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);
                            $orgtcsamount=round($discountfulltotal_base*0.1/100);
                            $withput_tcsamount=round($amounttotal_with_out_commission_val*0.1/100);


                             $finacel_year=date('2024-04-01');

                        if($create_date_val>=$finacel_year)  
                        {



                        $resultset = $this->db->query("SELECT SUM(a.bill_total) as totalamount FROM $tablenamemain as a  WHERE  a.id<'".$_GET['order_id']."' AND a.order_base = '1' AND a.create_date>='".$finacel_year."'  AND a.customer_id='".$customer_id."'");
                         $resultset = $resultset->result();
                   
                        foreach ($resultset as $set)
                       {
                                          $set->totalamount=$set->totalamount+$last_bill_amount_total;
                                          $tcsamountval=round($set->totalamount,2);
                                          $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
                                          if($tcsamountvaldata>5000000)
                                          {
                                                $tcs_status=1;
                                                $tcsamount=round($discountfulltotal*0.1/100);
                                                $orgtcsamount=round($discountfulltotal_base*0.1/100);
                                                $withput_tcsamount=round($amounttotal_with_out_commission_val*0.1/100);
                                          }
                                          else
                                          {
 
                                                 $tcs_status=0;
                                                 $tcsamount=0;
                                                 $withput_tcsamount=0;

                                          }


            $this->db->query("UPDATE $tablenamemain SET tcs_status='" . $tcs_status . "',tcsamount='".$tcsamount."' WHERE id='" .$_GET["order_id"] ."'");
                                          
                                
                               
                             }


                        }   





              }
              
              if($tcs_status==0)
              {



                          $finacel_year=date('2024-04-01');

                        if($create_date_val>=$finacel_year)  
                        {



                       
                        $resultset = $this->db->query("SELECT SUM(a.bill_total) as totalamount FROM $tablenamemain as a  WHERE  a.id<'".$_GET['order_id']."' AND a.order_base = '1' AND a.create_date>='".$finacel_year."' AND a.customer_id='".$customer_id."'");
                         $resultset = $resultset->result();
                   
                        foreach ($resultset as $set)
                        {




                                          $set->totalamount=$set->totalamount+$last_bill_amount_total;
                                          $tcsamountval=round($set->totalamount,2);
                                          $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
                                          if($tcsamountvaldata>5000000)
                                          {

                                                $tcs_status=1;
                                                $tcsamount=round($discountfulltotal*0.1/100);
                                                $orgtcsamount=round($discountfulltotal_base*0.1/100);
                                                $withput_tcsamount=round($amounttotal_with_out_commission_val*0.1/100);
                                                
                                          }
                                          else
                                          {
 
                                                 $tcs_status=0;
                                                 $tcsamount=0;
                                                 $withput_tcsamount=0;

                                          }


                                        
                                         
                                          if($tcs_status_customer!='2')
                                          {

                                             
           

        $this->db->query("UPDATE $tablenamemain SET tcs_status='" . $tcs_status . "',tcsamount='".$tcsamount."' WHERE id='" .$_GET["order_id"] ."'");
        $this->db->query("UPDATE customers SET tcs_status='" . $tcs_status . "' WHERE id='" .$customer_id ."'" );

            

                                          }
                                          else
                                          {

                                              $tcs_status=0;
                                              $tcsamount=0;
                                              $withput_tcsamount=0;

                                          }

                                
                               
                         }


                        }  




             }


          }

          if($tcsamount_last>0)
          {
            //$tcsamount=$tcsamount_last;
            //$tcs_status=1;
            //$this->db->query("UPDATE $tablenamemain SET tcs_status='" . $tcs_status . "',tcsamount='".$tcsamount."' WHERE id='" .$_GET["order_id"] ."'" );
          }



                $discountfulltotal=$discountfulltotal+$tcsamount;
                $org_fulltotal=$discountfulltotal_base+$orgtcsamount;
                $org_fulltotal_without_commision=$amounttotal_with_out_commission_val+$withput_tcsamount;





//             $discountfulltotal_tst = round($discountfulltotal,2); 
// //For GST Task, Creating SGST and CGST from july 1            
//             $discountfulltotalRaw = round($discountfulltotal,2);                   
//             $whole = explode('.',$discountfulltotal); 
//             $decimal1=0;
//             if(isset($whole[1]))
//             {
//                $decimal1 = '0.'.$whole[1];
//             }
//             $totalval= round($decimal1,2);


//             $roundoffstatusval_data="";
//             $getdataminis=0;



         // gg changes 

         $discountfulltotal_tst = round($discountfulltotal,2); 
         //For GST Task, Creating SGST and CGST from july 1            
         $discountfulltotalRaw = round($discountfulltotal,2); 
         

         $amounttotalgst_roundoff=$roundoff*0.18/2;
         if (strpos($amounttotalgst_roundoff, '.') !== false && strlen(substr(strrchr($amounttotalgst_roundoff, "."), 1)) > 2) {
             // Only truncate if more than 2 digits after decimal
             $amounttotalgst_roundoff = floor($amounttotalgst_roundoff * 100) / 100;
         }
         $amounttotalgst_roundoff_total = sprintf("%.2f", $amounttotalgst_roundoff);

         $discountfulltotal_roundoff=$roundoff + $amounttotalgst_roundoff_total + $amounttotalgst_roundoff_total;


            $whole = explode('.',$discountfulltotal_roundoff); 
            $decimal1=0;
            if(isset($whole[1]))
            {
               $decimal1 = '0.'.$whole[1];
            }
            $totalval= $decimal1;


            $roundoffstatusval_data="";
            $getdataminis=0;





            if($totalval!=0)
            {

                     $symble="+";
                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=round($discountfulltotal+$getplusevalue);
                          
                           if($getplusevalue>0)
                           {
                             $getdataminis=$getplusevalue;
                             $symble="+";
                             $roundoffstatusval_data=$getplusevalue;
                           }

                          


                    }
                    elseif($totalval == 0.5){

                        $getplusevalue=$totalval;
                        $round_full_total=round($discountfulltotal,2);
                        $discountfulltotal=round($round_full_total);

                        if($totalval>0)
                        {
                            $getdataminis=$totalval;
                            $symble="+";
                            $roundoffstatusval_data=$totalval;
                        }


                    }
                    else
                    {



                            $discountfulltotal=round($discountfulltotal-$totalval);

                           if($totalval>0)
                           {
                               $getdataminis=$totalval;
                               $symble="-";
                               $roundoffstatusval_data=$totalval;
                           }
                           

                    }


                      if($tablenamemain == 'orders_process') 
                       {
                                       $autoroundoff_deletemod='AUTOROUND-'.$order_no;
                                      if($symble=='+')
                                      {

                    $this->db->query("UPDATE all_ledgers SET credits='".$getplusevalue."',debits='0' WHERE order_no='".$order_no."' AND customer_id='372' AND deletemod='".$autoroundoff_deletemod."' AND party_type=5");

                                      }
                                      else
                                      {

                           $this->db->query("UPDATE all_ledgers SET  debits='".$totalval."',credits='0' WHERE order_no='".$order_no."' AND customer_id='372' AND deletemod='".$autoroundoff_deletemod."' AND party_type=5");             

                                      }  


                                $DISCOUNT_DELETEMOD='DISCOUNT-'.$order_no;
                                $this->db->query("UPDATE all_ledgers SET  debits='".$discount."',credits='0' WHERE order_no='".$order_no."' AND customer_id='220' AND deletemod='".$DISCOUNT_DELETEMOD."' AND party_type=5");     
                                 $ninePerc = round($org_fulltotal * 0.09,2);
                                 $sGstDMode='SGST OUT - '.$order_no;

                                 
                                 $ninePerc=$amounttotalgst/2;   

                                $this->db->query("UPDATE all_ledgers SET  credits='$amounttotalgst_roundoff_total',debits='0' WHERE order_no='$order_no' AND customer_id='585'  AND party_type=5");    

                                 $cGstDMode='CGST OUT - '.$order_no;
                                $this->db->query("UPDATE all_ledgers SET  credits='$amounttotalgst_roundoff_total',debits='0' WHERE order_no='$order_no' AND customer_id='586'  AND party_type=5");    


                       }




            }
            else
            {

                $discountfulltotal=round($discountfulltotal);
                
            }














            $whole1 = floor($org_fulltotal); 
            $decimal11 = $org_fulltotal - $whole1;
            $totalval1= round($decimal11,3);


 
            $roundoffstatusval_data1="";
            if($totalval1!=0)
            {


                    if($totalval1>0.5)
                    {
                           $getplusevalue1=1-$totalval1;
                           $org_fulltotal=$org_fulltotal+$getplusevalue1;
                         
                    }
                    else
                    {



                           $org_fulltotal=round($org_fulltotal-$totalval1);


                    }


            }












        



            $le_amount_check=0;
            // $queryget = $this->db->query("SELECT * FROM all_ledgers  WHERE deleteid='0'   AND order_id='" . $_GET['order_id'] . "'  AND party_type='1' AND debits>=0");
            // $resultgg = $queryget->result();
            // foreach ($resultgg as  $valuegg) {
            //     $le_amount_check=$valuegg->debits;
            // }


             if($tablenamemain == 'orders_process') 
             {



                $data_roundoff['order_id'] = 0;
                $data_roundoff['customer_id'] =372;
                $data_roundoff['user_id'] = $this->userid;
                $data_roundoff['notes'] = 'Round off - Order Process ' . $order_no;
                $data_roundoff['deletemod'] = 'ROUND-'.$order_no;
                $data_roundoff['credits'] =  $minisroundoff;
                $data_roundoff['debits'] =  0;
                $data_roundoff['order_no'] = $order_no;
                $data_roundoff['reference_no'] = $order_no;
                $data_roundoff['party_type'] = 5;
                $data_roundoff['account_head_id'] = 372;
                $data_roundoff['account_heads_id_2'] = 372;
                $data_roundoff['payment_date'] = $create_date_val;
                $data_roundoff['payment_time'] = date('h:i A');
                $data_roundoff['bank_id'] = 0;

                       if($order_base=='-2')
                        {
                          if($mobile_order==1)
                           {

                                   $data_roundoff['deleteid'] = 1021;
                            }

                        }
                
                if($minisroundoff>0)
                {


                    $rounoffcheck=$this->db->query("SELECT id  FROM all_ledgers  WHERE deletemod='".$data_roundoff['deletemod']."' AND order_no='".$order_no."' AND party_type=5 AND customer_id=372");
                    $rounoffcheck = $rounoffcheck->result();
                    if(count($rounoffcheck)==0)
                    {
                          $this->Main_model->insert_commen($data_roundoff , 'all_ledgers');
                    }
                    else
                    {
                        

                         $this->db->query("UPDATE all_ledgers SET credits='".$minisroundoff."',debits=0 WHERE deletemod='".$data_roundoff['deletemod']."' AND order_no='".$order_no."' AND party_type=5 AND customer_id=372");


                    }


                }



                       
                              $totaldebit=round($discountfulltotal,2);
 $debits_last_value=0;
            $debits_value=$this->db->query("SELECT debits  FROM all_ledgers  WHERE order_id='".$_GET['order_id']."' AND order_no='".$order_no."' AND party_type=1  AND deleteid=0");
            $debits_value = $debits_value->result();
            foreach ($debits_value as $ss) {
                $debits_last_value = $ss->debits;
            }

if($debits_last_value!=$totaldebit)
{

    
$this->db->query("UPDATE all_ledgers SET debits='".$totaldebit."' WHERE order_id='".$_GET['order_id']."' AND order_no='".$order_no."' AND party_type=1  AND deleteid=0");



}

$this->db->query("UPDATE all_ledgers SET order_date='".$create_date_check."',update_date=update_date  WHERE order_id='".$_GET['order_id']."' AND order_no='".$order_no."' AND party_type=1  AND deleteid=0");



                        


             }



   $bill_total=round($discountfulltotal,2);

$gstValue = 0;
if($create_date_check > '2024-05-31'){

$gstValue =$get_gst_price;

}

               $chh=date('2024-01-05');
              if($create_date_check>$chh)
              {

                    if($commission_check_fact==1)
                     {


                        $this->db->query("UPDATE $tablenamemain SET  bill_total_fact='" .round($org_fulltotal_without_commision + $gstValue) . "',without_commsision_total='" . round($org_fulltotal_without_commision + $gstValue) . "' WHERE id='" .$_GET["order_id"] ."'" );

                     }


                    if($commission_check==1)
                    {


                         $this->db->query("UPDATE $tablenamemain SET bill_total_rate='" .round($org_fulltotal_without_commision + $gstValue) . "',without_commsision_total='" . round($org_fulltotal_without_commision + $gstValue) . "' WHERE id='" .$_GET["order_id"] ."'" );

                    }

             }
             else
             {


                    if($commission_check_fact==1)
                     {


                        $this->db->query("UPDATE $tablenamemain SET  bill_total_fact='" .round($without_commsision_total + $gstValue) . "' WHERE id='" .$_GET["order_id"] ."'" );

                     }


                    if($commission_check==1)
                    {


                         $this->db->query("UPDATE $tablenamemain SET bill_total_rate='" .round($without_commsision_total + $gstValue) . "' WHERE id='" .$_GET["order_id"] ."'" );

                    }

             }

  


         if($commission_check_fact==0 && $commission_check==0)
         {


             $this->db->query("UPDATE $tablenamemain SET without_commsision_total='" . $bill_total . "' WHERE id='" .$_GET["order_id"] ."'" );
    


         }



if($commission_check_fact==0)
{


$this->db->query("UPDATE $tablenamemain SET bill_total_rate='" .round($org_fulltotal_without_commision + $gstValue) . "',without_commsision_total='" . round($org_fulltotal_without_commision + $gstValue) . "' WHERE id='" .$_GET["order_id"] ."'" );

}

$this->db->query("UPDATE $tablenamemain SET bill_total='" . $bill_total . "' WHERE id='" .$_GET["order_id"] ."'" );
    















$credit_limit_status='0';



$tabless = array("orders","orders_quotation");
if(in_array($tablenamemain, $tabless))
{
            


if($credit_status=='YES')
{


            if($credit_limit>0)
            {

                         $credit_limit_set=$credit_limit;
                         $credit_limit_check=0;
   

                         $getstatus=1;
                         $queryget=$this->db->query("SELECT SUM(a.credits) as totalcridit,SUM(a.debits) as totaldebit FROM all_ledgers  as a  WHERE  a.deleteid='0' AND a.party_type=1   AND a.customer_id='".$customer_id."'  AND a.cnn_status=0 ORDER BY a.id DESC");
                     
                         $resultgg = $queryget->result();
                         foreach ($resultgg as  $valuegg) 
                         {
                                                    $valueset=$valuegg->totalcridit-$valuegg->totaldebit;
                                                    if($valueset>=0)
                                                    {
                                                        $getstatus=1;
                                                        $getstatus2='CR';

                                                    }
                                                    else
                                                    {
                                                        $getstatus=0;
                                                        $getstatus2='DR';
                                                    }
                                                    $credit_limit_check=str_replace('-','', $valueset);
                                                    

                         }

                   

                      if($credit_limit_check>=0)
                      {

                              $credit_limit_check_val=$credit_limit_check-$bill_total;



                              if($getstatus==1)
                              {


                               $credit_limit=$credit_limit+$credit_limit_check;
                              

                              }
                              else
                              {
                                $credit_limit=$credit_limit-$credit_limit_check;
                              }
                             

                              
                              $excess=$bill_total-$credit_limit;
                              
                              

                              if($credit_limit<$bill_total)
                              {




$credit_limit_status="Closing Balance - ".$getstatus2." : ".round($credit_limit_check).", Credit Limit : ".$credit_limit_set.", Excess :  ".round($excess);
$this->db->query("UPDATE $tablenamemain SET reason='".$credit_limit_status."' WHERE id='".$_GET['order_id']."' AND order_base=0");



                              }
                              else
                              {


                                        if($tablenamemain=='orders')
                                        {
                                            $ss='Open Enquiry';
                                        }
                                        else
                                        {
                                             $ss='Open Quotation';
                                        }


                                         
                        $this->db->query("UPDATE $tablenamemain SET reason='".$ss."' WHERE id='".$_GET['order_id']."' AND order_base=0");



                              }


                      }
                   


            }
            else
            {
                                if($tablenamemain=='orders')
                                {
                                    $ss='Open Enquiry';
                                }
                                else
                                {
                                     $ss='Open Quotation';
                                }


                                $this->db->query("UPDATE $tablenamemain SET reason='".$ss."' WHERE id='".$_GET['order_id']."' AND order_base=0");
            }




        }
        else
        {


                                   if($tablenamemain=='orders')
                                    {
                                        $ss='Open Enquiry';
                                    }
                                    else
                                    {
                                         $ss='Open Quotation';
                                    }
                                   $this->db->query("UPDATE $tablenamemain SET reason='".$ss."' WHERE id='".$_GET['order_id']."' AND order_base=0");
     
        }


    }
















if($roundoff_val=='-')
{
    $minisroundoffround=$minisroundoff+$getdataminis;
}
else
{
    $minisroundoffround=$minisroundoff+$getdataminis;
}

$minisroundoffround=round($minisroundoffround,2);



    

         if($approved_status <= 0)
         {

                    if($tablenamemain=='orders_quotation')
                    {

                       $credit_limit_status = 'Customer Verification Pending';

                    }


            if($tablenamemain!='orders_process')
            {

            $cc = "Customer Verification Pending";
            $this->db->query("UPDATE $tablenamemain SET reason='" .  $cc ."' WHERE id='" . $_GET["order_id"] ."' AND order_base>=0");

            }
                      
            
         }

        if ($account_number != "") {
            $bank_name = "HDFC BANK";
            $ifsccode = "";
            $branch = "";
        } else {
            $account_number = "1643135000001944";
            $bank_name = "KARUR VYSYA BANK";
            $ifsccode = "KVBL0001643";
            $branch = "AVINASHI";
        }

        $resultdis = $this->Main_model->where_names_two_order_by(
            $tablenamemain,
            "id",
            $_GET["order_id"],
            "deleteid",
            "0",
            "id",
            "DESC"
        );
        foreach ($resultdis as $valuedis) {
            $commision_value = 0;
            if ($valuedis->commission_check == 1) {
                $commision_value =
                    $valuedis->bill_total - $valuedis->bill_total_rate;
            }

            if ($valuedis->commission_check_fact == 1) {
                $commision_value_fact =
                    $valuedis->bill_total - $valuedis->bill_total_fact;
                $commision_value = $commision_value_fact;
            }
        }

            if($valuedis->create_date > '2024-05-31'){
                
                $commision_value = $commision_value * 1.18;
                $commision_value = round($commision_value);

                if($tcsamount>0)
                {


             $commision_value =round($total_sub_total_with_commission-$total_sub_total_with_out_commission);
                       
                }



            } 



  $this->db->query("UPDATE $tablenamemain SET commsision_amount='" .  $commision_value ."' WHERE id='" . $_GET["order_id"] ."'");          
       
  if($tablenamemain == 'orders_process') 
  {



                   $tcsset='TCS-'.$order_no;

                  $tcscheck=$this->db->query("SELECT id  FROM all_ledgers  WHERE deletemod='".$tcsset."' AND order_no='".$order_no."' AND party_type=5 AND customer_id=166");
                    $tcscheck = $tcscheck->result();
                    if(count($tcscheck)==0)
                    {



                        $data_tcs['order_id'] = 0;
                        $data_tcs['customer_id'] = 166;
                        $data_tcs['user_id'] = $this->userid;
                        $data_tcs['notes'] = 'TCS - Order Process ' . $order_no;
                        $data_tcs['credits'] =  $tcsamount;
                        // $data_tcs['debitstoatal'] =  $tcsamount;
                        $data_tcs['order_no'] = $order_no;
                        $data_tcs['reference_no'] = $order_no;
                        $data_tcs['party_type'] = 5;
                        $data_tcs['account_head_id'] = 142;
                        $data_tcs['account_heads_id_2'] = 142;
                        $data_tcs['payment_date'] = $create_date_val;
                        $data_tcs['payment_time'] = date('h:i A');

                        $data_tcs['tcs_status'] = 1;

                        $data_tcs['deletemod'] = $tcsset;
                        
                        $data_tcs['bank_id'] = 0;

                        if($order_base=='-2')
                        {
                          if($mobile_order==1)
                           {

                                   $data_tcs['deleteid'] = 1021;
                            }

                        }

                        if($tcsamount>0)
                        {
                            $this->Main_model->insert_commen($data_tcs, 'all_ledgers');
                        }
                        
                        



                    }
                    else
                    {

                          if($tcsamount>0)
                        {
                            if($tcs_status=='1')
                            {


                              $deleteids=0;
                              if($order_base=='-1')
                              {
                                 $deleteids=13;
                              }

                              if($order_base=='-2')
                              {
                                 $deleteids=1021;
                              }

$this->db->query("UPDATE all_ledgers SET credits='".$tcsamount."',debits=0,deleteid='".$deleteids."' WHERE customer_id='166'  AND order_no='".$order_no."' AND party_type=5  AND deletemod='".$tcsset."'");
                            }

                        }

                          if($tcs_status!='1')
                            {

$this->db->query("UPDATE all_ledgers SET deleteid='34' WHERE customer_id='166'  AND order_no='".$order_no."' AND party_type=5  AND deletemod='".$tcsset."'");

                            }

                    }

     


  }





            if($commision_value>0)
            {


             if($tablenamemain == 'orders_process') 
             {







$de='CMM'.$order_no;
$this->db->query("UPDATE all_ledgers SET credits='".$commision_value."',debits=0 WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0  AND deletemod='".$de."'");

//$this->db->query("UPDATE all_ledgers SET md_verification='0',notes='commission value Changed Re-Updated' WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0  AND deletemod='".$de."' AND md_verification=1 AND collected_amount!='".$commision_value."'");

$this->db->query("UPDATE all_ledgers SET debits='".$commision_value."',credits=0 WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0 AND account_head_id=154 AND credits=0");



//$this->db->query("UPDATE all_ledgers SET credits='".$commision_value."' WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0 AND account_head_id=48");




             }



            }


            if($collection_remarks>0)
            {
                $collection_remarks=$collection_remarks;
            }
            else
            {
                $collection_remarks=$discountfulltotal;
            }

//For GST Task, Creating SGST and CGST from july 1

            if($create_date_check > '2024-05-31'){
                $fullTotal = round($discountfulltotal_base,2);
                $org_fulltotal = round($discountfulltotal - $minisroundoffround, 2);
            }else{
                $fullTotal = round($discountfulltotal_base-$amounttotalgst,2);
                $org_fulltotal =  round($org_fulltotal,2);
            }

            
  if($tablenamemain == 'orders_process') 
  {


  $this->db->query("UPDATE $tablenamemain SET bill_sub_total='".$fullTotal."' WHERE id='" . $_GET["order_id"] ."'");          


   }

if($tcs_status==1)
{
    $this->db->query("UPDATE customers SET tcs_status='" . $tcs_status . "' WHERE id='" .$customer_id ."' AND tcs_status=0");
}


          $array = [
            "order_no_id" => $order_no,
            "commissiontotal" => $commision_value,
            "collection_remarks" => $collection_remarks,
            "bank_name" => $bank_name,
            "ifsccode" => $ifsccode,
            "branch" => $branch,
            "print_status"=>$print_status,
            "approved_status"=>$approved_status,
            "customer_id"=>$customer_id,
            "account_number" => $account_number,
            "convertion"=>$convertion,
            "gate_login_view_status"=>$gate_login_view_status,
            "delivery_status_check" => $delivery_status_check,
            "minisroundoffround" => $minisroundoffround,
            "SSD_check" => $SSD_check,
            "tcs_status"=>$tcs_status,
            "gst_view" => $gst_view,
            "payment_mode" => $payment_mode,
            "excess_payment_status" => $excess_payment_status,
            "delivery_date_time" => $delivery_date_time,
            "tcsamount" => $tcsamount,
            "statusview" => $statusview,
            "order_base" => $order_base,
            "discountPre"=>$discountPre,
            "reason" => $reason,
            "user_id_check" => $user_id_check,
            "user_id" => $user_id,
            "salesphone" => $salesphone,
            "salesphone2" => $salesphone2,
            "salesname" => $salesname,
            "credit_limit_status" => $credit_limit_status,
            "reason" => $reason,
            "paricel_mode" => $paricel_mode,
            "production_assign" => $production_assign,
            "mark_date" => $mark_date,
            "create_date" => $create_date,
            "create_time" => $create_time,
            "minisroundoff" => $minisroundoff,
            "roundoff_val" => $roundoff_val,
            "symble"=>$symble,
            "roundoffstatusval_data" => $roundoffstatusval_data,
           //For GST Task, Creating SGST and CGST from july 1
 "create_date_formatted" => $create_date_check,
            //Removed GST Amount from total
            // "fulltotal" => round($discountfulltotal_base-$amounttotalgst, 3),
            "fulltotal" =>  $fullTotal,

//For GST Task, Creating SGST and CGST from july 1

            //Roundoff from grandtotal
            // "org_fulltotal" => round($org_fulltotal, 2),
            "org_fulltotal" => $org_fulltotal,
            "discountfulltotal" => round($discountfulltotal, 2),
            "totalitems" => count($result),


            // "gsttotal" => round($amounttotalgst/2, 3),
            //gg changes
            "gsttotal" => $amounttotalgst_roundoff_total,


            "discount" => round($discount,2),
            "commission" => round($commission, 2),
            "amounttotal_with_out_commission" => round(
                $amounttotal_with_out_commission,
                2
            ),
            "Meter_to_Sqr_feet" => round($Meter_to_Sqr_feet, 2),
            "Sqr_feet_to_Meter" => round($Sqr_feet_to_Meter, 2),
            "NOS" => round($nos, 2),
            "UNIT" => round($unit, 2),
            "FACT" => round($fact, 2),
            "fullqty" => round($fullqty, 2),
            "sst_set"=>$sst_set
        ];
            echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_production_details() {
       
       
       
        $result = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE  a.order_base = '1' AND b.deleteid = '0' AND b.product_id='".$_GET['product_id']."' GROUP BY b.product_id ORDER BY b.product_id ASC");
        $result = $result->result();
       
       
       
        foreach ($result as $value) {
          
            $order_id=$value->order_id;
            $order_no= $value->order_no;
            $production_assign=$value->production_start;
            $create_date = date('d-m-Y', strtotime($value->create_date));
            $create_time = $value->create_time;
           
        }
       
       
        $array = array('order_no_id' => $order_no,
        'order_id'=>$order_id,
        'reason'=>'Yet To Start',
        'order_no' => $order_no,
        'production_assign' => $production_assign,
        'create_date' => $create_date,
        'create_time' => $create_time ); 
       
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      public function fetch_single_data_totaldel_view_base() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        
        $result = $this->Main_model->where_names_two_order_by($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($result as $value) {

            $rate= $value->rate+$value->commission;
            if ($value->paricel_mode == 1) {



            
                
                if($value->modify_qty==0)
                {
                    $value->modify_qty=$value->qty;
                }
                
                $amounttotals+= round($rate*$value->modify_qty,2);

                $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty,2);
                $fullqtys+= $value->modify_qty;
            }
            
            
            $amounttotal+= $rate*$value->qty;
            $amounttotal_with_out_commission+= $value->rate * $value->qty;
            $fullqty+= $value->qty;
            $amounttotalgst+=$rate * $value->qty * $value->gst / 100;
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        
        
        
        
        
        
        
        
        
        
            $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM $tablename  WHERE order_id='".$value->id."' AND deleteid=0");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
           $lengeth=round($lengeth,2);
        
        
        
        
     
        
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $paricel_mode = $valuedis->paricel_mode;
            $delivery_mode = $valuedis->delivery_mode;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $start_reading = $valuedis->start_reading;
              $customer_id = $valuedis->customer_id;
              $tcs_status = $valuedis->tcs_status;
              $tcsamount = $valuedis->tcsamount;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        if ($paricel_mode == 1) {
            $amounttotal = $amounttotals;
            $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
            $fullqty = $fullqtys;
        }
         $roundoff = $amounttotal;



        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
             $discountfulltotal_base = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
          
            $discountfulltotal_base = $roundoff - $discount - $minisroundoff;

        }
        
        



         
          $table = array("orders","orders_process", "orders_quotation");

          if (in_array($tablenamemain, $table))
          {
              

              if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              


          }




        $discountfulltotal=$discountfulltotal+$tcsamount;










            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



          
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                            $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }






                    $weight=0;
                    $query_weight_get = $this->db->query("SELECT SUM(weight) as totalweight FROM $tablename  WHERE order_id='".$value->id."' AND deleteid=0");
                    $result_totalweight = $query_weight_get->result();
                    foreach ($result_totalweight as $we) {
                        $weight = $we->totalweight;
                    }
            







        
        
        $array = array('order_no_id' => $order_no, 'user_id' => $user_id,'tcsamount' => $tcsamount, 'salesphone' => $salesphone,'lengeth' => $lengeth, 'weight' => round($weight,2),'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal_base-$amounttotalgst,2), 'discountfulltotal' => round($discountfulltotal,2), 'totalitems' => count($result), 'discount' => round($discount), 'gsttotal' => round($amounttotalgst,2), 'commission' => round($commission,2), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 2), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 2), 'NOS' => round($nos, 2), 'UNIT' => round($unit, 2), 'FACT' => round($fact, 2), 'fullqty' => round($fullqty, 2));
        echo json_encode($array);
    }
    
    
    public function fetch_single_data_totaldel() {
        
        $amounttotal = 0;
               $Meter_to_Sqr_feet = 0;
               $Sqr_feet_to_Meter = 0;
               $discount = 0;
               $fullqty = 0;
               $nos = 0;
               $unit = 0;
               $fact = 0;
               $commission = 0;
               $amounttotal_with_out_commission = 0;
               $amounttotal_with_out_commissions = 0;
               $amounttotals = 0;
               $fullqtys = 0;
               $amounttotalgst = 0;
               $loadamount=0;
               $unbilledloadamount=0;
                  $deliveredamount=0;
                  $picked_amount=0;
                  $fullloaded_by=0;
               $form_data = json_decode(file_get_contents("php://input"));
               $tablenamemain = $form_data->tablenamemain;
               $tablename = $form_data->tablename_sub;
               $convert = $form_data->convert;
               
               
                $driver_pickip=0;
               
                if(isset($form_data->driver_pickip))
                {
                    $driver_pickip = $form_data->driver_pickip;
                    
                }
                
       
       
                if (isset($_GET['DC_id']))
                {
       
                       $DC_id = $_GET['DC_id'];
                       $loadset=' AND ss.randam_id="'.$DC_id.'"';
       
                } 
               
       
                $JOIN=' JOIN order_delivery_order_status as ds ON a.order_id=ds.order_id JOIN sales_load_products as ss ON a.id=ss.order_product_id';
       
               if($driver_pickip==0)
               {
                   $result = $this->db->query("SELECT a.* FROM $tablename as a  $JOIN WHERE a.order_id='" . $_GET['order_id'] . "' AND   a.deleteid=0 AND a.loadstatus_by_cate=0  AND a.product_id!='' AND ss.loadstatus=1 $loadset GROUP BY a.id ORDER BY a.categories_id,a.sort_id ASC");
                   $result = $result->result();
               }
               else
               {
                    $result = $this->db->query("SELECT a.* FROM $tablename as a  $JOIN WHERE a.order_id='" . $_GET['order_id'] . "' AND    a.deleteid=0 AND a.loadstatus_by_cate=0  AND a.product_id!='' AND ss.loadstatus=1 $loadset GROUP BY a.id ORDER BY a.categories_id,a.sort_id ASC");
                    $result = $result->result();
               }
               
          
               
                
              
               foreach ($result as $value)
               {
       
       
                     $rate= $value->rate+$value->commission;
                 
                   
                   $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
                  
                  
                   foreach ($resultload as $valueload)
                   {
       
       
       
                       if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                       {
                                       $fullloaded_by+= $valueload->amount;
                        }
       
       
       
                        if($valueload->order_id==$value->order_id && $valueload->randam_id==$DC_id)
                        {
       
                                   if($valueload->loadstatus==1)
                                   {
                                       $loadamount= $valueload->amount;
                                   }
                                   
                                   if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                                   {
                                       $unbilledloadamount+= $valueload->amount;
                                   }
       
       
       
                                   if($valueload->pickedstatus==1)
                                   {
       
                                   //print_r($valueload);exit;
       
                                   $amount_things=$valueload->qty * $valueload->rate;
       
                                       $decimalPosition = strpos((string)$amount_things, '.');
                   
                                       // Check if there's a decimal point and more than 2 digits after it
                                       if ($decimalPosition !== false && strlen(substr((string)$amount_things, $decimalPosition + 1)) > 2) {
                                           // Truncate to 2 decimal places without rounding
                                           $amount_things = floor($amount_things * 100) / 100;
                                       }
                                       
       
       
                                       $picked_amount+= $amount_things;
                                   }
       
       
       
       
       
       
                        }
       
       
       
                                  
       
       
       
                       
                   }
       
       
                 
       
                   
                   
                   
                   //$amounttotal+= $rate*$value->qty;
                   $amounttotal+= $loadamount;
                   $amounttotal_with_out_commission+= $value->rate * $value->qty;
                   $fullqty+= $value->qty;
                   $amounttotalgst+= $rate * $value->qty * $value->gst / 100;
                   $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
                   $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
                   $commission+= $value->commission;
                   $nos+= $value->nos;
                   $unit+= $value->unit;
                   $fact+= $value->fact;
               }
       
               
                  $deliveredamount=0;
                  $resultloads = $this->Main_model->where_names('sales_load_products', 'order_id', $_GET['order_id']);
                   foreach ($resultloads as $valueloads)
                   {
       
                                  if($valueloads->loadstatus==1 && $valueloads->delivered_products==1)
                                   {
                                       $deliveredamount+= $valueloads->amount;
                                   }
                   }
               
              $lengeth=0;
              $driver_name="";
              $vehicle_name="";
               $start_reading = "";
               $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
               foreach ($resultdis as $valuedis) {
                   $production_assign = $valuedis->production_assign;
                   $discount = $valuedis->discount;
                   $order_no = $valuedis->order_no;
                   $user_id = $valuedis->user_id;
                   $minisroundoff = $valuedis->roundoff;
                   $roundoffstatus = $valuedis->roundoffstatus;
                   $paricel_mode = $valuedis->paricel_mode;
                   $bill_total = $valuedis->bill_total;
                   $delivery_mode = $valuedis->delivery_mode;
                   $create_date = date('d/m/Y', strtotime($valuedis->create_date));
                   $create_time = $valuedis->create_time;
                   $create_date_val = $valuedis->create_date;
                   $reason = $valuedis->reason;
                   $start_reading = $valuedis->start_reading;
                   $customer_id= $valuedis->customer_id;
                   $tcs_status = $valuedis->tcs_status;
                   $tcsamount = $valuedis->tcsamount;
       
       
       
       
                //   $delivery_charge = $valuedis->delivery_charge;
       
       
                $query_scope = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "' AND randam_id='" . $DC_id. "' ORDER BY id DESC LIMIT 1");
                $scope_changes = $query_scope->row(); 
                
                $delivery_charge = $scope_changes->delivery_charge;
       
       
       
       
       
                    $trip_id = $valuedis->trip_id;
       
        if($valuedis->return_amount>0)
                   {
                            $return_amount = $valuedis->return_amount;
                   }
                   
       
                                           if($valuedis->vehicle_id>0)
                                           {
       
       
                                                   $vehicle = $this->Main_model->where_names(
                                                       "vehicle",
                                                       "id",
                                                       $valuedis->vehicle_id
                                                   );
                                                   foreach ($vehicle as $vehicle_v) {
                                                       $vehicle_name = $vehicle_v->vehicle_name.' | '.$vehicle_v->vehicle_number;
                                                       $vehicle_id = $vehicle_v->id;
                                                   }
       
                                                   $driver = $this->Main_model->where_names(
                                                       "driver",
                                                       "vehicle_id",
                                                       $vehicle_id
                                                   );
                                                   foreach ($driver as $valuess) 
                                                   {
                                                       $driver_id = $valuess->id;
                                                       $driver_name = $valuess->name.' | '.$valuess->phone;
       
                                                   }
       
                                           }
       
       
       
                   $delivery_date_time = $valuedis->delivery_date_time;
                   $SSD_check = $valuedis->SSD_check;
                   $excess_payment_status = $valuedis->excess_payment_status;
       
       
       
                   $company_name_data = "";
                   $email = "";
                   $phone = "";
                   $address = "";
                   $localityid=0;
                   $customers = $this->Main_model->where_names('customers', 'id', $valuedis->customer_id);
                   foreach ($customers as $csval)
                    {
                       $localityid=$csval->locality;
                       $company_name_data = $csval->company_name;
                       $email = $csval->email;
                       $phone = $csval->phone;
                       $map = $csval->google_map_link;
                       $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                   }
       
       
       
                    $assign_date = date('d-m-Y', strtotime($valuedis->assign_date));
                    $assign_time = $valuedis->assign_time;
       
                    $lengeth=$this->maxlength($valuedis->id);
                 
       
       
       
                   
               }
               if ($minisroundoff == '') {
                   $minisroundoff = 0;
               }
       
       
               $salesphone = "";
               $salesname = "";
               $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
               foreach ($resultsales as $valuesales) {
                   $salesphone = $valuesales->phone;
                   $salesphone2 = $valuesales->phone2;
                   $salesname = $valuesales->name;
               }
               
               $roundoff = $amounttotal;
       
       
       
       
               if ($roundoffstatus == 1) {
                   $discountfulltotal = $roundoff - $discount + $minisroundoff;
               } else {
                   $discountfulltotal = $roundoff - $discount - $minisroundoff;
               }
       
       
       
                 
       
       
              
       
                   
                   $discountfulltotal=$discountfulltotal+$tcsamount;
                  
                  if($picked_amount==0)
                  {
                       $pickedtotalamount=round($discountfulltotal,2);
                       
                  }
                  else
                  {
       
       
       
                      if($roundoffstatus == 1) 
                       {
                             $fulllpicked = $picked_amount-$discount+$minisroundoff;
                       } else {
                             $fulllpicked = $picked_amount-$discount-$minisroundoff;
                       }
                       
                       $pickedtotalamount=$discountfulltotal-$fulllpicked-$tcsamount;
                  
       
                  }
       
               
                
       
       
        
       
       
       
       // hided here because manual roundoff thing affected in whole amount not listed row

       /*
       
       
                      if($unbilledloadamount>0)
                      {
       
       
                           if($roundoffstatus == 1) 
                           {
                               $unbilledloadamount = $unbilledloadamount-$discount+$minisroundoff;
                           } else {
                               $unbilledloadamount = $unbilledloadamount-$discount-$minisroundoff;
                           }
       
       
       
                       }
       
       
       
                      if($picked_amount>0)
                      {
       
       
                           if($roundoffstatus == 1) 
                           {
                               $picked_amount = $picked_amount-$discount+$minisroundoff;
                           } else {
                               $picked_amount = $picked_amount-$discount-$minisroundoff;
                           }
       
       
       
                       }
       
       
       
       
       
       
       
                      
                
                      
                   if($deliveredamount>0)
                   {
       
       
                      
                        
                      if($roundoffstatus == 1) 
                       {
                           $deliveredamount = $deliveredamount-$discount+$minisroundoff;
                       } else {
                           $deliveredamount = $deliveredamount-$discount-$minisroundoff;
                       }
                   
       
                   }
       
       */
       
       
       
       
       
       
       
       
       
       
       
       
       
                   $whole = floor($discountfulltotal); 
                   $decimal1 = $discountfulltotal - $whole;
                   $totalval= round($decimal1,3);
       
       
       
                  
                   $roundoffstatusval_data="";
                   if($totalval!=0)
                   {
       
       
                           if($totalval>0.5)
                           {
                                  $getplusevalue=1-$totalval;
                                  $discountfulltotal=$discountfulltotal+$getplusevalue;
                                 
                                  if($getplusevalue>0)
                                  {
                                    $roundoffstatusval_data=" (+) ".$getplusevalue;
                                  }
       
                                 
       
       
                           }
                           else
                           {
       
                                   $discountfulltotal=round($discountfulltotal-$totalval);
                                  if($totalval>0)
                                  {
                                      $roundoffstatusval_data=" (-) ".$totalval;
                                  }
                                  
       
                           }
       
       
                   }
                    
                    $tcs_amount_get=0;
                    if($tcs_status==1)
                    {
       
       
                               $poin_to_member = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='" . $_GET['order_id'] . "' AND tcs_amount_get>0 AND randam_id='".$DC_id."'");
                               $poin_to_member = $poin_to_member->result();
       
                          
       
                              
                               foreach($poin_to_member as $tcs)
                               {
                                      $tcs_amount_get=$tcs->tcs_amount_get;
                               }
       
                               if($unbilledloadamount>0)
                               {
                                   $unbilledloadamount=$unbilledloadamount+$tcs_amount_get;
                               }
       
                              
       
                           
                    }
       
       
                      if($loadamount==0)
                      {
                           $loadtotalamount=round($discountfulltotal,2);
       
       
                      }
                      else
                      {   
       
                          
                           if($roundoffstatus == 1) 
                           {
                               $fullloaded = $fullloaded_by+$tcs_amount_get-$discount+$minisroundoff;
                           } else {
                               $fullloaded = $fullloaded_by+$tcs_amount_get-$discount-$minisroundoff;
                           }
                           $loadtotalamount=round($discountfulltotal-$fullloaded,2);
                           
                      }
       
       
       
                       //babu
       
                    /*if($create_date_val>'2024-05-31')
                    {
       
       
       
                        $gstamountata_full=$discountfulltotal*0.18;
                        $discountfulltotal=round($discountfulltotal+$gstamountata_full);
       
                        $gstamountata_picked=$picked_amount*0.18;
                        $picked_amount=round($picked_amount+$gstamountata_picked);
       
                        $gstamountata_delviery=$loadtotalamount*0.18;
                        $loadtotalamount=round($loadtotalamount+$gstamountata_delviery);
       
       
                        $gstamountata_un=$unbilledloadamount*0.18;
                        $unbilledloadamount=round($unbilledloadamount+$gstamountata_un);
       
       
                        $gstamountata_del=$deliveredamount*0.18;
                        $deliveredamount=round($deliveredamount+$gstamountata_del);
       
       
                    }*/
       
                    //babu
       
                    // gg changes for tcs apply
                    if($create_date_val>'2024-05-31')
                    {
       
       
       
                        $gstamountata_full=$discountfulltotal*0.18;
                        $discountfulltotal=round($discountfulltotal+$gstamountata_full);
       
                
       // tcs apply changes
                        if($tcs_status==1)
                        {
                           $gstamountata_picked=$picked_amount*0.18;
                           $tcsamount_picked=round(($picked_amount+$gstamountata_picked)*0.1/100);
                           $picked_amount=round($picked_amount+$gstamountata_picked+$tcsamount_picked);
                        }else {
                           $gstamountata_picked=$picked_amount*0.18;
                           $picked_amount=round($picked_amount+$gstamountata_picked);
                        }


                                    
                            if($picked_amount>0)
                            {
            
            
                                if($roundoffstatus == 1) 
                                {
                                    $picked_amount = $picked_amount-$discount+$minisroundoff;
                                } else {
                                    $picked_amount = $picked_amount-$discount-$minisroundoff;
                                }
            
            
            
                            }
       
                     
                        $gstamountata_delviery=$loadtotalamount*0.18;
                        $loadtotalamount=round($loadtotalamount+$gstamountata_delviery);
       
                        if($tcs_status==1)
                        {
                                   $unbilledloadamount_gst=$unbilledloadamount*0.18;
                                   $tcsamount_picked_unbilled=round(($unbilledloadamount+$unbilledloadamount_gst)*0.1/100);
                                   $unbilledloadamount=round($unbilledloadamount+$unbilledloadamount_gst+$tcsamount_picked_unbilled);
                       }else {
                                   $unbilledloadamount_gst=$unbilledloadamount*0.18;
                                   $unbilledloadamount=round($unbilledloadamount+$unbilledloadamount_gst);
                       }
                        $gstamountata_del=$deliveredamount*0.18;
                        $deliveredamount=round($deliveredamount+$gstamountata_del);

                        

                            if($deliveredamount>0)
                            {
            
            
                                if($roundoffstatus == 1) 
                                {
                                    $deliveredamount = $deliveredamount-$discount+$minisroundoff;
                                } else {
                                    $deliveredamount = $deliveredamount-$discount-$minisroundoff;
                                }
            
            
            
                            }
       
       
                    }
       
        
                    if($tcs_status==1)
                    {
                               $bill_total_tcs=$bill_total*0.18;
                               $tcsamount=round(($bill_total+$bill_total_tcs)*0.1/100);
                              
                   }


           
if($unbilledloadamount>0)
{


     if($roundoffstatus == 1) 
     {
         $unbilledloadamount = $unbilledloadamount-$discount+$minisroundoff;
     } else {
         $unbilledloadamount = $unbilledloadamount-$discount-$minisroundoff;
     }



 }
        
        
       
        
       $unbilledloadamount=$picked_amount;
            //CHECK UPDATE     
       
       if($unbilledloadamount>0)
       {
          // $this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".round($unbilledloadamount)."' WHERE order_id='" . $_GET['order_id'] . "'  AND randam_id='".$DC_id."'"); 

        // gg changes 

         $this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".round($unbilledloadamount)."',total_picked_amount_confirmed='".round($picked_amount)."' WHERE order_id='" . $_GET['order_id'] . "'  AND randam_id='".$DC_id."' AND deleteid=0"); 


       }
              
       
       $deliveredamount=0;
       
      /* $resultloads_data = $this->Main_model->where_names('order_delivery_order_status', 'order_id', $_GET['order_id']);
       foreach ($resultloads_data as $valueloads_data)
       {
                    $deliveredamount+= $valueloads_data->driver_recived_payment;
       }*/


           // $resultloads_data = $this->Main_model->where_names('order_delivery_order_status', 'order_id', $_GET['order_id']);
           $resultloads_data = $this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_id',$_GET['order_id'], 'finance_status','4', 'id', 'DESC');

           foreach ($resultloads_data as $valueloads_data)
           {
                      //  $deliveredamount+= $valueloads_data->driver_recived_payment;
                        $deliveredamount+= $valueloads_data->total_picked_amount_confirmed;
           }
       
       
       
// For one rupee issue


// already loaded dc amount

$already_loaded_value_onpage=[];
$query = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "' AND delivery_notes_status=1 AND randam_id IS NOT NULL ");
$DC_list = $query->result();  
                                                   
foreach ($DC_list as $dd) { 

    $this->db->select('SUM(qty * rate) AS amount'); // Sum of qty * rate as amount
    $this->db->where('sales_load_products.randam_id', $dd->randam_id);
    $this->db->where('sales_load_products.loadstatus', 1);
    $dc_amount_data = $this->db->get('sales_load_products');
    $dc_amount = $dc_amount_data->row();

    $decimalPosition1 = strpos((string)$dc_amount->amount, '.');
            
    // Check if there's a decimal point and more than 2 digits after it
    if ($decimalPosition1 !== false && strlen(substr((string)$dc_amount->amount, $decimalPosition1 + 1)) > 2) {
        // Truncate to 2 decimal places without rounding
        $dc_amount->amount = floor($dc_amount->amount * 100) / 100;
    }

    $dc_amount_get=$dc_amount->amount*0.18;
    $this->db->where('orders_process.id', $dd->order_id);
    $orders_process_tcs_check = $this->db->get('orders_process');
    $tcs_check = $orders_process_tcs_check->row();

    if($tcs_check->tcs_status == '1') {
        $tcsamount_picked=round(($dc_amount->amount+$dc_amount_get)*0.1/100);
        $already_loaded_value_onpage[]=round($dc_amount->amount+$dc_amount_get+$tcsamount_picked);
    }else {
        $already_loaded_value_onpage[]=round($dc_amount->amount+$dc_amount_get);
    }


}


$is_final_partial=$_GET['sum_total_nos'];

  $finalbalnce=0;
  if($is_final_partial == '0') {

                              $dc_amount=array_sum($already_loaded_value_onpage);
                              

                                if($driver_pickip != '1') {
                                    $finalbalnce = round($bill_total,2) - $dc_amount - round($unbilledloadamount);
                                }else {

                                    $query = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "' ORDER BY id DESC");
                                    $DC_list_last = $query->row();  

                                    // check final dc
                                    if($DC_id == $DC_list_last->randam_id) {
                                        $finalbalnce = round($bill_total,2) - $dc_amount;
                                    }else {
                                        $finalbalnce=1;
                                        $unbilledloadamount=$unbilledloadamount-1;

                                        // here update balence
                                    }


                                }

                              if($finalbalnce == 1) {

                                $unbilledloadamount=$unbilledloadamount+1;
                                $picked_amount=$picked_amount+1;
                           
                              }

  }


// for 1 rupee issues
if($unbilledloadamount>0)
{


  $this->db->query("UPDATE order_delivery_order_status SET collection_remarks_2='".round($unbilledloadamount)."' WHERE order_id='" . $_GET['order_id'] . "'  AND randam_id='".$DC_id."' AND deleteid=0"); 
}

             
                        
                                                         
                 $array = array(
       
                   'order_no_id' => $order_no,
                    'trip_id' => $trip_id,
                    'tcs_status'=>$tcs_status,
                    'vehicle_name'=>$vehicle_name,  
                     'driver_name'=>$driver_name,
                     'picked_amount'=>round($picked_amount),
                     'pickedtotalamount'=>round($pickedtotalamount),
                     'phone'=>$phone,'address'=>$address,'company_name_data'=>$company_name_data,'lengeth'=>$lengeth,'delivery_charge'=>$delivery_charge,'assign_date' => $assign_date . ' ' . $assign_time,'delivery_date_time' => $delivery_date_time,'SSD_check' => $SSD_check,'excess_payment_status' => $excess_payment_status,'order_no' => $order_no,'tcsamount' => $tcsamount, 'unbilledloadamount' => round($unbilledloadamount),'deliveredamount' => round($deliveredamount),'loadtotalamount' => round($loadtotalamount),'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($bill_total,2), 'discountfulltotal' => round($discountfulltotal), 'totalitems' => count($result), 'discount' => round($discount,2), 'gsttotal' => $amounttotalgst, 'commission' => round($commission,2), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 2), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 2),'return_amount'=>$return_amount, 'NOS' => round($nos, 2), 'UNIT' => round($unit, 2), 'FACT' => round($fact, 2), 'fullqty' => round($fullqty, 2),

                     // For one rupee issue
                     'already_loaded_value_onpage'=>array_sum($already_loaded_value_onpage),
                     'finalbalnce_amount'=>$finalbalnce
                    
                    );
                 echo json_encode($array);
       
       
           }
           
           
    
    
           public function fetch_single_data_totaldel_driver() {
            $amounttotal = 0;
            $Meter_to_Sqr_feet = 0;
            $Sqr_feet_to_Meter = 0;
            $discount = 0;
            $fullqty = 0;
            $nos = 0;
            $unit = 0;
            $fact = 0;
            $commission = 0;
            $amounttotal_with_out_commission = 0;
            $amounttotal_with_out_commissions = 0;
            $amounttotals = 0;
            $fullqtys = 0;
            $amounttotalgst = 0;
            $loadamount=0;
            $form_data = json_decode(file_get_contents("php://input"));
            $tablenamemain = $form_data->tablenamemain;
            $tablename = $form_data->tablename_sub;
            $convert = $form_data->convert;
            $result = $this->Main_model->where_names_four_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','delivery_status', '0','loadstatus', '1', 'id', 'DESC');
            foreach ($result as $value)
            {
    
                 $rate= $value->rate+$value->commission;
                if ($value->paricel_mode == 1) {
                    
                   
                    
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                    
                    $amounttotals+= round($rate*$value->modify_qty,2);
                    $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty, 2);
                    $fullqtys+= $value->modify_qty;
                }
                
                
                $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
                
                foreach ($resultload as $valueload)
                {
                    if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                    {
                        $loadamount+= $valueload->amount;
                    }
                    
                }
                
                
                $amounttotal+= $rate*$value->qty;
                $amounttotal_with_out_commission+= $value->rate * $value->qty;
                $fullqty+= $value->qty;
                $amounttotalgst+= $rate * $value->qty * $value->gst / 100;
                $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
                $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
                $commission+= $value->commission;
                $nos+= $value->nos;
                $unit+= $value->unit;
                $fact+= $value->fact;
            }
            
         
            
            $start_reading = "";
            $return_amount=0;
            $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
            foreach ($resultdis as $valuedis) {
                $production_assign = $valuedis->production_assign;
                $discount = $valuedis->discount;
                $order_no = $valuedis->order_no;
                $user_id = $valuedis->user_id;
                $minisroundoff = $valuedis->roundoff;
                $roundoffstatus = $valuedis->roundoffstatus;
                $paricel_mode = $valuedis->paricel_mode;
                $delivery_mode = $valuedis->delivery_mode;
                $create_date = date('d/m/Y', strtotime($valuedis->create_date));
                $create_time = $valuedis->create_time;
                $reason = $valuedis->reason;
                $start_reading = $valuedis->start_reading;
                $trip_id = $valuedis->trip_id;
                $sort_id = $valuedis->sort_id;
                $bill_total = $valuedis->bill_total;
                 $tcsamount = $valuedis->tcsamount;
                     // $delivery_charge = $valuedis->delivery_charge;

                // gg changes scope feature changes

                $query_scope = $this->db->query("SELECT *  FROM order_delivery_order_status  WHERE  order_id='" . $_GET['order_id'] . "'AND randam_id='" . $_GET['DC_id'] . "' ORDER BY id DESC LIMIT 1");
                $scope_changes = $query_scope->row(); 
            
                $delivery_charge = $scope_changes->delivery_charge;





                    if($valuedis->return_amount>0)
                    {            

                            $return_amount_tcs=0;
                            $return_amount_total = $valuedis->return_amount;
                            if($valuedis->tcs_status == '1') {
                                $return_amount_tcs = $return_amount_total*0.001;
                            }
                            $return_amount=round($return_amount_total+$return_amount_tcs);
                    }
                    
                
    
    
    
            }
    
    
                 
    
    
                     
    
                     $query_profle_gets = $this->db->query("SELECT start_reading FROM $tablenamemain WHERE   trip_id='".$trip_id."' AND start_reading>0");
                     $result_lengeths = $query_profle_gets->result();
                     foreach ($result_lengeths as $valuesss) {
                      
                          $start_reading=$valuesss->start_reading;
                         
    
                     }
    
    
    
                    $last_trip_sort_id=0;
                     
    
                     $query_profle_gets = $this->db->query("SELECT sort_id FROM $tablenamemain WHERE  assign_status='2'  AND finance_status='3'   AND trip_id='".$trip_id."'  ORDER BY sort_id DESC LIMIT 1");
                     $result_lengeths = $query_profle_gets->result();
                     foreach ($result_lengeths as $valuesss) {
                      
                          $last_trip_sort_id=$valuesss->sort_id;
                         
    
                     }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if ($minisroundoff == '') {
                $minisroundoff = 0;
            }
            $salesphone = "";
            $salesname = "";
            $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
            foreach ($resultsales as $valuesales) {
                $salesphone = $valuesales->phone;
                $salesphone2 = $valuesales->phone2;
                $salesname = $valuesales->name;
            }
            if ($paricel_mode == 1) {
                $amounttotal = $amounttotals;
                $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
                $fullqty = $fullqtys;
            }
            $roundoff = $amounttotal-$return_amount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $roundoff - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $roundoff - $discount - $minisroundoff;
            }
            
            
                     $loadtotalamount=0;
                     if($loadamount!=0)
                    {
                       
                       
                        if ($roundoffstatus == 1) 
                        {
                            $discountfulltotal = $loadamount - $discount + $minisroundoff;
                            $loadtotalamount=$loadamount-$discount+ $minisroundoff;
                        } 
                        else 
                        {
                            $discountfulltotal = $loadamount - $discount - $minisroundoff;
                            $loadtotalamount=$loadamount-$discount- $minisroundoff;
                        }
                       
                       
                    }
                    
                    $is_collection_remarks=1;
                    if($scope_changes->collection_remarks==0)
                    {
                                 $is_collection_remarks=0;
                    }
                 
            
            
            
            
            $array = array('order_no_id' => $order_no,'sort_id' => $sort_id,'trip_id' => $trip_id, 'last_trip_sort_id' => $last_trip_sort_id,'loadtotalamount' => round($loadtotalamount),'return_amount' => round($return_amount),'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal), 'discountfulltotal' => round($bill_total), 'totalitems' => count($result), 'discount' => round($discount), 'gsttotal' => round($amounttotalgst,2), 'commission' => round($commission,2), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 2), 'NOS' => round($nos, 2), 'UNIT' => round($unit, 2), 'FACT' => round($fact, 2), 'fullqty' => round($fullqty, 2),'is_collection_remarks'=>$is_collection_remarks);
            echo json_encode($array);
        }
        
        
        
        
        
        
    
    
    
    
    
    
    
    public function fetch_single_data_totaldel_driver_return() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $loadamount=0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        
     
        
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            
            $driver_return = $valuedis->driver_return;
            
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $start_reading = $valuedis->start_reading;
        }
        
        
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        
        
        
        $array = array('order_no_id' => $order_no,
        'user_id' => $user_id,
         'driver_return' => $driver_return,
        'salesphone' => $salesphone, 'salesphone2' => $salesphone2,
        'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 
         'create_date' => $create_date, 'create_time' => $create_time);
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_single_data_total_vendor() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $result = $this->db->query("SELECT a.* FROM $tablename as a JOIN product_list as b ON b.id=a.product_id WHERE a.order_id='" . $_GET['order_id'] . "' AND b.link_to_purchase=1 AND a.deleteid=0 ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {

            
            $rate= $value->rate+$value->commission;

            $amounttotal+= $rate*$value->qty;
            $amounttotal_with_out_commission+= $value->rate * $value->qty;
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $fullqty+= $value->qty;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        $roundoff = $amounttotal;
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }
        $array = array('order_no_id' => $order_no, 'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal, 2), 'discountfulltotal' =>round($discountfulltotal,2), 'totalitems' => count($result), 'discount' => round($discount,2), 'commission' => round($commission,2), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 2), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 2), 'NOS' => round($nos, 2), 'UNIT' => round($unit, 2), 'FACT' => round($fact, 2), 'fullqty' => round($fullqty, 2));
        echo json_encode($array);
    }
    public function fetch_single_data() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $id = $form_data->order_product_id;
        $result = $this->Main_model->where_names($tablename, 'id', $id);
        foreach ($result as $value) {
            $output['id'] = $value->id;
            $output['sub_product_id'] = $value->sub_product_id;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            $output['reference_image'] = base_url() . $value->reference_image;
            $output['imagestatus'] = $imagestatus;
            $output['value_id'] = $value->value_id;
        }
        echo json_encode($output);
    }
    

    public function fetchcustomerorderdata() {
       $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $customer_id = 0;
        $result = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        $approx = 0;
        $order_base = 0;
        $commission_check = 0;
        $packaging = 0;
        $print = 0;
        $others = 0;
        $gst_check = 0;
        $competitorname = "";
        $details = "";


        
        foreach ($result as $valuec) {
            $customer_id = $valuec->customer_id;
            $order_base = $valuec->order_base;
            $mobile_order = $valuec->mobile_order;
            $paricel_mode= $valuec->paricel_mode;
            $finance_status = $valuec->finance_status;
            $commission_check = $valuec->commission_check;
            $commission_check_fact = $valuec->commission_check_fact;
            $gst_check = $valuec->gst_check;
            $SSD_check = $valuec->SSD_check;
            $excess_payment_status = $valuec->excess_payment_status;
             $delivery_date_time = $valuec->delivery_date_time;
           
            $packaging = $valuec->packaging;
            $base_check = $valuec->base_check;
            if($base_check==1)
            {
                $base=1;
            }
            $print = $valuec->print;
            $others = $valuec->others;
            $competitorname = $valuec->competitorname;
            $details = $valuec->details;
            $customer_address_id = $valuec->customer_address_id;
            $billing_address = $valuec->billing_address;
            $shipping_address = $valuec->shipping_address;
            if ($valuec->approx != "") {
                $approx = $valuec->approx;
            }
        }




        $delivery_address = "";
        $localityid="0";

        


       
       if($billing_address>0)
       {


                $localityid_billing="0";
                $company_name_billing="";
                $company_phone_billing="";
                $delivery_address_billing="";
                $gstno_billing=0;
                $de_address = $this->Main_model->where_names('customers_adddrss', 'id', $billing_address);
                foreach ($de_address as $valuedd)
                {
                     
                       $localityid_billing=$valuedd->locality;
                       $company_name_billing=$valuedd->name;
                       $company_phone_billing=$valuedd->phone;
                       $gstno_billing=$valuedd->gstno;
                       $delivery_address_billing = $valuedd->address1 . ' ' . $valuedd->address2 . '  ' . $valuedd->pincode . ' ' . $valuedd->state;
                
                }


        }

       if($shipping_address>0)
        {


                $delivery_address_shipping = "";
                $localityid_shiiping="0";
                $company_name_shipping="";
                $company_phone_shipping="";
                $gstno_shipping=0;
                $de_address = $this->Main_model->where_names('customers_adddrss', 'id', $shipping_address);
                foreach ($de_address as $valuedd)
                {

                      $localityid_shiiping=$valuedd->locality;
                      $company_name_shipping=$valuedd->name;
                      $company_phone_shipping=$valuedd->phone;
                      $gstno_shipping=$valuedd->gstno;
                      $delivery_address_shipping = $valuedd->address1 . ' ' . $valuedd->address2 . ' ' . $valuedd->pincode . ' ' . $valuedd->state;
                
                }


        }










        $fulltotal = 0;
        $resultorder = $this->db->query("SELECT SUM(b.commission) as total_commission,SUM(b.amount) as total_amount,SUM(a.discount) as total_discount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE a.customer_id='" . $customer_id . "'  AND a.finance_status='5'  AND b.deleteid=0 AND a.deleteid=0 AND a.order_base=1");
        $resultorder = $resultorder->result();
        foreach ($resultorder as $valueorder) {
            $total_amount = $valueorder->total_amount + $valueorder->total_commission;
            $total_discount = $valueorder->total_discount;
            $fulltotal = $total_amount - $total_discount;
        }
        $output = array();
        $resultcc = $this->Main_model->where_names('customers', 'id', $customer_id);
        foreach ($resultcc as $value)
         {
            

               

            if($value->virtual_accountno!='')
            {
                 $output['virtual_accountno'] =$value->virtual_accountno;
            }
            else
            {
                $output['virtual_accountno'] =$value->account_number;
            }
           


            $output['id'] = $value->id;
            $output['customer_id'] = $customer_id;
            $output['name'] = $value->name;
            $output['email'] = $value->email;
            
            $output['landline'] = $value->landline;
            $output['pin'] = $value->pin;
            $output['approx'] = $approx;
            $output['address1'] = $value->address1;
            $output['address2'] = $value->address2;
            $output['base_check'] = $base_check;

           
           $output['billing_address'] = $billing_address;
           $output['shipping_address'] = $shipping_address;
            $output['mobile_order'] = $mobile_order;
           $output['shipping_address_id'] = $shipping_address;



            
            $company_name_final = $value->company_name;
            $company_phone_final = $value->phone;

           
            if($billing_address>0)
            {

                 $company_name_final= $company_name_billing;
                 $company_name_data= $company_name_billing;
                 $company_phone_data = $company_phone_billing;
                 $address_data = $delivery_address_billing;
                 $gst = $gstno_billing;
                 

            }
            else
            {

                    $company_name_data= $value->company_name;
                    $company_phone_data = $value->phone;
                    $locality=$value->locality;
                    $address_data = $value->address1 . ' ' . $value->address2 . '  ' . $value->pincode . ' ' . $value->state;
                    $gst = $value->gst;
                  
            }


            if($shipping_address>0)
            {
                                                 

                                            $locality=$localityid_shiiping;
                                            $company_name_refer= $company_name_shipping;
                                            $phone_refer = $company_phone_shipping;
                                            $delivery_address = $delivery_address_shipping;
                                            $delivery_gst = $gstno_shipping;
            }
            else
            {


                                            $delivery_address = $value->address1 . ' ' . $value->address2 . '  ' . $value->pincode . ' ' . $value->state;
                                            $locality=$value->locality;
                                            $company_name_refer = $value->company_name;
                                            $phone_refer = $value->phone;
                                            $delivery_gst = $value->gst;

                          

            }

              
            if($gst=='')
            {
                 $output['gst'] = '';
            }
            else
            {
                 $output['gst'] = $gst;
            }


            $output['company_name'] = $company_name_final;
            $output['phone'] = $company_phone_final;


            $output['company_name_refer'] = $company_name_refer;
            $output['phone_refer'] = $phone_refer;
            $output['delivery_address'] =$delivery_address;



            $output['company_name_data'] = $company_name_data;
            $output['company_phone_data'] = $company_phone_data;

            $output['address_data'] = $address_data;
            $output['order_base'] = $order_base;



               
             if($delivery_gst=='')
            {
                 $output['delivery_gst'] = '';
            }
            else
            {
                 $output['delivery_gst'] = $delivery_gst;
            }
           




            $output['pincode'] = $value->pincode;
            $output['landmark'] = $value->landmark;
            $output['locality'] = $value->locality;
            $output['city'] = $value->city;
            $output['state'] = $value->state;
            $output['sales_group'] = $value->sales_group;
            $output['landline'] = $value->landline;
            $output['order_base'] = $order_base;
            $output['paricel_mode'] = $paricel_mode;

            $output['delivery_date_time'] = $delivery_date_time;


            $datefind= date('Y-m-d',strtotime($delivery_date_time));
            $timefind= date('g:i A',strtotime($delivery_date_time));
            $output['delivery_date_time_mark'] = $datefind.'T'.$timefind;

            $output['delivery_date_time'] = $delivery_date_time;

            if($datefind!='1970-01-01')
            {
                    $output['delivery_date'] = $datefind;
                    $output['delivery_time'] = $timefind;
            }
            



            
            $output['finance_status'] = $finance_status;
            $output['commission_check'] = $commission_check;
            $output['commission_check_fact'] = $commission_check_fact;
            $output['gst_check'] = $gst_check;
            $output['SSD_check'] = $SSD_check;
            $output['excess_payment_status'] = $excess_payment_status;
            $output['packaging'] = $packaging;
            $output['print'] = $print;
            $output['others'] = $others;
            $output['competitorname'] = $competitorname;
            $output['details'] = $details;







                $localityname = "";
                $route_id="";
                $resultlocality = $this->Main_model->where_names('locality', 'id',  $locality);
                foreach ($resultlocality as $vl) {
                    $localityname = $vl->name;
                    $route_id = $vl->route_id;
                }

                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }




            $user_group_name = '';
            $user_group = $this->Main_model->where_names('sales_group', 'id', $value->sales_group);
            foreach ($user_group as $row) {
                $user_group_name = $row->name;
            }
            $output['address'] = $value->address1 . ' , ' . $value->address2 . ' ' . $value->landmark . ' , ' . $localityname . ' , ' . $value->pincode;
            $output['sales_group_name'] = $user_group_name;
            $output['zone'] = $value->zone;
            $output['feedback_details'] = $value->feedback_details;
            $output['credit_limit'] = $value->credit_limit . ' Rs';
            $output['credit_period'] = $value->credit_period;
            $output['ratings'] = $value->ratings;
            $output['locality_name'] = $localityname;





            $output['route_name'] = $route_name;
            
                      
                        
                        if($value->credit_limit>0)
                        {
                            
                       
                                
                                $useage = 125 / $value->credit_limit * 100;
                                if (is_nan($useage) == 1) {
                                    $useage = 0;
                                }
                                if ($useage > 100) {
                                    $useage = 100;
                                }
                        
                        }
                        else
                        {
                            $useage = 0;
                        }
            
            $output['useage'] = round($useage, 1);
            $output['fulltotal_usage'] = round($fulltotal, 1) . ' Rs';
            if ($value->ratings == "") {
                $output['ratings'] = 0;
            } else {
                $output['ratings'] = $value->ratings;
            }
            $output['feedback_sub'] = $value->feedback_sub;
        }


        echo json_encode($output);
    }











    public function fetchCustomerorderdelevieryaddress() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $customer_id = 0;
        $result = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        $order_base = 0;
        foreach ($result as $valuec) {
            $customer_id = $valuec->customer_id;
            $order_base = $valuec->order_base;
            $customer_address_id = $valuec->customer_address_id;



        }


        
        
        if($customer_id==0)
        {
            $customer_id='ASD000';
        }
        
        $result = $this->Main_model->where_names('customers_adddrss', 'customer_id', $customer_id);
        $i = 1;
        $array = array();
        foreach ($result as $value) {


           
               $route_id = 0;
               $locality_name="";
               $routeset = $this->Main_model->where_names('locality', 'id', $value->locality);
                        foreach ($routeset as $routesetval) {
                            $route_id = $routesetval->route_id;
                            $locality_name= $routesetval->name;
               }

               $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }


                $query = $this->db->query("SELECT a.gst, a.gst_status 
                FROM `customers` as a 
                WHERE a.id = '". $customer_id."'   ");
                $query = $query->row();
                $gst_no=$query->gst;
                $gst_status=$query->gst_status;


            if ($value->deleteid == 0) {
                $array[] = array('no' => $i, 'id' => $value->id,'locality_name'=>$locality_name,'route_name'=>$route_name, 'phone' => $value->phone, 'name' => $value->name, 'address' => $value->address1 . ' ' . $value->address2 . ' ' . $value->landmark . ' ' . $value->zone . '-' . $value->pincode . ' ' . $value->city . ' ' . $value->state,'gstno' => $value->gstno, 'gst_status' => $value->gst_status, 'city' => $value->city, 'state' => $value->state, 'google_map_link' => $value->google_map_link);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchpricelist() {
        $form_data = json_decode(file_get_contents("php://input"));
        $result = $this->Main_model->where_names('competitor_price_list', 'product_id', $form_data->product_id);
        $i = 1;
        $array = array();
        foreach ($result as $value) {
            if ($value->deleteid == 0) {
                $array[] = array('no' => $i, 'sqft' => $value->sqft, 'price' => $value->price, 'vendor_name' => $value->vendor_name, 'updated_by' => $value->updated_by);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function addresspoint() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $datass['get_id'] = $form_data->order_id;
        $datass['customer_address_id'] = $form_data->address_id;
        $locality = 0;
        $laoclatset = $this->Main_model->where_names('customers_adddrss', 'id', $form_data->address_id);
        foreach ($laoclatset as $lolval) {
            $locality = $lolval->locality;
        }
        $route_id = 0;
        $routeset = $this->Main_model->where_names('locality', 'id', $locality);
        foreach ($routeset as $routesetval) {
            $route_id = $routesetval->route_id;
        }
        $datass['route_id'] = $route_id;
        $this->Main_model->update_commen($datass, $tablenamemain);
    }
    public function fetchproduct() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $searchText = $_POST['search'];
        if ($searchText != "") {
            $result = $this->Main_model->where_id_like_and_where('product_list', 'product_name', $searchText, 'deleteid', '0');
            foreach ($result as $value) {
                $array[] = array('id' => $value->id, 'label' => $value->product_name, 'price' => $value->price, 'brand' => $value->brand, 'categories' => $value->categories, 'HSN_SAC' => $value->HSN_SAC, 'uom' => $value->uom);
            }
        }
        echo json_encode($array);
    }
    public function fetchproduct_full() {
        $form_data = json_decode(file_get_contents("php://input"));
        $cateid = $form_data->cateid;
        $array = array();
        if ($cateid == 0) {
            $result = $this->Main_model->where_names('product_list', 'deleteid', '0');
        } else {
            $result = $this->Main_model->where_names_two_order_by('product_list', 'categories_id', $cateid, 'deleteid', '0', 'id', 'ASC');
        }
        foreach ($result as $value) 
        {

            if($value->type!='-1')
            {



            $array[] = trim($value->id.'-'.$value->product_name) . '/';


            }


        }
        echo json_encode($array);
    }
    
     public function fetchproduct_full_purchase_name() {
        $form_data = json_decode(file_get_contents("php://input"));
        $cateid = $form_data->cateid;
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'deleteid', '0');
        foreach ($result as $value) {
            
            if($value->purchase_name!='')
            {
                $value->product_name=$value->purchase_name;
            }
            $array[] = trim($value->id.'-'.$value->product_name) . '/';
            
            
        }
        echo json_encode($array);
    }
    public function fetchproduct_full_tile_products() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'categories_id', '26');
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
    public function fetchproduct_full2() {
        // $form_data= json_decode(file_get_contents("php://input"));
       
       $form_data= json_decode(file_get_contents("php://input"));
        $cateid = $form_data->cate_id;
        $array = array();
        //$result = $this->Main_model->where_names('product_list', 'deleteid', '0');
        $result = $this->Main_model->where_names_two_order_by('product_list', 'categories_id', $cateid, 'deleteid', '0', 'id', 'ASC');
        foreach ($result as $value) {
            

            if($value->type!='-1')
            {


                    $array[] = trim($value->id.'-'.$value->product_name);


            }


        }
        echo json_encode($array);



    }
    public function fetchproduct_full2_basecaetgary() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'categories_id', '3');
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
   public function fetchproduct_full2_basecaetgary_3() {
        $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        if($form_data->catid > 0){
            $query = $this->db->query("SELECT product_name,id FROM product_list  WHERE categories_id='" . $form_data->catid . "' AND deleteid=0");
        }else{
            $query = $this->db->query("SELECT product_name,id FROM `product_list`  WHERE categories_id IN ('3','36','5') AND deleteid=0");
        }
        $result = $query->result();
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
    public function fetchproduct_fullmm() {
        $form_data = json_decode(file_get_contents("php://input"));
        $product_id = $form_data->id;
        $convert = $form_data->convert;
        $array = array();
        $resultpending = $this->Main_model->where_names('tiltes_calulation', 'deleteid', 0, 'id', 'DESC');
        foreach ($resultpending as $value) {
            
            if($value->deleteid==0)
            {
                
           
            if ($convert == 4) {
                $array[] = array('length_mm' => trim($value->length_mm), 'length_feet' => round($value->length_mm / 304.8, 3), 'product_name' => $value->product_name);
            } elseif ($convert == 5) {
                $array[] = array('length_mm' => trim($value->meter), 'length_feet' => round($value->length_mm / 304.8, 3), 'product_name' => $value->product_name);
            } elseif ($convert == 6) {
                $array[] = array('length_mm' => trim($value->inch), 'length_feet' => round($value->length_mm / 304.8, 3), 'product_name' => $value->product_name);
            } else {
                $array[] = array('length_feet' => $value->length_feet, 'length_mm' => $value->length_feet, 'product_name' => $value->product_name);
            }
            
            }
            
            
            
        }
        echo json_encode($array);
    }
    public function fetchproduct_fullmm_val() {
        $form_data = json_decode(file_get_contents("php://input"));
        //$product_id = str_replace("/", "", $form_data->id);
        
        
        $product_id= explode('-', $form_data->id);
        $product_id=$product_id[0];
        
        $convert = $form_data->convert;
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'id', $product_id);
        foreach ($result as $values) {
            $product_id = $values->id;
        }
        $resultpending = $this->Main_model->where_names('tiltes_calulation', 'product_name', $product_id);
        foreach ($resultpending as $value) {
            
             if($value->deleteid==0)
            {
                
                
                    if ($convert == 4) {
                        $array[] = array('length_mm' => trim($value->length_mm), 'length_feet' => round($value->length_mm / 304.8, 3), 'product_name' => $value->product_name);
                    } elseif ($convert == 5) {
                        $array[] = array('length_mm' => trim($value->meter), 'length_feet' => round($value->length_mm / 304.8, 3), 'product_name' => $value->product_name);
                    } elseif ($convert == 6) {
                        $array[] = array('length_mm' => trim($value->inch), 'length_feet' => round($value->length_mm / 304.8, 3), 'product_name' => $value->product_name);
                    } else {
                        $array[] = array('length_feet' => $value->length_feet, 'length_mm' => round(trim($value->length_mm) / 304.8, 3), 'product_name' => $value->product_name);
                    }
            
            }
        }
        echo json_encode($array);
    }
    public function customeradd() {
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->action == 'Save') {
            if ($form_data->phone != '' && $form_data->company_name != '' && $form_data->gst != '') {
                $tablename = $form_data->tablename;
                $tablenamemain = $form_data->tablenamemain;
                $data['email'] = $form_data->email;
                $data['phone'] = $form_data->phone;
                $data['user_id'] = $this->userid;
                $data['address1'] = $form_data->address1;
                $data['address2'] = $form_data->address2;
                $data['locality'] = $form_data->locality;
                $data['zone'] = $form_data->zone;
                $data['city'] = $form_data->city;
                $data['pincode'] = $form_data->pincode;
                $data['state'] = $form_data->state;
                $data['landmark'] = $form_data->landmark;
                $data['sales_team_id'] = $form_data->sales_team_id;
                $data['status'] = $form_data->status;
                $data['google_map_link'] = $form_data->google_map_link;
                $data['feedback_sub'] = "";
                $data['feedback_details'] = "";
                $data['credit_limit'] = 0;
                $ratings = 5 * 10;
                $data['ratings'] = $ratings * 2;
                $data['pin'] = substr(time(), 4);
                $data['gst'] = $form_data->gst;
                $data['company_name'] = $form_data->company_name;
                $data['landline'] = $form_data->landline;
                $data['sales_group'] = $form_data->sales_group;
                $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $form_data->sales_team_id);
                foreach ($sales_team_id as $val) {
                    $define_saleshd_id = $val->define_saleshd_id;
                }
                $sales_head_id = $this->Main_model->where_names('admin_users', 'id', $define_saleshd_id);
                foreach ($sales_head_id as $val) {
                    $data['sales_group'] = $val->sales_group_id;
                }
                $data['sales_head'] = $define_saleshd_id;
                $result = $this->Main_model->where_names($tablename, 'phone', $data['phone']);
                if (count($result) > 0) {
                    $array = array('error' => '3', 'massage' => 'Customer phone no  already exists');
                    echo json_encode($array);
                }
                else
                {
                    $customer_id = $this->Main_model->insert_commen($data, $tablename);
                    $data_address['customer_id'] = $customer_id;
                    $data_address['name'] = $form_data->company_name;
                    $data_address['address1'] = $form_data->address1;
                    $data_address['address2'] = $form_data->address2;
                    $data_address['locality'] = $form_data->locality;
                    $data_address['phone'] = $form_data->phone;
                    $data_address['zone'] = $form_data->zone;
                    $data_address['city'] = $form_data->city;
                    $data_address['pincode'] = $form_data->pincode;
                    $data_address['state'] = $form_data->state;
                    $data_address['landmark'] = $form_data->landmark;
                    $data_address['status'] = $form_data->status;
                    $data_address['google_map_link'] = $form_data->google_map_link;
                    $route_id = 0;
                    $routeset = $this->Main_model->where_names('locality', 'id', $form_data->locality);
                    foreach ($routeset as $routesetval) {
                        $route_id = $routesetval->route_id;
                    }
                    $datass['get_id'] = $form_data->order_id;
                    $datass['count_id'] = $form_data->count_id;
                    $datass['customer_id'] = $customer_id;
                    $datass['sales_group'] = $data['sales_group'];
                    $datass['route_id'] = $route_id;
                    $datass['user_id'] = $this->userid;
                    $this->Main_model->update_commen($datass, $tablenamemain);
                    $addressid = $this->Main_model->insert_commen($data_address, 'customers_adddrss');
                    $data_addressid['get_id'] = $customer_id;
                    $data_addressid['address_id'] = $addressid;
                    $this->Main_model->update_commen($data_addressid, $tablename);
                    $array = array('error' => '2', 'massage' => 'Customer successfully Added..');
                    echo json_encode($array);
                }
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
    }
    public function customeradd_address() {
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->action == 'Save') {
            if ($form_data->phone != '' && $form_data->name != '' && $form_data->address1 != '') {
                $tablename = $form_data->tablename;
                $tablenamemain = $form_data->tablenamemain;
                $result = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
                if (count($result) > 0) {
                    foreach ($result as $cus) {
                        $customer_id = $cus->customer_id;
                        $sales_group = $cus->sales_group;
                    }
                    if ($customer_id != "") {
                        $data_address['customer_id'] = $customer_id;
                        $data_address['name'] = $form_data->name;
                        $data_address['address1'] = $form_data->address1;
                        $data_address['address2'] = $form_data->address2;
                        $data_address['locality'] = $form_data->locality;
                        $data_address['phone'] = $form_data->phone;
                        $data_address['zone'] = $form_data->zone;
                        $data_address['city'] = $form_data->city;
                        $data_address['pincode'] = $form_data->pincode;
                        $data_address['state'] = $form_data->state;
                        $data_address['landmark'] = $form_data->landmark;
                        $data_address['status'] = $form_data->status;
                        $data_address['google_map_link'] = $form_data->google_map_link;


                        $addressid = $this->Main_model->insert_commen($data_address, 'customers_adddrss');
                        $route_id = 0;
                        $routeset = $this->Main_model->where_names('locality', 'id', $form_data->locality);
                        foreach ($routeset as $routesetval) {
                            $route_id = $routesetval->route_id;
                        }
                        $datass['get_id'] = $form_data->order_id;
                        $datass['customer_address_id'] = $addressid;
                        $datass['route_id'] = $route_id;
                        $datass['sales_group'] = $sales_group;
                        $this->Main_model->update_commen($datass, $tablenamemain);


                        $array = array('error' => '2', 'massage' => 'Customer address successfully Added..');
                        echo json_encode($array);
                    } else {
                        $array = array('error' => '3', 'massage' => 'Please select Customer');
                        echo json_encode($array);
                    }
                } else {
                    $array = array('error' => '3', 'massage' => 'Please select Customer');
                    echo json_encode($array);
                }
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
    }
    public function saveCompetitor()
    {
        
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $tablenamemain = $form_data->tablenamemain;
        $point['get_id'] = $form_data->order_id;
        $point['competitorname'] = $form_data->competitorname;
        $point['details'] = $form_data->details;
        $this->Main_model->update_commen($point, $tablenamemain);
        
        
        $customer_id=0;
        $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
        foreach ($result_order as $val) {
                
                $customer_id=$val->customer_id;
        }
        
        $cus['get_id'] = $customer_id;
        $cus['competitor'] = $form_data->competitorname;
        $this->Main_model->update_commen($cus, 'customers');
        
        
    }
    public function pointtodriver() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = 'driver';
        $this->db->query("UPDATE $tablename SET vehicle_id='0' WHERE vehicle_id='" . $form_data->vehicle_id . "'");
        $point['get_id'] = $form_data->driver_id;
        $point['vehicle_id'] = $form_data->vehicle_id;
        if ($form_data->driver_id != "" && $form_data->vehicle_id != "") {
            $this->Main_model->update_commen($point, $tablename);
        }
    }
    
     public function fetch_single_data_product_type() {
        $form_data = json_decode(file_get_contents("php://input"));
        $orderid= $form_data->orderid;
        $output=array();
        $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $orderid . "' AND deleteid=0 GROUP BY categories_id");
        $result = $resultpp->result();
         $i=1;
        foreach ($result as $value) {
            
            $output[] = array('no'=>$i,'order_no'=>$value->order_no,'categories_name'=>$value->categories_name);
           $i++;
        }
        echo json_encode($output);
    }
    
    
    public function payment_collected() {
        date_default_timezone_set("Asia/Kolkata");
        //$date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        
        
        
        
        $order_id = $form_data->order_id;
        $collectamount = $form_data->collectamount;
        $date = $form_data->payment_date;
        $randam_id = $form_data->randam_id;
       
       
      
        
        $checkid = $form_data->checkid;
        if ($checkid == "") {
            $checkid = 0;
        }
        $drivercharge = $form_data->drivercharge;
        $driver_id = $form_data->driver_id;
        $customer_id = $form_data->customer_id;
        $fulltotal = $form_data->fulltotal;
        $driver_reference_no = $form_data->reference_no;
        $driver_payment_mode = $form_data->payment_mode;
        $difference = $form_data->difference;
        $bankaccount = $form_data->bankaccount;
        $customer_paid = $form_data->customer_paid;
        $bankaccount_customer = $form_data->bankaccount_customer;
        
        

        $commision_value = $form_data->commision_value;
        
         $sales_team_id=0;
            $company_namec='Sales';
            $sales_team_id=0;
            $resc= $this->Main_model->where_names('customers', 'id', $customer_id);
             foreach ($resc as $valc) {
                    $company_namec = $valc->company_name;
                    $sales_team_id = $valc->sales_team_id;
            }

         $customer_from=1;
         $customer_from_name='';



           $tablename = 'orders_process';
                  $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
              $result_order = $this->db->query("SELECT a.*,ds.driver_recived_payment as driver_recived_payment_last,ds.delivery_mode as delivery_mode_last,ds.reference_no as reference_no_last,ds.randam_id as randam_id,ds.reason as reason_last,ds.payment_mode as payment_mode_last,ds.driver_id as driver_id_last,ds.trip_id as trip_id_last FROM orders_process as a $JOIN WHERE  a.order_base>0  AND ds.order_id='".$order_id."' AND ds.randam_id='".$randam_id."' AND ds.finance_status='4'  ORDER BY a.id DESC");
              $result_order= $result_order->result();


                foreach ($result_order as $val) 
                {
                          $order_no=$val->order_no;
                          $create_date=$val->create_date;
                          $commsision_amount=$val->commsision_amount;
                          $delivery_mode_last=$val->delivery_mode_last;
                          $parcel_return_status=$val->parcel_return_status;
                          $trip_id_set=$val->trip_id_last.$randam_id;
                }

            if($create_date > '2024-05-31'){
                
                $commision_value = round($commision_value * 1.18);
                $commision_value = round($commision_value);

            } 


            if($commsision_amount>0)
            {
                   $commision_value=$commsision_amount;
            }

            
 
              if($driver_payment_mode!='Cash')
              {

$order_no_set_final=$order_no.$trip_id_set;
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

             }
             else
             {


                $order_no_set_final=$order_no.$trip_id_set;


$this->db->query("UPDATE all_ledgers SET deleteid='0',debits='".$collectamount."' WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0',credits='".$collectamount."' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0',credits='".$collectamount."' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='0',credit='".$collectamount."',debit=0 WHERE deletemod='DRICT-".$order_no_set_final."'");


$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-RE".$trip_id_set."'");


             }
           
        
      
        
        
        if($collectamount != "" && $drivercharge != "")
        {
            
            $tablename = 'orders_process';
            $tablename_customer_ledger = 'all_ledgers';
            $tablename_driver_ledger = 'all_ledgers';
            
            
            $delivery_charge = 0;
            $trip_id = 0;
            $start_reading=0;
            $km_reading_end=0;
            $end_reading_factory=0;
           $return_id=0;
            //$result_order = $this->Main_model->where_names($tablename, 'id', $order_id);
             $result_order = $this->db->query("SELECT a.*,ds.delivery_mode as delivery_mode_last,ds.km_reading_end as km_reading_end_last,ds.start_reading as start_reading_last,ds.reference_no as reference_no_last,ds.randam_id as randam_id,ds.reason as reason_last,ds.payment_mode as payment_mode_last,ds.driver_id as driver_id_last,ds.trip_id as trip_id_last FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.order_id='".$order_id."' AND ds.randam_id='".$randam_id."' AND ds.finance_status='4'  ORDER BY a.id DESC");
              $result_order= $result_order->result();

            foreach ($result_order as $val) 
            {
                
                   $delivery_mode_last = $val->delivery_mode_last;
                  $payment_mode = $val->payment_mode_last;
               
                    $return_id = $val->return_id;
               

                 $trip_id ="";
                 $trip_idset="";
                 if($val->trip_id_last!='')
                 {
                    $trip_id = "Trip ID :" . $val->trip_id_last;
                    $trip_idset =$val->trip_id_last;
                 }   

                $reference_no = $val->reference_no_last;
                $order_no = $val->order_no;
                $driver_id = $val->driver_id_last;
                $delivery_charge = $val->delivery_charge;
                $minisroundoff = $val->roundoff;
                $roundoffstatus = $val->roundoffstatus;
                $discount = $val->discount;
                $delivery_status=$val->delivery_status;
                $payment_mode_old=$val->payment_mode;
                
                 $full_delivery = $val->full_delivery;
                 
                   if($val->start_reading!='')
                   {
                       $start_reading = $val->start_reading_last;
                   }
                   
                    if($val->km_reading_end!='')
                   {
                        $km_reading_end = $val->km_reading_end_last;
                
                   }


                   if($val->end_reading_factory>0)
                   {
                        $end_reading_factory = $val->end_reading_factory;
                
                   }
                  
                
                
            }



            $payment_mode=$form_data->payment_mode;
           
              // $this->db->query("UPDATE order_sales_return_complaints SET order_base='2',driver_delivery_status='1' WHERE id='".$return_id."'");



              $km_base_charge=0;
              $driver_name="";
              $resbankaccount = $this->Main_model->where_names('driver', 'id', $driver_id);
              foreach ($resbankaccount as $valb) {
                        
                        $km_base_charge = $valb->km_base_charge;
                         $driver_name=$valb->name;
                        
               }
            
            
            
        
            
            $totalamountval = 0;
            $resultpp = $this->db->query("SELECT amount as totalamount,id FROM order_product_list_process  WHERE order_id='" . $order_id . "' AND deleteid=0 AND driver_payment_status=0 AND loadstatus=1 AND delivery_status=1");
            $results = $resultpp->result();
            foreach ($results as $valuep)
            {
                
                
                    $totalamountval += $valuep->totalamount;
         $this->db->query("UPDATE sales_load_products SET driver_payment_status='1' WHERE order_product_id='" . $valuep->id . "' AND randam_id='".$randam_id."'");  
                    $this->db->query("UPDATE order_product_list_process SET driver_payment_status='1' WHERE id='" . $valuep->id . "'");  
                
                
            }
            $this->db->query("UPDATE denomination SET delivery_status=1 WHERE order_id='" . $order_id . "' AND delivery_status=0 AND randam_id='".$randam_id."'");
            //$this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Order Reconciliation Completed' WHERE deletemod='DRI-" .$order_no . "' AND party_type=2");  


                         $company_namec='Sales';
                         $sales_team_id=0;
                         $resc= $this->Main_model->where_names('customers', 'id', $customer_id);
                         foreach ($resc as $valc)
                         {
                                $company_namec = $valc->company_name;
                                $sales_team_id = $valc->sales_team_id;
                         }



          

                            $driverupdate['order_no'] = $order_no;
                            $driverupdate['difference'] = $difference;
                            $driverupdate['reference_no'] = $val->order_no;
                            $driverupdate['order_id'] = 0;
                            $driverupdate['customer_id'] = $driver_id;
                            $driverupdate["payment_mode"] ='0';
                            $driverupdate["payment_mode_payoff"] ='Cash';
                            $driverupdate['user_id'] = $this->userid;
                            $driverupdate['account_head_id'] = 52;
                            $driverupdate['account_heads_id_2'] = 104;
                            $driverupdate['order_trancation_status'] = 0;
                            $driverupdate['bank_id'] = 25;
                            $driverupdate['credits'] = round($collectamount,2);
                            $driverupdate['debits'] = 0;
                            $driverupdate['collected_amount'] = round($collectamount,2);
                            $driverupdate['payment_date'] = $date;
                            $driverupdate['notes'] = 'Order Reconciliation Completed';
                            $driverupdate['process_by'] = 'Order Reconciliation Completed '.$order_no;
                            $driverupdate['payment_time'] = $time;
                            $driverupdate['party_type'] = 2;
                            $driverupdate['deletemod'] = 'DRICT-'.$order_no.$trip_id_set;


                            $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$driverupdate['deletemod']);
                            if(count($setchek)==0)
                            {

                                 if($delivery_status==2)
                                 {

                                       if($collectamount > 0)
                                       {


                                                $this->Main_model->insert_commen($driverupdate, 'all_ledgers');


                                                $data_bank12['bank_account_id'] = 25;
                                                $data_bank12['ex_code'] = $trip_id . ' Ref : ' . $order_no;
                                                $data_bank12['driver_id'] = $driver_id;
                                                $data_bank12['order_status'] = 1;
                                                $data_bank12['debit'] = 0;
                                                $data_bank12['payment_status'] = 1;
                                                $data_bank12['credit'] = round($collectamount,2);
                                                $data_bank12['name'] = $company_namec;
                                                $data_bank12['create_date'] = $date;
                                                $data_bank12['user_id'] = $this->userid;
                                                $data_bank12['status_by'] = 'Order Cash Payment Received';
                                                $data_bank12['balance']=0;
                                                $data_bank12['account_head_id'] = 105;
                                                $data_bank12['deletemod'] = 'DRICT-'.$order_no.$trip_id_set;
                                                $data_bank12['account_heads_id_2'] = 105;
                                                $data_bank12['party_type'] = 4;
                                                $data_bank12['selse_order_no'] = $order_no;

                                                $setchekss = $this->Main_model->where_names('bankaccount_manage','deletemod',$data_bank12['deletemod']);
                                                if(count($setchekss)==0)
                                                {


                                                  $this->Main_model->insert_commen($data_bank12, 'bankaccount_manage');
                                                   
                                               

                                                }
                                                else
                                                {


                                    $this->db->query("UPDATE bankaccount_manage SET credit='".round($collectamount,2)."' WHERE deletemod='".$data_bank12['deletemod']."'");


                                                }


                                            

                                       }

                                 }

                            }
                            else
                            {

$this->db->query("UPDATE all_ledgers SET credits='".round($collectamount,2)."',debits=0 WHERE deletemod='".$driverupdate['deletemod']."'");



                            }






                            // SET






                            $data_address_refer['order_no'] = $order_no;
                            $data_address_refer['difference'] = $difference;
                            $data_address_refer['reference_no'] = $order_no;
                            $data_address_refer['order_id'] = 0;
                            $data_address_refer['customer_id'] = $driver_id;
                            $data_address_refer["payment_mode"] ='0';
                            $data_address_refer['user_id'] = $this->userid;
                            $data_address_refer['account_head_id'] = 52;
                            $data_address_refer['account_heads_id_2'] = 104;
                            $data_address_refer['order_trancation_status'] = 0;
                            $data_address_refer['bank_id'] = 0;
                            $data_address_refer['credits'] = 0;
                            $data_address_refer['debits'] = round($collectamount,2);
                            $data_address_refer['collected_amount'] = $collectamount;
                            $data_address_refer['payment_date'] = $date;
                            $data_address_refer['notes'] = 'Reconciliation Received Payment | '.$company_namec;
                            $data_address_refer['process_by'] = 'Reconciliation Received Payment '.$order_no;
                            $data_address_refer['payment_time'] = $time;
                            $data_address_refer['party_type'] = 2;
                            $data_address_refer['deletemod'] = 'DRI-'.$order_no.$trip_id_set;


                            if($delivery_status==2)
                            {


                                    $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                                    if(count($setchek)==0)
                                    {

                                         $this->Main_model->insert_commen($data_address_refer, 'all_ledgers');

                                    }
                                    else
                                    {


                                         $this->db->query("UPDATE all_ledgers SET debits='".round($collectamount,2)."',credits=0 WHERE deletemod='".$data_address_refer['deletemod']."'");


                                    }

                            }














                            $data_addressww['order_id'] = 0;
                            $data_addressww['customer_id'] = $customer_id;
                            $data_addressww['user_id'] = $this->userid;
                            $data_addressww['notes'] = 'Order Payment Received By Reconciliation' . $trip_id;
                            $data_addressww['payment_mode'] = '0';
                            $data_addressww['order_no'] = $order_no;
                            $data_addressww['bank_id'] = 25;
                            $data_addressww['difference'] = $difference;
                            $data_addressww['reference_no'] = $order_no;
                            $data_addressww['amount'] = round($collectamount,2);
                            $data_addressww['account_head_id'] = 68;
                            $data_addressww['account_heads_id_2'] = 116;
                            $data_addressww['order_trancation_status'] = 0;
                            $data_addressww['paid_status'] = 1;
                            $data_addressww['credits'] = round($collectamount,2);
                            $data_addressww['debits'] = 0;
                            $data_addressww['collected_amount'] = round($collectamount,2);
                            $data_addressww['payment_date'] = $date;
                            $data_addressww['process_by'] = 'Order Payment Received By Reconciliation';
                            $data_addressww['payment_time'] = $time;
                            $data_addressww['party_type'] = 1;
                            $data_addressww['deletemod'] = 'ORPAY'.$order_no.$trip_id_set;

                            $setchek1 = $this->Main_model->where_names('all_ledgers','deletemod',$data_addressww['deletemod']);
                            if(count($setchek1)==0)
                            {

                                 $this->Main_model->insert_commen($data_addressww, 'all_ledgers');


                            }
                            else
                            {


                    $this->db->query("UPDATE all_ledgers SET credits='".round($collectamount,2)."',debits=0 WHERE deletemod='".$data_addressww['deletemod']."'");


                            }


                            // SET END






          
          
          
          
            $totalamount = $totalamountval + $delivery_charge;
            $Totalkm=$km_reading_end-$start_reading;

            
            $TotalkmFact=0;
            if($end_reading_factory>0)
            {
               
                $TotalkmFact=$end_reading_factory-$start_reading;

            }
            

            $Totalkm=$Totalkm+$TotalkmFact;




            $Tripendstatus=" Total KM : ".$Totalkm." Per KM Charge : ".$km_base_charge;
           
            
            
            if ($roundoffstatus == 1) {
                $totalamount = $totalamount - $discount + $minisroundoff;
            } else {
                $totalamount = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            $data_address['order_id'] = 0;
            $data_address['customer_id'] = $customer_id;
            $data_address['user_id'] = $this->userid;
            $data_address['notes'] = 'Order Payment ' . $trip_id;
            $data_address['payment_mode'] = $payment_mode;
            if ($payment_mode == 'Cash') {
                $data_address['order_no'] = $order_no;
                $data_address['bank_id'] = 25;
                
            } else {
                $data_address['order_no'] = $reference_no;
            }
            $data_address['difference'] = $difference;
            $data_address['reference_no'] = $order_no;
            $data_address['amount'] = round($totalamount);
            $data_address['account_head_id'] = 68;
            $data_address['account_heads_id_2'] = 116;
            $data_address['order_trancation_status'] = 0;
            
            
            
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
            
            
            $balancetotal = 0;
            $debitsamount = 0;
            $creditsamount = 0;
            foreach ($res as $val) {
                $payid = $val->id;
                $customer_id = $val->customer_id;
                $amount = $val->amount;
                $debitsamount+= $val->debits;
                $creditsamount+= $val->credits;
                $balancetotal+= $val->balance;
            }
            
            $balancetotal=$creditsamount-$debitsamount;
            
            if($payment_mode == 'Cash') 
            {
                if($customer_paid == 1) 
                {
                    $data_address['paid_status'] = 1;
                    $data_address['credits'] = round($collectamount,2);
                   
                } 
                else
                {
                    $data_address['debits'] = $collectamount;
                    $data_address['paid_status'] = 0;
                    $Totalbal = round($totalamount) + $balancetotal;
                  
                }
            } 
            else 
            {
                $data_address['paid_status'] = 0;
                $data_address['debits'] = round($totalamount,2);
               
            }
            $data_address['collected_amount'] = $collectamount;
            $data_address['payment_date'] = $date;
            $data_address['process_by'] = 'Order Reconciliation';
            $data_address['payment_time'] = $time;
            $data_address['party_type'] = 1;
            $data_address['deletemod'] = 'ORPAY'.$order_no.$trip_id_set;

            
              $orders_process = $this->Main_model->where_names('orders_process', 'id', $order_id);
                    foreach ($orders_process as $cc) 
                    {


                        $reason_val = $cc->reason;
                        $difference_val = $cc->difference;
                        $bill_total = $cc->bill_total;
                        $md_approved_status = $cc->md_approved_status;
                        
                    }

            if($collectamount > 0)
            {
                
                if($data_address['paid_status']==1)
                {
                    
                    
                    if($delivery_status==1)
                    {
                            $setchek1wwww = $this->Main_model->where_names('all_ledgers','deletemod',$data_address['deletemod']);
                            if(count($setchek1wwww)==0)
                            {

                               $insertdataval=$this->Main_model->insert_commen($data_address, $tablename_customer_ledger);

                            }

                    }



                  
                    
                    
                   if($difference_val>0)
                   {



                      if($md_approved_status==1 && $reason_val=='Collection Verified By MD')
                      {



                        $discount_data['order_id'] = 0;
                        $discount_data['customer_id'] = $customer_id;
                        $discount_data['user_id'] = $this->userid;
                        $discount_data['notes'] = 'Order Discount Payment';
                        $discount_data['payment_mode'] = $payment_mode;
                        $discount_data['difference'] = 0;
                        $discount_data['reference_no'] = $order_no;
                        $discount_data['amount'] = round($difference_val);
                        $discount_data['account_head_id'] = 68;
                        $discount_data['account_heads_id_2'] = 116;
                        $discount_data['order_trancation_status'] = 0;
                        $discount_data['order_no'] = $order_no;
                        $discount_data['bank_id'] = 25;
                        $discount_data['paid_status'] = 1;
                        $discount_data['debits'] = 0;
                        $discount_data['credits'] = round($difference_val,2);
                        $discount_data['collected_amount'] = $difference_val;
                        $discount_data['payment_date'] = $date;
                        $discount_data['process_by'] = 'Order Reconciliation Discount';
                        $discount_data['payment_time'] = $time;
                        $discount_data['party_type'] = 1;
                        $discount_data['deletemod'] = 'RDO'.$order_no;

                         if($difference_val>0)
                         {


                        //$this->Main_model->insert_commen($discount_data, $tablename_customer_ledger);


                          }




                                        $discount_data_base2['order_id'] = 0;
                                        $discount_data_base2['customer_id'] = 332;
                                        $discount_data_base2['user_id'] = $this->userid;
                                        $discount_data_base2['notes'] = 'Order Discount Payment';
                                        $discount_data_base2['payment_mode'] = $payment_mode;
                                        $discount_data_base2['difference'] = 0;
                                        $discount_data_base2['reference_no'] = $order_no;
                                        $discount_data_base2['amount'] = round($difference_val);
                                        $discount_data_base2['account_head_id'] = 417;
                                        $discount_data_base2['account_heads_id_2'] = 417;
                                        $discount_data_base2['order_trancation_status'] = 0;
                                        $discount_data_base2['order_no'] = $order_no;
                                        $discount_data_base2['bank_id'] = 25;
                                        $discount_data_base2['paid_status'] = 1;
                                        $discount_data_base2['debits'] = round($difference_val,2);
                                        $discount_data_base2['credits'] = 0;
                                        $discount_data_base2['collected_amount'] = $difference_val;
                                        $discount_data_base2['payment_date'] = $date;
                                        $discount_data_base2['process_by'] = 'Order Reconciliation Discount';
                                        $discount_data_base2['payment_time'] = $time;
                                        $discount_data_base2['party_type'] = 5;

                                        $discount_data_base2['deletemod'] = 'RDOP'.$order_no;


                                        if($difference_val>0)
                                        {

                                        //$this->Main_model->insert_commen($discount_data_base2, $tablename_customer_ledger);

                                        }









                    
                       }

                   }










                   
                   $resbankaccount = $this->Main_model->where_names('bankaccount', 'id', 25);
                    foreach ($resbankaccount as $valb) {
                        $bid = $valb->id;
                        $bank_name = $valb->bank_name;
                        $account_no = $valb->account_no;
                    }
                    
                     $res =$this->Main_model->where_names_two_order_by('bankaccount_manage','bank_account_id',25,'deleteid','0','id','ASC');
                     $balancetotal=0;
                     $debitsamount=0;
                     $creditsamount=0;
                     foreach($res as $val)
                     {
                            $payid=$val->id;
                            $debitsamount+=$val->debit;
                            $creditsamount+=$val->credit;
                            $balancetotal=$val->balance;
                     }
                     $balancetotal=$creditsamount-$debitsamount;



                    
                    $data_bank1['bank_account_id'] = 25;
                    $data_bank1['ex_code'] = $trip_id . ' Ref : ' . $order_no;
                    $data_bank1['debit'] = 0;
                    $data_bank1['payment_status'] = 1;
                    $data_bank1['credit'] = $collectamount;
                    $data_bank1['name'] = $company_namec;
                    $data_bank1['create_date'] = $date;
                    $data_bank1['user_id'] = $this->userid;
                    $data_bank1['status_by'] = 'Order Cash Payment';
                    $data_bank1['balance']=0;
                    $data_bank1['account_head_id'] = 105;
                    $data_bank1['deletemod'] = 'ORPAY'.$order_no.$trip_id_set;
                    $data_bank1['account_heads_id_2'] = 105;
                    $data_bank1['party_type'] = 4;
                    $data_bank1['selse_order_no'] = $order_no;

                    if($delivery_status==1)
                    {

     
                         $setchekss_se = $this->Main_model->where_names('bankaccount_manage','deletemod',$data_bank1['deletemod']);
                         if(count($setchekss_se)==0)
                         {


                               $insertbank=$this->Main_model->insert_commen($data_bank1, 'bankaccount_manage');
                            

                         }
                         else
                         {


                              $this->db->query("UPDATE bankaccount_manage SET credit='".$collectamount."' WHERE deletemod='".$data_bank1['deletemod']."'");


                         }




                    }
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                 
                }
                
                
            }
           
           
           
           
           
  

           
           
           
           
           
            
            
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$driver_id,'party_type',2,'deleteid','0','id','ASC');
            
            
            $balancetotaldd = 0;
            $balancetotalddtotal = 0;
            $debitsdd = 0;
            $creditsdd = 0;
            foreach ($res as $val) {
                $payid = $val->id;
                $customer_id = $val->customer_id;
                $amount = $val->amount;
                $debitsdd+= $val->debits;
                $creditsdd+= $val->credits;
                $balancetotaldd+= $val->balance;
            }
            
            
            $balancetotaldd=0;
            

            $data_driver['user_id'] = $this->userid;
            $data_driver['notes'] = 'Driver ' . $trip_id.$Tripendstatus;
            $data_driver['customer_id'] = $driver_id;
            $data_driver['payment_mode'] = 0;
            $data_driver['reference_no'] = $trip_id;
            $data_driver['order_no'] = $trip_id;
            $data_driver['amount'] = round($drivercharge,2);
            $data_driver['deletemod'] = 'DRI-RE'.$trip_idset;
            
           
                
                if ($checkid == 1)
                {
                    $data_driver['order_id'] = 0;
                    $data_driver['paid_status'] = 0;
                    $data_driver['debits'] = round($drivercharge,2);
                    $data_driver['credits'] = 0;
                    if ($balancetotaldd != '0') {
                        $data_driver['balance'] = 0;
                    } else {
                        $data_driver['balance'] = 0;
                    }
                } else {
                    $data_driver['order_id'] = 0;
                    $data_driver['paid_status'] = 0;
                    $data_driver['credits'] = round($drivercharge,2);
                    $data_driver['debits'] = 0;
                    if ($balancetotaldd != '0') {
                        $data_driver['balance'] = 0;
                    } else {
                        $data_driver['balance'] = 0;
                    }
                }
                
            
            if ($checkid == 1) {
                $data_driver['payout'] = $drivercharge;
                $data_driver['payin'] = 0;
                $data_driver['paid_status'] = '1';
            } else {
                $data_driver['payout'] = 0;
                $data_driver['payin'] = $drivercharge;
                $data_driver['paid_status'] = '0';
            }
            $data_driver['payment_date'] = $date;
            $data_driver['payment_time'] = $time;
            $data_driver['process_by'] = 'Driver Reconciliation ' . $trip_id.$Tripendstatus;
            $data_driver['order_trancation_status'] = 2;
            $data_driver['party_type'] = 2;
            $data_driver['account_head_id'] = 52;
            $data_driver['account_heads_id_2'] = 104;
            $data_driver['bank_id'] = 0;
            $data_driver['driver_collection_status'] = 1;


           
            if($drivercharge>0)
            {



                     $setcheksts_dr_set = $this->Main_model->where_names($tablename_driver_ledger,'deletemod',$data_driver['deletemod']);
                     if(count($setcheksts_dr_set)==0)
                     {   


                       $insertdataval=$this->Main_model->insert_commen($data_driver, $tablename_driver_ledger);


                     }
                     else
                     {
                        $this->db->query("UPDATE all_ledgers SET credits='".round($drivercharge,2)."',debits=0 WHERE deletemod='".$data_driver['deletemod']."'");

                     }


                         $data_driver['customer_id'] = 346;
                         $data_driver['credits'] = 0;
                         $data_driver['debits'] = round($drivercharge,2);
                         $data_driver['account_head_id'] = 155;
                         $data_driver['account_heads_id_2'] = 155;
                         $data_driver['party_type'] = 5;
                         $data_driver['driver_collection_status'] = 0;
                         $data_driver['reference_no'] = $order_no.'-ORDER-'.$driver_name;
                         $data_driver['deletemod'] = 'DRI-RE-AT'.$trip_idset;
                         $deletemodset = 'DRI-RE-AT'.$trip_idset;
                         $setcheksts_dr = $this->Main_model->where_names($tablename_driver_ledger,'deletemod',$deletemodset);
                         if(count($setcheksts_dr)==0)
                         {
                               $this->Main_model->insert_commen($data_driver, $tablename_driver_ledger);
                         }
                         else
                         {

                            $this->db->query("UPDATE all_ledgers SET debits='".round($drivercharge,2)."',credits=0 WHERE deletemod='".$deletemodset."'");

                         }


            }
            
             
            
            
            
            
            if ($checkid == 1) 
            {
                $res = $this->Main_model->where_names('admin_users', 'id', $driver_id);
                foreach ($res as $val) {
                    $company_name = $val->name;
                }
                $account_no = "";
                $bank_name = "";
                $bid = "";
                if ($bankaccount != '0') {
                    
                    
                    
                    $resbankaccount = $this->Main_model->where_names('bankaccount', 'id', $bankaccount);
                    foreach ($resbankaccount as $valb) {
                        $bid = $valb->id;
                        $bank_name = $valb->bank_name;
                        $account_no = $valb->account_no;
                    }
                    
                     $res =$this->Main_model->where_names_two_order_by('bankaccount_manage','bank_account_id',$bid,'deleteid','0','id','ASC');
                     $balancetotal=0;
                     $debitsamount=0;
                     $creditsamount=0;
                     foreach($res as $val)
                     {
                            $payid=$val->id;
                            $debitsamount+=$val->debit;
                            $creditsamount+=$val->credit;
                            $balancetotal=$val->balance;
                     }
                     $balancetotal=$creditsamount-$debitsamount;
                    
                    $data_bank['bank_account_id'] = $bid;
                    $data_bank['ex_code'] = $trip_id . ' Ref : ' . $driver_reference_no;
                    $data_bank['debit'] = $drivercharge;
                    $data_bank['payment_status'] = 1;
                    $data_bank['credit'] = 0;
                    $data_bank['name'] = $company_name;
                    $data_bank['create_date'] = $date;
                    $data_bank['status_by'] = 'Driver Payment';
                    $data_bank['balance']=$balancetotal-$drivercharge;
                  
                  
                                                                if($bid==24)
                                                                {
                                                                     $data_bank['account_head_id']=106;
                                                                     $data_bank['account_heads_id_2']=106;
                                                                }
                                                                elseif($bid==25)
                                                                {
                                                                     $data_bank['account_head_id']=105;
                                                                     $data_bank['account_heads_id_2']=105;
                                                                }
                                                                else
                                                                {
                                                                    
                                                                     $data_bank['account_head_id']=107;
                                                                     $data_bank['account_heads_id_2']=107;
                                                                    
                                                                }
                    
                  
                    
                    
                    $data_bank['deletemod'] = 'DO'.$insertdataval;
                    $data_bank['party_type'] = 4;

                    if($drivercharge>0)
                    {
 
                         $setcheksts_dr_setv = $this->Main_model->where_names('bankaccount_manage','deletemod',$data_bank['deletemod']);
                         if(count($setcheksts_dr_setv)==0)
                         {  

                           $this->Main_model->insert_commen($data_bank, 'bankaccount_manage');
                           $this->db->query("UPDATE $tablename_driver_ledger SET bank_id='".$bid."' WHERE id='".$insertdataval."'");

                         }
                   
                    }
                    
                    
                    
                    
                }
            }
            
            
            
            
            
            $point['get_id'] = $order_id;
            if($payment_mode == 'Cash')
            {
                
                 //$point['reason'] = 'Payment Received ' . $trip_id;
                
            
            }
            else
            {
                 
                  //$point['reason'] = 'Bank Payemnt Pending ' . $trip_id;
                
                 
            }
            
            
            
            
            
           
            $point['payment_recived_date'] = $date;
            $point['payment_recived_time'] = $time;
            $point['pending_amount'] = $difference;
            $point['payment_mode_old'] = $payment_mode_old;
          
            //$point['collectamount'] = $drivercharge;
            $point['payment_mode_reconciliation'] = $payment_mode;
            
            if($full_delivery==1)
            {
                
                    //$point['full_delivery'] = 0;
                    $point['delivery_mode'] = 'Full';
                    $point['paricel_mode'] = 0;
                    $ppa['get_id'] = $order_id;
                    $ppa['paricel_mode'] = 0;
                    $this->Main_model->update_commen_where($ppa, 'order_id', 'order_product_list_process');
                
            }
            
            
             

            $loading_status=0;
            $result_order = $this->db->query("SELECT * FROM $tablename  WHERE id='" . $order_id . "'");
            $result_order=$result_order->result();
            foreach ($result_order as $val) 
            {
                    $loading_status=$val->loading_status;
                    

            }

            if($loading_status==1)
            {

                        if($payment_mode=='Cash')
                       {

                                if($full_delivery==1)
                                {



                                       
                                       $point['order_base'] = 1; 
                                       $point['assign_status'] = 3;
                                       $point['assign_status_3_date'] = date('Y-m-d');
                                       $point['finance_status'] = 5; 
                                       $point['full_delivery'] = 0;
                                       $point['loading_status'] = 0;
                                       $point['reason'] = $delivery_mode_last.' Payment Received ' . $trip_id;



                                }
                                else
                                {




                                $point['assign_status'] = 3;
                                $point['finance_status'] = 5;
                                       $point['assign_status_3_date'] = date('Y-m-d');

                                $point['loading_status'] = 0;
                                $point['full_delivery'] = 1;
                                $point['order_base'] = 1;
                                $point['delivery_date_status'] = 1;
                                $point['delivery_mode'] = 'Partial';
                                $point['reason'] = $delivery_mode_last.' Payment Received ' . $trip_id;


                                }

                       }
                       else
                       {
                                $point['full_delivery'] = 0;
                                $point['finance_status'] = 6;
                                 $point['assign_status'] = 3;
                                $point['assign_status_3_date'] = date('Y-m-d');

                                $point['reason'] = $delivery_mode_last.' Payment Pending  ' . $trip_id;


                       }

                        
            }
            else
            {
                     $point['full_delivery'] = 0;
                    if($payment_mode == 'Cash')
                    {
                        
                        
                         $point['finance_status'] = 5;
                          $point['assign_status'] = 3;
                    $point['assign_status_3_date'] = date('Y-m-d');

                         $point['reason'] = $delivery_mode_last.' Payment Received ' . $trip_id;
                    
                    }
                    else
                    {
                         
                          
                          $point['finance_status'] = 6;
                           $point['assign_status'] = 3;
                                        $point['assign_status_3_date'] = date('Y-m-d');

                          $point['reason'] = $delivery_mode_last.' Payment Pending ' . $trip_id;
                         
                    }
            
            
            }



 


            $data_address_refer['order_no'] = $order_no;
            $data_address_refer['difference'] = 0;
            $data_address_refer['reference_no'] = $order_no;
            $data_address_refer['credits'] = round($commision_value,2);
            $data_address_refer['order_id'] = 0;
            $data_address_refer['customer_id'] = 252;
            $data_address_refer["payment_mode"] = 0;
            $data_address_refer['user_id'] = $this->userid;
            $data_address_refer['account_head_id'] = 48;
            $data_address_refer['account_heads_id_2'] = 48;
            $data_address_refer['order_trancation_status'] = 0;
            $data_address_refer['bank_id'] = 0;
            // $data_address_refer['credits'] = round($commision_value,2);
            $data_address_refer['debits'] = 0;
            $data_address_refer['collected_amount'] = $commision_value;
            $data_address_refer['payment_date'] = $date;
            $data_address_refer['notes'] = 'Order Commission '.$customer_from_name;
            $data_address_refer['process_by'] = 'Order Commission '.$order_no;
            $data_address_refer['commission_customer'] =$customer_from;

            $data_address_refer['sales_team_id'] =$sales_team_id;
       
            $data_address_refer['payment_time'] = $time;
            $data_address_refer['party_type'] = 5;
            $data_address_refer['comission_transfered'] = 0;
            $data_address_refer['deletemod'] = 'CMM'.$order_no;
            
            if($customer_from>0)
            {

               if($commision_value>0)
               {
                               $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                               if(count($setchek)==0)
                               {

                                         $insertdataval=$this->Main_model->insert_commen($data_address_refer, $tablename_customer_ledger);






                                           
                                            $data_address_refer['credits'] = 0;
                                            $data_address_refer['debits'] = round($commision_value,2);
                                            $data_address_refer['collected_amount'] = round($commision_value,2);
                                            $data_address_refer['process_by'] = 'Commission Payment Debit reconciliation '.$customer_from_name;
                                            $data_address_refer['party_type'] = 5;
                                            $data_address_refer['deletemod'] = 'DPAY_SET_OR'.$insertdataval;
                                            $deletemodset = 'DPAY_SET_OR'.$insertdataval;
                                            $data_address_refer['comission_transfered'] = 5;
                                            $data_address_refer['account_head_id'] = 154;
                                            $data_address_refer['account_heads_id_2'] = 154;
                                            $result_cmm= $this->Main_model->where_names('all_ledgers','deletemod',$deletemodset);
                                            if(count($result_cmm)==0)
                                            {


                                                  $this->Main_model->insert_commen($data_address_refer, 'all_ledgers');


                                            }





                                }
               }
               

            }




                           if($delivery_status==1)
                           {


 $this->db->query("UPDATE order_sales_return_complaints SET remarks='Client Scope Reconciliation Order' WHERE id='" . $return_id ."'"); 

                           }
                           else
                           {


 $this->db->query("UPDATE order_sales_return_complaints SET remarks='Own Scope Reconciliation Order' WHERE id='" . $return_id ."'"); 
                      

                           }

                $this->db->query("UPDATE order_delivery_order_status SET 
             reconcilation_status='1',
             payment_recived_date='".$point['payment_recived_date']."',
             payment_recived_time='".$point['payment_recived_time']."',
             payment_mode_reconciliation='".$point['payment_mode_reconciliation']."',
             reason='".$point['reason']."',
             finance_status='".$point['finance_status']."',
             assign_status='".$point['assign_status']."'
             WHERE order_id='".$order_id."' AND randam_id='".$randam_id."' AND deleteid=0 AND dispatch_status=1");

            
            $this->Main_model->update_commen($point, $tablename);
           
            
        }
    }
    
    
    
    
    
    
    
    
    
       public function payment_collected_self()
       {
           
           
           
        date_default_timezone_set("Asia/Kolkata");
        //$date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $date = $form_data->payment_date;
        $order_id = $form_data->order_id;
        $order_id=explode(',', $order_id);
        $order_id=implode("','", $order_id);
        $collectamount = $form_data->collectamount;
        $bankaccount_customer = $form_data->bankaccount_customer;
        $tablename = 'orders_process';
        $tablename_customer_ledger = 'all_ledgers';
        $tablename_driver_ledger = 'all_ledgers';
        
        if($collectamount != "") 
        {
            
            
            
            $this->db->query("UPDATE denomination SET delivery_status=1 WHERE order_id IN ('" . $order_id . "')");  
            $result_order = $this->db->query("SELECT * FROM $tablename  WHERE id IN ('" . $order_id . "') AND deleteid=0");
            $result_order=$result_order->result();
            foreach ($result_order as $val) 
            {
                
                
                $payment_mode = $val->payment_mode;
                $payment_mode = $val->payment_mode;
                $order_no = $val->order_no;
                $order_base_id = $val->id;
                $customer_id = $val->customer_id;
                $full_delivery = $val->full_delivery;
                $md_approved_status = $val->md_approved_status;
                $reason_val = $val->reason;
                $difference_val = $val->difference;



                
                $totalamount_bill_amount=0;
                $resultpp = $this->db->query("SELECT SUM(qty*rate) as totalamount FROM order_product_list_process  WHERE order_id='" . $order_base_id . "' AND deleteid=0");
                $results = $resultpp->result();
                foreach ($results as $valuep) {
                    $totalamount_bill_amount = round($valuep->totalamount);
                }






       
            $tcs_status=$val->tcs_status;
            $tcsamount = $val->tcsamount;
          

                 
     
            $tcsamount=0;

               if($tcs_status==1)
              {

                            $tcsamount=round($totalamount_bill_amount*0.1/100);

              }
              else
              {

            


                    $tcsamount=0;


                }






            $totalamount_bill_amount=$totalamount_bill_amount+$tcsamount;










                
                
                $data_address['order_id'] = $order_base_id;
                $data_address['customer_id'] = $customer_id;
                $data_address['user_id'] = $this->userid;
                $data_address['notes'] = 'Retail Shop Reconciliation';

                $data_address['deletemod'] = 'SHOPPAY'.$order_base_id;

                $data_address['payment_mode'] = $payment_mode;
                if ($payment_mode == 'Cash')
                {
                    $data_address['order_no'] = $order_no;
                    $data_address['bank_id'] = 25;
                    
                } 
                else
                {
                    $data_address['order_no'] = $reference_no;
                }
                $data_address['difference'] = $difference;
                $data_address['reference_no'] = $order_no;
                $data_address['amount'] = round($totalamount_bill_amount,2);
                $data_address['account_head_id'] = 68;
                $data_address['account_heads_id_2'] = 116;
                $data_address['order_trancation_status'] = 0;
                
                $data_address['collected_amount'] = $collectamount;
                $data_address['payment_date'] = $date;
                $data_address['process_by'] = 'Order Reconciliation';
                $data_address['payment_time'] = $time;
                $data_address['party_type'] = 1;
                //$data_address['deletemod'] = 'RR'.$order_no;
                
                
                
                 
                if($payment_mode=='Cash')
                {
                                $data_address['paid_status'] = 1;
                                $data_address['credits'] = round($totalamount_bill_amount,2);
                                $data_address['balance'] = 0;
                }
                else
                {
                                $data_address['paid_status'] = 0;
                                $data_address['credits'] = round($totalamount_bill_amount,2);
                                
                }
                
                
                if($payment_mode=='Cash')
                {  
                     $insertdataval=$this->Main_model->insert_commen($data_address, $tablename_customer_ledger);
                }
                
            
                $point['get_id'] = $order_base_id;
                if($payment_mode == 'Cash')
                {
                    
                     $point['reason'] = $payment_mode.' Payment Received Retail Shop';
                     $point['finance_status'] = 5;
                
                }
                else
                {
                     
                      $point['reason'] = $payment_mode.' Pending Retail Shop';
                      $point['finance_status'] = 6;
                     
                 }
                
                
            
            
            
           
            $point['payment_recived_date'] = $date;
            $point['payment_recived_time'] = $time;
            $point['pending_amount'] = $difference;
            $point['collectamount'] = $collectamount;
            $point['payment_mode_reconciliation'] = $payment_mode;
            if($full_delivery==1)
            {
                
                    $point['full_delivery'] = 0;
                    $point['delivery_mode'] = 'Self Pickup';
                    $point['paricel_mode'] = 0;
                    $ppa['get_id'] = $order_base_id;
                    $ppa['loadstatus'] = 1;
                    $this->Main_model->update_commen_where($ppa, 'order_id', 'order_product_list_process');
                
            }
            
            
            $this->Main_model->update_commen($point, $tablename);
           
                
                
                
                
                
                
                
                
                
                
                
                
            }
            
            
            
        }
        
        
        
        
    
        
        
        
        
        
        
    }
    
    
    
    
    
    
    
    public function payment_collected_group() 
    {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tripid = $form_data->tripid;
        $drivercharge = $form_data->drivercharge;
        $date = $form_data->payment_date;
        $collectamount = $form_data->collectamount;


        $total_km = $form_data->total_km;
        $per_kg_amount = $form_data->per_kg_amount;
        $total_kg = $form_data->total_kg;

      
   
            
            $tablename = 'orders_process';
            $tablename_customer_ledger = 'all_ledgers';
            $tablename_driver_ledger = 'all_ledgers';
            
            
            $delivery_charge = 0;
            $trip_id = 0;
            $start_reading=0;
            $km_reading_end=0;
            $end_reading_factory=0;
           
             $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
              $result_order = $this->db->query("SELECT a.*,ds.driver_recived_payment as driver_recived_payment_last,ds.finance_status as finance_status_last,ds.delivery_mode as delivery_mode_last,ds.reference_no as reference_no_last,ds.randam_id as randam_id,ds.reason as reason_last,ds.payment_mode as payment_mode_last,ds.driver_id as driver_id_last,ds.trip_id as trip_id_last FROM orders_process as a $JOIN WHERE  a.order_base>0  AND ds.trip_id='".$tripid."' AND ds.finance_status='4'  ORDER BY a.id DESC");
              $result_order= $result_order->result();

            foreach ($result_order as $val) 
            {

                  if($val->finance_status_last==4)
                  {



                    $val->driver_recived_payment=$val->driver_recived_payment_last;

                    $create_date=$val->create_date;
                
                    $delivery_mode_last=$val->delivery_mode_last;
                    $payment_mode = $val->payment_mode;
                    $trip_id = "Group Trip ID :" . $val->trip_id_last;
                    $reference_no = $val->reference_no_last;
                    $order_no = $val->order_no;
                    $driver_id = $val->driver_id_last;
                    $delivery_charge = $val->delivery_charge;
                    $minisroundoff = $val->roundoff;
                    $order_id = $val->id;
                    $roundoffstatus = $val->roundoffstatus;
                    $discount = $val->discount;
                    $full_delivery = $val->full_delivery;
                    $customer_id = $val->customer_id;
                    $driver_payment_mode = $val->payment_mode_last;

                    $md_approved_status = $val->md_approved_status;
                    $reason_val = $val->reason_last;
                    $difference_val = $val->difference;
                    $delivery_status = $val->delivery_status;
                    $return_id = $val->return_id;
                    $randam_id = $val->randam_id;
                    $trip_id_set=$val->trip_id_last.$val->randam_id;


                  if($driver_payment_mode!='Cash')
                  {



    $order_no_set_final=$order_no.$trip_id_set;
    $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRI-".$order_no_set_final."'");
    $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='ORPAY".$order_no_set_final."'");
    $this->db->query("UPDATE all_ledgers SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");
    $this->db->query("UPDATE bankaccount_manage SET deleteid='99' WHERE deletemod='DRICT-".$order_no_set_final."'");

                 }
                 else
                 {


                    $order_no_set_final=$order_no.$trip_id_set;
    $this->db->query("UPDATE all_ledgers SET deleteid='0',debits='".$val->driver_recived_payment."' WHERE deletemod='DRI-".$order_no_set_final."'");
    $this->db->query("UPDATE all_ledgers SET deleteid='0',credits='".$val->driver_recived_payment."' WHERE deletemod='ORPAY".$order_no_set_final."'");
    $this->db->query("UPDATE all_ledgers SET deleteid='0',credits='".$val->driver_recived_payment."' WHERE deletemod='DRICT-".$order_no_set_final."'");
  

$this->db->query("UPDATE bankaccount_manage SET deleteid='0',credit='".$val->driver_recived_payment."',debit=0 WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-RE-AT".$trip_id_set."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE deletemod='DRI-RE".$trip_id_set."'");


                 }





                 
                    $totalamountval = 0;
                    $resultpp = $this->db->query("SELECT amount as totalamount,id FROM order_product_list_process  WHERE order_id='" . $order_id . "' AND deleteid=0 AND driver_payment_status=0 AND loadstatus=1 AND delivery_status=1");
                    $results = $resultpp->result();
                    foreach ($results as $valuep)
                    {
                        
                        
                            $totalamountval += $valuep->totalamount;
                              $this->db->query("UPDATE sales_load_products SET driver_payment_status='1' WHERE order_product_id='" . $valuep->id . "' AND randam_id='".$randam_id."'");  
                            $this->db->query("UPDATE order_product_list_process SET driver_payment_status='1' WHERE id='" . $valuep->id . "'");  
                        
                        
                    }
                    
$this->db->query("UPDATE denomination SET delivery_status=1 WHERE order_id='" . $order_id . "' AND randam_id='".$val->randam_id."' AND delivery_status=0"); 
                    //$this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Order Reconciliation Completed' WHERE deletemod='DRI-" .$order_no . "' AND party_type=2");



                        $company_namec='Sales';
                        $sales_team_id=0;
                        $resc= $this->Main_model->where_names('customers', 'id', $val->customer_id);
                         foreach ($resc as $valc) {
                                $company_namec = $valc->company_name;
                                $sales_team_id = $valc->sales_team_id;
                                
                        }


                            $driverupdate['order_no'] = $val->order_no;
                            $driverupdate['difference'] = 0;
                            $driverupdate['reference_no'] = $val->order_no;
                            $driverupdate['order_id'] = 0;
                            $driverupdate['customer_id'] = $driver_id;
                            $driverupdate["payment_mode"] ='0';
                            $driverupdate["payment_mode_payoff"] ='Cash';
                            $driverupdate['user_id'] = $this->userid;
                            $driverupdate['account_head_id'] = 52;
                            $driverupdate['account_heads_id_2'] = 104;
                            $driverupdate['order_trancation_status'] = 0;
                            $driverupdate['bank_id'] = 25;
                            $driverupdate['credits'] = $val->driver_recived_payment;
                            $driverupdate['debits'] = 0;
                            $driverupdate['collected_amount'] = $val->driver_recived_payment;
                            $driverupdate['payment_date'] = $date;
                            $driverupdate['notes'] = 'Order Group Reconciliation Completed';
                            $driverupdate['process_by'] = 'Order Group Reconciliation Completed '.$val->order_no;
                            $driverupdate['payment_time'] = $time;
                            $driverupdate['party_type'] = 2;
                            $driverupdate['deletemod'] = 'DRICT-'.$val->order_no.$trip_id_set;

                            $reason=$delivery_mode_last.' Group Payment Pending ' . $tripid;
                            $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$driverupdate['deletemod']);
                            if(count($setchek)==0)
                            {

                                 if($delivery_status==2)
                                 {

                                    if($val->driver_recived_payment>0)
                                    {


                                                $reason=$delivery_mode_last.' Group Payment Received ' . $tripid;

                                                $this->Main_model->insert_commen($driverupdate, 'all_ledgers');

                                      
                                                $data_bank12['bank_account_id'] = 25;
                                                $data_bank12['ex_code'] = $trip_id . ' Ref : ' . $val->order_no;
                                                $data_bank12['driver_id'] = $driver_id;
                                                $data_bank12['order_status'] = 1;
                                                $data_bank12['debit'] = 0;
                                                $data_bank12['payment_status'] = 1;
                                                $data_bank12['credit'] = $val->driver_recived_payment;
                                                $data_bank12['name'] = $company_namec;
                                                $data_bank12['create_date'] = $date;
                                                $data_bank12['user_id'] = $this->userid;
                                                $data_bank12['status_by'] = 'Group Order Cash Payment Received';
                                                $data_bank12['balance']=0;
                                                $data_bank12['account_head_id'] = 105;
                                                $data_bank12['deletemod'] = 'DRICT-'.$val->order_no.$trip_id_set;
                                                $data_bank12['account_heads_id_2'] = 105;
                                                $data_bank12['party_type'] = 4;
                                                $data_bank12['selse_order_no']=$val->order_no;

                                                $setchekss = $this->Main_model->where_names('bankaccount_manage','deletemod',$data_bank12['deletemod']);
                                                if(count($setchekss)==0)
                                                {


                                                  $this->Main_model->insert_commen($data_bank12, 'bankaccount_manage');
                                                   
                                               

                                                }
                                                else
                                                {
                                                    
                        $this->db->query("UPDATE bankaccount_manage SET credit='".$val->driver_recived_payment."',debit=0 WHERE deletemod='".$data_bank12['deletemod']."'");
                     
                                                }



                                    }

                                 }

                            }
                            else
                            {

$this->db->query("UPDATE all_ledgers SET credits='".$val->driver_recived_payment."',debits=0 WHERE deletemod='".$driverupdate['deletemod']."'");


                                  
                            }



                        $data_address['order_id'] = 0;
                        $data_address['customer_id'] = $val->customer_id;
                        $data_address['user_id'] = $this->userid;
                        $data_address['notes'] = $trip_id;
                        $data_address['payment_mode'] = $val->payment_mode;
                        $data_address['order_no'] = $val->order_no;
                        $data_address['bank_id'] = 25;
                        
                        $data_address['reference_no'] = $val->order_no;
                        $data_address['amount'] = round($val->totalamount);
                        $data_address['account_head_id'] = 68;
                        $data_address['account_heads_id_2'] = 116;
                        $data_address['order_trancation_status'] = 0;
                        
                        $company_namec='Sales';
                        $sales_team_id=0;
                        $resc= $this->Main_model->where_names('customers', 'id', $val->customer_id);
                         foreach ($resc as $valc) {
                                $company_namec = $valc->company_name;
                                $sales_team_id = $valc->sales_team_id;
                                
                        }
                        
                        $data_address['credits'] = $val->driver_recived_payment;
                        
                        $data_address['collected_amount'] = $val->driver_recived_payment;
                        $data_address['payment_date'] = $date;
                        $data_address['process_by'] = 'Group Order Reconciliation';
                        $data_address['payment_time'] = $time;
                        $data_address['party_type'] = 1;
                        $data_address['deletemod'] ='ORPAY'.$val->order_no.$trip_id_set;


                        if($val->driver_recived_payment>0)
                        {

                            if($delivery_status==1)
                            {
                                $setchekss_vs = $this->Main_model->where_names($tablename_customer_ledger,'deletemod',$data_address['deletemod']);
                                 if(count($setchekss_vs)==0)
                                 {

                                   $insertdataval=$this->Main_model->insert_commen($data_address, $tablename_customer_ledger);

                                 }
                                 else
                                 {

        $this->db->query("UPDATE all_ledgers SET credits='".$val->driver_recived_payment."',debits=0 WHERE deletemod='".$data_address['deletemod']."'");


                                          
                                 }

                            }

                        }






                    
                    $data_bank1['bank_account_id'] = 25;
                    $data_bank1['ex_code'] = $trip_id . ' Ref : ' . $val->order_no;
                    $data_bank1['debit'] = 0;
                    $data_bank1['payment_status'] = 1;
                    $data_bank1['credit'] = $val->driver_recived_payment;
                    $data_bank1['name'] = $company_namec;
                    $data_bank1['create_date'] = $date;
                    $data_bank1['user_id'] = $this->userid;
                    $data_bank1['status_by'] = 'Group Order Cash Payment';
                    $data_bank1['balance']=0;
                    $data_bank1['account_head_id'] = 105;
                    $data_bank1['deletemod'] ='ORPAY'.$val->order_no.$trip_id_set;
                    $data_bank1['account_heads_id_2'] = 105;
                    $data_bank1['party_type'] = 4;
                    $data_bank1['selse_order_no'] = $val->order_no;

                    if($val->driver_recived_payment>0)
                    {
                        if($delivery_status==1)
                        {


                             $setchekss_vs_dr= $this->Main_model->where_names('bankaccount_manage','deletemod',$data_bank1['deletemod']);
                             if(count($setchekss_vs_dr)==0)
                             {


                      $insertbank=$this->Main_model->insert_commen($data_bank1, 'bankaccount_manage');
                      //$this->db->query("UPDATE $tablename_customer_ledger SET deletemod='".$data_bank1['deletemod']."' WHERE id='".$insertdataval."'");


                              }
                              else
                              {


                     $this->db->query("UPDATE bankaccount_manage SET credit='".$val->driver_recived_payment."',debit=0 WHERE deletemod='".$data_bank1['deletemod']."'");

 
                              }



                        }
                   
                    }

                   









                      

                        $customer_from=1;
                        $customer_from_name='';
                    
                        $commision_value=0;
                        if($val->commission_check==1)
                        {
                                
                               $commision_value=$val->bill_total-$val->bill_total_rate;
                               
                        }
                       
                        if($value->commission_check_fact==1)
                        {   
                             $commision_value_fact=$val->bill_total-$val->bill_total_fact;
                             $commision_value=$commision_value_fact;  
 
                        }

                        if($val->create_date > '2024-05-31'){
                            
                            $commision_value = $commision_value * 1.18;
                            $commision_value = round($commision_value);

                        } 

                        $commsision_amount=$val->commsision_amount;
                        if($commsision_amount>0)
                        {
                               $commision_value=$commsision_amount;
                        }


                        $data_address_refer['order_no'] = $val->order_no;
                        $data_address_refer['difference'] = 0;
                        $data_address_refer['reference_no'] = $val->order_no;
                        $data_address_refer['credits'] = round($commision_value,2);
                        $data_address_refer['order_id'] = 0;
                        $data_address_refer['customer_id'] = 252;
                        $data_address_refer["payment_mode"] = 0;
                        $data_address_refer['user_id'] = $this->userid;
                        $data_address_refer['account_head_id'] = 48;
                        $data_address_refer['account_heads_id_2'] = 48;
                        $data_address_refer['order_trancation_status'] = 0;
                        $data_address_refer['bank_id'] = 0;
                        $data_address_refer['credits'] = round($commision_value,2);
                        $data_address_refer['debits'] = 0;
                        $data_address_refer['collected_amount'] = $commision_value;
                        $data_address_refer['payment_date'] = $date;
                        $data_address_refer['notes'] = 'Order Commission '.$customer_from_name;
                        $data_address_refer['process_by'] = 'Order Commission '.$val->order_no;
                        $data_address_refer['commission_customer'] =$customer_from;
                        $data_address_refer['sales_team_id'] =$sales_team_id;
                        $data_address_refer['payment_time'] = $time;
                        $data_address_refer['party_type'] = 5;
                        $data_address_refer['comission_transfered'] = 0;
                        $data_address_refer['deletemod'] = 'CMM'.$order_no;
                        
                        if($customer_from>0)
                        {

                           if($commision_value>0)
                           {
                               $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                               if(count($setchek)==0)
                               {

                                       $insertdataval=$this->Main_model->insert_commen($data_address_refer, $tablename_customer_ledger);



                                            $data_address_refer['credits'] = 0;
                                            $data_address_refer['debits'] = round($commision_value,2);
                                            $data_address_refer['collected_amount'] = round($commision_value,2);
                                            $data_address_refer['process_by'] = 'Commission Payment Debit reconciliation '.$customer_from_name;
                                            $data_address_refer['party_type'] = 5;
                                            $data_address_refer['deletemod'] = 'DPAY_SET_OR'.$insertdataval;
                                            $deletemodset = 'DPAY_SET_OR'.$insertdataval;
                                            $data_address_refer['comission_transfered'] = 5;
                                            $data_address_refer['account_head_id'] = 154;
                                            $data_address_refer['account_heads_id_2'] = 154;
                                            $result_cmm= $this->Main_model->where_names('all_ledgers','deletemod',$deletemodset);
                                            if(count($result_cmm)==0)
                                            {


                                                  $this->Main_model->insert_commen($data_address_refer, 'all_ledgers');


                                            }




                               }
                           }
                           

                        }











                        

                   if($difference_val>0)
                   {



                                      if($md_approved_status==1 && $reason_val=='Collection Verified By MD')
                                      {



                                        $discount_data['order_id'] = 0;
                                        $discount_data['customer_id'] = $val->customer_id;
                                        $discount_data['user_id'] = $this->userid;
                                        $discount_data['notes'] = 'Group Order Discount Payment';
                                        $discount_data['payment_mode'] = $val->payment_mode;
                                        $discount_data['difference'] = 0;
                                        $discount_data['reference_no'] = $val->order_no;
                                        $discount_data['amount'] = round($difference_val);
                                        $discount_data['account_head_id'] = 68;
                                        $discount_data['account_heads_id_2'] = 116;
                                        $discount_data['order_trancation_status'] = 0;
                                        $discount_data['order_no'] = $order_no;
                                        $discount_data['bank_id'] = 25;
                                        $discount_data['paid_status'] = 1;
                                        $discount_data['debits'] = 0;
                                        $discount_data['credits'] = round($difference_val,2);
                                        $discount_data['collected_amount'] = $difference_val;
                                        $discount_data['payment_date'] = $date;
                                        $discount_data['process_by'] = 'Group Order Reconciliation Discount';
                                        $discount_data['payment_time'] = $time;
                                        $discount_data['party_type'] = 1;
                                        $discount_data['deletemod'] = 'RDO'.$order_no;

                                        if($difference_val>0)
                                        {

                                         //$insertdataval=$this->Main_model->insert_commen($discount_data, $tablename_customer_ledger);
                                        
                                         }








                                        $discount_data_base2['order_id'] = 0;
                                        $discount_data_base2['customer_id'] = 332;
                                        $discount_data_base2['user_id'] = $this->userid;
                                        $discount_data_base2['notes'] = 'Group Order Discount Payment';
                                        $discount_data_base2['payment_mode'] = $val->payment_mode;
                                        $discount_data_base2['difference'] = 0;
                                        $discount_data_base2['reference_no'] = $val->order_no;
                                        $discount_data_base2['amount'] = round($difference_val);
                                        $discount_data_base2['account_head_id'] = 417;
                                        $discount_data_base2['account_heads_id_2'] = 417;
                                        $discount_data_base2['order_trancation_status'] = 0;
                                        $discount_data_base2['order_no'] = $order_no;
                                        $discount_data_base2['bank_id'] = 25;
                                        $discount_data_base2['paid_status'] = 1;
                                        $discount_data_base2['debits'] = round($difference_val,2);
                                        $discount_data_base2['credits'] = 0;
                                        $discount_data_base2['collected_amount'] = $difference_val;
                                        $discount_data_base2['payment_date'] = $date;
                                        $discount_data_base2['process_by'] = 'Group Order Reconciliation Discount';
                                        $discount_data_base2['payment_time'] = $time;
                                        $discount_data_base2['party_type'] = 5;
                                        $discount_data_base2['deletemod'] = 'RDOP'.$order_no;
                                       
                                        if($difference_val>0)
                                        {


                                        //$insertdataval=$this->Main_model->insert_commen($discount_data_base2, $tablename_customer_ledger);

                                        }












                                    
                                       }














                   }






              

                       
                       

     




                     $point['get_id'] = $order_id;
                     if($payment_mode == 'Cash')
                     {
                        
                         //$point['reason'] = 'Payment Recived ' . $trip_id;
                        
                    
                     }
                     else
                     {
                         
                          //$point['reason'] = 'Bank Payemnt Pending ' . $trip_id;
                        
                         
                    }
                    
            
            
            
            
                   
                    $point['payment_recived_date'] = $date;
                    $point['payment_recived_time'] = $time;
                    $point['pending_amount'] = $difference;
                    $point['collectamount'] = $drivercharge;
                    $point['assign_status'] = 3;
                    //$point['reason'] = $reason;

                    $point['payment_mode_reconciliation'] = $payment_mode;
                    
                    if($full_delivery==1)
                    {
                        
                            //$point['full_delivery'] = 0;
                            $point['delivery_mode'] = 'Full';
                            $point['paricel_mode'] = 0;
                            $ppa['get_id'] = $order_id;
                            $ppa['paricel_mode'] = 0;
                            $this->Main_model->update_commen_where($ppa, 'order_id', 'order_product_list_process');
                        
                    }
                    
                    
                     

                    $loading_status=0;
                      $randam_id=$val->randam_id;
                    $result_order = $this->db->query("SELECT * FROM $tablename  WHERE id='" . $order_id . "'");
                    $result_order=$result_order->result();
                    foreach ($result_order as $val) 
                    {

                            $loading_status=$val->loading_status;
                            $delivery_status=$val->delivery_status;
                            $parcel_return_status=$val->parcel_return_status;
                            $bill_total=$val->bill_total;
                            $reason=$val->reason;
                            $finance_status=$val->finance_status;
                            $driver_recived_payment=$val->driver_recived_payment;
                            $collection_remarks=$bill_total-$driver_recived_payment;
                            

                    }

                    if($loading_status==1)
                    {

                                if($payment_mode=='Cash')
                               {


                                       if($full_delivery==1)
                                        {



                                               
                                               $point['order_base'] = 1; 
                                               $point['assign_status'] = 3;
                                               $point['assign_status_3_date'] = date('Y-m-d');
                                               $point['finance_status'] = 5; 
                                               $point['full_delivery'] = 0;
                                               $point['loading_status'] = 0;
                                               $point['reason'] = $delivery_mode_last.' Group Payment Received ' . $tripid;



                                        }
                                        else
                                        {



                                                    $point['assign_status'] = 3;
                                                    $point['assign_status_3_date'] = date('Y-m-d');
                                                    $point['finance_status'] = 5;
                                                    $point['loading_status'] = 0;
                                                    $point['full_delivery'] = 1;
                                                    $point['order_base'] = 1;
                                                    $point['delivery_date_status'] = 1;
                                                    $point['delivery_mode'] = 'Partial';
                                                    $point['reason'] = $delivery_mode_last.' Group Partial Payment Received Trip ID' . $tripid;


                                        }


                                  

                               }
                               else
                               {


                                        $point['full_delivery'] = 0;
                                        $point['finance_status'] = 6;
                                        $point['assign_status'] = 3;
                                        $point['assign_status_3_date'] = date('Y-m-d');
                                        $point['reason'] = $delivery_mode_last.' Group Payment Pending  ' . $tripid;


                               }

                                
                    }
                    else
                    {
                             $point['full_delivery'] = 0;
                            if($payment_mode == 'Cash')
                            {
                                
                                 $rescheck = $this->Main_model->where_names('denomination', 'order_no', $order_no);
                                 if(count($rescheck)>0)
                                 {
 
                                     $point['finance_status'] = 5;
                                     $point['assign_status'] = 3;
                                  $point['assign_status_3_date'] = date('Y-m-d');
                                     
                                     $point['reason'] = $delivery_mode_last.' Group Payment Received  Trip ID' . $tripid;


                                 }
                                 else
                                 {


                                               if($delivery_status==1)
                                               {
                                                

                                                      $point['finance_status'] = 6;
                                                      $point['assign_status'] = 3;
                                  $point['assign_status_3_date'] = date('Y-m-d');
                                                      
                                                      $point['reason'] = 'Group Payment Pending';
 $this->db->query("UPDATE order_sales_return_complaints SET remarks='Client Scope Order ' WHERE id='" . $return_id ."'"); 


                                                
                                               }


                                     
                                 }



                            
                            }
                            else
                            {
                                 
                                  
                                  $point['finance_status'] = 6;
                                  $point['assign_status'] = 3;
                                  $point['assign_status_3_date'] = date('Y-m-d');
                                  $point['reason'] = $delivery_mode_last.' Group Payment Pending Trip ID ' . $tripid;
                                 
                            }
                    
                    
                    }



                     if($driver_payment_mode=='Cash')
                     {
                        
                         $point['reason'] = $delivery_mode_last.' Group Payment Received Trip ID ' . $tripid;
                        
                    
                     }
                     else
                     {
                         

                         $point['reason'] = $delivery_mode_last.' Group Payment Pending Trip ID ' . $tripid;
                        
                         
                     }

                     $point['assign_status'] = 3;
                    



                      $this->db->query("UPDATE order_delivery_order_status SET 
             reconcilation_status='1',
             payment_recived_date='".$point['payment_recived_date']."',
             payment_recived_time='".$point['payment_recived_time']."',
             payment_mode_reconciliation='".$point['payment_mode_reconciliation']."',
             reason='".$point['reason']."',
             finance_status='".$point['finance_status']."',
             assign_status='3'
             WHERE trip_id='".$tripid."' AND randam_id='".$randam_id."' AND deleteid=0 AND dispatch_status=1");
                    
                    $this->Main_model->update_commen($point, $tablename);
                    //$this->customer_balance_report_pass($customer_id);











                    











               
                  
                }  
                   
                  
                
                
            }







            $Tripendstatus=" Total KM : ".$total_km." Per KM Charge : ".$per_kg_amount;
           

            $data_driver['user_id'] = $this->userid;
            $data_driver['notes'] = 'Driver ' . $trip_id.$Tripendstatus;
            $data_driver['customer_id'] = $driver_id;
            $data_driver['payment_mode'] = 0;
            $data_driver['reference_no'] =$tripid;
            $data_driver['order_no'] = 'Trip ID '.$tripid;
            $data_driver['amount'] = round($drivercharge,2);
            $data_driver['credits'] = round($drivercharge,2);
            $data_driver['debits'] = 0;
            $data_driver['payout'] = 0;
            $data_driver['payin'] = $drivercharge;
            $data_driver['paid_status'] = '0';
            $data_driver['payment_date'] = $date;
            $data_driver['payment_time'] = $time;
            $data_driver['process_by'] = 'Group Driver Reconciliation';
            $data_driver['order_trancation_status'] = 2;
            $data_driver['party_type'] = 2;
            $data_driver['account_head_id'] = 52;
            $data_driver['account_heads_id_2'] = 104;
            $data_driver['bank_id'] = 0;
            $data_driver['deletemod'] = 'GROUP-DRIVER-'.$driver_id.'-'.$tripid;
            $data_driver['driver_collection_status'] = 1;


           
            if($drivercharge>0)
            {


                            $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_driver['deletemod']);
                            if(count($setchek)==0)
                            {

                                  $insertdataval=$this->Main_model->insert_commen($data_driver, $tablename_driver_ledger);


                            }
                            else
                            {
                                   

                                 $this->db->query("UPDATE all_ledgers SET credits='".round($drivercharge,2)."',debits=0 WHERE deletemod='".$data_driver['deletemod']."'");

                            }

                                  $driver_name="";
                                  $res = $this->Main_model->where_names('admin_users', 'define_driver_id', $driver_id);
                                  foreach ($res as $val) {
                                        $driver_name = $val->name;
                                        
                                  }


                                 $data_driver['customer_id'] = 346;
                                 $data_driver['credits'] = 0;
                                 $data_driver['debits'] = round($drivercharge,2);
                                 $data_driver['account_head_id'] = 155;
                                 $data_driver['account_heads_id_2'] = 155;
                                 $data_driver['party_type'] = 5;
                                 $data_driver['driver_collection_status'] = 0;
                                 $data_driver['reference_no'] = 'Trip ID '.$tripid.' '.$driver_name;
                                 $data_driver['deletemod'] = 'GROUP-DRIVER-AT'.$driver_id.'-'.$tripid;
                                 $deletemodstatus = 'GROUP-DRIVER-AT'.$driver_id.'-'.$tripid;
                                 $setchekss_vsd = $this->Main_model->where_names($tablename_customer_ledger,'deletemod',$deletemodstatus);
                                 if(count($setchekss_vsd)==0)
                                 {

                                    $this->Main_model->insert_commen($data_driver, $tablename_driver_ledger);

                                 }
                                 else
                                 {

                                    $this->db->query("UPDATE all_ledgers SET debits='".round($drivercharge,2)."',credits=0 WHERE deletemod='".$deletemodstatus."'");

                                 }


            }
            
             









            
            
}
    
    
    
    
    
    
    
    
    public function tripcomplete() {
        $form_data = json_decode(file_get_contents("php://input"));
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $otp = str_replace('|', '', $form_data->otp);
        if ($otp != "") {
            $order_id = $form_data->order_id;
            $paymentmode = $form_data->paymentmode;
            $reference_no = $form_data->reference_no;
            $rescheduling_delivery = $form_data->rescheduling_delivery;
            $rescheduling_date = $form_data->rescheduling_date;
            $rescheduling_remarks = $form_data->rescheduling_remarks;
            $km_reading_end = $form_data->km_reading_end;
            $return_excess = $form_data->return_excess;
            $return_excess1 = $form_data->return_excess1;
            $selectcollection_id_data = $form_data->selectcollection_id_data;
             $randam_id = $form_data->DC_id;
            
            
            $getamount=0;
            $difference=0;

           // $resultpending = $this->Main_model->where_names_two_order_by('orders_process', 'id', $order_id, 'otp', $otp, 'id', 'DESC');
               $getamount=0;
            $difference=0;

            $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
            $resultpending =  $this->db->query("SELECT *,ds.delivery_mode as delivery_mode_last,ds.vehicle_id as vehicle_id_last,ds.driver_id as driver_id_last,ds.trip_id as trip_id_last,ds.collection_remarks as collection_remarks_last,ds.finance_status as finance_status_last FROM orders_process as a  $JOIN WHERE ds.randam_id='" . $randam_id . "' AND ds.otp='" . $otp . "'  AND ds.order_id='" . $order_id . "'");
                         $resultpending = $resultpending->result();

            if (count($resultpending) == 1)
            {
                
                
                if($rescheduling_delivery!='Rescheduling')
                {
                    
                
                 $st=array('YES','NO');
                 if (in_array($rescheduling_delivery, $st))
                 {
                
                        //$deliveryproduts= $this->Main_model->where_names_two_order_by('order_product_list_process', 'order_id', $order_id, 'deleteid', 0, 'id', 'DESC');
        $deliveryproduts= $this->Main_model->where_names_three_order_by('order_product_list_process', 'order_id', $order_id,'loadstatus', 1, 'deleteid', 0, 'id', 'DESC'); 
        //$this->db->query("UPDATE sales_load_products SET randam_id=NULL,pickedstatus=1 WHERE randam_id='".$randam_id."' AND loadstatus=0 AND order_id='".$order_id."'");


                              foreach ($deliveryproduts as $vl)
                              {
                                 
                                        $order_product_id=$vl->id;
                                        $resultcheck = $this->Main_model->where_names('sales_load_products', 'order_product_id', $order_product_id);
                                        if(count($resultcheck)>0)
                                        { 

                                             if($vl->return_status==0)
                                             {

                                            
                                                  foreach($resultcheck as $vlset)
                                                  {
                                                           if($vlset->loadstatus==1)
                                                           {



    $this->db->query("UPDATE sales_load_products SET delivered_products='1' WHERE order_product_id='" . $vlset->order_product_id . "' AND randam_id='".$randam_id."'");  
                        $this->db->query("UPDATE order_product_list_process SET delivery_status='1' WHERE id='" . $vlset->order_product_id . "'"); 


                $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE id='" . $vlset->order_product_id . "'  AND deleteid=0 ORDER BY id DESC");
               $checkcount = $checkcount->result();

               $resultmainss = $this->db->query("SELECT SUM(qty) as totalqty FROM sales_load_products  WHERE order_product_id='" . $vlset->order_product_id . "' AND loadstatus=1   ORDER BY id DESC");
               $resultcss = $resultmainss->result();


                 $firsttotal=round($checkcount[0]->totalqty);
                 $secondtotal=round($resultcss[0]->totalqty);
                 if($firsttotal!=$secondtotal)
                 {
                       
         $this->db->query("UPDATE order_product_list_process SET picked_status='0',randam_id=NULL WHERE id='" . $vlset->order_product_id . "'");
       

                 } 



                                                           }
                                                          
                                                  }




                                            }
                                             
                                             
                                            
                                        }
                                        
                                 
                                 
                             }

                 }
                    
                
                
                
                
                
                $getamount = $form_data->getamount;
                $trim_id = "";
                $return_id=0;
                $difference=0;
                $loading_status=0;
                foreach ($resultpending as $cv) {
                    $order_no = $cv->order_no;
                    $return_id = $cv->return_id;
                    $trip_id_no = $cv->trip_id_last;
                    $trim_id = "Trip ID : " . $cv->trip_id_last;
                    $trip_id = "Trip ID : " . $cv->trip_id_last;
                    $trip_id_set =$cv->trip_id_last.$randam_id;
                    $driver_id = $cv->driver_id_last;
                    $vehicle_id = $cv->vehicle_id_last;
                    $customer_id = $cv->customer_id;
                    $return_id = $cv->return_id;


     
                       $payment_mode_order = $cv->payment_mode;
                       $loading_status = $cv->loading_status;
                       $full_delivery = $cv->full_delivery;
                       $collection_remarks = $cv->collection_remarks_last;
                       $finance_status = $cv->finance_status_last;

                       $delivery_mode_last = $cv->delivery_mode_last;


                     $bill_total = $cv->bill_total;
                     $getamount_total= $getamount;
                     $difference=$collection_remarks-$getamount_total;

                }

                    $company_name='';
                    $customers_data = $this->Main_model->where_names("customers","id" ,$customer_id);
                    foreach ($customers_data as $csvalv) {
                                        $company_name = $csvalv->company_name;
                    }
                
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $data_address["trip_id"] = $trip_id_no;
                $data_address["driver_update"] = 1;
                $data_address["randam_id"] = $randam_id;

               
                $result_order = $this->Main_model->where_names_two_order_by('denomination', 'order_id', $order_id, 'randam_id', $randam_id, 'id', 'ASC');
               
                if($paymentmode=='Cash')
                {



                           $getamount = $form_data->getamount;
                           // $difference = $form_data->difference;




                            $data_address_refer['order_no'] = $order_no;
                            $data_address_refer['difference'] = $difference;
                            $data_address_refer['reference_no'] = $order_no;
                            $data_address_refer['order_id'] = 0;
                            $data_address_refer['customer_id'] = $driver_id;
                            $data_address_refer["payment_mode"] ='0';
                            $data_address_refer['user_id'] = $this->userid;
                            $data_address_refer['account_head_id'] = 52;
                            $data_address_refer['account_heads_id_2'] = 104;
                            $data_address_refer['order_trancation_status'] = 0;
                            $data_address_refer['bank_id'] = 0;
                            $data_address_refer['credits'] = 0;
                            $data_address_refer['debits'] = round($getamount,2);
                            $data_address_refer['collected_amount'] = $getamount;
                            $data_address_refer['payment_date'] = $date;
                            $data_address_refer['notes'] = 'Driver Received Payment | '.$company_name;
                            $data_address_refer['process_by'] = 'Driver Received Payment '.$order_no;
                            $data_address_refer['payment_time'] = $time;
                            $data_address_refer['party_type'] = 2;
                            $data_address_refer['deletemod'] = 'DRI-'.$order_no.$trip_id_set;


                            $setchek = $this->Main_model->where_names('all_ledgers','deletemod',$data_address_refer['deletemod']);
                            if(count($setchek)==0)
                            {

                                 $this->Main_model->insert_commen($data_address_refer, 'all_ledgers');

                            }



                            $order_no_set_final=$order_no.$trip_id_set;

$this->db->query("UPDATE all_ledgers SET deleteid='0',credits='0',debits='".round($getamount,2)."'  WHERE deletemod='DRI-".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0',debits='0',credits='".round($getamount,2)."' WHERE deletemod='ORPAY".$order_no_set_final."'");
$this->db->query("UPDATE all_ledgers SET deleteid='0',debits='0',credits='".round($getamount,2)."' WHERE deletemod='DRICT-".$order_no_set_final."'");
$this->db->query("UPDATE bankaccount_manage SET deleteid='0',debit='0',credit='".round($getamount,2)."' WHERE deletemod='DRICT-".$order_no_set_final."'");

  



                            $data_addressww['order_id'] = 0;
                            $data_addressww['customer_id'] = $customer_id;
                            $data_addressww['user_id'] = $this->userid;
                            $data_addressww['notes'] = 'Order Payment Received By Driver' . $trim_id;
                            $data_addressww['payment_mode'] = '0';
                            $data_addressww['order_no'] = $order_no;
                            $data_addressww['bank_id'] = 25;
                            $data_addressww['difference'] = $difference;
                            $data_addressww['reference_no'] = $order_no;
                            $data_addressww['amount'] = round($getamount,2);
                            $data_addressww['account_head_id'] = 68;
                            $data_addressww['account_heads_id_2'] = 123;
                            $data_addressww['order_trancation_status'] = 0;
                            $data_addressww['paid_status'] = 1;
                            $data_addressww['credits'] = round($getamount,2);
                            $data_addressww['debits'] = 0;
                            $data_addressww['collected_amount'] = round($getamount,2);
                            $data_addressww['payment_date'] = $date;
                            $data_addressww['process_by'] = 'Order Payment Received By Driver';
                            $data_addressww['payment_time'] = $time;
                            $data_addressww['party_type'] = 1;
                            $data_addressww['deletemod'] = 'ORPAY'.$order_no.$trip_id_set;

                            $setchek1 = $this->Main_model->where_names('all_ledgers','deletemod',$data_addressww['deletemod']);
                             if(count($setchek1)==0)
                             {

                                    $insertdataval=$this->Main_model->insert_commen($data_addressww, 'all_ledgers');


                                    $data_bank1['bank_account_id'] = 25;
                                    $data_bank1['ex_code'] = $trip_id . ' Ref : ' . $order_no;
                                    $data_bank1['debit'] = 0;
                                    $data_bank1['payment_status'] = 1;
                                    $data_bank1['credit'] = round($getamount,2);
                                    $data_bank1['name'] = $company_name;
                                    $data_bank1['create_date'] = $date;
                                    $data_bank1['user_id'] = $this->userid;
                                    $data_bank1['status_by'] = 'Order Cash Payment Driver Received';
                                    $data_bank1['balance']=0;
                                    $data_bank1['account_head_id'] = 105;
                                    $data_bank1['deletemod'] = 'ORPAY'.$order_no.$trip_id_set;
                                    $data_bank1['account_heads_id_2'] = 105;
                                    $data_bank1['party_type'] = 4;

                                    $setchekss = $this->Main_model->where_names('bankaccount_manage','deletemod',$data_bank1['deletemod']);
                                    if(count($setchekss)==0)
                                    {

                                      //$insertbank=$this->Main_model->insert_commen($data_bank1, 'bankaccount_manage');
                                       //$this->db->query("UPDATE all_ledgers SET deletemod='".$data_bank1['deletemod']."' WHERE id='".$insertdataval."'");
                                   

                                    }
                                   

                             }


                            




                        
                   
                 
                        if(count($result_order) == 0) 
                        {
                            $data_address['order_id'] = $order_id;
                            $this->Main_model->insert_commen($data_address, 'denomination');
                        }
                        else
                        {
                            
                            // $data_address['get_id'] = $order_id;
                            // $data_address['delivery_status'] = 0;
                             //$this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                             //$this->Main_model->update_commen_where_two($data_address, 'order_id','delivery_status','0', 'denomination');
                              //$data_address['order_id'] = $order_id;
                             //$this->Main_model->insert_commen($data_address, 'denomination');

                              $data_address['get_id'] = $order_id;
                              //$this->Main_model->update_commen_where_two($data_address, 'order_id','delivery_status','0', 'denomination');
                             $this->Main_model->update_commen_where_three($data_address, 'order_id','delivery_status','0','randam_id',$randam_id, 'denomination');


                            
                        }
                
                
                }
                
                }
                
                
                
                
                
                
                
                
                
                
                
                $point['payment_mode'] = $paymentmode;
                $point['payment_mode_order'] = $payment_mode_order;

                $point['reference_no'] = $reference_no;
                $point['rescheduling_delivery'] = $rescheduling_delivery;
                
                $point['km_reading_end'] = $km_reading_end;
                $point['return_excess'] = str_replace('-', '', $return_excess);
                $point['collecttion_id'] = $selectcollection_id_data;
                $point['get_id'] = $order_id;
                $point['trip_end_date'] = $date;
                $point['trip_end_time'] = $time;
                $point['driver_recived_payment'] = $getamount;

                if($rescheduling_delivery == 'NO') 
                {






                    $point['assign_status'] = 3;
                    $point['finance_status'] = 4;
                    if($difference==0)
                    {
                       


                        $point['reason'] = 'Trip Completed ' . $trim_id;     
                           

                    }
                    else
                    {

                            if($paymentmode=='Cash')
                            {

                                     if($loading_status==1)
                                     {

                                             
                                                            $point['collectamount'] = $getamount;
                                                            $point['difference'] = $difference;
                                                            $point['assign_status'] = 3;
                                                            $point['finance_status'] = 4;
                                                            //$point['delivery_date_status'] = 0;
                                                            $point['collection_remarks'] = $difference;
                                                            //$point['order_base'] = 1;
                                                            $point['reason'] = $delivery_mode_last.' Trip Completed ' . $trim_id;

                                     }
                                     else
                                     {

                                                                

                                                                 if($finance_status==11)
                                                                  {

                                                                         

                                                                                       $point['loading_status'] = 1;
                                                                                       $point['parcel_return_status'] = 1;
                                                                                       $point['reason'] = $delivery_mode_last.' Trip Completed ' . $trim_id;



                                                                  }
                                                                  else
                                                                  {




                                                                                         if($return_id>0)
                                                                                         {

                                                                                               $point['reason'] = 'Order Return Trip Completed ' . $trim_id;

                                                                                         }
                                                                                         else
                                                                                         {


                                                                                            $point['collectamount'] = $getamount;
                                                                                            $point['difference'] = $difference;
                                                    $point['order_base'] = 120;
                            $point['reason'] = 'Payment Difference Sales Verification Request ' . $trim_id;




                                                                                         }



                                                                  }

                                               


                                    }


                            }
                            else
                            {
                                $point['reason'] = $delivery_mode_last.' Trip Completed ' . $trim_id;
                            }

                             


                    }

                $results = $this->Main_model->where_names("orders_process","id",$order_id);
                foreach ($results as $orders)
                {
                                   
                $return_id = $orders->return_id;

                }
                                
               
 




                    




  $results = $this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_id', $order_id, 'randam_id', $randam_id, 'id', 'ASC');

        
                    foreach ($results as $orders) {


                          $resultsget = $this->Main_model->where_names(
                                "orders_process",
                                "id",
                                $orders->order_id
                            );

                            foreach ($resultsget as $get) {
                                $id = $get->id;
                                $order_no = $get->order_no;
                                $customer_id = $get->customer_id;
                                $bill_total = $get->bill_total;
                            }




                        $return_id = $orders->return_id;



                        $customers_data = $this->Main_model->where_names(
                            "customers",
                            "id",
                            $customer_id
                        );

                        $userid_sales=0;
                        foreach ($customers_data as $csvalv) {
                            $phone = $csvalv->phone;
                             $userid_sales = $csvalv->sales_team_id;
                        }



                        $sales_name = "";
                        $sales_phone = "";
                        $sales_person = $this->Main_model->where_names(
                            "admin_users",
                            "id",
                            $userid_sales
                        );
                        foreach ($sales_person as $sales)
                        {
                            $sales_name = $sales->name.' '.$sales->phone;

                            $define_saleshd_id=$sales->define_saleshd_id;
                            $define_saleshd_id=explode('|', $define_saleshd_id);
                            
                        }


                $sales_name_head = array();
                       
                $resultsales_team = $this->Main_model->where_in_names('admin_users','id',$define_saleshd_id);
                foreach ($resultsales_team as $sales) 
                {
                            
                            $sales_name_head[] = $sales->name.' '.$sales->phone.',';

                           
                            
                }

                $sales_name_head=implode('|', $sales_name_head);

                        


                          if($getamount<0)
                         {
                            $getamount=$orders->bill_total;
                         }

                         
                    }



                     $getamount =  number_format($getamount, 2, '.', ',');

                    $msg =
                        'Greetings from Zaron Industries

Your order number  ' .
                        $order_no .
                        " has been delivered on" . date("d-m-Y");
                       
                       
                       


            $msg.=' Any queries contact Sales person:'.$sales_name.', Team Leader:'.$sales_name_head.' Complaint No:7373788338';

                    $this->whats_app_send(
                        $phone,
                        $msg,
                        "orders_process",
                        $order_id,$userid_sales
                    );

















                 if($return_id>0)
                 {

            //$this->db->query("UPDATE order_sales_return_complaints SET remarks='Driver Delivered The Order' WHERE id='" . $return_id ."' AND order_base NOT IN ('5')");  

  $checkcount = $this->db->query("SELECT SUM(qty) as totalqty,SUM(return_qty_pick) as total_return_qty_pick FROM sales_return_products  WHERE c_id='" . $return_id . "'");
               $checkcount = $checkcount->result();

               if(count($checkcount)>0)
               {
                  foreach($checkcount as $vb)
                  {
                    
                    if($vb->totalqty<=$vb->total_return_qty_pick)
                    {

                $this->db->query("UPDATE order_sales_return_complaints as a JOIN sales_return_products as b ON a.id=b.c_id SET a.remarks='Driver Delivered The Order'  WHERE a.id='".$return_id."' AND b.return_picked=1 AND a.order_base NOT IN ('5')");


                    }


                  }
               }



            //$this->customer_balance_report_pass($customer_id);          
                     
                 }
                   




                } 
                elseif($rescheduling_delivery == 'YES') 
                {







                        $querycount = $this->db->query("SELECT a.id FROM order_sales_return_complaints as a JOIN sales_return_products as b ON a.id=b.c_id  WHERE b.deleteid='0' AND a.order_no='".$order_no."' AND a.driver_return=2 ORDER BY a.id DESC");
                        $resultcount = $querycount->result();
                        $count=count($resultcount);


                        $querycount2 = $this->db->query("SELECT a.id FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id  WHERE b.deleteid='0' AND a.id='".$order_id."' ORDER BY a.id DESC");
                        $resultcount2 = $querycount2->result();
                        $count2=count($resultcount2);


                        if($count==$count2) 
                        {



                            $point['assign_status'] = 3;
                            $point['finance_status'] = 4;
                            //$point['delivery_date_status'] = 0;
                            $point['return_status'] = 1;
                            $point['reason'] = 'Partial Trip Completed 1 ' . $trim_id;
                           


                        }
                        else
                        {


                              

                                        $point['assign_status'] = 3;
                                        $point['finance_status'] = 4;
                                        $point['loading_status'] = 1;
                                        //$point['delivery_date_status'] = 0;
                                        if($difference==0)
                                        {


                                             $point['reason'] = 'Return Partial Trip Completed ' . $trim_id;
                                             

                                        }
                                        else
                                        {

                                               if($paymentmode=='Cash')
                                               {

                                                     $point['collectamount'] = $getamount;
                                                     $point['difference'] = $difference;
                                                     $point['order_base'] = 1;
                                                     $point['reason'] = 'Return Partial Trip Completed ' . $trim_id;



                                                }
                                                else
                                                {
                                                    $point['reason'] = 'Return Partial Trip Completed ' . $trim_id;
                                                }
                                                


                                        }





                        }

                     






                }
                elseif($rescheduling_delivery == 'Party Not Available') 
                {
                    $point['assign_status'] = 0;
                    $point['finance_status'] = 2;
                    $point['reason'] = 'Party Not Available';
                }
                else
                {
                       

                    $rescheduling_date=date('d-m-Y g:i A',strtotime($rescheduling_date));   
                    $point['rescheduling_date'] = $rescheduling_date;
                    $point['rescheduling_remarks'] = $rescheduling_remarks;

                    $checkdate=date('Y-m-d',strtotime($rescheduling_date)); 
                   
                    if($checkdate==$date)
                    {

                          $point['assign_status'] = 1;
                          $point['assign_status_1_date'] = date('d-m-Y');
                          $point['assign_status_2_date'] = NULL;
                          $point['assign_status_3_date'] = NULL;
                          $point['finance_status'] = 3;
                          $point['reason'] = 'Rescheduled  ' . $rescheduling_date . ' ' . $rescheduling_remarks;

                    } 
                    else
                    {
                            $point['assign_status'] = 0;
                            $point['finance_status'] = 2;
                            //$point['assign_status_0_date'] = date('d-m-Y');
                            $point['assign_status_11_date'] = NULL;
                            $point['assign_status_12_date'] = NULL;
                            $point['assign_status_2_date'] = NULL;
                            $point['assign_status_3_date'] = NULL;
                            $point['reason'] = 'Rescheduled  ' . $rescheduling_date . ' ' . $rescheduling_remarks;
                    }     



                     $results = $this->Main_model->where_names(
                            "orders_process",
                            "id",
                            $order_id
                        );
                        foreach ($results as $orders) {
                            $order_no = $orders->order_no;
                            $id = $orders->id;
                            $customer_id = $orders->customer_id;

                            $customers_data = $this->Main_model->where_names(
                                "customers",
                                "id",
                                $customer_id
                            );
                            $userid_sales=0;
                            foreach ($customers_data as $csvalv) {
                                $phone = $csvalv->phone;
                                 $userid_sales = $csvalv->sales_team_id;
                            }

                        }

                        $msg =
                            'Greetings from Zaron Industries

Your order number  ' .
                            $order_no .
                            " will be Rescheduled  " .
                            date("d-m-Y", strtotime($rescheduling_date));

                        $this->whats_app_send(
                            $phone,
                            $msg,
                            "orders_process",
                            $order_id,$userid_sales
                        );         
                   


                   
                }
                
                
                if($return_excess1>0)
                {
                     //$point['order_base'] = 24;
                     //$point['reason'] = 'Excess Payment Approval Amount :' . $return_excess1;
                }



                   $this->db->query("UPDATE order_delivery_order_status SET 
                    payment_mode='".$point['payment_mode']."',
                    km_reading_end='".$point['km_reading_end']."',
                    driver_recived_payment='".$point['driver_recived_payment']."',
                    reason='".$point['reason']."',
                    assign_status_1_date='".$point['assign_status_1_date']."',
                    assign_status_2_date='".$point['assign_status_2_date']."',
                    assign_status_3_date='".$point['assign_status_3_date']."',
                    finance_status='".$point['finance_status']."',
                    trip_end_date='".$point['trip_end_date']."',
                    return_excess='".$point['return_excess']."',
                    trip_end_time='".$point['trip_end_time']."',
                    assign_status='".$point['assign_status']."',
                    reference_no='".$point['reference_no']."'
                    WHERE order_id='".$order_id."' AND randam_id='".$randam_id."' AND deleteid=0 AND dispatch_status=1");               
                    $this->Main_model->update_commen($point, 'orders_process');



       $this->db->query("UPDATE sales_return_products SET return_picked_deliverd=return_picked,return_delivered_nos=return_no_pick,return_delivered_qty=return_qty_pick  WHERE c_id='".$return_id."'");  
        $this->db->query("UPDATE sales_return_products SET return_picked='0',return_no_pick='0',return_qty_pick='0'  WHERE c_id='".$return_id."'");  
               
                
                
            } else {
                $array = array('error' => '1', 'massage' => 'OTP Is Wrong');
                echo json_encode($array);
            }
        } else {
            $array = array('error' => '1', 'massage' => 'OTP Is required');
            echo json_encode($array);
        }
    }
    
    
    
    
    
       public function denominationsave() 
       {
          
          
                $form_data = json_decode(file_get_contents("php://input"));
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
           
                 $order_id = $form_data->order_id;
                $result_orderset = $this->Main_model->where_names('orders_process', 'move_id', $order_id);
                
              
                if(count($result_orderset)>0)
                {
                    
                    
                                foreach($result_orderset as $vl)
                                {
                                   $order_id =$vl->id;
                                   $order_no =$vl->order_no;
                                }
                          
          
                    
                }
                else
                {
                                 $order_id = $form_data->order_id;
                                 $order_no = $form_data->order_no;
                
                    
                }
               
              
                
                
                $paymentmode = $form_data->paymentmode;
            
            
            
            
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $result_order = $this->Main_model->where_names('denomination', 'order_id', $order_id);
                if (count($result_order) == 0) {
                    $data_address['order_id'] = $order_id;
                    $this->Main_model->insert_commen($data_address, 'denomination');
                } else {
                    $data_address['get_id'] = $order_id;
                    $this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                }
                
                
       
    }
   
    
    
    
    
    
        public function denominationsave_self() 
       {
          
          
                $form_data = json_decode(file_get_contents("php://input"));
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
           
                 $order_id = $form_data->order_id;
                 $order_no= $form_data->order_no;
               
              
                
                
                $paymentmode = $form_data->paymentmode;
            
               // $this->db->query("UPDATE orders_process SET payment_mode='".$paymentmode."' WHERE id='".$order_id."'");
                                                            
            
            
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $result_order = $this->Main_model->where_names('denomination', 'order_id', $order_id);
                if (count($result_order) == 0) {
                    $data_address['order_id'] = $order_id;
                    $this->Main_model->insert_commen($data_address, 'denomination');
                } else {
                    $data_address['get_id'] = $order_id;
                    $this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                }
                
                
       
    }
   
    
    
      public function denominationsave_edit() 
       {
          
          
              
                $form_data = json_decode(file_get_contents("php://input"));
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
           
                 $order_id = $form_data->order_id;
                 $order_no= $form_data->order_no;
                $randam_id = $form_data->randam_id;
              
                $paymentmode = $form_data->paymentmode;
            
                //$this->db->query("UPDATE orders_process SET payment_mode='".$paymentmode."' WHERE id='".$order_id."'");


                  $result_orders = $this->Main_model->where_names(
                    "order_delivery_order_status",
                    "randam_id",
                    $randam_id
                  );

                  foreach ($result_orders as  $value) {
                        $trip_id = $value->trip_id;
                  }  
                                                            
               
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $data_address["trip_id"] = $trip_id;

                $result_order = $this->Main_model->where_names('denomination', 'order_id', $order_id);
                if(count($result_order) == 0)
                {

                    $data_address['order_id'] = $order_id;
                    $data_address["randam_id"] = $randam_id;
                    $this->Main_model->insert_commen($data_address, 'denomination');
                }
                else
                {

                    $data_address['get_id'] = $order_id;
                    //$this->Main_model->update_commen_where_two($data_address, 'order_id','delivery_status','0', 'denomination');
                    $this->Main_model->update_commen_where_three($data_address, 'order_id','delivery_status','0','randam_id',$randam_id, 'denomination');
                    //$this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                }
                
       
    }
   
    
     public function denominationsave_trip_update()
    {
        $form_data = json_decode(file_get_contents("php://input"));
        date_default_timezone_set("Asia/Kolkata");
        $date = date("Y-m-d");
        $time = date("h:i A");

        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $randam_id = $form_data->randam_id;
          $result_orders = $this->Main_model->where_names(
            "order_delivery_order_status",
            "randam_id",
            $randam_id
        );

          foreach ($result_orders as  $value) {
                $trip_id = $value->trip_id;
          }  
      



        $paymentmode = $form_data->paymentmode;

     

        $data_address["c1rs"] = $form_data->c1_rs;
        $data_address["c2rs"] = $form_data->c2_rs;
        $data_address["c5rs"] = $form_data->c5_rs;
        $data_address["c10rs"] = $form_data->c10_rs;
        $data_address["c20rs"] = $form_data->c20_rs;
        $data_address["c50rs"] = $form_data->c50_rs;
        $data_address["c100rs"] = $form_data->c100_rs;
        $data_address["c200rs"] = $form_data->c200_rs;
        $data_address["c500rs"] = $form_data->c500_rs;
        $data_address["c2000rs"] = $form_data->c2000_rs;
        $data_address["order_no"] = $order_no;
        $data_address["trip_id"] = $trip_id;

        $result_order = $this->Main_model->where_names(
            "denomination",
            "order_id",
            $order_id
        );
        if (count($result_order) == 0) {
            $data_address["order_id"] = $order_id;
            $data_address["randam_id"] = $randam_id;
            $this->Main_model->insert_commen($data_address, "denomination");
        } else {
            $data_address["get_id"] = $order_id;
            //$this->Main_model->update_commen_where($data_address,"order_id","denomination");
            $this->Main_model->update_commen_where_three($data_address, 'order_id','delivery_status','0','randam_id',$randam_id, 'denomination');


        }
    }
    
    public function addprice() {
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->name != '' && $form_data->price != '') {
            $data_address['product_id'] = $form_data->product_id;
            $data_address['vendor_name'] = $form_data->name;
            $data_address['price'] = $form_data->price;
            $data_address['sqft'] = $form_data->sqft;
            $data_address['updated_by'] = $this->username;
            $addressid = $this->Main_model->insert_commen($data_address, 'competitor_price_list');
            $array = array('error' => '2', 'massage' => 'Price successfully Added..');
            echo json_encode($array);
        } else {
            $array = array('error' => '1');
            echo json_encode($array);
        }
    }
     public function order_quotation_move() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;

        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = 1;
            if ($tablenamemain == 'orders') {
                $datassfirst['reason'] = 'Moved';
            }
           // print($datassfirst);exit();
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            
            if($oldtablename=='orders_process'){
                $neworder_id = 1;
                $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
                foreach ($order_last_count as $r) {
                    $neworder_id = $r->id + 1;
                }
                $order_no_data_new = strtoupper(date('M') . '/' . $neworder_id);
            }
            
             
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                $tcs_status= $orders->tcs_status;
                $tcsamount= $orders->tcsamount;
                
                if($oldtablename=='orders_process'){
                        $find['order_no'] = $order_no_data_new;
                        $find['month'] = date('M');
                        $find['year'] = date('Y');
                        $find['count'] = $neworder_id;
                }else{
                    $parts = explode('/', $orders->order_no);

                    if (count($parts) >= 3) {
                        array_splice($parts, 1, 0, ['Q', 'O']);
                        $updatedOrderID = implode('/', $parts);
                        $orders->order_no = $updatedOrderID;
                    }

                    $find['order_no'] = $orders->order_no;
                    // $parts = explode('/', $orders->order_no);
            
                    // if (count($parts) >= 2) {
                    //     $parts[1] = 'Q';
                    //     $parts[2] = 'O';
                    //     $updatedOrderID = implode('/', $parts);
                    //     $orders->order_no = $updatedOrderID;
                    // }
        
                    //   $find['order_no'] = $orders->order_no;
                }
                
                $customer_id = $orders->customer_id;

                
                $find['discount'] = $orders->discount; 
                $find['discountPre'] = $orders->discountPre;


                $find['narration'] = $orders->narration;
                $find['customer_id'] = $orders->customer_id; $find['notes'] = $orders->notes;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
                $find['mobile_order'] = $orders->mobile_order;
                $find['commsision_amount'] = $orders->commsision_amount;


                $find['bill_total'] = $orders->bill_total;
                $find['tcs_status'] = $orders->tcs_status;
                $find['bill_total_fact'] = $orders->bill_total_fact;
                $find['tcsamount'] = $orders->tcsamount;
                $find['bill_total_rate'] = $orders->bill_total_rate;
                $find['without_commsision_total'] = $orders->without_commsision_total;

                $find['customer_address_id'] = $orders->customer_address_id;


                $find['billing_address'] = $orders->billing_address;
                $find['shipping_address'] = $orders->shipping_address;


                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                $create_date = $orders->create_date;


                //$find['create_date'] = $orders->create_date;

                $find['create_date'] = $date;



                $find['mark_date'] = $orders->mark_date;

                $find['create_time'] = $time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                
                if($oldtablename=='orders_process')
                {
                    $find['order_base'] = 1;
                    $find['finance_status'] = 2;
                    $find['delivery_status'] = 1;
                }
                else
                {
                    $find['order_base'] = 0;
                }
                
                
                $payment_mode = $orders->payment_mode;
                $delivery_charge = $orders->delivery_charge;
                $minisroundoff = $orders->roundoff;
                $roundoffstatus = $orders->roundoffstatus;
                $discount = $orders->discount;
                
                
                $find['commission_check'] = $orders->commission_check;
                $find['commission_check_fact'] = $orders->commission_check_fact;

                $find['bill_total_rate'] = $orders->bill_total_rate;
                $find['bill_total_fact'] = $orders->bill_total_fact;
                $find['without_commsision_total'] = $orders->without_commsision_total;

                $find['gst_check'] = $orders->gst_check;
                $find['delivery_charge'] = $orders->delivery_charge;

                $find['SSD_check'] = $orders->SSD_check;
                 $find['excess_payment_status'] = $orders->excess_payment_status;
                $find['delivery_date_time'] = $orders->delivery_date_time;
                $find['delivery_date'] = $orders->delivery_date;


                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $find['po_upload'] = $orders->po_upload;

                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
                if(count($result_order) == 0)
                {


                     $insertid = $this->Main_model->insert_commen($find, $oldtablename);


                }
                else
                {

                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = 0;
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);

                }

                
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                $totalamount=0;
                $order_no_new=$orders->order_no;
                $product_array=array();
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $orders->order_no;
                    $findp['product_name'] = $orders_product->product_name;
                    $totalamount+= $orders_product->rate * $orders_product->qty;
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    $product_array[]=$orders_product->id;
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['commission_fact'] = $orders_product->commission_fact;



                    $findp['competitor_name1'] = $orders_product->competitor_name1;
                    $findp['competitor_name2'] = $orders_product->competitor_name2;
                    $findp['competitor_name3'] = $orders_product->competitor_name3;
                    $findp['net_rate1'] = $orders_product->net_rate1;
                    $findp['net_rate2'] = $orders_product->net_rate2;
                    $findp['net_rate3'] = $orders_product->net_rate3;
                    $findp['amount_1'] = $orders_product->amount_1;
                    $findp['amount_2'] = $orders_product->amount_2;
                    $findp['amount_3'] = $orders_product->amount_3;
                    $findp['total_1'] = $orders_product->total_1;
                    $findp['total_2'] = $orders_product->total_2;
                    $findp['total_3'] = $orders_product->total_3;
                    $findp['c_fact_1'] = $orders_product->c_fact_1;
                    $findp['c_fact_2'] = $orders_product->c_fact_2;
                    $findp['c_fact_3'] = $orders_product->c_fact_3;
                    $findp['c_file_1'] = $orders_product->c_file_1;
                    $findp['c_file_2'] = $orders_product->c_file_2;
                    $findp['c_file_3'] = $orders_product->c_file_3;$findp['img_width'] = $orders_product->img_width;

                   



                    $findp['commission_fact_status'] = $orders_product->commission_fact_status;


                    $findp['old_rate_amount'] = $orders_product->old_rate_amount;
                    $findp['old_fact_amount'] = $orders_product->old_fact_amount;
                    $findp['crimp_check'] = $orders_product->crimp_check;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['crimp'] = $orders_product->crimp;
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['uom'] = $orders_product->uom;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;

                    $findp['weight'] = $orders_product->weight;   
                    $findp['single_we'] = $orders_product->single_we;    //single weight update       
                    $findp['fact2'] = $orders_product->fact2;          
                    $findp['meterial_category'] = $orders_product->meterial_category;
                    $findp['po_upload'] = $orders_product->po_upload;
                     $findp['coil_no_other'] = $orders_product->coil_no_other;

                    
                        
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;


                    $findp['input_values'] = $orders_product->input_values;
                    $findp['uom_image'] = $orders_product->uom_image;
                    $findp['color_side'] = $orders_product->color_side;


                    $findp['rate'] = $orders_product->rate;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        //$this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $findp['qty'] = $orders_product->qty;
                    $findp['activel_qty'] = $orders_product->qty;

                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    $inid = $this->Main_model->insert_commen($findp, $oldtablename_sub);
                    if($oldtablename_sub == 'order_product_list_quotation'){
                        $this->Main_model->delete_where('order_version_product_quatation', 'order_id', $insertid);
                        $findp_v['version'] = 'O';                        
                        $findp['sub_version_o_id'] = $inid;
                        $findp_v['deleteid'] = 0;
                        $this->Main_model->insert_commen($findp, 'order_version_product_quatation');

                        $this->db->where('order_id', $insertid)->update('order_version_product_quatation', $findp_v);

                        
                    }
                    
                   
                }
                
                
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
                       
                   
          $table = array("orders","orders_process", "orders_quotation");

          if (in_array($tablenamemain, $table))
          {

          
             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
             

          }


          $discountfulltotal=$discountfulltotal+$tcsamount;


            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);


            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          
                    }
                    else
                    {

                            $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }


                                        $product_get=implode("','", $product_array);
                                        $resultorder = $this->db->query("SELECT b.* FROM product_list as a JOIN  $tablename_sub as b ON a.id=b.product_id WHERE b.id IN ('".$product_get."') AND  a.link_to_purchase=1 AND a.deleteid=0 AND b.deleteid=0 ORDER BY a.id DESC");
                                        $resultorder = $resultorder->result();
                                        
                                       
                                        if(count($resultorder)>0)
                                        {
                                            
                                        
                                                $purchase_orders_process = 'purchase_orders_process';
                                                $basedata['count_id'] = 1;
                                                $basedata['create_date'] = $date;
                                                $basedata['create_time'] = $time;
                                                $basedata['user_id'] = $this->userid;
                                                $basedata['entry_user_id'] = $this->userid;
                                                $basedata['arrival_date'] = '';
                                                $basedata['price_details'] = '';
                                                $basedata['availability'] = '';
                                                $basedata['customer_id'] = $orders->customer_id;
                                                $neworder_quotation_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count_users($purchase_orders_process, $this->userid);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_quotation_id = $r->count_id + 1;
                                                }
                                                $neworder_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count($purchase_orders_process);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                
                                                $order_purchase_no = $neworder_id . '/PO' . $neworder_quotation_id . '/' . date('Y');
                                                $basedata['order_no'] = $order_purchase_no;
                                                $basedata['mark_request_to_sales'] = $order_no_new;
                                                $insertid_purchase = 0;
                                                $insertid_purchase = $this->Main_model->insert_commen($basedata, $purchase_orders_process);
                                                   
                                           
                                                foreach($resultorder as $p_value)
                                                {
                                                    
                                                     $order_product_id_p=$p_value->id;
                                                     $order_id_p=$p_value->order_id;
                                                     $product_id_p=$p_value->product_id;


                                                  $product_uom='';
                                                  $product = $this->Main_model->where_names('product_list', 'id', $product_id_p);
                                                  foreach ($product as $products) {

                                                                $product_uom=$products->uom;
                                                  }


                                                     $product_name_p=$p_value->product_name;
                                                     $categories_name_p=$p_value->categories_name;
                                                     $categories_id_p=$p_value->categories_id;
                                                     $qty_p=$p_value->qty;
                                                     $rate_p=$p_value->rate;
                                                     $unit_p=$p_value->uom;
                                                     $purchase_product_list_process = $this->Main_model->where_names_three_order_by('purchase_product_list_process', 'sale_purchase_op_id', $order_product_id_p, 'product_id', $product_id_p,'sale_purchase_o_no', $order_no_new, 'id', 'ASC');
                                                     if(count($purchase_product_list_process)==0)
                                                     {
                                                         
                                                         
                                                            $basedataproduct['sale_purchase_op_id'] = $order_product_id_p;
                                                            $basedataproduct['sale_purchase_o_no'] = $order_no_new;
                                                            $basedataproduct['order_no'] = $order_purchase_no;
                                                            $basedataproduct['order_id'] = $insertid_purchase;
                                                            $basedataproduct['product_id'] = $product_id_p;
                                                            $basedataproduct['product_name'] = $product_name_p;
                                                            $basedataproduct['categories_name'] = $categories_name_p;
                                                            $basedataproduct['categories_id'] = $categories_id_p;
                                                            
                                                            
                                                            if($product_uom=='Nos')
                                                            {


                                                            $basedataproduct['uom'] = 9;
                                                            $basedataproduct['unit'] = 9;

                                                            }
                                                            else
                                                            {


                                                            $basedataproduct['uom'] = $unit_p;
                                                            $basedataproduct['unit'] = $unit_p;

                                                            }
                                                            
                                                            
                                                            $basedataproduct['qty'] = $qty_p;
                                                            $basedataproduct['rate'] = 0;
                                                            $this->Main_model->insert_commen($basedataproduct, 'purchase_product_list_process');
                                                            
                                                            
                                                            $this->db->query("UPDATE  order_product_list SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$order_product_id_p."'");
                                                            $this->db->query("UPDATE  orders SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$form_data->order_id."'");
                                                            
                                                            
                                                            $this->db->query("UPDATE order_product_list_quotation SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE order_id='".$insertid."' AND product_id='".$product_id_p."'");
                                                            $this->db->query("UPDATE orders_quotation SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$insertid."'");
                                                                             
                                                         
                                                     }
                                                    
                                                    
                                                }
                
            
                                        }





        $img =$this->Main_model->where_names_three_order_by('competitor_images','order_id',$order_id,'table_name','order_product_list','deleteid','0','id','ASC');
        foreach ($img as $iig)
        {
            //$find['id']=$orders->id;
            $iigg['cate_id'] = $iig->cate_id;
            $iigg['product_image'] = $iig->product_image;
            $iigg['status'] = $iig->status;
            $iigg['order_id'] = $insertid;
            $iigg['table_name'] = 'order_product_list_quotation';
           
            $this->Main_model->insert_commen($iigg, 'competitor_images');


        }

                   

            
            
                if($oldtablename=='orders_process')
                {
                    
                   
                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$orders->customer_id,'party_type',1,'deleteid','0','id','ASC');
                        
                        $balancetotal = 0;
                        $debitsamount = 0;
                        $creditsamount = 0;
                        foreach ($res as $val) {
                            $debitsamount+= $val->debits;
                            $creditsamount+= $val->credits;
                            $balancetotal+= $val->balance;
                        }
                    
                         $balancetotal=$creditsamount-$debitsamount;
                     
                         $balancetotal=$creditsamount-$debitsamount;
            
                        $data_address['order_id'] = $insertid;
                        $data_address['customer_id'] = $orders->customer_id;
                        $data_address['user_id'] = $this->userid;
                        $data_address['notes'] = 'Order Process ' . $find['order_no'];
                        $data_address['payment_mode'] = 0;
                        $data_address['payment_mode_payoff'] = $payment_mode;
                        $data_address['order_no'] = $find['order_no'];
                        $data_address['difference'] = 0;
                        $data_address['reference_no'] = $find['order_no'];
                        $data_address['deletemod'] = 'ORDER'.$find['order_no'];
                        $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
                        $data_address['amount'] = round($discountfulltotal + $delivery_charge,2);
                        $data_address['debits'] = round($discountfulltotal + $delivery_charge,2);
                        $data_address['paid_status'] = 0;
                        if ($balancetotal != '0') {
                            $data_address['balance'] = 0;
                        } else {
                            $data_address['balance'] = 0;
                        }
                        $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge);
                        $data_address['payment_date'] = $create_date;
                        $data_address['order_date'] = $create_date;
                        $data_address['payment_time'] = $time;
                        $data_address['party_type'] = 1;
                        $data_address['account_head_id'] = 68;
                        $data_address['account_heads_id_2'] = 116;
                         $data_address['order_trancation_status'] = 1;
                        
                        $data_address['party_type'] = 1;
                        
                        
                        if($payment_mode=='Cash')
                        {
                             $data_address['bank_id'] = 25;
                        }
                      
                      
                        $this->Main_model->insert_commen($data_address, 'all_ledgers');
                        
                                
                }
                if($oldtablename_sub == 'order_product_list_quotation'){
                    $dataev['order_id'] = $findp['order_id'];
                    $dataev['order_no'] = $findp['order_no'];
                    $dataev['fields'] = 'Q';
                    $dataev['datas'] = json_encode($findp);
                    $dataev['edited_by'] = $this->userid;
                    $dataev['version'] = 'O';
                    $this->Main_model->insert_commen($dataev,'enquiry_version');
                }
            }
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['move_id'] = $form_data->order_id;
            if ($tablenamemain == 'orders') {
                $point['reason'] = "Moved";
            }
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    public function order_quotation_archive() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no_old;
        $order_no_new = $form_data->order_no_new;
        $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
        foreach ($result_order as $orders) {
            //$find['id']=$orders->id;
            $find['order_no'] = $order_no_new;
            $find['discount'] = $orders->discount;
            $find['discountPre'] = $orders->discountPre;
            $find['customer_id'] = $orders->customer_id; $find['notes'] = $orders->notes;
            $find['sales_group'] = $orders->sales_group;
            $find['roundoff'] = $orders->roundoff;
            $find['roundoffstatus'] = $orders->roundoffstatus;
            $find['move_id'] = $form_data->order_id;
            $find['archive_id'] = $order_id;
$find['bill_total'] = $orders->bill_total;
$find['tcs_status'] = $orders->tcs_status;
$find['bill_total_fact'] = $orders->bill_total_fact;
$find['tcsamount'] = $orders->tcsamount;
$find['bill_total_rate'] = $orders->bill_total_rate;
$find['without_commsision_total'] = $orders->without_commsision_total;

            $find['customer_address_id'] = $orders->customer_address_id;
              

                 $find['billing_address'] = $orders->billing_address;
                 $find['shipping_address'] = $orders->shipping_address;

            $find['route_id'] = $orders->route_id;
            $find['user_id'] = $orders->user_id;
            $find['entry_user_id'] = $this->userid;
            $create_date = $orders->create_date;
            $find['create_date'] = $orders->create_date;
            $find['create_time'] = $time;
            $find['status'] = 1;
            $find['deleteid'] = 0;
            $find['order_base'] = - 3;
            $find['commission_check'] = $orders->commission_check;

$find['commission_check_fact'] = $orders->commission_check_fact;
$find['bill_total_rate'] = $orders->bill_total_rate;
                $find['bill_total_fact'] = $orders->bill_total_fact;



            $find['gst_check'] = $orders->gst_check;
            $find['delivery_charge'] = $orders->delivery_charge;

 $find['SSD_check'] = $orders->SSD_check;
 $find['excess_payment_status'] = $orders->excess_payment_status;
                $find['delivery_date_time'] = $orders->delivery_date_time;
            $find['delivery_date'] = $orders->delivery_date;
            $find['delivery_status'] = $orders->delivery_status;
            $find['payment_mode'] = $orders->payment_mode;
            $find['delivery_mode'] = $orders_product->delivery_mode;
            $find['others'] = $orders->others;
            $find['print'] = $orders->print;
            $find['packaging'] = $orders->packaging;
            $find['competitorname'] = $orders->competitorname;
            $find['details'] = $orders->details;
            $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $order_no_new);
            if (count($result_order) == 0) {
                $insertid = $this->Main_model->insert_commen($find, $oldtablename);
            } else {
                foreach ($result_order as $orderst) {
                    $insertid = $orderst->id;
                }
                $datass['get_id'] = $order_no_new;
                $datass['order_base'] = - 3;
                $datass['deleteid'] = 0;
                $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
            }
            if ($orders->archive_id == "") {
                $order_idset = $form_data->order_id;
            } else {
                $order_idset = $orders->archive_id;
            }
            $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
            $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
            foreach ($result_order_product as $orders_product) {
                // $findp['id']=$orders_product->id;
                $findp['order_id'] = $insertid;
                $findp['order_no'] = $order_no_new;
                $findp['product_name'] = $orders_product->product_name;
                
                $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                
                $findp['product_id'] = $orders_product->product_id;
                $findp['tile_material_name'] = $orders_product->tile_material_name;
                $findp['tile_material_id'] = $orders_product->tile_material_id;
                 $findp['meterial_category'] = $orders_product->meterial_category;
                    $findp['coil_no_other'] = $orders_product->coil_no_other;
                $findp['categories_name'] = $orders_product->categories_name;
                $findp['dim_one'] = $orders_product->dim_one;
                $findp['dim_two'] = $orders_product->dim_two;
                $findp['dim_three'] = $orders_product->dim_three;
                $findp['base_id'] = $orders_product->base_id;
                $findp['image_length'] = $orders_product->image_length;
                $findp['gst'] = $orders_product->gst;
                $findp['gst_check'] = $orders_product->gst_check;
                $findp['categories_id'] = $orders_product->categories_id;
                $findp['profile'] = $orders_product->profile;
                $findp['commission'] = $orders_product->commission;
                $findp['commission_fact'] = $orders_product->commission_fact;

$findp['commission_fact_status'] = $orders_product->commission_fact_status;

                 $findp['old_rate_amount'] = $orders_product->old_rate_amount;
                $findp['old_fact_amount'] = $orders_product->old_fact_amount;
                $findp['crimp_check'] = $orders_product->crimp_check;
                $findp['address_id'] = $orders_product->address_id;
                $findp['address_id_mark'] = $orders_product->address_id_mark;
                $findp['payment_mode'] = $orders_product->payment_mode;
                $findp['crimp'] = $orders_product->crimp;
                $findp['extra_crimp'] = $orders_product->extra_crimp;
                $findp['back_crimp'] = $orders_product->back_crimp;
                $findp['uom'] = $orders_product->uom;
                $findp['billing_options'] = $orders_product->billing_options;
                $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                $findp['weight'] = $orders_product->weight;
                $findp['nos'] = $orders_product->nos;
                $findp['unit'] = $orders_product->unit;
                $findp['fact'] = $orders_product->fact;
                $findp['sort_id'] = $orders_product->sort_id;
                $findp['count_id'] = $orders_product->count_id;
                $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                foreach ($additional_information as $vl) {
                    $label_name = strtolower($vl->label_name);
                    $findp[$label_name] = $orders_product->$label_name;
                }
                $findp['section_lable'] = $orders_product->section_lable;
                $findp['section_value'] = $orders_product->section_value;
                $findp['degree'] = $orders_product->degree;
                $findp['sub_product_id'] = $orders_product->sub_product_id;
                $findp['value_id'] = $orders_product->value_id;
                $findp['reference_image'] = $orders_product->reference_image;

                $findp['input_values'] = $orders_product->input_values;
                $findp['uom_image'] = $orders_product->uom_image;
                $findp['color_side'] = $orders_product->color_side;

                $findp['rate'] = $orders_product->rate;
                $findp['qty'] = $orders_product->qty;
                $findp['activel_qty'] = $orders_product->qty;
                $findp['amount'] = $orders_product->amount;
                $findp['deleteid'] = $orders_product->deleteid;
                $findp['create_date'] = $orders_product->create_date;
                $this->Main_model->insert_commen($findp, $oldtablename_sub);
            }
        }
    }

     public function checkAndUpdate_customer()
    {


                $order_last_count = $this->Main_model->order_last_count_mounth_year_customer('orders_process');
                foreach ($order_last_count as $r)
                {
                    $neworder_id = $r->id + 1;
                }
                $order_no_new = strtoupper(date('M') . '/' . $neworder_id);
                 // exit;
                $data = $this->db->query('SELECT order_no,count FROM orders_process WHERE order_no = "'.$order_no_new.'" AND year = "'.date('Y').'" AND month = "'.date('M').'" AND order_base="-2"')->result_array();
                if(count($data) > 0)
                {

                    return $data[0]['count']+1;

                }
                else
                {
                    return $neworder_id;
                }
        


    }
    public function order_quotation_move_finish() {

        
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        
        $selforder=0;
        if(isset($form_data->selforder))
        {
              $selforder = $form_data->selforder;
        }
        
        
        $deleteid = 0;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = 1;
            
            if ($tablenamemain == 'orders') {
                $datassfirst['reason'] = 'Move To Quotation';
            }
            if ($tablenamemain == 'orders_quotation') {
                 $datassfirst['reason'] = 'Moved To Order';
            }
           
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            



            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }





            // $query_profle_get = $this->db->query("SELECT * FROM orders_process  WHERE count='".$neworder_id."' AND month='".date('M')."'  AND year='".date('Y')."'");
            // $result_lengeth = $query_profle_get->result();
            // if(count($result_lengeth)>0)
            // {


            //         foreach ($result_lengeth as $valuess)
            //         {  

            //                   $neworder_id=$valuess->count+1;
            //         }


            // }




if($this->session->userdata['logged_in']['access']=='31') //Sales Head
{

     $neworder_id = $this->checkAndUpdate_customer();
     $order_no_new = strtoupper(date('M') . '/C/' . $neworder_id);
}
else
{


     $neworder_id = $this->checkAndUpdate();
     $order_no_new = strtoupper(date('M') . '/' . $neworder_id);

}

            
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                //$find['order_no']=$orders->order_no;
                if($orders->mobile_order==1)
                {
                  $neworder_id = $this->checkAndUpdate_customer();
                  $find['order_no'] = strtoupper(date('M') . '/C/' . $neworder_id);
                }
                else
                {
                    $find['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
                }
                
                





                $customer_id = $orders->customer_id;
                
                
              
                
                $find['month'] = date('M');
                $find['year'] = date('Y');
                $find['count'] = $neworder_id;
                
                
                $find['customer_id'] = $orders->customer_id; 
                $find['notes'] = $orders->notes;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
$find['bill_total'] = $orders->bill_total;
$find['tcs_status'] = $orders->tcs_status;
$find['bill_total_fact'] = $orders->bill_total_fact;
$find['tcsamount'] = $orders->tcsamount;
$find['bill_total_rate'] = $orders->bill_total_rate;
$find['without_commsision_total'] = $orders->without_commsision_total;
$find['mobile_order'] = $orders->mobile_order;
$find['commsision_amount'] = $orders->commsision_amount;

                $find['customer_address_id'] = $orders->customer_address_id;

                  $find['billing_address'] = $orders->billing_address;
                 $find['shipping_address'] = $orders->shipping_address;

                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;

               $create_date = $orders->create_date;

                
                if($orders->mark_date==0)
                {
                      $find['create_date'] = $date;
                      $create_date = $date;
                }
                else
                {
                      $find['create_date'] = $orders->mark_date;
                      $create_date = $orders->mark_date;
                }
               

                $find['mark_date'] = $orders->mark_date;


                $find['create_time'] = $time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                
                // Once production completed change value 0
                
                
                 if($selforder==0)
                 {
                      $find['finance_status'] = 2;
                      $find['delivery_status'] = 1;
                      $find['selforder'] =0;
                 }
                 else
                 {
                      $find['finance_status'] = 4;
                      $find['assign_status'] =3;
                      $find['selforder'] =1;
                 }
                
               
                
                
                
                $find['commission_check'] = $orders->commission_check;

$find['commission_check_fact'] = $orders->commission_check_fact;

$find['bill_total_rate'] = $orders->bill_total_rate;
$find['without_commsision_total'] = $orders->without_commsision_total;
                $find['bill_total_fact'] = $orders->bill_total_fact;

                $find['gst_check'] = $orders->gst_check;
                $find['delivery_charge'] = $orders->delivery_charge;



                $find['SSD_check'] = $orders->SSD_check;
                $find['excess_payment_status'] = $orders->excess_payment_status;
                $find['delivery_date_time'] = $orders->delivery_date_time;
                $find['delivery_date'] = $orders->delivery_date;
                $delivery_status=$orders->delivery_status;
                $delivery_date=$orders->delivery_date;

                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;

                
                




                $find['paricel_mode'] = $orders->paricel_mode;
                
               if($orders->mobile_order==1)
                {


                         $find['order_base'] ='-2';
                         $find['reason'] = 'Customer Order Created';


                }
                else
                {

                     // gg changes for hide delivery status and payment mode in order page

                $find['delivery_status'] = "";
                $find['payment_mode'] = '';


                    if($orders->paricel_mode==1)
                    {
                        $find['order_base'] = 1;
                        $find['reason'] = 'Order Created (Partial)';
                    }
                    elseif($orders->paricel_mode==2)
                    {
                        $find['order_base'] = 1;
                        $find['reason'] = 'Self Pickup';
                    }
                    else
                    {
                        $find['order_base'] = 1;
                        $find['reason'] = 'Order Created';
                    }




                }
                
                
                $find['discount'] = $orders->discount;
                $find['discountPre'] = $orders->discountPre;
                
                
                
                
                
                if($orders->discount>0)
                {
                     $find['order_base'] = 20;
                     $find['reason'] = 'MD Approvel Request For Discount';
                }
                if($orders->commission_check==1)
                {
                     $find['order_base'] = 21;
                     $find['reason'] = 'MD Approvel Request For Commission';
                }

                if($orders->commission_check_fact==1)
                {
                     $find['order_base'] = 21;
                     $find['reason'] = 'MD Approvel Request For Commission';
                }
                


                  if($oldtablename=='orders_process')
                {

                                                    $find['edit_user_id'] = $this->userid;
                                                    $find['edit_date'] = $date;
                                                    $find['edit_time'] = $time;



                }
                
                
                
                
                
                
               
                
                
                $find['delivery_mode'] = $orders->delivery_mode;
                $payment_mode = $orders->payment_mode;
                $delivery_charge = $orders->delivery_charge;
                $minisroundoff = $orders->roundoff;
                $roundoffstatus = $orders->roundoffstatus;
                $discount = $orders->discount;
                
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                //Assing Status is default 0
                $find['assign_status_0_date'] = date('Y-m-d');
                $find['assign_status_11_date'] = NULL;
                $find['assign_status_12_date'] = NULL;
                $find['assign_status_2_date'] = NULL;
                $find['assign_status_3_date'] = NULL;

                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
               
               
                if(count($result_order) == 0) 
                {






                      if($delivery_status==1)
                      {


                           //$find['finance_status'] = 3;
                           //$find['assign_status'] = 11;

                      }



                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                      

                        if($find['mobile_order']==1)
                        {
                                        

                                        $neworder_id = $this->checkAndUpdate_customer();
                            $order_no = strtoupper(date('M') . '/C/' . $neworder_id);
                             $order_no_new = strtoupper(date('M') . '/C/' . $neworder_id);
                             $find['order_no'] = strtoupper(date('M') . '/C/' . $neworder_id);

                        }
                        else
                        {

                            $order_no = strtoupper(date('M') . '/' . $neworder_id);
                    $order_no_new = strtoupper(date('M') . '/' . $neworder_id);
                    $find['order_no'] = strtoupper(date('M') . '/' . $neworder_id);

                        }


                    $this->db->query("UPDATE $oldtablename SET order_no='".$order_no."' WHERE id='".$insertid."'");

                    //$this->validateEntry($insertid);


                }
                else
                {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                        $mobile_order = $orderst->mobile_order;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    if($mobile_order==1)
                    {
                            $datass['order_base'] ='-2';
                    }
                    else
                    {
                               $datass['order_base'] = 1;
                    }
                    $datass['finance_status'] = 2;
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                
                $product_array=array();
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                $totalamount = 0;
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    //$order_no=$orders->order_no;
                    $tcs_status = $orders->tcs_status;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $order_no_new;
                    $findp['product_name'] = $orders_product->product_name;
                    
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    
                    
                    if($orders->paricel_mode==2)
                    {
                        $findp['loadstatus'] = 1;
                    }
                    
                    $product_array[]=$orders_product->id;
                            
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['commission_fact'] = $orders_product->commission_fact;




                               
                    $findp['competitor_name1'] = $orders_product->competitor_name1;
                    $findp['competitor_name2'] = $orders_product->competitor_name2;
                    $findp['competitor_name3'] = $orders_product->competitor_name3;
                    $findp['net_rate1'] = $orders_product->net_rate1;
                    $findp['net_rate2'] = $orders_product->net_rate2;
                    $findp['net_rate3'] = $orders_product->net_rate3;
                    $findp['amount_1'] = $orders_product->amount_1;
                    $findp['amount_2'] = $orders_product->amount_2;
                    $findp['amount_3'] = $orders_product->amount_3;
                    $findp['total_1'] = $orders_product->total_1;
                    $findp['total_2'] = $orders_product->total_2;
                    $findp['total_3'] = $orders_product->total_3;
                    $findp['c_fact_1'] = $orders_product->c_fact_1;
                    $findp['c_fact_2'] = $orders_product->c_fact_2;
                    $findp['c_fact_3'] = $orders_product->c_fact_3;
                    $findp['c_file_1'] = $orders_product->c_file_1;
                    $findp['c_file_2'] = $orders_product->c_file_2;
                    $findp['c_file_3'] = $orders_product->c_file_3;$findp['img_width'] = $orders_product->img_width;






$findp['commission_fact_status'] = $orders_product->commission_fact_status;

                     $findp['old_rate_amount'] = $orders_product->old_rate_amount;
                $findp['old_fact_amount'] = $orders_product->old_fact_amount;
                $findp['crimp_check'] = $orders_product->crimp_check;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['crimp'] = $orders_product->crimp;
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['weight'] = $orders_product->weight;
                    $findp['single_we'] = $orders_product->single_we; // single weight update
                    $findp['uom'] = $orders_product->uom;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $findp['fact2'] = $orders_product->fact2;
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;

                    $findp['input_values'] = $orders_product->input_values;
                    $findp['uom_image'] = $orders_product->uom_image;
                    $findp['color_side'] = $orders_product->color_side;


                    $findp['rate'] = $orders_product->rate;
                    $findp['qty'] = $orders_product->qty;
                    $findp['activel_qty'] = $orders_product->qty;
                    $findp['modify_qty'] = $orders_product->modify_qty;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    $totalamount+= $orders_product->rate * $orders_product->qty;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                       // $this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                }
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            
            
                                        $product_get=implode("','", $product_array);
                                        $resultorder = $this->db->query("SELECT b.* FROM product_list as a JOIN  $tablename_sub as b ON a.id=b.product_id WHERE b.id IN ('".$product_get."') AND  a.link_to_purchase=1 AND a.deleteid=0 AND b.deleteid=0 ORDER BY a.id DESC");
                                        $resultorder = $resultorder->result();
                                        
                                       
                                        
                                        if(count($resultorder)>0)
                                        {
                                            
                                        
                                                
                                                $purchase_orders_process = 'purchase_orders_process';
                                                $basedata['count_id'] = 1;
                                                $basedata['create_date'] = $date;
                                                $basedata['create_time'] = $time;
                                                $basedata['user_id'] = $this->userid;
                                                $basedata['entry_user_id'] = $this->userid;
                                                $basedata['arrival_date'] = '';
                                                $basedata['price_details'] = '';
                                                $basedata['availability'] = '';
                                                $basedata['customer_id'] = $customer_id;
                                                $neworder_quotation_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count_users($purchase_orders_process, $this->userid);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_quotation_id = $r->count_id + 1;
                                                }
                                                $neworder_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count($purchase_orders_process);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                
                                                $order_purchase_no = $neworder_id . '/PO' . $neworder_quotation_id . '/' . date('Y');
                                                $basedata['order_no'] = $order_purchase_no;
                                                $basedata['mark_request_to_sales'] = $order_no_new;
                                                $insertid_purchase = 0;
                                                //$insertid_purchase = $this->Main_model->insert_commen($basedata, $purchase_orders_process);
                                                   
                                           
                                                foreach($resultorder as $p_value)
                                                {
                                                    
                                                     $order_product_id_p=$p_value->id;
                                                     $order_id_p=$p_value->order_id;
                                                     $product_id_p=$p_value->product_id;
                                                     $product_name_p=$p_value->product_name;
                                                     $categories_name_p=$p_value->categories_name;
                                                     $categories_id_p=$p_value->categories_id;
                                                     $qty_p=$p_value->qty;
                                                     $rate_p=$p_value->rate;
                                                     $unit_p=$p_value->uom;


                                                 
                                                  $product_uom='';
                                                  $product = $this->Main_model->where_names('product_list', 'id', $product_id_p);
                                                  foreach ($product as $products) {

                                                                $product_uom=$products->uom;
                                                  }

 


                                                     $purchase_product_list_process = $this->Main_model->where_names_three_order_by('purchase_product_list_process', 'sale_purchase_op_id', $order_product_id_p, 'product_id', $product_id_p,'sale_purchase_o_no', $order_no_new, 'id', 'ASC');
                                                     if(count($purchase_product_list_process)==0)
                                                     {
                                                         
                                                         
                                                            $basedataproduct['sale_purchase_op_id'] = $order_product_id_p;
                                                            $basedataproduct['sale_purchase_o_no'] = $order_no_new;
                                                            $basedataproduct['order_no'] = $order_purchase_no;
                                                            $basedataproduct['order_id'] = $insertid_purchase;
                                                            $basedataproduct['product_id'] = $product_id_p;
                                                            $basedataproduct['product_name'] = $product_name_p;
                                                            $basedataproduct['categories_name'] = $categories_name_p;
                                                            $basedataproduct['categories_id'] = $categories_id_p;
                                                            
                                                           
                                                            if($product_uom=='Nos')
                                                            {


                                                            $basedataproduct['uom'] = 9;
                                                            $basedataproduct['unit'] = 9;

                                                            }
                                                            else
                                                            {


                                                            $basedataproduct['uom'] = $unit_p;
                                                            $basedataproduct['unit'] = $unit_p;

                                                            }

                                                            $basedataproduct['qty'] = $qty_p;
                                                            $basedataproduct['rate'] = 0;
                                                            //$this->Main_model->insert_commen($basedataproduct, 'purchase_product_list_process');
                                                            
                                                            
                                                            //$this->db->query("UPDATE order_product_list_quotation SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$order_product_id_p."'");
                                                            //$this->db->query("UPDATE orders_quotation SET purchase_request=1,order_base=4,purchase_id='".$insertid_purchase."' WHERE id='".$form_data->order_id."'");
                                                            
                                                            
                                                            
                                                            //$this->db->query("UPDATE order_product_list_process SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE order_id='".$insertid."' AND product_id='".$product_id_p."'");
                                                            //$this->db->query("UPDATE orders_process SET purchase_request=1,order_base=4,purchase_id='".$insertid_purchase."' WHERE id='".$insertid."'");
                                                                             
                                                         
                                                     }
                                                    
                                                    
                                                }
                
            
                                        }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
           


             
            $tcsamount=0;




             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {


        
            // $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$insertid."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$customer_id."'");
            // $resultset = $resultset->result();
       
            // foreach ($resultset as $set)
            //      {
                  
            //                   $tcsamountval=round($set->totalamount,2);
            //                   $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
            //                   if($tcsamountvaldata>5000000)
            //                   {
            //                       //$this->db->query("UPDATE customers SET tcs_status=1 WHERE id='".$customer_id."'");
            //                       $tcsamount=round($discountfulltotal*0.1/100);
            //                   }
            //                   $tcsamount=0;
                    
                   
            //      }


                 $tcsamount=0;

             }





                    //For GST Task, Creating SGST and CGST from july 1
             $subtotal_with_gst=$totalamount*1.18;
             $discountfulltotalRaw=round($subtotal_with_gst-$totalamount,2);

    
             $discountfulltotal=$discountfulltotal+$tcsamount;
             


            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



           
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                         

                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                             $autoRoundStat = 'plus';
                             $autoRound = $getplusevalue;
                           }

                          


                    }
                    elseif($totalval == 0.5)
                    {


                           $getplusevalue=$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                             $autoRoundStat = 'plus';
                             $autoRound = $getplusevalue;
                           }


                    }
                    else
                    {

                            $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                                $autoRoundStat = 'minus';
                                $autoRound = $totalval;
                           }
                           

                    }


            }



            
            
        $img =$this->Main_model->where_names_three_order_by('competitor_images','order_id',$order_id,'table_name','order_product_list_quotation','deleteid','0','id','ASC');
        foreach ($img as $iig)
        {
            //$find['id']=$orders->id;
            $iigg['cate_id'] = $iig->cate_id;
            $iigg['product_image'] = $iig->product_image;
            $iigg['status'] = $iig->status;
            $iigg['order_id'] = $insertid;
            $iigg['table_name'] = 'order_product_list_process';
           
           $this->Main_model->insert_commen($iigg, 'competitor_images');


        }

            
            
           
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
            
            
            $balancetotal = 0;
            $debitsamount = 0;
            $creditsamount = 0;
            foreach ($res as $val) {
                $debitsamount+= $val->debits;
                $creditsamount+= $val->credits;
                $balancetotal+= $val->balance;
            }
            
             $balancetotal=0;
            
            $data_address['order_id'] = $insertid;
            $data_address['customer_id'] = $customer_id;
            $data_address['user_id'] = $this->userid;
            $data_address['notes'] = 'Order Process ' . $find['order_no'];
            $data_address['payment_mode'] = 0;
            $data_address['payment_mode_payoff'] = $payment_mode;
            $data_address['order_no'] = $find['order_no'];
            $data_address['difference'] = 0;
            $data_address['reference_no'] = $find['order_no'];
            $data_address['deletemod'] = 'ORDER'.$find['order_no'];
            $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
            $data_address['amount'] = $find['bill_total'];
            $data_address['debits'] = $find['bill_total'];
            $data_address['paid_status'] = 0;
            if ($balancetotal != '0') {
                $data_address['balance'] = 0;
            } else {
                $data_address['balance'] = 0;
            }
            $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge,2);
            $data_address['payment_date'] = $create_date;
            $data_address['order_date'] = $create_date;
            $data_address['payment_time'] = $time;
            $data_address['party_type'] = 1;
            $data_address['account_head_id'] = 68;
            $data_address['account_heads_id_2'] = 116;
            $data_address['order_trancation_status'] = 1;
            
            $data_address['party_type'] = 1;
            
             if($find['mobile_order']==1)
             {

                      $data_address['deleteid'] = 1021;
             }
            
              
            if($payment_mode=='Cash')
            {
                             $data_address['bank_id'] = 25;
            }
            
            
            
            $this->Main_model->insert_commen($data_address, 'all_ledgers');



            if($tcsamount > 0){
                $data_tcs['order_id'] = 0;
                $data_tcs['customer_id'] = 166;
                $data_tcs['order_base_id'] = $insertid;
                $data_tcs['user_id'] = $this->userid;
                $data_tcs['notes'] = 'TCS - Order Process ' . $find['order_no'];
                $data_tcs['credits'] =  $tcsamount;
                // $data_tcs['debitstoatal'] =  $tcsamount;
                $data_tcs['order_no'] = $find['order_no'];
                $data_tcs['reference_no'] = $find['order_no'];
                $data_tcs['party_type'] = 5;
                $data_tcs['account_head_id'] = 142;
                $data_tcs['account_heads_id_2'] = 142;
                $data_tcs['payment_date'] = $create_date;
                $data_tcs['payment_time'] = $time;

                 $data_tcs['tcs_status'] = 1;

                  if($find['mobile_order']==1)
                 {

                          $data_tcs['deleteid'] = 1021;
                 }
                

                $data_tcs['deletemod'] = 'TCS-'.$find['order_no'];
                if($payment_mode=='Cash')
                {
                    $data_tcs['bank_id'] = 25;
                }
                $this->Main_model->insert_commen($data_tcs, 'all_ledgers');
            }

            if($minisroundoff != '' && $minisroundoff != 0){
                $data_roundoff['order_id'] = 0;
                $data_roundoff['customer_id'] =372;
                $data_roundoff['order_base_id'] = $insertid;
                $data_roundoff['user_id'] = $this->userid;
                $data_roundoff['notes'] = 'Round off - Order Process ' . $find['order_no'];
                if ($roundoffstatus == 1) {
                $data_roundoff['credits'] =  $minisroundoff;
                }else{
                    $data_roundoff['debits'] =  $minisroundoff;

                }
                // $data_tcs['debitstoatal'] =  $minisroundoff;
                $data_roundoff['order_no'] = $find['order_no'];
                $data_roundoff['reference_no'] = $find['order_no'];
                $data_roundoff['party_type'] = 5;
                $data_roundoff['account_head_id'] = 372;
                $data_roundoff['account_heads_id_2'] = 372;
                $data_roundoff['payment_date'] = $create_date;
                $data_roundoff['payment_time'] = $time;
                $data_roundoff['deletemod'] = 'ROUND-'.$find['order_no'];


                  if($find['mobile_order']==1)
                 {

                          $data_roundoff['deleteid'] = 1021;
                 }

                if($payment_mode=='Cash')
                {
                    $data_roundoff['bank_id'] = 25;
                }
                $this->Main_model->insert_commen($data_roundoff , 'all_ledgers');
            }


            if(sprintf("%.2f",$totalamount) != sprintf("%.2f",$discountfulltotal)){
               
                $data_auto_roundoff['order_id'] = 0;
                $data_auto_roundoff['customer_id'] =372;
                $data_auto_roundoff['order_base_id'] = $insertid;
                $data_auto_roundoff['user_id'] = $this->userid;
                $data_auto_roundoff['notes'] = 'Auto Round off - Order Process ' . $find['order_no'];
                if($autoRoundStat == 'plus'){
                $data_auto_roundoff['credits'] = $autoRound;
                }else{
                $data_auto_roundoff['debits'] = $autoRound;
                }
                $data_auto_roundoff['deletemod'] = 'AUTOROUND-'.$find['order_no'];
                $data_auto_roundoff['order_no'] = $find['order_no'];
                $data_auto_roundoff['reference_no'] = $find['order_no'];
                $data_auto_roundoff['party_type'] = 5;
                $data_auto_roundoff['account_head_id'] = 372;
                $data_auto_roundoff['account_heads_id_2'] = 372;
                $data_auto_roundoff['payment_date'] = $create_date;
                $data_auto_roundoff['payment_time'] = $time;


                 if($find['mobile_order']==1)
                 {

                          $data_auto_roundoff['deleteid'] = 1021;
                 }



                if($payment_mode=='Cash')
                {
                    $data_auto_roundoff['bank_id'] = 25;
                }
                $this->Main_model->insert_commen($data_auto_roundoff , 'all_ledgers');
            }




            if($discount != '' && $discount != 0){
                $data_discount['order_id'] = 0;
                $data_discount['customer_id'] =220;
                $data_discount['order_base_id'] = $insertid;
                $data_discount['user_id'] = $this->userid;
                $data_discount['notes'] = 'Discount - Order Process ' . $find['order_no'];
                $data_discount['deletemod'] = 'DISCOUNT-'.$find['order_no'];
                $data_discount['debits'] =  $discount;
                // $data_tcs['debitstoatal'] =  $minisroundoff;
                $data_discount['order_no'] = $find['order_no'];
                $data_discount['reference_no'] = $find['order_no'];
                $data_discount['party_type'] = 5;
                $data_discount['account_head_id'] = 151;
                $data_discount['account_heads_id_2'] = 151;
                $data_discount['payment_date'] = $create_date;
                $data_discount['payment_time'] = $time;


                if($find['mobile_order']==1)
                 {

                          $data_discount['deleteid'] = 1021;
                 }




                if($payment_mode=='Cash')
                {
                    $data_discount['bank_id'] = 25;
                }
                $this->Main_model->insert_commen($data_discount , 'all_ledgers');
            }








//For GST Task, Creating SGST and CGST from july 1

//GST Ledgers
 if(date('Y-m-d') > '2024-05-31'){
                $data_sGst['order_id'] = 0;
                $data_sGst['customer_id'] =585;
                $data_sGst['order_base_id'] = $insertid;
                $data_sGst['user_id'] = $this->userid;
                $data_sGst['notes'] = 'SGST - Order Process ' . $find['order_no'];
                $data_sGst['deletemod'] = 'SGST OUT - '.$find['order_no'];
                $data_sGst['credits'] =   round($discountfulltotalRaw/2, 2);
                // $data_tcs['debitstoatal'] =  $minisroundoff;
                $data_sGst['order_no'] = $find['order_no'];
                $data_sGst['reference_no'] = $find['order_no'];
                $data_sGst['party_type'] = 5;
                $data_sGst['account_head_id'] = 142;
                $data_sGst['account_heads_id_2'] = 142;
                $data_sGst['payment_date'] = $create_date;
                $data_sGst['payment_time'] = $time;
                if($payment_mode=='Cash')
                {
                    $data_sGst['bank_id'] = 25;
                }
                  if($find['mobile_order']==1)
                 {

                          $data_sGst['deleteid'] = 1021;
                 }

                $this->Main_model->insert_commen($data_sGst , 'all_ledgers');
            // }
//For GST Task, Creating SGST and CGST from july 1

  $data_cGst['order_id'] = 0;
                $data_cGst['customer_id'] =586;
                $data_cGst['user_id'] = $this->userid;
                $data_cGst['order_base_id'] = $insertid;
                $data_cGst['notes'] = 'CGST - Order Process ' . $find['order_no'];
                $data_cGst['deletemod'] = 'CGST OUT - '.$find['order_no'];
                $data_cGst['credits'] =   round($discountfulltotalRaw/2,2);
                // $data_tcs['debitstoatal'] =  $minisroundoff;
                $data_cGst['order_no'] = $find['order_no'];
                $data_cGst['reference_no'] = $find['order_no'];
                $data_cGst['party_type'] = 5;
                $data_cGst['account_head_id'] = 142;
                $data_cGst['account_heads_id_2'] = 142;
                $data_cGst['payment_date'] = $create_date;
                $data_cGst['payment_time'] = $time;
                if($payment_mode=='Cash')
                {
                    $data_cGst['bank_id'] = 25;
                }
                 if($find['mobile_order']==1)
                 {

                          $data_cGst['deleteid'] = 1021;
                 }
                $this->Main_model->insert_commen($data_cGst , 'all_ledgers');
}








                $resultset_cmm = $this->db->query("SELECT * FROM orders_process  WHERE  id='".$insertid."'");
                $resultset_cmm = $resultset_cmm->result();
                foreach ($resultset_cmm as $set)
                {
                    


                                    $commision_value = 0;
                                    if ($set->commission_check == 1) {
                                        $commision_value = $set->bill_total - $set->bill_total_rate;
                                    }

                                    if ($set->commission_check_fact == 1) {
                                        $commision_value_fact =$set->bill_total - $set->bill_total_fact;
                                            
                                        $commision_value = $commision_value_fact;
                                    }

                      
                                 
                        
                       
                }



                  if($commision_value>0)
                  {



                                        $discount_ss['order_id'] = 0;
                                        $discount_ss['customer_id'] = 252;
                                        $discount_ss['user_id'] = $this->userid;
                                        $discount_ss['notes'] = 'Commission Payment Debit '.$find['order_no'];
                                        $discount_ss['payment_mode'] = 'Cash';
                                        $discount_ss['difference'] = 0;
                                        $discount_ss['reference_no'] ='#'.$insertid.'-'.$find['order_no'];
                                        $discount_ss['amount'] = round($commision_value);
                                        $discount_ss['account_head_id'] = 48;
                                        $discount_ss['account_heads_id_2'] = 48;
                                        $discount_ss['order_trancation_status'] = 0;
                                        $discount_ss['order_no'] = '#'.$insertid.'-'.$find['order_no'];
                                        $discount_ss['bank_id'] = 25;
                                        $discount_ss['paid_status'] = 1;
                                        $discount_ss['debits'] = round($commision_value,2);
                                        $discount_ss['credits'] = 0;
                                        $discount_ss['collected_amount'] = $totalval;
                                        $discount_ss['payment_date'] = $create_date;
                                        $discount_ss['process_by'] = 'Commission Payment Debit '.$company_name;
                                        $discount_ss['payment_time'] = $time;
                                        $discount_ss['party_type'] = 5;
                                        $discount_ss['deletemod'] = 'DPAY_SET_OR'.$insertid;
                                        $discount_ss['comission_transfered'] = 1;

                                          
                                        $result_cmm= $this->Main_model->where_names('all_ledgers','deletemod',$discount_ss['deletemod']);
                                        if(count($result_cmm)==0)
                                        {


                                            // $this->Main_model->insert_commen($discount_ss, 'all_ledgers');


                                        }




                       }




            $dil_status['dispatch_status'] = 0;
            $dil_status['assign_status'] = 0;
            $dil_status['order_id'] = $insertid;
            $dil_status['order_no'] = $find['order_no'];
            $dil_status['finance_status'] = 2;
            $dil_status['collection_remarks'] = $find['bill_total'];
            //$dil_status['collection_remarks'] = $find['bill_total'];
            $dil_status['collection_remarks'] = 0;
            $dil_status['reason'] = "Order Created";
            $dil_status['create_date'] = $date;
            $dil_status['create_time'] = $time;
            $dil_status['delivery_date'] =$delivery_date;
            $dil_status['delivery_time'] =$time;
            $dil_status['customer_id'] =$find['customer_id'];


            if($delivery_status==1)
            {




                        $randam_id=uniqid();
                        //$dil_status['randam_id'] = $randam_id;
                        $dil_status['delivery_status'] =1;
                        //$dil_status['dispatch_status'] =1;
                        $dil_status['collection_remarks'] =$find['bill_total'];

                        
                        $dil_status['seq_status'] =1;
                        $dil_status['delivery_date_status'] =1;
                        $this->db->query("UPDATE order_product_list_process SET picked_status='1' WHERE order_id='".$order_id."'");

                        

           }


            $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');








        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['move_id'] = 'N';
            $point['finance_status'] = 0;
            if ($tablenamemain == 'orders') {
                $point['reason'] = "Null";
            }
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }





    }
    
    
     public function order_quotation_move_finish_by_paricel() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        
      
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = 0;
        $datassfirst['get_id'] = $form_data->order_id;
        $datassfirst['order_base'] = 1;
        $datassfirst['finance_status'] = 2;
        $datassfirst['assign_status'] = 0;
        $datassfirst['vehicle_id'] = 0;
        $datassfirst['driver_id'] = 0;
        $datassfirst['full_delivery'] = 1;
        $datassfirst['reason'] = 'Order Created (Partial)';
        
        $this->Main_model->update_commen($datassfirst, $tablenamemain);
        
        
    }
    
    
    
    public function order_quotation_move_finish_by_deilvered() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        
        $self = $form_data->selforder;
        
        
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = 0;
        $datassfirst['get_id'] = $form_data->order_id;
        $datassfirst['order_base'] = 1;
        $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
        foreach ($result_order as $orders) {
            $order_no = $orders->order_no;
            $customer_id = $orders->customer_id;
            $payment_mode = $orders->payment_mode;
            $delivery_charge = $orders->delivery_charge;
            $minisroundoff = $orders->roundoff;
            $roundoffstatus = $orders->roundoffstatus;

            $delivery_status = $orders->delivery_status;

            $discount = $orders->discount;
            $order_base = $orders->order_base;
            $mobile_order=   $orders->mobile_order;
            $create_date = $orders->create_date;
            $tcs_status = $orders->tcs_status;
            
            
          
            
            
        }
        
        
        
        
        $result_order_product = $this->Main_model->where_names_two_order_by('order_product_list_process', 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
        $totalamount = 0;
        foreach ($result_order_product as $orders_product) {
            $totalamount+= $orders_product->rate * $orders_product->qty;
        }
        if ($roundoffstatus == 1) {
            $discountfulltotal = $totalamount - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $totalamount - $discount - $minisroundoff;
        }




  

        
            $tcsamount=0;


               if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {

        
                     

                         $tcsamount=0;

               }






             $discountfulltotal=$discountfulltotal+$tcsamount;




            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



         
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                            $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }








     
  if($mobile_order=='1' && $order_base=='-2')
  {

                      $neworder_id = $this->checkAndUpdate();
                      $order_no= strtoupper(date('M') . '/' . $neworder_id);
                      $datassfirst1['get_id'] = $form_data->order_id;
                      $datassfirst1['order_base']=1;
                      $datassfirst1['order_no']=$order_no;
                      $datassfirst1['count'] = $neworder_id;
                      $datassfirst1['create_date']=$date;
                      $datassfirst1['create_time']=$time;

                      $datassfirst1['reason'] = "Customer Order Approved";
                      $this->Main_model->update_commen($datassfirst1, 'orders_process');





                        $datass['get_id'] = $form_data->order_id;
                        $datass['order_no']=$order_no;
                        $this->Main_model->update_commen_where($datass, 'order_id', 'order_product_list_process');
                      


 $newModOrderNo = $order_no;
 $id=$form_data->order_id;
 $this->db->query("UPDATE order_delivery_order_status SET create_date='".$date."',reason='Customer Order Approved',order_no='".$newModOrderNo."' WHERE order_id='".$id."'");



  


            $notes='Order Process-'.$newModOrderNo;
            $deletemod='ORDER'.$newModOrderNo;
            $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$deletemod."',notes='".$notes."',process_by='".$notes."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_id='".$id."' AND party_type=1");
            //return $searchRes[0]['id'];





 $data_tcs = 'TCS-'.$newModOrderNo;
 $data_auto_roundoff = 'AUTOROUND-'.$newModOrderNo;
 $data_roundoff = 'ROUND-'.$newModOrderNo;
 $data_discount = 'DISCOUNT-'.$newModOrderNo;
 $data_sGst = 'SGST OUT - '.$newModOrderNo;
 $data_cGst = 'CGST OUT - '.$newModOrderNo;




 $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$data_tcs."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_tcs."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='166' AND party_type=5");


  $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$data_auto_roundoff."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_auto_roundoff."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='372' AND party_type=5");


   $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$data_roundoff."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_roundoff."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='372' AND party_type=5");


    $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$data_discount."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_discount."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='220' AND party_type=5");

 $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$data_sGst."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_sGst."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='585' AND party_type=5");

 $this->db->query("UPDATE all_ledgers SET deleteid=0,payment_time='".$time."',payment_date='".$date."',deletemod='".$data_cGst."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_cGst."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='586' AND party_type=5");



                                            $datassh['userid'] = $this->userid;
                                            $datassh['order_id'] = $id;
                                            $datassh['tablename'] = 'orders_process';
                                            $datassh['order_no'] = $newModOrderNo;
                                            $datassh['inputname'] ='Approved_order';
                                            $datassh['notes'] =' Customer Order Approved';
                                            $this->Main_model->insert_commen($datassh, 'bill_changes_log');




  }


        
         
   // $this->Main_model->update_commen($datassfirst1, 'orders_quotation');
        
        
        
        
    }
    
    
    
    
    public function order_quotation_move_status() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $orderstatus = $form_data->orderstatus;
        $namestatus = $form_data->namestatus;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = $orderstatus;
            $datassfirst['price_requerst_status'] = 3;
            $datassfirst['reason'] = $namestatus;
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                $find['order_no'] = $orders->order_no;
                $find['discount'] = $orders->discount;
                $find['discountPre'] = $orders->discountPre;
                $find['customer_id'] = $orders->customer_id; $find['notes'] = $orders->notes;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
$find['bill_total'] = $orders->bill_total;
$find['tcs_status'] = $orders->tcs_status;
$find['bill_total_fact'] = $orders->bill_total_fact;
$find['tcsamount'] = $orders->tcsamount;
$find['bill_total_rate'] = $orders->bill_total_rate;
$find['without_commsision_total'] = $orders->without_commsision_total;
                $find['customer_address_id'] = $orders->customer_address_id;

   $find['billing_address'] = $orders->billing_address;
                 $find['shipping_address'] = $orders->shipping_address;

                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                $create_date = $orders->create_date;
                $find['create_date'] = $orders->create_date;
                $find['create_time'] = $orders->create_time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                $find['order_base'] = $orderstatus;
                $find['price_requerst_status'] = 3;
                $find['commission_check'] = $orders->commission_check;
                $find['commission_check_fact'] = $orders->commission_check_fact;

$find['bill_total_rate'] = $orders->bill_total_rate;
                $find['bill_total_fact'] = $orders->bill_total_fact;

                $find['gst_check'] = $orders->gst_check;
                $find['reason'] = $namestatus;
                $find['delivery_charge'] = $orders->delivery_charge;
 $find['SSD_check'] = $orders->SSD_check;
 $find['excess_payment_status'] = $orders->excess_payment_status;
                $find['delivery_date_time'] = $orders->delivery_date_time;
                $find['delivery_date'] = $orders->delivery_date;
                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['paricel_mode'] = $orders->paricel_mode;
                $find['delivery_mode'] = $orders->delivery_mode;
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
                if (count($result_order) == 0) {
                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                } else {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = $orderstatus;
                    $datass['price_requerst_status'] = 3;
                    $datass['reason'] = $namestatus;
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $orders->order_no;
                    $findp['product_name'] = $orders_product->product_name;
                    
                    
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['commission_fact'] = $orders_product->commission_fact;
$findp['commission_fact_status'] = $orders_product->commission_fact_status;

                     $findp['old_rate_amount'] = $orders_product->old_rate_amount;
                $findp['old_fact_amount'] = $orders_product->old_fact_amount;
                $findp['crimp_check'] = $orders_product->crimp_check;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['uom'] = $orders_product->uom;
                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                    $findp['modify_qty'] = $orders_product->modify_qty;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['crimp'] = $orders_product->crimp;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['weight'] = $orders_product->weight;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;



      
                    $findp['input_values'] = $orders_product->input_values;
                    $findp['uom_image'] = $orders_product->uom_image;
                    $findp['color_side'] = $orders_product->color_side;



                    $findp['rate'] = $orders_product->rate;
                    $findp['qty'] = $orders_product->qty;
                    $findp['activel_qty'] = $orders_product->qty;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        //$this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                }
            }
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['price_requerst_status'] = 3;
            $point['reason'] = $namestatus;
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $datass['reason'] = $namestatus;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    public function order_quotation_move_finish_sh() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = 0;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = 1;
            $datassfirst['reason'] = "Sales Head Price Approved";
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            $neworder_id = 1;
            



            $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }



            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                $find['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
                $find['discount'] = $orders->discount;
                $find['discountPre'] = $orders->discountPre;
                $find['month'] = date('M');
                $find['year'] = date('Y');
                $find['count'] = $neworder_id;
                $tcs_status = $orders->tcs_status;

                $find['customer_id'] = $orders->customer_id; $find['notes'] = $orders->notes;
                $customer_id = $orders->customer_id;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;

$find['bill_total'] = $orders->bill_total;
$find['tcs_status'] = $orders->tcs_status;
$find['bill_total_fact'] = $orders->bill_total_fact;
$find['tcsamount'] = $orders->tcsamount;
$find['bill_total_rate'] = $orders->bill_total_rate;
                $find['without_commsision_total'] = $orders->without_commsision_total;
                $find['customer_address_id'] = $orders->customer_address_id;

                $find['billing_address'] = $orders->billing_address;
                $find['shipping_address'] = $orders->shipping_address;

                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                
                $create_date = $orders->create_date;

                $find['create_date'] = $orders->create_date;
                $find['create_time'] = $orders->create_time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                $find['order_base'] = 1;
                $find['reason'] = "Sales Head Price Approved";
                $payment_mode = $orders->payment_mode;
                $delivery_charge = $orders->delivery_charge;
                $minisroundoff = $orders->roundoff;
                $roundoffstatus = $orders->roundoffstatus;
                $discount = $orders->discount;
                // Once production completed change value 0
                $find['finance_status'] = 2;
                $find['commission_check'] = $orders->commission_check;
                $find['commission_check_fact'] = $orders->commission_check_fact;

$find['bill_total_rate'] = $orders->bill_total_rate;
                $find['bill_total_fact'] = $orders->bill_total_fact;
$find['without_commsision_total'] = $orders->without_commsision_total;
                $find['gst_check'] = $orders->gst_check;
                $find['paricel_mode'] = $orders->paricel_mode;
                $find['delivery_mode'] = $orders->delivery_mode;
                $find['delivery_charge'] = $orders->delivery_charge;

                $find['SSD_check'] = $orders->SSD_check;
                $find['excess_payment_status'] = $orders->excess_payment_status;
                $find['delivery_date_time'] = $orders->delivery_date_time;
                $find['delivery_date'] = $orders->delivery_date;
                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
                if (count($result_order) == 0) {
                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                } else {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = 1;
                    $datass['finance_status'] = 2;
                    $datass['reason'] = "Sales Head Price Approved";
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                $totalamount = 0;
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $orders->order_no;
                    $findp['product_name'] = $orders_product->product_name;
                    
                    
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['uom'] = $orders_product->uom;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['commission_fact'] = $orders_product->commission_fact;

$findp['commission_fact_status'] = $orders_product->commission_fact_status;

                     $findp['old_rate_amount'] = $orders_product->old_rate_amount;
                $findp['old_fact_amount'] = $orders_product->old_fact_amount;
                $findp['crimp_check'] = $orders_product->crimp_check;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                    $findp['crimp'] = $orders_product->crimp;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['weight'] = $orders_product->weight;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;

                    $findp['input_values'] = $orders_product->input_values;
                    $findp['uom_image'] = $orders_product->uom_image;
                    $findp['color_side'] = $orders_product->color_side;


                    $findp['rate'] = $orders_product->rate;
                    $findp['qty'] = $orders_product->qty;
                    $findp['activel_qty'] = $orders_product->qty;
                    $findp['modify_qty'] = $orders_product->modify_qty;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    $totalamount+= $orders_product->rate * $orders_product->qty;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        //$this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                }
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }










            $tcsamount=0;


             if($tcs_status==1)
              {

                            $tcsamount=round($discountfulltotal*0.1/100);

              }
              else
              {
                        
                          //   $resultset = $this->db->query("SELECT SUM(b.rate*b.qty) as totalamount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE   a.id<'".$form_data->order_id."'  AND  a.order_base = '1' AND b.deleteid = '0' AND a.deleteid = '0' AND a.customer_id='".$customer_id."'");
                          //   $resultset = $resultset->result();
                       
                          //   foreach ($resultset as $set)
                          //   {
                                  
                          //                     $tcsamountval=round($set->totalamount,2);
                          //                     $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
                          //                     if($tcsamountvaldata>5000000)
                          //                     {
                          //                         $tcsamount=round($discountfulltotal*0.1/100);
                          //                     }
                          //                     $tcsamount=0;
                                    
                                   
                          // }

                          $tcsamount=0;

             }






             $discountfulltotal=$discountfulltotal+$tcsamount;



            $whole = floor($discountfulltotal); 
            $decimal1 = $discountfulltotal - $whole;
            $totalval= round($decimal1,3);



           
            $roundoffstatusval_data="";
            if($totalval!=0)
            {


                    if($totalval>0.5)
                    {
                           $getplusevalue=1-$totalval;
                           $discountfulltotal=$discountfulltotal+$getplusevalue;
                          
                           if($getplusevalue>0)
                           {
                             $roundoffstatusval_data=" (+) ".$getplusevalue;
                           }

                          


                    }
                    else
                    {

                            $discountfulltotal=round($discountfulltotal-$totalval);
                           if($totalval>0)
                           {
                               $roundoffstatusval_data=" (-) ".$totalval;
                           }
                           

                    }


            }












            
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
            
            $balancetotal = 0;
            $debitsamount = 0;
            $creditsamount = 0;
            foreach ($res as $val) {
                $debitsamount+= $val->debits;
                $creditsamount+= $val->credits;
                $balancetotal+= $val->balance;
            }
            
            
             $balancetotal=$creditsamount-$debitsamount;
            
            $data_address['order_id'] = $insertid;
            $data_address['customer_id'] = $customer_id;
            $data_address['user_id'] = $this->userid;
            $data_address['notes'] = 'Order Process ' . $find['order_no'];
            $data_address['deletemod'] = 'ORDER'.$find['order_no'];
            $data_address['payment_mode'] = 0;
            $data_address['payment_mode_payoff'] = $payment_mode;
            $data_address['order_no'] = $find['order_no'];
            $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
            $data_address['difference'] = 0;
            $data_address['reference_no'] = $find['order_no'];
            $data_address['amount'] = round($discountfulltotal + $delivery_charge,2);
            $data_address['debits'] = round($discountfulltotal + $delivery_charge,2);
            $data_address['paid_status'] = 0;
            if ($balancetotal != '0') {
                $data_address['balance'] = 0;
            } else {
                $data_address['balance'] = 0;
            }
            $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge,2);
            $data_address['payment_date'] = $create_date;
            $data_address['order_date'] = $create_date;
            $data_address['payment_time'] = $time;
            $data_address['party_type'] = 1;
            $data_address['account_head_id'] = 68;
            $data_address['account_heads_id_2'] = 116;
             $data_address['order_trancation_status'] = 1;
            if($payment_mode=='Cash')
            {
                 $data_address['bank_id'] = 25;
            }
           
            
            
            $this->Main_model->insert_commen($data_address, 'all_ledgers');
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['move_id'] = 'N1';
            $point['finance_status'] = 0;
            if ($tablenamemain == 'orders') {
                $point['reason'] = "Null1";
            }
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    public function order_price_request() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $datass['get_id'] = $form_data->order_id;
        $datass['order_base'] = $deleteid;
        $datass['price_requerst_status'] = $deleteid;
        if ($deleteid == '3') {
            $datass['reason'] = "Price Requested To TL";
        } else {
            $datass['reason'] = "";
        }
        $this->Main_model->update_commen($datass, $tablenamemain);
    }
    public function order_quotation_request() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $status = $form_data->status;
        $reason = $form_data->reason;
        $point['get_id'] = $form_data->order_id;
        $point['order_base'] = $status;
       
        if ($status == 3) {
            $point['reason'] = 'Sales Approval Requested';
        } else {
            $point['reason'] = $reason;
        }
        
        if ($tablenamemain == 'orders_process') {
           
            if ($deleteid == 1) {
                $point['finance_status'] = 2;
                $point['assign_status'] = 0;
            }
            
            
            
        }
        $this->Main_model->update_commen($point, $tablenamemain);
        if ($tablenamemain == 'orders_process') {
            $point['get_id'] = $form_data->order_no;
            $this->Main_model->update_commen_where($point, 'order_no', 'orders_quotation');
        }
    }
    
    
    
    
    public function order_md_approved() 
    {
        
        
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $status = $form_data->status;
        $mdstatus = $form_data->mdstatus;
        $reason = $form_data->reason;
        $point['get_id'] = $form_data->order_id;
        $point['order_base'] = $status;
        
        
        
        if($point['order_base']=='-1')
        {
            
            
            
                               $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                               foreach($results as $vl)
                               {
                                     $move_id=$vl->move_id;
                                     $move_id_order_no=$vl->order_no;
                               }


                                if($tablenamemain == 'orders_process') 
                                {
                                    

                                $this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Order Cancel Approved' WHERE order_id='".$order_id."' AND party_type=1");
                               



  $newModOrderNo=$move_id_order_no;

  $autoroundoff_deletemod='AUTOROUND-'.$newModOrderNo;
  $this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE order_no='".$newModOrderNo."' AND customer_id='372' AND deletemod='".$autoroundoff_deletemod."' AND party_type=5");



  $autoroundoff_deletemod1='ROUND-'.$newModOrderNo;
  $this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE order_no='".$newModOrderNo."' AND customer_id='372' AND deletemod='".$autoroundoff_deletemod1."' AND party_type=5");
  

$DISCOUNT_DELETEMOD='DISCOUNT-'.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET  deleteid=13 WHERE order_no='".$newModOrderNo."' AND customer_id='220' AND deletemod='".$DISCOUNT_DELETEMOD."' AND party_type=5");

   $tcsset='TCS-'.$newModOrderNo;
$this->db->query("UPDATE all_ledgers SET deleteid=13 WHERE customer_id='166'  AND order_no='".$newModOrderNo."' AND party_type=5  AND deletemod='".$tcsset."'");






                                $deletelog['userid']=$this->userid;
                                $deletelog['all_legers']='OrderID-'.$order_id;
                                $deletelog['bank_legers']='Order Cancel Approved';
                                $this->Main_model->insert_commen($deletelog,'deleted_log');


                                }



                               
                                $vv['get_id'] = $move_id;
                                $vv['reason'] = 'Order canceled '.$move_id_order_no;
                                $vv['order_base'] = -1;
                                //$this->Main_model->update_commen($vv, 'orders_quotation');
                               
                               
                               
                               $results1 = $this->Main_model->where_names('orders_quotation', 'id', $move_id);
                               foreach($results1 as $vl1)
                               {
                                    $move_id1=$vl1->move_id;
                                      $move_id_order_no1=$vl1->order_no;
                               }
                               
                                $vv1['get_id'] = $move_id1;
                                $vv1['reason'] = 'Quotation  canceled '.$move_id_order_no1;
                                $vv1['order_base'] = -1;
                                //$this->Main_model->update_commen($vv1, 'orders');



            
            
            
        }
        
        
        
        
        
       
        if ($status == 3) {
            $point['reason'] = 'Sales Approval Requested';
        } else {
            $point['reason'] = $reason;
        }
        
        if($tablenamemain == 'orders_process') {
           
          
            $point['md_approved_status'] = $mdstatus;
            $point['approved_by_user'] = $this->userid;
            $point['approved_md_date'] = $date;
            $point['approved_md_time'] = $time;

            
        }
        $this->Main_model->update_commen($point, $tablenamemain);
        if ($tablenamemain == 'orders_process') {
            
            
            $point['get_id'] = $form_data->order_no;
            $this->Main_model->update_commen_where($point, 'order_no', 'orders_quotation');
            
            if($point['order_base']=='-1')
            {



                                $this->db->query("UPDATE all_ledgers SET deleteid='1',notes='Order Cancel Approved' WHERE order_id='".$order_id."' AND party_type=1");
                                $this->userid; 
                                $deletelog['userid']=$this->userid;
                                $deletelog['all_legers']='OrderID-'.$order_id;
                                $deletelog['bank_legers']='Order Cancel Approved';
                                $this->Main_model->insert_commen($deletelog,'deleted_log');


            }




             
           if($reason=='Edited Approved')  
           {

                                if($form_data->discountfulltotal>0)
                                {


                                    $this->db->query("UPDATE all_ledgers SET deleteid='0' WHERE order_id='".$order_id."' AND party_type=1 AND debits>=0");
                                    $deletelog['userid']=$this->userid;
                                    $deletelog['all_legers']='OrderID-'.$order_id;
                                    $deletelog['bank_legers']='Order Edit Approved '.$form_data->discountfulltotal;
                                    $this->Main_model->insert_commen($deletelog,'deleted_log');

                                    
  
                                }
                            

           }









            
            
        }
        
        
        
    }
    
    
    
    
    
    
    
    public function order_quotation_request_finance() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $reason = $form_data->reason;
        $point['get_id'] = $form_data->order_id;
        $point['finance_status'] = $deleteid;
        $point['reason'] = $reason;
        $this->Main_model->update_commen($point, $tablenamemain);
    }
    public function fetchCustomerorcallbackhistroy() {
        $form_data = json_decode(file_get_contents("php://input"));
        $resultpending = $this->Main_model->where_names_order_by('call_history', 'order_no', $form_data->order_no, 'id', 'DESC');
        $i = 1;
        $array = array();
        foreach ($resultpending as $value) {
            if ($value->status_data == 'Call Back') {
                $value->status_data = $value->status_data . ' ' . date('d-m-Y', strtotime($value->call_back_date));
            }
            $array[] = array('no' => $i, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'user_id' => $value->user_id, 'status_data' => $value->status_data, 'remarks' => $value->remarks, 'call_back_date' => date('d-m-Y', strtotime($value->call_back_date)), 'audio' => $value->audio, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroy_driver() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $order_id = $form_data->order_id;
        $result_c = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
        foreach ($result_c as $orders_c) {
            $customer_id = $orders_c->customer_id;
        }
        $resultorder = $this->Main_model->where_names_order_by($tablenamemain, 'customer_id', $customer_id, 'id', 'DESC');
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $result_order_product = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($result_order_product as $orders_product) {
                $name = $orders_product->name;
            }
            if ($value->return_status != 0) {
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'user_name' => $name, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroyorderlist_driver() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $result_c = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
        foreach ($result_c as $orders_c) {
            $customer_id = $orders_c->customer_id;
        }
        $resultorder = $this->db->query("SELECT a.* FROM $tablename_sub as a JOIN orders_process as b ON a.order_id=b.id  WHERE a.return_status!='0' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.id DESC");
        $resultorder = $resultorder->result();
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($value->profile,3), 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($value->qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroy() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $order_no = $form_data->order_no;
        $customer_id = 'DR000';
        $result_c = $this->Main_model->where_names('orders', 'order_no', $order_no);
        if (count($result_c) == 0) {
            $result_c = $this->Main_model->where_names('orders_quotation', 'order_no', $order_no);
            if (count($result_c) == 0) {
                $result_c = $this->Main_model->where_names('orders_process', 'order_no', $order_no);
            }
        }
        if (count($result_c) > 0) {
            foreach ($result_c as $orders_c) {
                $customer_id = $orders_c->customer_id;
            }
        }
        if ($customer_id == '') {
            $customer_id = 'DR000';
        }
        
        
        $resultorder = $this->Main_model->where_names_order_by_limit($tablenamemain, 'customer_id', $customer_id, 'id', 'DESC');
         
        $i = 1;
        $array = array();
        $url = "";
        $lable = "";
        foreach ($resultorder as $value) {
           
            if ($tablenamemain == 'orders') {
                $url = base_url() . 'index.php/order/ordercreate_product?order_id=' . base64_encode($value->id);
                $lable = "Enquiry";
            }
            
            if ($tablenamemain == 'orders_quotation') {
                $url = base_url() . 'index.php/order/ordercreate_product_quotation?order_id=' . base64_encode($value->id);
                $lable = "Quotation";
            }
            
            if ($tablenamemain == 'orders_process') {
                $url = base_url() . 'index.php/order/ordercreate_product_process?order_id=' . base64_encode($value->id);
                $lable = "Order";
            }
            
            $result_order_product = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($result_order_product as $orders_product) {
               $name = $orders_product->name;
            }
            
            if ($value->order_no != $order_no) {
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'url' => $url, 'lable' => $lable, 'user_name' => $name, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroy_return() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $order_no = $form_data->order_no;
        $customer_id = 0;
        $result_c = $this->Main_model->where_names('orders', 'order_no', $order_no);
        if (count($result_c) == 0) {
            $result_c = $this->Main_model->where_names('orders_quotation', 'order_no', $order_no);
            if (count($result_c) == 0) {
                $result_c = $this->Main_model->where_names('orders_process', 'order_no', $order_no);
            }
        }
        if (count($result_c) > 0) {
            foreach ($result_c as $orders_c) {
                $customer_id = $orders_c->customer_id;
            }
        }
        if ($customer_id == '') {
            $customer_id = 0;
        }
        $resultorder = $this->Main_model->where_names_two_order_by_limit($tablenamemain, 'customer_id', $customer_id, 'assign_status', '8', 'id', 'DESC');
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $url = "";
            $lable = "";
            if ($tablenamemain == 'orders') {
                $url = base_url() . 'index.php/order/ordercreate_product?order_id=' . base64_encode($value->id);
                $lable = "Enquiry";
            }
            if ($tablenamemain == 'orders_quotation') {
                $url = base_url() . 'index.php/order/ordercreate_product_quotation?order_id=' . base64_encode($value->id);
                $lable = "Quotation";
            }
            if ($tablenamemain == 'orders_process') {
                $url = base_url() . 'index.php/order/ordercreate_product_process?order_id=' . base64_encode($value->id);
                $lable = "Order";
            }
            $result_order_product = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($result_order_product as $orders_product) {
                $name = $orders_product->name;
            }
            if ($value->order_no != $order_no) {
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'url' => $url, 'lable' => $lable, 'user_name' => $name, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroyorderlist() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_no = $form_data->order_no;
        $result_c = $this->Main_model->where_names($tablenamemain, 'order_no', $order_no);
        foreach ($result_c as $orders_c) {
            $customer_id = $orders_c->customer_id;
        }
        $resultorder = $this->db->query("SELECT a.* FROM $tablename_sub as a JOIN orders_process as b ON a.order_id=b.id  WHERE b.order_no!='" . $order_no . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.id DESC");
        $resultorder = $resultorder->result();
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'product_name_tab' => $product_name, 'imagestatus' => $imagestatus, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => round($value->profile,3), 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2), 'rate_tab' => $value->rate, 'qty_tab' => round($value->qty,3), 'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }
    public function callbacksave() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->call_status != '') {
            $tablenamemain=$form_data->tablenamemain;
            $findp['status_data'] = $form_data->call_status;
            $findp['call_back_date'] = date('d-m-Y g:i A',strtotime($form_data->call_back_date));
            $findp['call_back_date_only'] = date('Y-m-d',strtotime($form_data->call_back_date));
            $findp['order_id'] = $form_data->order_id;
            $findp['order_no'] = $form_data->order_no;
            
            $findp['audio'] = $form_data->audiolink;
            $findp['remarks'] = $form_data->remarks;
            $findp['create_date'] = $date;
            $findp['create_time'] = $time;
            $findp['table_name'] = $form_data->tablenamemain;
            $customer_id = 0;
            $result_order_product = $this->Main_model->where_names($form_data->tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order_product as $orders_product) {
                $customer_id = $orders_product->customer_id;
                $user_id = $orders_product->user_id;
            }
            $findp['customer_id'] = $customer_id;
            $findp['user_id'] = $user_id;
            $insert_id = $this->Main_model->insert_commen($findp, 'call_history');

            if($form_data->call_status=='Call Back')
            {


               $this->db->query("UPDATE $tablenamemain SET reason='Call Back Remainder ".$findp['call_back_date']."',order_base='-4',call_back_date='".$findp['call_back_date_only']."' WHERE id='".$form_data->order_id."'");


             } 

            $array = array('error' => '2', 'insert_id' => $insert_id, 'massage' => 'Call Back submitted');
            echo json_encode($array);
        } else {
            $array = array('error' => '1');
            echo json_encode($array);
        }
    }
    public function fileuplaod() {
        if (!empty($_FILES)) {
            $path = array();
            $ticket_id = $_GET['id'];
            echo $path = 'uploads/' . time() . $_FILES['file']['name'];
              $imageFileType = strtolower(pathinfo($path,PATHINFO_EXTENSION));
                      
                         if($imageFileType!='exe')
                         {
                                if (move_uploaded_file($_FILES['file']['tmp_name'], $path)) {
                                    $point['get_id'] = $ticket_id;
                                    $point['audio'] = $path;
                                    $this->Main_model->update_commen($point, 'call_history');
                                }
            
                         }
            
        }
    }
    public function fileuplaodimage() {
        if (!empty($_FILES)) {
            $path = array();
            $ticket_id = $_GET['id'];
            echo $path = 'uploads/' . time() . $_FILES['file']['name'];
            
              $imageFileType = strtolower(pathinfo($path,PATHINFO_EXTENSION));
                      
                         if($imageFileType!='exe')
                         {
            
                                    if (move_uploaded_file($_FILES['file']['tmp_name'], $path)) {
                                        $point['product_id'] = $ticket_id;
                                        $point['product_image'] = $path;
                                        $this->Main_model->insert_commen($point, 'product_images');
                                    }
                         }
        }
    }
    public function payment_image() {
        if (!empty($_FILES)) {
            $path = array();
            $ticket_id = $_GET['id'];
            echo $path = 'uploads/' . time() . $_FILES['file']['name'];
            
              $imageFileType = strtolower(pathinfo($path,PATHINFO_EXTENSION));
              if($imageFileType!='exe')
              {
            
                                        if (move_uploaded_file($_FILES['file']['tmp_name'], $path)) {
                                            $point['get_id'] = $ticket_id;
                                            $point['payment_image'] = $path;
                                            $this->Main_model->update_commen($point, 'orders_process');
                                        }
            
             }
             
             
        }
    }
    
    
    
    
    public function group_gy_route_return() 
    {


        $filter_date_from=$_GET['filter_date_from'];
        $filter_date_to=$_GET['filter_date_to'];

        $sqlstatuss='';

        if($filter_date_from!=date('Y-m-d'))
        {


                  $sqlstatuss = ' AND a.invoice_date BETWEEN "'.$filter_date_from .'" AND "'.$filter_date_to .'"';

        }
             

        $result = $this->Main_model->where_names('route', 'deleteid', '0');
        $data = array();
        $i = 1;
        foreach ($result as $value) 
        {
            
            
            
            $query = $this->db->query("SELECT a.* FROM order_sales_return_complaints as a  WHERE a.deleteid='0' AND a.route_id='".$value->id."' AND a.order_base=0 $sqlstatuss");
            $resultset = $query->result();
           
            
            if(count($resultset)>0)
            {
                

                $data[] = array('no' => $i, 'id' => $value->id, 'name' => $value->name, 'count' => count($resultset)+count($resultset1));


            }
           


            $i++;
            
            
        }



        echo json_encode($data);
    }
    
    
    
    
    
    
    
    
    public function group_gy_route() {

        $filter_date_from=$_GET['filter_date_from'];
        $filter_date_to=$_GET['filter_date_to'];


            $sqlstatuss='';

             if($filter_date_from!=date('Y-m-d'))
             {


                     $sqlstatuss.= ' AND a.create_date BETWEEN "'.$filter_date_from .'" AND "'.$filter_date_to .'"';

             }



            if($this->session->userdata['logged_in']['access']==12)
            {

                      $sqlstatuss.=" AND a.user_id='".$this->userid."'";
            }

          $data = [];
        $i = 1;

          
        $query = $this->db->query(
                "SELECT a.id,r.id as route_id,r.name,COUNT(a.id) as countid FROM orders_process as a join route as r ON a.route_id=r.id WHERE a.deleteid='0' AND a.order_base>0 AND a.finance_status=2 AND a.assign_status=0 AND a.delivery_status=1 $sqlstatuss GROUP BY a.route_id "
            );
        $result = $query->result();  
        foreach ($result as $value) {
            
            

            
                $data[] = [
                    "no" => $i,
                    "id" => $value->route_id,
                    "name" => $value->name,
                    "count" => $value->countid,
                ];
            
            $i++;
        }




        echo json_encode($data);
    }
    
    
    
    
    
    
    
    
    public function group_gy_route_own()
    {




        $filter_date_from=$_GET['filter_date_from'];
        $filter_date_to=$_GET['filter_date_to'];


         $sqlstatuss='';

       

        
         $sqlstatuss = ' AND a.delivery_date BETWEEN "'.$filter_date_from .'" AND "'.$filter_date_to .'"';

        

       $data = [];
        $i = 1;


        $query = $this->db->query(
                "SELECT a.id,r.id as route_id,r.name,COUNT(a.id) as countid FROM orders_process as a join route as r ON a.route_id=r.id WHERE a.deleteid='0' AND a.order_base NOT IN ('0','22','-1') AND a.finance_status=2 AND a.assign_status=0 AND a.delivery_status=2 AND a.delivery_date_status=1  $sqlstatuss GROUP BY a.route_id "
            );
        $result = $query->result();  
        foreach ($result as $value) {
            
            

            
                $data[] = [
                    "no" => $i,
                    "id" => $value->route_id,
                    "name" => $value->name,
                    "count" => $value->countid,
                ];
            
            $i++;
        }



        echo json_encode($data);
    }
    
    
    
     public function fetchtripids() 
     {
                
 $vehicle_id=$_GET['vehicle_id'];
$JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
 $querygettrips = $this->db->query("SELECT ds.trip_id FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.vehicle_id='".$vehicle_id."' AND ds.assign_status IN ('11','12') AND  ds.finance_status=3 AND ds.dispath_load_status_view=0 ORDER BY a.id DESC");
  $trips= $querygettrips->result();

                $querygettrip = $this->db->query("SELECT ds.trip_id,a.delivery_date FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.vehicle_id='".$vehicle_id."' AND ds.assign_status IN ('11','12') AND  ds.finance_status=3 AND ds.dispath_load_status_view=0 GROUP BY ds.trip_id ORDER BY a.id DESC");
                $trip= $querygettrip->result();
                $array=array();
                if(count($trip)>0)
                {


                         foreach ($trip as $tripvalue)
                         {
                                      
                                         $trip_id=$tripvalue->trip_id;
                                         $delivery_date=$tripvalue->delivery_date;
                                         $array[] = array('trip_id' => $trip_id,'delivery_date' => $delivery_date);


                         }


                }


             
  
  $querygettrips = $this->db->query("SELECT ds.trip_id FROM orders_process as a $JOIN WHERE  a.order_base>0 AND  a.delivery_status=2 AND ds.vehicle_id='".$vehicle_id."' AND ds.assign_status IN ('11','12') AND  ds.finance_status=3 AND ds.dispath_load_status_view=0 ORDER BY a.id DESC");
  $trips= $querygettrips->result();
  $this->db->query("UPDATE vehicle SET assiend_count='".count($trips)."'  WHERE id='".$vehicle_id."'");




                echo json_encode($array);


              


     }
    
  




     public function orderassign() {
        


        date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
                $sortingInput_data = $form_data->sortingInput_data;
                $trip_id = $form_data->trip_id;
                $sortingInput_data = explode('|', $sortingInput_data);
        
        
                $orderid_data = $form_data->orderid_data;
                $orderid_data = explode('|', $orderid_data);
        
        
                 $orderid_rand = $form_data->orderid_rand;
                 $orderid_rand = explode('|', $orderid_rand);
        
        
                $vehicle_id_data = $form_data->vehicle_id_data;
                // $vehicle_id_data= explode('|', $vehicle_id_data);
        
                
                $timedata=substr(time(), 4);
                for ($i = 0;$i < count($orderid_data);$i++) 
                {
        
        
                                $datass['get_id'] = $orderid_data[$i];
                                $datass['vehicle_id'] = $vehicle_id_data;
        
        
        
        
                             $results = $this->Main_model->where_names("orders_process","id",$orderid_data[$i]);
                             foreach ($results as $orders) {
        
                               $delivery_status=$orders->delivery_status;
                               $return_id=$orders->return_id;
                               $trip_id_old=$orders->trip_id;
                               $delivery_date=$orders->delivery_date;
        
                            }
        
        


//$this->db->query("UPDATE order_delivery_order_status SET deleteid='88' WHERE order_id='".$orderid_data[$i]."' AND finance_status=2 AND deleteid=1001"); 

        $randam_id=uniqid();
        $this->db->query("UPDATE order_product_list_process SET randam_id='".$randam_id."' WHERE order_id='".$orderid_data[$i]."' AND picked_status=1 AND dispatch_status=0");
        $this->db->query("UPDATE order_delivery_order_status SET randam_id='".$randam_id."' WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND return_base=0 AND deleteid=0 AND randam_id IS NULL");     
        $this->db->query("UPDATE sales_load_products SET randam_id='" . $randam_id . "' WHERE   order_id='".$orderid_data[$i]."' AND randam_id IS NULL");
        
        

        $poin_to_member = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND return_id>0 AND  return_status IN ('2','0')");
                                 $poin_to_member = $poin_to_member->result();
                                 $return_id=0;
                                 foreach($poin_to_member as $tcs)
                                 {
                                        $return_id=$tcs->return_id;
                                 }

        if($return_id>0)
        {

            //$this->db->query("UPDATE order_sales_return_complaints SET driver_delivery_status='1' WHERE id='".$return_id."'");

        }
         


 
        
        // gg changes
        
        
        $get_packed_details = $this->db->query("SELECT * FROM sales_load_products WHERE  randam_id='" . $randam_id . "' AND order_id='".$orderid_data[$i]."'");
        $packed_details_show= $get_packed_details->result();
        
        
        foreach($packed_details_show as $data_packed) {
        
        
        
          // get activel bill qty
          $this->db->select('order_product_list_process.*');
          $this->db->where('order_id',$data_packed->order_id);
          $this->db->where('id',$data_packed->order_product_id);
          $dats156=$this->db->get('order_product_list_process');
          $bill_qty_data=$dats156->row();
        
                    $packed_details_data['order_product_id ']=$data_packed->order_product_id;
                    $packed_details_data['nos']=$data_packed->nos;
                    $packed_details_data['qty']=$data_packed->qty;
                    $packed_details_data['activel_qty']=$data_packed->qty;
                    //$packed_details_data['billed_qty']=$bill_qty_data->qty;
                    $packed_details_data['rate']=$data_packed->rate;
                    $packed_details_data['amount']=$data_packed->amount;
                    $packed_details_data['randam_id']=$data_packed->randam_id;
                    $packed_details_data['order_id']=$data_packed->order_id;
                    $packed_details_data['created_date']=date('Y-m-d');
        
                    $this->db->insert('packed_details',$packed_details_data);
        
        }
        
                            if($vehicle_id_data != '')
                            {
                            $result = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id_data);
                            foreach ($result as $value) {
                                $driver_id = $value->id;
                            }
        
        
        
                            $vehicle_number = "";
                            $vehicle = $this->Main_model->where_names("vehicle","id",$vehicle_id_data);
                            foreach ($vehicle as $vehicle_v) {
                                
                                $vehicle_number = trim($vehicle_v->vehicle_number);
                                $vehicle_number=str_replace(' ','', $vehicle_number);
                                
                            }
        
        
                        $datass['driver_id'] = $driver_id;
                        $datass['trip_id_old'] = $trip_id_old;
        
        
        
                        if($delivery_status==1)
                        {
        
                             $datass['assign_status'] = 11;
                             $datass['assign_status_11_date'] = date('Y-m-d');
                             $datass['assign_status_12_date'] = NULL;
                             $datass['assign_status_2_date'] = NULL;
                             $datass['assign_status_3_date'] = NULL;
        
            $this->db->query("UPDATE order_delivery_order_status SET 
            assign_status_11_date='".$datass['assign_status_11_date']."',
            assign_status_12_date=NULL,
            assign_status_2_date=NULL,
            assign_status_3_date=NULL
            WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
        
        
                        }
                        else
                        {
                             $datass['assign_status'] = 12;
                             $datass['assign_status_12_date'] = date('Y-m-d');
                             $datass['assign_status_2_date'] = NULL;
                             $datass['assign_status_3_date'] = NULL;
        
            $this->db->query("UPDATE order_delivery_order_status SET 
            assign_status_12_date='".$datass['assign_status_12_date']."',
            assign_status_2_date=NULL,
            assign_status_3_date=NULL
            WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
        
                        }
        
        
           
            
                       
                         $datass['km_reading_end'] = 0;
        
        
                         $datass['seq_status'] = 0;
                         $datass['dispatch_load_status'] = 0;
                         $datass['dispath_load_status_view'] = 0;
        
                         if($return_id>0)
                         {
        
                            
                            //$datass['assign_status'] = 12;
                            //$datass['reason'] = 'Dispatch Return Assigned';
                            
                         }
        
                        //$datass['loading_status'] = 0;
                        $datass['assign_date'] = $date;
        
        
                        $datass['assign_time'] = $time;
                        $datass['assign_date_time'] = date('Y-m-d g:i:s');
                        $datass['finance_status'] = 3;
                        
        
        
                        if($this->session->userdata["logged_in"]["access"] == 12) 
                        {
                            $datass["tl_approved_status"] = 0;
                        }
        
                         if($trip_id!='0')
                         {
                               
                               $datass['trip_id'] = $trip_id;
                               $datass['assignexisting'] = 1;
        
                         }
                         else
                         {
        
                              $datass['trip_id'] = $vehicle_number.$timedata;
           
        
                         }
        
        
                        $this->db->query("UPDATE orders_process SET  seq_status='0'  WHERE trip_id='".$datass['trip_id']."'");
        
         
        
                       $JOIN=' JOIN order_delivery_order_status as ds ON a.id=ds.order_id';
                       $where = ' AND ds.dispatch_status=1';
                       $sort_id=0;
                       $query = $this->db->query("SELECT MAX(ds.sort_id) as sort_id ,a.return_id ,a.id FROM orders_process as a  $JOIN WHERE a.deleteid='0' AND ds.driver_id='".$driver_id."'  AND ds.trip_id='".$datass['trip_id']."' $where");
                        $resultsc = $query->result();
                        foreach ($resultsc as $valuesc)
                        {
        
                              $sort_id = $valuesc->sort_id;
                             
                           
                        }
                        
                         
                       
                        $datass['sort_id'] = $sort_id+1;
        
        
        
        
                        $query = $this->db->query("SELECT return_id ,id FROM orders_process as a    WHERE a.id='".$orderid_data[$i]."'");
                        $resultsc = $query->result();
                        foreach ($resultsc as $valuesc)
                        {
        
                             
                              $return_id = $valuesc->return_id;
                              $return = $valuesc->id;
                           
                        }
        
                       
                         if($return_id>0)
                        {
                             
                              $datass['reason'] = 'Return Trip Assigned';
                              //$datass['assign_status'] = 1;
        
        
                        }
                        else
                        {
                               $datass['reason'] = 'Ready for loading';
                               $datass['assign_status_11_date'] = date('Y-m-d');
                               $datass['assign_status_2_date'] = NULL;
                               $datass['assign_status_3_date'] = NULL;
        
                                $this->db->query("UPDATE order_delivery_order_status SET 
                                assign_status_11_date='".$datass['assign_status_11_date']."',
                                assign_status_2_date=NULL,
                                assign_status_3_date=NULL
                                WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
                             
                        }
        
                        $tablename = $form_data->tablenamemain;
                        $this->Main_model->update_commen($datass, $tablename);
        
                        if($return_id>0)
                        {
        
        
        
                                $datarr['get_id'] = $return;
                                $driver_return =0;
                                $results_sales_order = $this->Main_model->where_names('order_sales_return_complaints', 'id', $return_id);
                                foreach ($results_sales_order as $ddr)
                                {
        
        
                                      $driver_return = $ddr->driver_return;
                                      $delivery_status_return = $ddr->delivery_status;
                                   
                                }
        
                                if($driver_return!=2)
                                {
                                    $datarr['assign_status'] = '1';
                                    $datarr['assign_status_1_date'] = date('Y-m-d');
                                    $datarr['seq_status'] = '1';
        
                                $this->db->query("UPDATE order_delivery_order_status SET 
                                assign_status_1_date='".$datarr['assign_status_1_date']."'
                                WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
                                }
                                 if($driver_return==2)
                                {
        
                                    $datarr['assign_status'] = '12';
                                    $datarr['assign_status_12_date'] = date('Y-m-d');
                                    $datarr['assign_status_2_date'] = NULL;
                                    $datarr['assign_status_3_date'] = NULL;
        
                                $this->db->query("UPDATE order_delivery_order_status SET 
                                assign_status_12_date='".$datarr['assign_status_12_date']."',
                                assign_status_2_date=NULL,
                                assign_status_3_date=NULL
                                WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
                                }
        
                                if($delivery_status_return==1)
                                {
        
        
                                        $datarr['reason']='Return Dispatch Assigned';
                                        $datarr['finance_status'] = '3';
                                        $datarr['assign_status'] = 11;
                                        $datarr['assign_status_11_date'] = date('Y-m-d');
                                        $datarr['assign_status_12_date'] = NULL;
                                        $datarr['assign_status_2_date'] = NULL;
                                        $datarr['assign_status_3_date'] = NULL;
                                        $this->Main_model->update_commen($datarr, 'orders_process');
                                        $this->db->query("UPDATE order_sales_return_complaints SET start_reading='0',km_reading_end='0',driver_id='".$datass['driver_id']."',vehicle_id='".$datass['vehicle_id']."',trip_id='".$datass['trip_id']."',remarks='Return Dispatch Assigned',order_base='1'  WHERE id='".$return_id."'"
                                        );
        
                                $this->db->query("UPDATE order_delivery_order_status SET 
                                assign_status_12_date=NULL,
                                assign_status_11_date='".$datarr['assign_status_11_date']."',
                                assign_status_2_date=NULL,
                                assign_status_3_date=NULL
                                WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
        
        
                                }
                                else
                                {
        





                                        $datarr['reason']='Driver Return Trip Assigned';
                                        $datarr['finance_status'] = '3';
                                        $this->Main_model->update_commen($datarr, 'orders_process');

               $checkcount = $this->db->query("SELECT SUM(qty) as totalqty,SUM(return_qty_pick) as total_return_qty_pick FROM sales_return_products  WHERE c_id='" . $return_id . "'");
               $checkcount = $checkcount->result();

               if(count($checkcount)>0)
               {
                  foreach($checkcount as $vb)
                  {
                    
                    if($vb->totalqty<=$vb->total_return_qty_pick)
                    {

                $this->db->query("UPDATE order_sales_return_complaints as a JOIN sales_return_products as b ON a.id=b.c_id SET a.start_reading='0',a.km_reading_end='0',a.driver_id='".$datass['driver_id']."',a.vehicle_id='".$datass['vehicle_id']."',a.trip_id='".$datass['trip_id']."',a.remarks='Driver Return Trip Assigned',a.order_base='2'  WHERE a.id='".$return_id."' AND b.return_picked=1");

                    }


                  }
               }

       

                
                                        




        
                                }
        
        
        
        
        
        $assingdate=date('Y-m-d');
        $this->db->query("UPDATE order_delivery_order_status SET start_reading='0',km_reading_end='0',assign_date='".$datass['assign_date']."',trip_id='".$datass['trip_id']."',driver_id='".$datass['driver_id']."',vehicle_id='".$datass['vehicle_id']."',sort_id='".$datass['sort_id']."',finance_status='".$datarr['finance_status']."',assign_status='".$datarr['assign_status']."',assign_time='".$time."',reason='".$datarr['reason']."',dispatch_status='1',assign_status_12_date='".$assingdate."',assign_status_11_date='".$assingdate."' WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
        
                            
                               
        
        
        
        
                        }
                        else
                        {
        
                           
        
                            $this->db->query("UPDATE order_delivery_order_status SET start_reading='0',km_reading_end='0',assign_date='".$datass['assign_date']."',trip_id='".$datass['trip_id']."',driver_id='".$datass['driver_id']."',vehicle_id='".$datass['vehicle_id']."',sort_id='".$datass['sort_id']."',finance_status='".$datass['finance_status']."',assign_status='".$datass['assign_status']."',assign_time='".$time."',reason='".$datass['reason']."',dispatch_status='1' WHERE order_id='".$orderid_data[$i]."' AND dispatch_status=0 AND deleteid=0 AND randam_id='".$randam_id."'");
        
        
        
        
                        }
                        
        
        
                        
        
        
        
        
        
              $checkcount = $this->db->query("SELECT SUM(qty) as totalqty FROM order_product_list_process  WHERE order_id='" . $orderid_data[$i] . "'  AND deleteid=0 ORDER BY id DESC");
              $checkcount = $checkcount->result();
        
              $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_id='" . $orderid_data[$i] . "' AND pickedstatus=1   ORDER BY id DESC");
              $resultcss = $resultmainss->result();
              $total_nos=0;
              $total_qty=0;
              foreach($resultcss as $vl)
              {
                                                     
                           $randam_id=$vl->randam_id;
                           $product_order_id=$vl->id;
                           $total_nos+=intval($vl->nos);
                           $total_qty+=intval($vl->qty);
                           $this->db->query("UPDATE order_product_list_process SET dispatch_status='1' WHERE id='".$product_order_id."' AND picked_status=1 AND randam_id='".$randam_id."'");
        
              }
        
        $firsttotal=round($checkcount[0]->totalqty);
        $secondtotal=round($total_qty);
        
        
                if($firsttotal!=$secondtotal)
                {
                                      $dil_status['dispatch_status'] = 0;
                                      $dil_status['assign_status'] = 0;
                                      $dil_status['order_id'] = $orderid_data[$i];
                                      $dil_status['finance_status'] = 2;
                                      $dil_status['reason'] = 'Partial Pick Pending';
                                      $dil_status['create_date'] = $date;
                                      $dil_status['create_time'] = $time;
                                      $dil_status['delivery_date'] =$date;
                                      $dil_status['delivery_time'] =$time;
        
        
        
                                      if($delivery_status==2)
                                      {
        
        
                                        if($return_id==0)
                                        {
        
        
        
        
        
                                            $ssd = $this->db->query("SELECT * FROM order_delivery_order_status  WHERE randam_id='" . $randam_id . "' AND return_base=1");
                                            $ssd = $ssd->result();
                                            $ssd=count($ssd);
                                            if($ssd==0)
                                            {
                                                // $this->Main_model->insert_commen($dil_status, 'order_delivery_order_status');
                                            }
        
        
                                            if($ssd>0)
                                            {
        
                          //  $this->db->query("UPDATE order_delivery_order_status SET finance_status='3',assign_status='1',reason='Driver Return Trip Assigned' WHERE order_id='".$orderid_data[$i]."'  AND randam_id='".$orderid_rand[$i]."'");                    
        
                                            }
        
        
        
        
                                       }
        
        
                                       
        
                                      }
                                      
        
                }
                                        
        
        
        
        
        
        
        
        
        
        
        
        
         $querygettrips = $this->db->query("SELECT trip_id FROM order_delivery_order_status WHERE    delivery_status=2 AND vehicle_id='".$vehicle_id_data."' AND assign_status IN ('12','11') AND  finance_status=3 AND dispath_load_status_view=0 ORDER BY id DESC");
          $trips= $querygettrips->result();
           $this->db->query("UPDATE vehicle SET assiend_count='".count($trips)."'  WHERE id='".$vehicle_id_data."'");
        
        
        
        
                        
        
                        $results = $this->Main_model->where_names_two_order_by('order_delivery_order_status', 'order_id', $orderid_data[$i], 'randam_id', $randam_id, 'id', 'ASC');
                        foreach ($results as $orders) {
        
        
        
        
                            $delivery_date_time = date(
                                "d-m-Y",
                                strtotime($orders->delivery_date)
                            );
                            $create_date = date(
                                "d-m-Y",
                                strtotime($orders->create_date)
                            );
        
        
        
                            $resultsget = $this->Main_model->where_names(
                                "orders_process",
                                "id",
                                $orders->order_id
                            );
        
                            foreach ($resultsget as $get) {
                                $id = $get->id;
                                $order_no = $get->order_no;
                                $customer_id = $get->customer_id;
                                $bill_total = $get->bill_total;
                            }
        
        
        
        
                            $delivery_status = $orders->delivery_status;
                            $assign_status = $orders->assign_status;
        
        
                            $vehicle_number = "";
                            $vehicle_name = "";
                            $vehicle = $this->Main_model->where_names(
                                "vehicle",
                                "id",
                                $orders->vehicle_id
                            );
                            foreach ($vehicle as $vehicle_v) {
                                $vehicle_name = $vehicle_v->vehicle_name;
                                $vehicle_number = $vehicle_v->vehicle_number;
                                $vehicle_id = $vehicle_v->id;
                            }
        
                            $customers_data = $this->Main_model->where_names(
                                "customers",
                                "id",
                                $customer_id
                            );
                             $userid_sales=0;
                            foreach ($customers_data as $csvalv) {
                                $phone = $csvalv->phone;
                                 $userid_sales = $csvalv->sales_team_id;
                            }
        
        
                                           $result = $this->Main_model->where_names(
                                                "driver",
                                                "vehicle_id",
                                                $vehicle_id
                                            );
                                            foreach ($result as $value) 
                                            {
                                                $driver_id = $value->id;
                                                $driver_name = $value->name.' | '.$value->phone;
                                                
                                            }
        
        
                        }
        
                        $msg =
                            'Greetings from Zaron Industries
        
        Your order number  ' .
                            $order_no .
                            " will be assigned through the vehicle number  " .
                            $vehicle_number .
                            " Driver   " .
                            $driver_name .
                            " on " .
                            $delivery_date_time;
        
                         
                        $this->whats_app_send($phone, $msg, "orders_process", $id,$userid_sales);
        
        
                                                    $datassh['userid'] = $this->userid;
                                                    $datassh['order_id'] = $order_no;
                                                    $datassh['tablename'] = 'orders_process';
                                                    $datassh['order_no'] = $order_no;
                                                    $datassh['inputname'] ='Order Assign';
                                                    $datassh['notes'] =' Order Assign';
                                                    $this->Main_model->insert_commen($datassh, 'bill_changes_log');
        
        
                                                    $username ='';
                                                    $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                                    foreach ($user_group_team as  $team) {
                                                                        $username=$team->name.' - '.$this->userid;
                                                                        
                                                    }
                                                    $day_log['username'] = $username;
                                                    $day_log['changes'] = '';
                                                    $day_log['table_name'] = 'orders_process';
                                                    $day_log['reference_no'] = $order_no;
                                                    $day_log['create_date'] =$date;
                                                    $day_log['create_time'] =$time;
                                                    $day_log['details'] =' Order Assign';
                                                    $this->Main_model->insert_commen($day_log, 'day_log');
                     
        
                    }
                }
        
        
        
                     
            }
            
            
        
        
        
        









 public function ordercollections() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $sortingInput_data = $form_data->sortingInput_data;
        $sortingInput_data = explode('|', $sortingInput_data);
        $orderid_data = $form_data->orderid_data;
        $orderid_data = explode('|', $orderid_data);
        $vehicle_id_data = $form_data->vehicle_id_data;
        // $vehicle_id_data= explode('|', $vehicle_id_data);

        $timedata=time();

        for ($i = 0;$i < count($orderid_data);$i++)
        {







            $datass['get_id'] = $orderid_data[$i];
            $datass['vehicle_id'] = $vehicle_id_data;
            if ($vehicle_id_data != '') {
                $result = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id_data);
                foreach ($result as $value) {
                    $driver_id = $value->id;
                }
                $datass['driver_id'] = $driver_id;
                $datass['assign_status'] = 1;
                $datass['assign_status_1_date'] = date('Y-m-d');
                $datass['loading_status'] = 0;
                $datass['assign_date'] = $date;
                $datass['assign_time'] = $time;
                $datass['assign_date_time'] = date('Y-m-d g:i:s');
                $datass['finance_status'] = 3;
                $datass['reason'] = 'Order Collection';
                $datass['trip_id'] = $vehicle_id_data.$timedata;

 





$sort_id=0;
$query = $this->db->query("SELECT MAX(a.sort_id) as sort_id FROM orders_process as a WHERE a.deleteid='0' AND a.driver_id='".$driver_id."' AND a.assign_status=1 AND a.finance_status=3");
                $resultsc = $query->result();
                foreach ($resultsc as $valuesc)
                {

                      $sort_id = $valuesc->sort_id;
                   
                }

                 

                $datass['sort_id'] = $sort_id+1;



                $tablename = $form_data->tablenamemain;
                $this->Main_model->update_commen($datass, $tablename);





                                            $username ='';
                                            $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                            foreach ($user_group_team as  $team) {
                                                                $username=$team->name.' - '.$this->userid;
                                                                
                                            }
                                            $day_log['username'] = $username;
                                            $day_log['changes'] = '';
                                            $day_log['table_name'] = 'orders_process';
                                            $day_log['reference_no'] = $datass['get_id'];
                                            $day_log['create_date'] =$date;
                                            $day_log['create_time'] =$time;
                                            $day_log['details'] ='Order Collection';
                                            $this->Main_model->insert_commen($day_log, 'day_log');
             














            }












        }
    }
    










    
     public function orderassign_return() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $sortingInput_data = $form_data->sortingInput_data;
        $sortingInput_data = explode('|', $sortingInput_data);
        $orderid_data = $form_data->orderid_data;
        $orderid_data = explode('|', $orderid_data);
        $vehicle_id_data = $form_data->vehicle_id_data;
        // $vehicle_id_data= explode('|', $vehicle_id_data);
        for ($i = 0;$i < count($orderid_data);$i++) {
            
            
            $datass['get_id'] = $orderid_data[$i];
            $datass['vehicle_id'] = $vehicle_id_data;
            if ($vehicle_id_data != '') 
            {
                $result = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id_data);
                foreach ($result as $value) {
                    $driver_id = $value->id;
                    $driver_name = $value->name;
                }
                $results = $this->Main_model->where_names('order_sales_return_complaints', 'id', $datass['get_id']);
                foreach ($results as $values) {
                    $customer_id = $values->customer;
                   
                }
                
                $query = $this->db->query("SELECT b.route_id FROM customers as a  JOIN locality as b ON a.locality=b.id   WHERE a.deleteid='0' AND a.id='".$customer_id."'");
                $resultsc = $query->result();
                foreach ($resultsc as $valuesc) {
                    $route_id = $valuesc->route_id;
                   
                }
                
                $datass['driver_id'] = $driver_id;
                $datass['driver_assign'] = 1;
                $datass['assign_date'] = $date;
                $datass['assign_time'] = $time;
                $datass['order_base'] = 1;
                $datass['route_id'] = $route_id;
                $datass['otp'] = '1234';
                $datass['remarks'] = 'Assign To Driver '.$driver_name;
                $datass['vehicle_id'] = $vehicle_id_data;
                $datass['trip_id'] = time();
              

                $tablename = $form_data->tablenamemain;

                $sort_id=0;
                $query = $this->db->query("SELECT MAX(a.sort_id) as sort_id FROM order_sales_return_complaints as a    WHERE a.deleteid='0' AND a.driver_id='".$driver_id."'");
                $resultsc = $query->result();
                foreach ($resultsc as $valuesc)
                {

                      $sort_id = $valuesc->sort_id;
                   
                }

                 

                $datass['sort_id'] = $sort_id+1;




                
                $this->Main_model->update_commen($datass, $tablename);
                
                
                
                
                
                
                $datassh['c_id'] = $datass['get_id'];
                $datassh['create_date'] = $date;
                $datassh['create_time'] = $time;
                $datassh['order_base'] = 1;
                $datassh['remarks'] = 'Assign To Driver '.$driver_name;
                 $datassh['user_id'] = $this->userid;
                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
                
                
                
            }
        }
    }
    
    
    
    public function save_content_by_overview()
    {
         $input_text = $_POST['input_text'];
         $order_id = $_POST['order_id'];
        
         $tablename = $_POST['tablename'];
         
         if($tablename=='orders_quotation')
         {
             $order_id='QC_'.$order_id;
         }
         else
         {
             $order_id='OR_'.$order_id;
         }
        
        $this->db->query("DELETE FROM overview_invoice_content_base_order  WHERE order_id='" . $order_id . "'");
        
        
        
        
        for ($i = 0;$i < count($input_text);$i++) {
            $datass['input_text'] = $input_text[$i];
            $datass['order_id'] = $order_id;
            $this->Main_model->insert_commen($datass, 'overview_invoice_content_base_order');
        }


if(isset($_POST['notes']))
{
      if($_POST['notes']!='')
      {

            $datass['input_text'] = $_POST['notes'];
            $datass['order_id'] = $order_id;
            $this->db->query("UPDATE $tablename SET notes='".$_POST['notes']."' WHERE id='" . $_POST['order_id'] . "'");
            $this->Main_model->insert_commen($datass, 'overview_invoice_content_base_order');
      }
}

      
          
       
        redirect($_SERVER['HTTP_REFERER']);
        
        
        
        
    }
    public function productimagesave() {
        $form_data = json_decode(file_get_contents("php://input"));

        
        $tablename_sub = $form_data->tablename_sub;
        $id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        define('UPLOAD_DIR', 'uploads/');
        $img = $form_data->imgBase64;
        $img = str_replace('data:image/png;base64,', '', $img);
        $img = str_replace(' ', '+', $img);
        $data = base64_decode($img);
        $file = UPLOAD_DIR . uniqid() . '.png';
        $success = file_put_contents($file, $data);
        print $success ? $file : 'Unable to save the file.';
        $datass_val['get_id'] = $id;
        $datass_val['base_id'] = $form_data->image_id;
        $datass_val['reference_image'] = $file;
        $datass_val['uom_image'] = $form_data->uomget;  
        $datass_val['img_width']=$form_data->img_width;        
        $datass_val['input_values'] = $form_data->ridge_value_set;
        $datass_val['color_side'] = $form_data->color_side;
        $dataprod = $this->Main_model->where_names_row('*','product_images','id',$form_data->image_id);

        // if($form_data->product_id == 13 || $form_data->product_id == 5 || $form_data->product_id == 489|| $form_data->product_id == 798 || $form_data->product_id == 489 || $form_data->product_id == 798 || $form_data->product_id == 488 || $form_data->product_id == 480 || $form_data->product_id == 600 || $form_data->product_id == 710 || $form_data->product_id == 711 || $form_data->image_id == 10872 || $form_data->image_id == 11165 || $form_data->image_id == 10850 || $form_data->image_id == 8671 || $form_data->image_id == 10864 || $form_data->image_id == 9146 || $form_data->image_id == 9145 || $form_data->image_id == 11171 || $form_data->image_id == 11170){ // stiffner & Down take clamp

        if($dataprod->lenghtshow == "NO"){ // stiffner & Down take clamp
         
           if($form_data->image_id == 10872 || $form_data->image_id == 11165){
            $datass_val['image_length']=$form_data->image_length;
            }
              
            if($form_data->image_id == 10850 || $form_data->image_id == 8671){
                $datass_val['profile']=$form_data->img_width;
                $datass_val['crimp']=$form_data->image_length;
                
            }else if($form_data->image_id == 9146 || $form_data->image_id == 9145 || $form_data->image_id == 11171 || $form_data->image_id == 11170 ){
                $datass_val['image_length']=$form_data->image_length;
                $datass_val['uom'] = $form_data->uomget;
            }
            else{
                $datass_val['profile']=$form_data->image_length;
                $datass_val['uom'] = $form_data->uomget;
            }
            

        }else{

            if($form_data->uomget==3) //feet
                {
                    $img_width = $form_data->img_width;
                }
                if($form_data->uomget==6) //inch
                {
                    $img_width = $form_data->img_width/12;
                }
                if($form_data->uomget==4) // mm 
                {
                    $img_width = $form_data->img_width/304.8;
                }
                if($form_data->uomget==5) //mtr
                {
                    $img_width = $form_data->img_width* 3.281;
                }
                $datass_val['img_width']=$img_width;
            }
        $this->Main_model->update_commen_where($datass_val, 'id', $tablename_sub);
        
    }
    public function productimagesavechoose() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $id = $form_data->order_product_id;
        $image_id = $form_data->image_id;
        $result = $this->Main_model->where_names('product_images', 'id', $image_id);
        $file = "";
        foreach ($result as $value) {
            $file = $value->product_image;
        }
        $datass_val['get_id'] = $id;
        $datass_val['reference_image'] = $file;
        $this->Main_model->update_commen_where($datass_val, 'id', $tablename_sub);
    }



    public function checkValCommission() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['commission_check'] = $status;
        //$datass_val['bill_total_rate'] = 0;

        if($tablenamemain=='orders_process')
        {

                    $datass_val['order_base'] = 1;
                    //$datass_val['reason'] = 'Commission Unchecked';

        }



        $this->Main_model->update_commen($datass_val, $tablenamemain);
        if ($status == 0)
        {
          

            $tablename_sub = $form_data->tablename_sub;
            $datass['get_id'] = $id;
            $datass['commission'] = 0;
            
            $this->Main_model->update_commen_where($datass, 'order_id', $tablename_sub);

 
             $commissionrateset = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $id, 'deleteid', '0', 'id', 'ASC');
             foreach ($commissionrateset as $vlrate) 
             {



                  $rateval=$vlrate->rate+$vlrate->commission;
                  $commission_fact=$vlrate->commission_fact;
                  $amounts=$rateval*$vlrate->qty;
                  $datassrate['get_id'] = $vlrate->id;
                  $datassrate['amount'] = round($amounts,2);
                  $this->Main_model->update_commen_where($datassrate, 'id', $tablename_sub);




             }






        }

  $order_no = $form_data->order_no;
  $tablename_sub = $form_data->tablename_sub;
   date_default_timezone_set("Asia/Kolkata"); 
                                               $date= date('Y-m-d');
                                               $time= date('h:i A');

                                             $username ='';
                                             $user_group_team = $this->Main_model->where_names('admin_users','id',$this->userid);
                                             foreach ($user_group_team as  $team) {
                                                                $username=$team->name.' - '.$this->userid;
                                                                
                                             }
                                            $day_log['userid'] = $this->userid;
                                            $day_log['inputname'] = 'ORDER COMMISSION CHECK '.$status;
                                            $day_log['tablename'] = $tablename_sub;
                                            $day_log['order_id'] = $id;
                                            $day_log['order_no'] = $order_no;
                                            $day_log['notes'] ='ORDER COMMISSION';
                                            $this->Main_model->insert_commen($day_log, 'bill_changes_log');



    }






      public function checkValCommissionfact() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $cate_id = $form_data->cate_id;
        $datass_val['get_id'] = $id;
        $datass_val['commission_check_fact'] = $status;

        if($status==0)
        {


        //$datass_val['bill_total_fact'] = 0;


        }


        if($tablenamemain=='orders_process')
        {
        $datass_val['order_base'] = 1;
        //$datass_val['reason'] = 'Commission Fact Unchecked';
        }
        $this->Main_model->update_commen($datass_val, $tablenamemain);

        $ids=array();
        if($status == 0)
        {
          

          
             $commissionrateset = $this->Main_model->where_names_three_order_by($tablename_sub, 'order_id', $id,'categories_id', $cate_id, 'deleteid', '0', 'id', 'ASC');
             foreach ($commissionrateset as $vlrate) 
             {



                  $ids[] =  array('id' => $vlrate->id,'commission_fact'=>$vlrate->commission_fact);
                  $commission_fact=$vlrate->commission_fact;
                  $amounts=$rateval*$vlrate->qty;
                  $datassrate['get_id'] = $vlrate->id;

                  if($commission_fact>0)
                  {
                      $datassrate['fact'] = $commission_fact;
                  
                  $datassrate['commission_fact_status'] = 0;
                  $datassrate['commission_fact'] = 0;
                  $this->Main_model->update_commen_where($datassrate, 'id', $tablename_sub);


                  }




             }




          $error=2;

        }
        else
        {

 
             

            $error=1;


        }





$day_log['userid'] = $this->userid;
$day_log['inputname'] = 'ORDER COMMISSION FACT CHECK '.$status;
$day_log['tablename'] = $tablename_sub;
$day_log['order_id'] = $id;
$day_log['order_no'] = $order_no;
$day_log['notes'] ='ORDER COMMISSION FACT';
$this->Main_model->insert_commen($day_log, 'bill_changes_log');


          $array = array('error' => $error,'commission_fact' => $commission_fact, 'id' => $ids);
         echo json_encode($array);









    }








 public function checkValGSTBase() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['base_check'] = $status;
        $this->Main_model->update_commen($datass_val, $tablenamemain);
        
    }



    public function checkValGST() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['gst_check'] = $status;
        $this->Main_model->update_commen($datass_val, $tablenamemain);
        $tablename_sub = $form_data->tablename_sub;
        $datass['get_id'] = $id;
        $datass['gst_check'] = $status;
        $this->Main_model->update_commen_where($datass, 'order_id', $tablename_sub);
    }

public function checkValSSD() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['SSD_check'] = $status;
        $this->Main_model->update_commen($datass_val, $tablenamemain);
       
    }



    public function excessamount() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['excess_payment_status'] = $status;
        $this->Main_model->update_commen($datass_val, $tablenamemain);
       
    }

    public function image_length_update() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $datass['get_id'] = $form_data->order_product_id;
        $datass['image_length'] = $form_data->image_length;
        //$datass['base_id'] = $form_data->base_no;
        $this->Main_model->update_commen_where($datass, 'id', $tablename_sub);
    }
     public function image_weight_length_update() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $datass['get_id'] = $form_data->order_product_id;
        $datass['weight'] = $form_data->weight;
        
        $this->Main_model->update_commen_where($datass, 'id', $tablename_sub);
    }
    public function specificationFind() {
        $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'sort_order_id', 'ASC');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $product_order_id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        $value_id = "";
        $output = array();
        $results = $this->Main_model->where_names($tablename, 'id', $product_order_id);
        foreach ($results as $values)
        {
            foreach ($additional_information as $vl) 
            {
                $label_name = strtolower($vl->label_name);
                $output[$label_name] = $values->$label_name;
            }
            $output['product_name'] = $values->product_name;
        }
        echo json_encode($output);
    }
    public function fetch_data_size_options_values() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $product_order_id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        $value_id = "";
        $viewstatus = 1;
        $section_lable = array();
        $section_value = array();
        $degree_value = array();
        $array = array();
        $results = $this->Main_model->where_names($tablename, 'id', $product_order_id);
        foreach ($results as $values) {
            if ($values->categories_id == 32) {
                $viewstatus = 0;
                if ($values->section_lable != "") {
                    $section_lable = str_replace('|', '', $values->section_lable);
                    $section_value = str_replace('|', '', $values->section_value);
                    $degree_value = str_replace('|', '', $values->degree);
                }
            } else {
                $viewstatus = 1;
                if ($values->section_lable != "") {
                    $section_lable = explode('|', $values->section_lable);
                    $section_value = explode('|', $values->section_value);
                    $degree_value = explode('|', $values->degree);
                }
            }
        }
        if (count($section_lable) != 0) {
            if ($viewstatus == 0) {
                $array[] = array('viewstatus' => $viewstatus, 'section_lable' => $section_lable, 'section_value' => $section_value, 'degree_value' => $degree_value, 'lable' => $lable);
            } else {
                $lable = range('A', 'Z');
                for ($i = 0;$i < count($section_lable);$i++) {
                    $array[] = array('viewstatus' => $viewstatus, 'section_lable' => $section_lable[$i], 'section_value' => $section_value[$i], 'degree_value' => $degree_value[$i], 'lable' => $lable[$i]);
                }
            }
        }
        echo json_encode($array);
    }
    public function fetch_data_size_options_values_total() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $product_order_id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        $value_id = "";
        $section_lable = array();
        $section_value = array();
        $degree_value = array();
        $array = array();
        $results = $this->Main_model->where_names($tablename, 'id', $product_order_id);
        foreach ($results as $values) {
            if ($values->section_lable != "") {
                $section_lable = explode('|', $values->section_lable);
                $section_value = explode('|', $values->section_value);
                $degree_value = explode('|', $values->degree);
            }
        }
        $sizetotal = 0;
        if (count($section_lable) != 0) {
            $lable = range('A', 'Z');
            for ($i = 0;$i < count($section_lable);$i++) {
                $sizetotal+= $section_lable[$i];
            }
            $array = array('sizetotal' => $sizetotal);
        }
        echo json_encode($array);
    }
    public function overall_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;


            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }



            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Overall List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overall_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function fetch_data_table_date_waise() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $formdate = $_GET['formdate'];
        $todate = $_GET['todate'];
        $i = 1;
        $array = array();
        
        
        
         $search = $_GET['search'];
         if ($search != "") {
                     if($this->session->userdata['logged_in']['access']!=12)
                     {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                     }
                   
                     $where .= " AND a.order_no='" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%'  $sales_search";
            
         }
        
        
        
        
        
        
        
        
        
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state  FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $sql  $where ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
           $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state  FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'    $where $userslog  ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
            
      
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
            
             $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state  FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'    $where $userslog  ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
        }else{
            
            
            $query = $this->db->query("SELECT a.*,c.name,b.company_name,b.email,b.phone,b.sales_team_id,b.sales_team_sub_id,b.address1,b.address2,b.landmark,b.zone,b.pincode,b.state  FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'    $where   ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
        }
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
          
            
                   $order_by = $value->name;



           



           
            $company_name = $value->company_name;
            $email = $value->email;
            $phone = $value->phone;


            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
           

             $discountfulltotal = $value->bill_total;
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal,2), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge,  'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    public function serach_by_datas()
    {  
        
        
         $form_data = json_decode(file_get_contents("php://input"));
                     
         $search =$form_data->search;
         $array=array();
         $query = $this->db->query("SELECT company_name as name FROM  customers WHERE  company_name LIKE '%".$search."%'  ORDER BY id DESC LIMIT 0, 15");
         $result = $query->result();
       
        if(count($result)>0)
        {
           
            foreach ($result as  $value) {
                                                     
            $array[] = $value->name;
                                                    
            } 
           
        }
        else
        {
             $query = $this->db->query("SELECT phone as name FROM  customers WHERE   phone LIKE '%".$search."%' ORDER BY id DESC LIMIT 0, 15");
             $result = $query->result();
             if(count($result)>0)
             {
                     foreach ($result as  $value)
                     {
                                                             
                        $array[] = $value->name;
                                                            
                     } 
             
             }
             else
             {
                 
                 $query = $this->db->query("SELECT order_no as name FROM  orders_process WHERE   order_no LIKE '%".$search."' ORDER BY id DESC LIMIT 0, 15");
                 $result = $query->result();
                 if(count($result)>0)
                 {
                      foreach ($result as  $value)
                      {
                                                             
                        $array[] = $value->name;
                                                            
                      } 
                     
                 }
                 else
                 {
                     
                         $query = $this->db->query("SELECT vehicle_number as name FROM  vehicle WHERE   vehicle_number LIKE '%".$search."%' ORDER BY id DESC LIMIT 0, 15");
                         $result = $query->result();
                         if(count($result)>0)
                         {
                              foreach ($result as  $value)
                              {
                                                                     
                                $array[] = $value->name;
                                                                    
                              } 
                             
                         }
                         else
                         {
                             
                             $query = $this->db->query("SELECT name as name FROM  driver WHERE   name LIKE '%".$search."%' ORDER BY id DESC LIMIT 0, 15");
                             $result = $query->result();
                             if(count($result)>0)
                             {
                                  foreach ($result as  $value)
                                  {
                                                                         
                                    $array[] = $value->name;
                                                                        
                                  } 
                                 
                             }
                             
                         }
                     
                 }
                 
                 
             }
        }
       
       
      
        
        echo json_encode($array);
        
        
    }
    
     public function whats_app_send($phone, $msg, $tablename, $order_id,$userid)
    {


        



 
                             $whatapp_token =0;
                             $user_group_team = $this->Main_model->where_names('admin_users','id',$userid);
                             foreach ($user_group_team as  $team) 
                             {
                                                $whatapp_token=$team->whatapp_token;
                                               
                             }


        if($whatapp_token!='0')
        {



        $phone = "91" . $phone;

        $msg = urlencode($msg);

        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL =>
                "http://whatsappsms.creativepoint.in/api/sendText?token=".$whatapp_token."&phone=" .
                $phone .
                "&message=" .
                $msg,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
        ]);

        $response = curl_exec($curl);

        curl_close($curl);
        // echo  $response;

        $this->db->query(
            "UPDATE $tablename SET whats_app_send_responsive='" .
                $response .
                " " .
                $msg .
                "' WHERE id='" .
                $order_id .
                "'"
        );



         }


                         $results= $this->Main_model->where_names($tablename,'id',$order_id);
                         foreach ($results as  $values) {

                               $customer_id= $values->customer_id;
                              
                         }


                         //$this->customer_balance_report_pass($customer_id);





    }
    
      public function customer_balance_report_pass($customer_id)
    {


        



 
                          
$url = "https://erp.zaron.in/customer_balance_cron.php?customer_id=".$customer_id;

$curl = curl_init($url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

$response = curl_exec($curl);
curl_close($curl);

echo $response;






    }

      public function checkAndUpdate()
    {


                $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
                foreach ($order_last_count as $r)
                {
                    $neworder_id = $r->id + 1;
                }
                $order_no_new = strtoupper(date('M') . '/' . $neworder_id);
                 // exit;
                $data = $this->db->query('SELECT order_no,count FROM orders_process WHERE order_no = "'.$order_no_new.'" AND year = "'.date('Y').'" AND month = "'.date('M').'" AND order_base NOT IN (2)')->result_array();
                if(count($data) > 0)
                {

                    return $data[0]['count']+1;

                }
                else
                {
                    return $neworder_id;
                }
        


    }

     public function validateEntry($id)
    {


$query = $this->db->query("SELECT order_no,count,year,month,order_base,mobile_order FROM orders_process WHERE id=$id");
$res = $query->result_array();


$query = $this->db->query("SELECT id,order_no,count,year,month,order_base,mobile_order FROM orders_process WHERE order_no='".$res[0]['order_no']."' AND year = '".$res[0]['year']."' AND month = '".$res[0]['month']."' ORDER BY count DESC");

        $searchRes = $query->result_array();
        if(count($searchRes) > 1)
        {



            $mobile_order = $searchRes[0]['mobile_order'];
            $order_base = $searchRes[0]['order_base'];
            if($mobile_order=='1' && $order_base=='-2')
            {

                $order_last_count = $this->Main_model->order_last_count_mounth_year_customer('orders_process');
                foreach ($order_last_count as $r)
                {
                    $newModCount = $r->id + 1;
                }

            }
            else
            {

                $order_last_count = $this->Main_model->order_last_count_mounth_year('orders_process');
                foreach ($order_last_count as $r)
                {
                    $newModCount = $r->id + 1;
                }


            }
            





            $newModOrderNo = strtoupper(date('M') . '/' . $newModCount);
            $this->db->query("UPDATE orders_process SET order_no='".$newModOrderNo."',count='".$newModCount."' WHERE id='".$id."'");
            $this->db->query("UPDATE order_delivery_order_status SET order_no='".$newModOrderNo."' WHERE order_id='".$id."'");

            $notes='Order Process-'.$newModOrderNo;
            $deletemod='ORDER'.$newModOrderNo;
            $this->db->query("UPDATE all_ledgers SET deletemod='".$deletemod."',notes='".$notes."',process_by='".$notes."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_id='".$id."' AND party_type=1");
            //return $searchRes[0]['id'];





 $data_tcs = 'TCS-'.$newModOrderNo;
 $data_auto_roundoff = 'AUTOROUND-'.$newModOrderNo;
 $data_roundoff = 'ROUND-'.$newModOrderNo;
 $data_discount = 'DISCOUNT-'.$newModOrderNo;
 $data_sGst = 'SGST OUT - '.$newModOrderNo;
 $data_cGst = 'CGST OUT - '.$newModOrderNo;




 $this->db->query("UPDATE all_ledgers SET deletemod='".$data_tcs."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_tcs."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='166' AND party_type=5");


  $this->db->query("UPDATE all_ledgers SET deletemod='".$data_auto_roundoff."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_auto_roundoff."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='372' AND party_type=5");


   $this->db->query("UPDATE all_ledgers SET deletemod='".$data_roundoff."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_roundoff."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='372' AND party_type=5");


    $this->db->query("UPDATE all_ledgers SET deletemod='".$data_discount."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_discount."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='220' AND party_type=5");

 $this->db->query("UPDATE all_ledgers SET deletemod='".$data_sGst."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_sGst."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='585' AND party_type=5");

 $this->db->query("UPDATE all_ledgers SET deletemod='".$data_cGst."',reference_no='".$newModOrderNo."',order_no='".$newModOrderNo."',notes='".$data_cGst."',order_no='".$newModOrderNo."',reference_no='".$newModOrderNo."' WHERE order_base_id='".$id."' AND customer_id='586' AND party_type=5");






















        }


        
    }
    
    
         public function fetch_data_delivery_data_driver_view()
    {
        $i = 1;
        $array = [];
        $cate_status = "0";
        $tablename_sub = $_GET["tablename_sub"];
        $tablenamemain = $_GET["tablenamemain"];
        $convert = $_GET["convert"];
        $customer_id = 0;
        $paricel_mode = 0;
        $resultmain = $this->db->query(
            "SELECT * FROM $tablenamemain  WHERE id='" .
                $_GET["order_id"] .
                "' AND deleteid=0 ORDER BY id ASC"
        );
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            //$paricel_mode = $valuecs->paricel_mode;
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query(
            "SELECT * FROM $tablename_sub  WHERE order_id='" .
                $_GET["order_id"] .
                "' AND  paricel_mode='" .
                $paricel_mode .
                "' AND deleteid=0  AND product_id!='' ORDER BY categories_id,sort_id ASC"
        );
        $result = $result->result();
        foreach ($result as $value) {
            $amount = $value->amount;

            $same = 0;

            $qty = round($value->qty, 4);
            if ($value->paricel_mode == "1") {
                $qty = $value->modify_qty;
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            $imagestatus = 1;
            if ($value->reference_image == "") {
                $imagestatus = 0;
            }
            if ($value->gst == "") {
                $value->gst = $gst;
            }
            $array[] = [
                "no" => $i,
                "id" => $value->id,
                "same" => $same,
                "imagestatus" => $imagestatus,
                "loadstatus" => $value->loadstatus,
                "order_id" => $value->order_id,
                "paricel_mode" => $value->paricel_mode,
                "product_name_tab" => $value->product_name,
                "tile_material_name" => $value->tile_material_name,
                "tile_material_id" => $value->tile_material_id,
                "categories" => $categories,
                "type" => $type,
                "description" => $description,
                "product_id" => $value->product_id,
                "categories_id" => $value->categories_id,
                "profile_tab" => round($profile, 3),
                "crimp_tab" => $crimp,
                "checked" => $value->checked,
                "dim_two" => $value->dim_two,
                "dim_one" => $value->dim_one,
                "dim_three" => $value->dim_three,
                "image_length" => $value->image_length,
                "gst" => $value->gst,
                "gst_check" => $value->gst_check,
                "extra_crimp" => $value->extra_crimp,
                "back_crimp" => $value->back_crimp,
                "proudtcion_no" => $value->proudtcion_no,
                "nos_tab" => $value->nos,
                "unit_tab" => $value->unit,
                "return_status" => $value->return_status,
                "fact_tab" => $value->fact,
                "uom" => $value->uom,
                "stock" => $stock,
                "kg_price" => $kg_price,
                "og_price" => $og_price,
                "og_formula" => $og_formula,
                "kg_formula2" => $kg_formula2,
                "billing_options" => $value->billing_options,
                "commission_tab" => $value->commission,
                "cate_status" => $cate_status,
                "categories_id_get" => $categories_id,
                "Meter_to_Sqr_feet" => round($value->Meter_to_Sqr_feet, 2),
                "Sqr_feet_to_Meter" => round($value->Sqr_feet_to_Meter, 2),
                "rate_tab" => $value->rate,
                "cul" => $value->cul,
                "qty_tab" => round($qty, 3),
                "addresstopariel" => $addresstopariel,
                "amount_tab"  => sprintf("%.2f",$amount),
            ];
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_single_data_totaldel_driver_view()
    {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $loadamount = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $result = $this->Main_model->where_names_two_order_by(
            $tablename,
            "order_id",
            $_GET["order_id"],
            "deleteid",
            "0",
            "id",
            "DESC"
        );

        foreach ($result as $value) {
            $rate = $value->rate + $value->commission;
            if ($value->paricel_mode == 1) {
                if ($value->modify_qty == 0) {
                    $value->modify_qty = $value->qty;
                }

                $amounttotals += round($rate * $value->modify_qty, 2);
                $amounttotal_with_out_commissions += round(
                    $value->rate * $value->modify_qty,
                    2
                );
                $fullqtys += $value->modify_qty;
            }

            $amounttotal += $value->amount;
            $amounttotal_with_out_commission += $value->rate * $value->qty;
            $fullqty += $value->qty;
            $amounttotalgst += ($rate * $value->qty * $value->gst) / 100;
            $Meter_to_Sqr_feet += $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter += $value->Sqr_feet_to_Meter;
            $commission += $value->commission;
            $nos += $value->nos;
            $unit += $value->unit;
            $fact += $value->fact;
        }

        $start_reading = "";
        $return_amount = 0;
        $resultdis = $this->Main_model->where_names_two_order_by(
            $tablenamemain,
            "id",
            $_GET["order_id"],
            "deleteid",
            "0",
            "id",
            "DESC"
        );
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $paricel_mode = $valuedis->paricel_mode;
            $delivery_mode = $valuedis->delivery_mode;
            $create_date = date("d/m/Y", strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $start_reading = $valuedis->start_reading;
            $trip_id = $valuedis->trip_id;
            $sort_id = $valuedis->sort_id;

            $discountfulltotal = $valuedis->bill_total;
            if ($valuedis->return_amount > 0) {
                $return_amount = $valuedis->return_amount;
            }
        }

        if ($roundoffstatus == 1) {
            $roundoffstatus = "+";
        } else {
            $roundoffstatus = "-";
        }

        $array = [
            "order_no_id" => $order_no,
            "sort_id" => $sort_id,
            "roundoffstatus" => $roundoffstatus,
            "trip_id" => $trip_id,
            "last_trip_sort_id" => $last_trip_sort_id,
            "loadtotalamount" => round($loadtotalamount),
            "return_amount" => round($return_amount),
            "user_id" => $user_id,
            "salesphone" => $salesphone,
            "salesphone2" => $salesphone2,
            "salesname" => $salesname,
            "reason" => $reason,
            "start_reading" => $start_reading,
            "paricel_mode" => $paricel_mode,
            "delivery_mode" => $delivery_mode,
            "production_assign" => $production_assign,
            "create_date" => $create_date,
            "create_time" => $create_time,
            "roundoff" => $minisroundoff,
            "fulltotal" => round($amounttotal),
            "discountfulltotal" => round($discountfulltotal),
            "totalitems" => count($result),
            "discount" => round($discount),
            "gsttotal" => round($amounttotalgst, 2),
            "commission" => round($commission, 2),
            "amounttotal_with_out_commission" => round(
                $amounttotal_with_out_commission
            ),
            "Meter_to_Sqr_feet" => round($Meter_to_Sqr_feet, 2),
            "Sqr_feet_to_Meter" => round($Sqr_feet_to_Meter, 2),
            "NOS" => round($nos, 2),
            "UNIT" => round($unit, 2),
            "FACT" => round($fact, 2),
            "fullqty" => round($fullqty, 2),
        ];
        echo json_encode($array);
    }
    
    public function insertandupdate_end_reading(){

        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');

        $form_data = json_decode(file_get_contents("php://input"));

        $id = $form_data->id;
        $endkm = $form_data->km_reading_end;
       
       
            $data['get_id']=$id;
            $data['trip_end_date']=$date;
            $data['km_reading_end']=$endkm;
            $data['trip_end_time']=$time;
            $this->Main_model->update_commen($data,' order_sales_return_complaints');
       
        $array = array('error' => '2', 'massage' => 'Option updated successfully');
        echo json_encode($array);
    }

     public function order_version_product() {
        if (isset($this->session->userdata['logged_in'])) {
            // $_GET['order_id'] = base64_decode($_GET['order_id']);
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            $version = 'O';
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if($this->session->userdata['logged_in']['access'] == '11')
            {            
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                           
            } 
            else 
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            // $data['enable_order'] =  base64_encode($_GET['order_id']);
            // $orderid = $_GET['order_id'];

            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);

            $data['sversion'] = $_GET['version'];
            $data['order_id'] = $neworder_id;
            // echo $neworder_id; exit;

            if($neworder_id){
                // think below lines are not used
                // $ver_data = $this->db->query("SELECT o.id AS order_id, o.version AS lversion, b.* FROM orders AS o LEFT JOIN enquiry_version AS b ON b.order_id = o.id WHERE b.order_id = $neworder_id ORDER BY b.id ASC");
                // $data['allversions'] = $ver_data->result();

                // echo "<pre>";
                // print_r($data['allversions']);
                // exit;

                $array = array();
                $OrderType = 'E'; 
                $orderversion = $this->Main_model->where_names('enquiry_version', 'order_id', $neworder_id);
                foreach ($orderversion as $value) {
                    
                    $orderversionData = array(
                        'id' => $value->order_id,
                        'name' => $value->version
                    );

                    if($value->fields == 'Q')
                        $OrderType = 'Q'; 

                    $array[] = $orderversionData;
                }

                $data['version_link'] = $array;
            }

            if($OrderType == 'E'){
                $data['old_tablename'] = '0';
                $data['version'] = 'O';
                $data['old_tablename_sub'] = '0';
                $data['tablename'] = 'orders';
                $data['tablename_sub'] = 'order_version_product_quatation';
                $data['movetablename'] = 'orders_quotation';
                $data['movetablename_sub'] = 'order_product_list_quotation';
                $data['order_title'] = 'Enquiry NO';
                $data['order_lable'] = 'Enquiry Create';
                $data['missed'] = 'Enquiry';
                $data['move'] = 'Quotation';
                $data['status_base'] = 0;
                $neworder_quotation_id = 1;
                $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);

                foreach ($order_last_count as $r) {
                    $neworder_quotation_id = $r->count_id + 1;
                }
                if ($neworder_quotation_id < 10) {
                    $neworder_quotation_id = '00' . $neworder_quotation_id;
                }
            }else{
                $data['old_tablename'] = '0';
                $data['version'] = 'O';
                $data['old_tablename_sub'] = '0';
                $data['tablename'] = '  orders_quotation';
                $data['tablename_sub'] = 'order_version_product_quatation';
                $data['movetablename'] = 'orders_quotation';
                $data['movetablename_sub'] = 'order_product_list_quotation';
                $data['order_title'] = 'Quotation NO';
                $data['order_lable'] = 'Quotation Create';
                $data['missed'] = 'Quotation';
                $data['move'] = 'Order';
                $data['status_base'] = 0;
                $neworder_quotation_id = 1;
                $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);

                foreach ($order_last_count as $r) {
                    $neworder_quotation_id = $r->count_id + 1;
                }
                if ($neworder_quotation_id < 10) {
                    $neworder_quotation_id = '00' . $neworder_quotation_id;
                }
            }

             $viewbase=1;
             if(isset($_GET['viewbase'])){
                $viewbase=1;
             }

             if($viewbase==1){
                    $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
                    if(count($resorder) > 0) {
                        foreach ($resorder as $data_val) {
                            $order_no = $data_val->order_no;
                            $data['order_id'] = $neworder_id;
                            $data['count_id'] = $neworder_quotation_id;
                            $data['order_no'] = $order_no;
                        }
                    } 
             } else {
                    $resorder = $this->Main_model->where_names_two_order_by($data['tablename'],'entry_user_id',$this->userid, 'id', $neworder_id,'id', 'ASC');
                    if(count($resorder) > 0) {
                        foreach ($resorder as $data_val) {
                            $order_no = $data_val->order_no;
                            $data['order_id'] = $neworder_id;
                            $data['count_id'] = $neworder_quotation_id;
                            $data['order_no'] = $order_no;
                        }
                    } else {

                        $order_last_count = $this->Main_model->order_last_count('orders');
                        foreach ($order_last_count as $r) {
                            $neworder_id = $r->id + 1;
                        }
                        $data['order_id'] = $neworder_id;
                        $data['count_id'] = $neworder_quotation_id;
                        $data['order_no'] = $neworder_id . '/' . $version . '/' .$this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
                    }
             }


            //$data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'View Revision';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_version_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function fetch_data_version() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub']; //'order_version_product_list';
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $sversion = $_GET['version'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
            $base_check = $valuecs->base_check;
        }
        $orderby = ($_GET['version'] == 'O') ? 'ASC' : 'DESC';

        $result = $this->db->query("SELECT * FROM $tablename_sub  
                WHERE order_id='" . $_GET['order_id'] . "' 
                AND deleteid=0 
                AND product_id>0 
                AND version ='" . $sversion . "'
                ORDER BY id $orderby");
    
                // echo "SELECT * FROM $tablename_sub  
                // WHERE order_id='" . $_GET['order_id'] . "' 
                // AND deleteid=0 
                // AND product_id>0 
                // AND version ='" . $sversion . "'
                // ORDER BY id $orderby";exit();
        $result = $result->result();
        foreach ($result as $value) {


            $rate=$value->rate+$value->commission;

            $amountdata =$rate * $value->qty;
            $amount = $amountdata;
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $weight = $csval->weight;
                $thickness= $csval->thickness;

                
                       if($tablenamemain=='purchase_orders_process')
                        {    
                             if($csval->purchase_name!='')
                             {
                                 $product_name = $csval->purchase_name;
                             }
                             
                        }
                
                
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                }elseif ($categories_id == '630') {
                    $cate_status = 1;
                } elseif ($categories_id == '2622') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 0;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } 
                elseif ($categories_id == '591' || $categories_id == '626' || $categories_id == '627' || $categories_id == '628') {
                    $cate_status = 1;
                }
                else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $this->db->query("UPDATE $tablename_sub SET cul='3' WHERE id='" . $value->id . "'");
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->qty * 10.764, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($value->base_id == "") {
                $value->base_id = 1;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
                $value->reference_image=0;
            }
            else
            {
                $value->reference_image=base_url().$value->reference_image;
            }
            
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            if ($value->count_id != '') {
                $count_id = $i;
            } else {
                $count_id = $i;
            }
            
            
                 $profile_edit=0;
                $crimp_edit=0;
                $fact_edit=0;
                $nos_edit=0;
                $qty_edit=0;
                $commission_edit=0;
            if($tablename_sub=='order_product_list_process')
            {
                $profile_edit=$value->profile_edit;
                $crimp_edit=$value->crimp_edit;
                $fact_edit=$value->fact_edit;
                $nos_edit=$value->nos_edit;
                $qty_edit=$value->qty_edit;
                $commission_edit=$value->commission_edit;
            }


           $sort_id= $value->sort_id;
           $sorthide=0;
           $resultmaincountset = $this->db->query("SELECT * FROM $tablename_sub  WHERE sort_id='" .$sort_id . "' AND deleteid=0 ORDER BY id ASC");
           $resultcsset = $resultmaincountset->result();
           if (count($resultcsset)>1) 
           {
               $sorthide=1;
           }
       

            $product_name_sub="";
           $product_list_sub = $this->Main_model->where_names('product_list', 'id', $value->sub_product_id);
            foreach ($product_list_sub as $csval_sub)
            {

                $product_name_sub=$csval_sub->product_name;
            }


         $rate= $value->rate+$value->commission;
         $rate_edit=0;
         if($value->rate_edit>0)
         {
             $rate_edit= $value->rate_edit+$value->commission;
         }
        

                $base_rate=round($rate/1.18,3);
           
            $array[] = array('no' => $count_id,
            'profile_edit' => round($profile_edit,3),
            'crimp_edit' => round($crimp_edit,3),
            'fact_edit' => round($fact_edit,3),
            'nos_edit' => round($nos_edit,3),
            'qty_edit' => round($qty_edit,3),
             'commission_edit' => round($commission_edit,3),
             'commission_fact' => $value->commission_fact,
            'id' => $value->id,
             'same' => $same,
             'base_rate' => $base_rate,
             'base_check' => $base_check,
             'sorthide' => $sorthide, 
             'imagestatus' => $imagestatus,
              'order_id' => $value->order_id,
              'activel_qty' => $value->activel_qty,
              'weight' => round($value->weight,3),
              'default_weight'=>round($weight,3),
              'thickness'=>$thickness,
              'sub_product_name_tab'=>$product_name_sub,
              'purchase_request' => $value->purchase_request,
              'purchase_id' => $value->purchase_id,
               'product_name_tab' => $product_name,
                'tile_material_name' => $value->tile_material_name,
                 'tile_material_id' => $value->tile_material_id,
                 'reference_image' => $value->reference_image,
                 'sub_product_id' => $value->sub_product_id, 
                 'categories' => $categories,
                  'type' => $type,
                   'description' => $description, 
                   'product_id' => $value->product_id,
                   'sort_id' => $value->sort_id,
                   'count_id' => $value->count_id,
                    'return_status' => $value->return_status,
                    'rate_edit' => round($rate_edit,2), 
                    'categories_id' => $value->categories_id,
                     'specifications' => $value->specifications,
                      'profile_tab' => round($profile,3), 
                      'crimp_tab' => round($crimp,3), 
                      'checked' => $value->checked, 
                      'dim_two' => $value->dim_two,
                       'dim_one' => $value->dim_one,
                        'dim_three' => $value->dim_three,
                         'image_length' => $value->image_length,
                          'gst' => $value->gst,
                           'gst_check' => $value->gst_check, 
                           'extra_crimp' => round($value->extra_crimp,3),
                            'back_crimp' => round($value->back_crimp,3),
                             'proudtcion_no' => $value->proudtcion_no,
                              'nos_tab' => round($value->nos,2),
                               'unit_tab' => $value->unit,
                                'return_status' => $value->return_status,
                                 'fact_tab' => round($value->fact,2), 
                                 'uom' => $value->uom,
                                  'base_id' => $value->base_id,
                                  'sub_product_id_edit' => $value->sub_product_id_edit,
                                   'stock' => $stock, 
                                   'kg_price' => $kg_price, 
                                   'og_price' => $og_price, 
                                   'og_formula' => $og_formula,
                                    'kg_formula2' => $kg_formula2, 
                                    'billing_options' => $value->billing_options,
                                     'commission_tab' => round($value->commission,2),
                                      'cate_status' => $cate_status, 
                                      'categories_id_get' => $categories_id,
                                       'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 2),
                                        'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 2),
                                         'rate_tab' => round($rate,2), 
                                         'cul' => $value->cul,
                                          'qty_tab' => round($qty,3), 
                                          'amount_tab' => sprintf("%.2f",$amount));
            $i++;
        }
        echo json_encode($array);
    }

    public function fetch_single_data_total_version() {
                $amounttotal = 0;
                $Meter_to_Sqr_feet = 0;
                $Sqr_feet_to_Meter = 0;
                $discount = 0;
                $fullqty = 0;
                $nos = 0;
                $unit = 0;
                $fact = 0;
                $commission = 0;
                $billtotal=0;
                $amounttotalgst = 0;
                $amounttotal_with_out_commission = 0;
                $form_data = json_decode(file_get_contents("php://input"));
                $tablenamemain = $form_data->tablenamemain;
                $tablename = 'order_version_product_quatation ';
                $convert = $form_data->convert;
                $sversion = $form_data->version;
                $approved_status = 1;

                $result1 = $this->db->query("SELECT * FROM enquiry_version  
                WHERE order_id='" . $_GET['order_id'] . "' 
                AND version ='" . $sversion . "'");
            
                $result = $result1->result();
                foreach ($result as $value) {

                    $sorder_no=$value->order_no;
                }

                $result = $this->db->query("SELECT * FROM order_version_product_quatation  
                WHERE order_id='" . $_GET['order_id'] . "' 
                AND deleteid=0 
                AND version ='" . $sversion . "'
                ORDER BY id ASC");
            
                $result = $result->result();

                // $result = $this->Main_model->where_names_two_order_by($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
                foreach ($result as $value) {

                    $rate=$value->rate+$value->commission;
                    $amounttotal+= $rate*$value->qty;
                    $amounttotal_with_out_commission+= $value->rate * $value->qty;
                    $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
                    $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
                    $billtotal+= $rate * $value->qty;
                    $commission+= $value->commission;
                    $fullqty+= $value->qty;
                    $nos+= $value->nos;
                    $unit+= $value->unit;
                    $fact+= $value->fact;


                    $amountset= $rate*$value->qty;
                    $this->db->query("UPDATE $tablename SET amount='".$amountset."' WHERE id='".$value->id."'");


                }


        $amounttotalgstamt= $billtotal/1.18;
        $amounttotalgst=$amounttotalgstamt*9/100;


        $statusviewdata = $this->db->query("SELECT b.uom FROM $tablename as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='".$_GET['order_id']."' AND  a.deleteid = '0' AND b.uom='Kg'");
        $statusviewdata = $statusviewdata->result();
            if(count($statusviewdata)>0)
            {
                $statusview=0;
            }
            else{
                $statusview=1;
            }               


                $user_id_check=0;

                $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
                foreach ($resultdis as $valuedis) {
                    $production_assign = $valuedis->production_assign;
                    $discount = $valuedis->discount;
                    $order_no = $valuedis->order_no;
                    $minisroundoff = $valuedis->roundoff;
                    $roundoffstatus = $valuedis->roundoffstatus;
                    $user_id = $valuedis->user_id;
                

                    $print_status = $valuedis->print_status;
                    if($valuedis->user_id>0)
                    {
                        $user_id_check = $valuedis->user_id;
                    }
                    
                    $create_date = date('d/m/Y', strtotime($valuedis->create_date));
                    $create_time = $valuedis->create_time;
                    $reason = $valuedis->reason;
                    $paricel_mode = $valuedis->paricel_mode;
                    $order_base = $valuedis->order_base;
                    $reason = $valuedis->reason;
                    $customer_id = $valuedis->customer_id;
                    $SSD_check = $valuedis->SSD_check;
                    $excess_payment_status = $valuedis->excess_payment_status;
                    $payment_mode = $valuedis->payment_mode;
                    $gst_check = $valuedis->gst_check;
                    $delivery_date_time = $valuedis->delivery_date_time;
                    $mark_date = $valuedis->mark_date;

                    $tcs_status=$valuedis->tcs_status;
                    $tcsamount=$valuedis->tcsamount;

                    $create_date_val = $valuedis->create_date;     

                    $commission_check = $valuedis->commission_check;
                    $commission_check_fact = $valuedis->commission_check_fact;
                    $bill_total_rate = $valuedis->bill_total_rate;
                    $without_commsision_total = $valuedis->without_commsision_total;

                }


                if($gst_check==0) 
                {
                    $amounttotalgst=0;
                }

                if ($minisroundoff == '') {
                    $minisroundoff = 0;
                }
                $salesphone = "";
                $salesname = "";
                $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
                foreach ($resultsales as $valuesales) {
                    $salesphone = $valuesales->phone;
                    $salesphone2 = $valuesales->phone2;
                    $salesname = $valuesales->name;
                }
                $roundoff = $amounttotal;
                if($roundoffstatus == 1)
                {
                    $discountfulltotal = $roundoff - $discount + $minisroundoff;
                    $amounttotal_with_out_commission_val = $amounttotal_with_out_commission - $discount + $minisroundoff;
                    $discountfulltotal_base = $roundoff - $discount;
                    $roundoff_val='+'; 


                } 
                else 
                {
                    $discountfulltotal = $roundoff - $discount - $minisroundoff;
                    $amounttotal_with_out_commission_val = $amounttotal_with_out_commission - $discount - $minisroundoff;
                    $discountfulltotal_base = $roundoff - $discount;
                    $roundoff_val='-';

                }


                $credit_limit = 0;
                
                $payment_terms = "";
                $delivery_status_check = "";
                $account_number = "";
                $customers_data = $this->Main_model->where_names(
                    "customers",
                    "id",
                    $customer_id
                );
                foreach ($customers_data as $csvalv) {
                    $credit_limit = $csvalv->credit_limit;
                    $approved_status = $csvalv->approved_status;
                    $payment_terms = $csvalv->payment_terms;
                    $account_number = $csvalv->account_number;
        $tcs_status_customer = $csvalv->tcs_status;
                    if ($payment_terms == "Credit") {
                        $delivery_status_check = 2;
                    }

                    if ($payment_terms == "Cash & Carry") {
                        $delivery_status_check = 1;
                    }
                }


                $tcsamount=0;
                $orgtcsamount=0;
                $withput_tcsamount=0;
                $table = array("orders","orders_process", "orders_quotation");

                if (in_array($tablenamemain, $table))
                {

                    if($tcs_status==1)
                    {

                                    $tcsamount=round($discountfulltotal*0.1/100);
                                    $orgtcsamount=round($discountfulltotal_base*0.1/100);
                                    $withput_tcsamount=round($amounttotal_with_out_commission_val*0.1/100);


                                    $finacel_year=date('2023-04-01');

                                if($create_date_val>=$finacel_year)  
                                {


                                $resultset = $this->db->query("SELECT SUM(a.bill_total) as totalamount FROM $tablenamemain as a  WHERE  a.id<'".$_GET['order_id']."' AND a.order_base = '1' AND a.create_date>='".$finacel_year."' AND a.tcs_status=0   AND a.customer_id='".$customer_id."'");
                                $resultset = $resultset->result();
                        
                                foreach ($resultset as $set)
                            {
                                    
                                                $tcsamountval=round($set->totalamount,2);
                                                $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
                                                if($tcsamountvaldata>5000000)
                                                {
                                                        $tcs_status=1;
                                                        $tcsamount=round($discountfulltotal*0.1/100);
                                                        $orgtcsamount=round($discountfulltotal_base*0.1/100);
                                                        $withput_tcsamount=round($amounttotal_with_out_commission_val*0.1/100);
                                                }
                                                else
                                                {
        
                                                        $tcs_status=0;
                                                        $tcsamount=0;

                                                }


                                                if($_GET["order_id"]=='33516')
                                                {


                                                    $check_tcs=682586;
                                                    $tcsamount=round($check_tcs*0.1/100);

                                                }
                                                    if($_GET["order_id"]=='37612')
                                                    {
                                                        $tcs_status=0;
                                                        $tcsamount=0;

                                                    }
                            
                                                
                    $this->db->query("UPDATE $tablenamemain SET tcs_status='" . $tcs_status . "',tcsamount='".$tcsamount."' WHERE id='" .$_GET["order_id"] ."'" );
                                                
                                        
                                    }


                                }   


                    }
                    else
                    {


                                $finacel_year=date('2023-04-01');

                                if($create_date_val>=$finacel_year)  
                                {


                                $resultset = $this->db->query("SELECT SUM(a.bill_total) as totalamount FROM $tablenamemain as a  WHERE  a.id<'".$_GET['order_id']."' AND a.order_base = '1' AND a.create_date>='".$finacel_year."' AND a.tcs_status=0  AND a.customer_id='".$customer_id."'");
                                $resultset = $resultset->result();
                        
                                foreach ($resultset as $set)
                                {


                                                $resultsetcount = $this->db->query("SELECT COUNT(a.id) as tss_count FROM $tablenamemain as a  WHERE  a.id<'".$_GET['order_id']."' AND a.order_base = '1' AND a.create_date>='".$finacel_year."' AND a.tcs_status=1 AND a.deleteid = '0' AND a.customer_id='".$customer_id."'");
                                                $resultsetcount = $resultsetcount->result();
                                                foreach($resultsetcount as $vvs)
                                                {
                                                            $tss_count=$vvs->tss_count;
                                                }


                                                $tcsamountval=round($set->totalamount,2);
                                                $tcsamountvaldata=  $tcsamountval+$discountfulltotal;
                                                if($tcsamountvaldata>5000000)
                                                {


                                                        if($tss_count==0)
                                                        {

                                                                    //$discountfulltotal_total_set=$tcsamountvaldata-5000000;
                                                        }
                                                        else
                                                        {
                                                                    //$discountfulltotal_total_set=$discountfulltotal;
                                                        }


                                                        $tcs_status=1;
                                                        $tcsamount=round($discountfulltotal*0.1/100);
                                                        $orgtcsamount=round($discountfulltotal_base*0.1/100);
                                                        $withput_tcsamount=round($amounttotal_with_out_commission_val*0.1/100);
                                                        
                                                }
                                                else
                                                {
        
                                                        $tcs_status=0;
                                                        $tcsamount=0;

                                                }


                                                if($tcs_status_customer==1)
                                                {

                                                    
                                                    if($_GET["order_id"]=='37612')
                                                    {
                                                        $tcs_status=0;
                                                        $tcsamount=0;

                                                    }
                            
                            
                    $this->db->query("UPDATE $tablenamemain SET tcs_status='" . $tcs_status . "',tcsamount='".$tcsamount."' WHERE id='" .$_GET["order_id"] ."'" );

                    
                                                }
                                                else
                                                {

                                                    $tcs_status=0;
                                                    $tcsamount=0;

                                                }

                                        
                                }


                                }  


                    }


                }


                        $discountfulltotal=$discountfulltotal+$tcsamount;
                        $org_fulltotal=$discountfulltotal_base+$orgtcsamount;
                        $org_fulltotal_without_commision=$amounttotal_with_out_commission_val+$withput_tcsamount;


                    $whole = floor($discountfulltotal); 
                    $decimal1 = $discountfulltotal - $whole;
                    $totalval= round($decimal1,3);


                    $roundoffstatusval_data="";
                    $getdataminis=0;
                    if($totalval!=0)
                    {


                            if($totalval>0.5)
                            {
                                $getplusevalue=1-$totalval;
                                $discountfulltotal=$discountfulltotal+$getplusevalue;
                                
                                if($getplusevalue>0)
                                {
                                    $getdataminis=$getplusevalue;
                                    $roundoffstatusval_data=" (+) ".$getplusevalue;
                                }

                                
                            }
                            else
                            {


                                    $discountfulltotal=round($discountfulltotal-$totalval);

                                if($totalval>0)
                                {
                                    $getdataminis=$totalval;
                                    $roundoffstatusval_data=" (-) ".$totalval;
                                }
                                

                            }


                    }


                    $whole1 = floor($org_fulltotal); 
                    $decimal11 = $org_fulltotal - $whole1;
                    $totalval1= round($decimal11,3);


                    $roundoffstatusval_data1="";
                    if($totalval1!=0)
                    {


                            if($totalval1>0.5)
                            {
                                $getplusevalue1=1-$totalval1;
                                $org_fulltotal=$org_fulltotal+$getplusevalue1;
                                
                            }
                            else
                            {


                                $org_fulltotal=round($org_fulltotal-$totalval1);


                            }


                    }


                    $le_amount_check=0;
                    // $queryget = $this->db->query("SELECT * FROM all_ledgers  WHERE deleteid='0'   AND order_id='" . $_GET['order_id'] . "'  AND party_type='1' AND debits>=0");
                    // $resultgg = $queryget->result();
                    // foreach ($resultgg as  $valuegg) {
                    //     $le_amount_check=$valuegg->debits;
                    // }


                    if($tablenamemain == 'orders_process') 
                    {


                                    $totaldebit=round($discountfulltotal,2);

                    
                    $debits_last_value=0;
                    $debits_value=$this->db->query("SELECT debits  FROM all_ledgers  WHERE order_id='".$_GET['order_id']."' AND order_no='".$order_no."' AND party_type=1  AND deleteid=0");
                    $debits_value = $debits_value->result();
                    foreach ($debits_value as $ss) {
                        $debits_last_value = $ss->debits;
                    }

        if($debits_last_value!=$totaldebit)
        {

            
            $this->db->query("UPDATE all_ledgers SET debits='".$totaldebit."' WHERE order_id='".$_GET['order_id']."' AND order_no='".$order_no."' AND party_type=1  AND deleteid=0");


        }


                    }


        $bill_total=round($discountfulltotal,2);


                if($commission_check_fact==1)
                {


                    $this->db->query("UPDATE $tablenamemain SET  bill_total_fact='" .round($without_commsision_total) . "' WHERE id='" .$_GET["order_id"] ."'" );

                }


                if($commission_check==1)
                {


                    $this->db->query("UPDATE $tablenamemain SET bill_total_rate='" .round($without_commsision_total) . "' WHERE id='" .$_GET["order_id"] ."'" );

                }

        
                if($commission_check_fact==0 && $commission_check==0)
                {


                    $this->db->query("UPDATE $tablenamemain SET without_commsision_total='" . $bill_total . "' WHERE id='" .$_GET["order_id"] ."'" );
            

                }


        if($commission_check_fact==0)
        {


        $this->db->query("UPDATE $tablenamemain SET bill_total_rate='" .round($org_fulltotal_without_commision) . "',without_commsision_total='" . round($org_fulltotal_without_commision) . "' WHERE id='" .$_GET["order_id"] ."'" );

        }

        $this->db->query("UPDATE $tablenamemain SET bill_total='" . $bill_total . "' WHERE id='" .$_GET["order_id"] ."'" );
            

        $credit_limit_status='0';


        if($tablenamemain=='orders_quotation')
        {
                    

                    if($credit_limit>0)
                    {


                            $credit_limit_check=0;


                            $getstatus=1;
                            $queryget=$this->db->query("SELECT SUM(a.credits) as totalcridit,SUM(a.debits) as totaldebit FROM all_ledgers  as a  WHERE  a.deleteid='0' AND a.party_type=1   AND a.customer_id='".$customer_id."'  ORDER BY a.id DESC");
                        
                            $resultgg = $queryget->result();
                            foreach ($resultgg as  $valuegg) 
                            {
                                                        $valueset=$valuegg->totalcridit-$valuegg->totaldebit;
                                                        if($valueset>=0)
                                                        {
                                                            $getstatus=1;
                                                        }
                                                        else
                                                        {
                                                            $getstatus=0;
                                                        }
                                                        $credit_limit_check=str_replace('-','', $valueset);
                                                        

                            }

                        
                        if($getstatus==0)
                        {
                                $credit_limit_status="Credit Limit Exceeded ".$credit_limit;
                                $this->db->query("UPDATE $tablenamemain SET reason='".$credit_limit_status."' WHERE id='".$_GET['order_id']."'");
                        }
                        else
                        {


                            if($credit_limit_check>=0)
                            {

                                    $credit_limit_check_val=$credit_limit_check-$bill_total;
                                    if($credit_limit<$bill_total)
                                    {
                                        $credit_limit_status="Credit Limit Exceeded ".$credit_limit;
                                        $this->db->query("UPDATE $tablenamemain SET reason='".$credit_limit_status."' WHERE id='".$_GET['order_id']."'");
                                    }
                                    else
                                    {
                                        
                                        $this->db->query("UPDATE $tablenamemain SET reason='Open Quotation' WHERE id='".$_GET['order_id']."'");
                                    }

                            }
                            

                        } 
                        

                    }
                    else
                    {
                        $this->db->query("UPDATE $tablenamemain SET reason='Open Quotation' WHERE id='".$_GET['order_id']."' AND order_base=0");
                    }


            }


            if($roundoff_val=='-')
            {
                $minisroundoffround=$minisroundoff+$getdataminis;
            }
            else
            {
                $minisroundoffround=$minisroundoff+$getdataminis;
            }

            $minisroundoffround=round($minisroundoffround,2);


                if($approved_status <= 0)
                {

                     if($tablenamemain=='orders_quotation')
                    {

                       $credit_limit_status = 'Customer Verification Pending';

                    }

                    if($tablenamemain!='orders_process')
                    {


                    $cc = "Customer Verification Pending";
                    $this->db->query("UPDATE $tablenamemain SET reason='" .  $cc ."' WHERE id='" . $_GET["order_id"] ."'");

                    }



                }

                if ($account_number != "") {
                    $bank_name = "HDFC BANK";
                    $ifsccode = "";
                    $branch = "";
                } else {
                    $account_number = "1643135000001944";
                    $bank_name = "KARUR VYSYA BANK";
                    $ifsccode = "KVBL0001643";
                    $branch = "AVINASHI";
                }

                $resultdis = $this->Main_model->where_names_two_order_by(
                    $tablenamemain,
                    "id",
                    $_GET["order_id"],
                    "deleteid",
                    "0",
                    "id",
                    "DESC"
                );
                foreach ($resultdis as $valuedis) {
                    $commision_value = 0;
                    if ($valuedis->commission_check == 1) {
                        $commision_value =
                            $valuedis->bill_total - $valuedis->bill_total_rate;
                    }

                    if ($valuedis->commission_check_fact == 1) {
                        $commision_value_fact =
                            $valuedis->bill_total - $valuedis->bill_total_fact;
                        $commision_value = $commision_value_fact;
                    }
                }


                if($value->order_no=='APR/30')
                {
                    $commision_value='4231';
                }


                    if($commision_value>0)
                    {


                    if($tablenamemain == 'orders_process') 
                    {


                $this->db->query("UPDATE all_ledgers SET credits='".$commision_value."' WHERE customer_id='252'  AND order_no='".$order_no."' AND party_type=5  AND deleteid=0 AND account_head_id=48");

                    }


                    }


                $array = [
                    "order_no_id" => $order_no,
                    "sorder_no" => $sorder_no,
                    "commissiontotal" => $commision_value,
                    "bank_name" => $bank_name,
                    "ifsccode" => $ifsccode,
                    "branch" => $branch,
                    "print_status"=>$print_status,
                    "account_number" => $account_number,
                    "delivery_status_check" => $delivery_status_check,
                    "minisroundoffround" => $minisroundoffround,
                    "SSD_check" => $SSD_check,
                    "payment_mode" => $payment_mode,
                    "excess_payment_status" => $excess_payment_status,
                    "delivery_date_time" => $delivery_date_time,
                    "tcsamount" => $tcsamount,
                    "statusview" => $statusview,
                    "order_base" => $order_base,
                    "reason" => $reason,
                    "user_id_check" => $user_id_check,
                    "user_id" => $user_id,
                    "salesphone" => $salesphone,
                    "salesphone2" => $salesphone2,
                    "salesname" => $salesname,
                    "credit_limit_status" => $credit_limit_status,
                    "reason" => $reason,
                    "paricel_mode" => $paricel_mode,
                    "production_assign" => $production_assign,
                    "mark_date" => $mark_date,
                    "create_date" => $create_date,
                    "create_time" => $create_time,
                    "minisroundoff" => $minisroundoff,
                    "roundoff_val" => $roundoff_val,
                    "roundoffstatusval_data" => $roundoffstatusval_data,
                    "fulltotal" => round($discountfulltotal_base, 2),
                    "discountfulltotal" => round($discountfulltotal, 2),
                    "org_fulltotal" => round($org_fulltotal, 2),
                    "totalitems" => count($result),
                    "gsttotal" => round($amounttotalgst, 2),
                    "discount" => round($discount),
                    "commission" => round($commission, 2),
                    "amounttotal_with_out_commission" => round(
                        $amounttotal_with_out_commission,
                        2
                    ),
                    "Meter_to_Sqr_feet" => round($Meter_to_Sqr_feet, 2),
                    "Sqr_feet_to_Meter" => round($Sqr_feet_to_Meter, 2),
                    "NOS" => round($nos, 2),
                    "UNIT" => round($unit, 2),
                    "FACT" => round($fact, 2),
                    "fullqty" => round($fullqty, 2),
                ];
                    echo json_encode($array);
    }
    

    public function order_version_log()
    {


        if(isset($this->session->userdata['logged_in']))
        {
            
            
            $data['admin_users'] = $this->Main_model->where_names('admin_users','deleteid','0');
            $i = 0;
            $data['order_id']=$_GET['order_id'];
            $data['order_v_log']=$_GET['order_v_log'];

            // $data['version_logs'] = $this->Main_model->where_names_order_by( $data['order_v_log'], 'order_id', $data['order_id'],'create_date', 'DESC');

            $querycount = $this->db->query("SELECT a.*, b.version  
                                FROM bill_changes_log_version AS a 
                                JOIN enquiry_version AS b ON b.order_no = a.order_no  
                                WHERE a.order_id = '".$data['order_id']."'
                                AND a.tablename = 'order_product_list_quotation' 
                                ORDER BY a.create_date DESC ");
            $data['version_logs'] = $querycount->result();



                
            // $data['version_logs'] = $this->Main_model->where_names_order_by( 'bill_changes_log_version', 'order_id', $data['order_id'],'tablename' , 'order_product_list_quotation' ,'create_date', 'DESC');

            $data['active_base']='customer_1';
            $data['active']='customer_1';
            $data['title']    = 'Version Log List '.$_GET['order_no'];
            $data['top_nav']  = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/version_log_list',$data);
        
        
        }
        else
        {
                $this->load->view('admin/index');
        }

    }

    public function updateversion()
    {
        $form_data = json_decode(file_get_contents("php://input"));
        $id = $form_data->order_id;
        $version = $form_data->version;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_vp_list = $form_data->order_vp_list;
        $order_v_log = $form_data->order_v_log;

        $data = $this->Main_model->where_names_two_order_by($order_v_log, "order_id", $id, "version", $version, "id", "ASC");
        foreach ($data as $val) {
            $order_no = $val->order_no;
            $order_id = $val->order_id;
        }

        $product = $this->Main_model->where_names_two_order_by($order_vp_list,"order_id", $id, "version", $version, "id", "ASC");
        $this->db->set('deleteid', 1);
        $this->db->where('order_id', $id);
        $this->db->update($tablename_sub);

        foreach ($product as $row) {

// echo $row->order_id; exit();
            // Define the conditions for the WHERE clause
            // $where_conditions = array(
            //     'order_id' => $row->order_id,
            //     'product_id' => $row->product_id,                
            //     'id' => $row->sub_version_o_id,
            // );
        
            // $existing_records = $this->db->get_where($tablename_sub, $where_conditions)->result();

             $query = $this->db->query("SELECT * FROM $tablename_sub WHERE order_id = '".$row->order_id."'  AND id = '".$row->sub_version_o_id."' ORDER BY id DESC");
            $existing_records = $query->result();


            if ($existing_records) {
                // echo "exit ask";
                foreach ($existing_records as $existing_record) {
                    // Prepare data for update for each existing record
                    $data_to_update = (array)$row;
                    // Remove 'id', 'order_id', 'product_id', and 'version' from the update data
                    unset($data_to_update['id'], $data_to_update['order_id'], $data_to_update['version']);
            
                    // Perform the update for each existing record
                    $this->db->where('id', $existing_record->id)->update($tablename_sub, $data_to_update);
                }
            }
            // echo "exit no";
            
        }

        $data1 = $this->Main_model->where_names($tablenamemain, 'id', $id);
        foreach ($data1 as $val) {
            $old_version = $val->version;
            $order_no = $val->order_no;
        }
    
        $parts = explode('/', $order_no);
    
        if (count($parts) >= 2) {
            $parts[2] = $version;
            $updatedOrderID = implode('/', $parts);
            // echo $updatedOrderID;
        }
    
        // Use the set method to specify the fields to be updated
        $this->db->set('version', $version);
        $this->db->set('order_no', $updatedOrderID);
        $this->db->where('id', $id);
        $this->db->update($tablenamemain);


        $data1 = [];
        $dat = 'version reverted';
        $data1['userid'] = $this->userid;
        $data1['order_id'] = $id;
        $data1['order_no'] = $order_no;
        $data1['tablename'] = 'order_product_list_quotation';
        $data1['inputname'] =$dat;            
        $data1['old_value'] = $old_version;            
        $data1['new_value'] = $version;
        $data1['notes'] = 'Org version ';   
        // echo '<pre>';
        // print_r($data1);
        // echo '</pre>';
        $this->Main_model->insert_commen($data1,'bill_changes_log_version');   
    
        // $array = array('id' => base64_encode($id), 'error' => '2', 'massage' => 'Option updated successfully');
        $arrays['id'] =  base64_encode($id);
        echo json_encode($arrays);
    }

      public function storehistory(){
        $form_data = json_decode(file_get_contents("php://input"));
            $id = $form_data->id;
            $tablenamemain = $form_data->tablenamemain;
            $tablename = $form_data->tablename_sub;
            $order_id = $form_data->order_id;

            if($id){
                $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
            }else{
                $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
            }

            foreach($results as $vl)
            {
                 $order_no=$vl->order_no;
                //  $order_id=$vl->order_id;
               
            }

            $sslog['userid'] = $this->userid;
            $sslog['order_id'] = $order_id;
            $sslog['order_product_id'] = $form_data->id;
            $sslog['tablename'] = $tablename;
            $sslog['order_no'] = $order_no;
            $sslog['inputname'] = $form_data->inputname;            
            $sslog['old_value'] = $form_data->oldvalues;            
            $sslog['new_value'] = $form_data->values;
            $sslog['notes'] = 'Org Data ';
            $this->Main_model->insert_commen($sslog, 'bill_changes_log_version');



        $array = [
            "result" => $sslog,
        ];

        echo json_encode($array);
            
    }

     public function insertandupdate_version(){

            $id = $_GET['order_id'];
            $tablename = $_GET['tablename'];
            $tablename_sub = $_GET['tablename_sub'];
            $order_vp_list = $_GET['order_vp_list'];
            $order_v_log = $_GET['order_v_log'];


            $data1 = $this->Main_model->where_names($tablename,'id',$id);
            foreach($data1 as $val){
                $order_no = $val->order_no;
            }

            $data1 = $this->db->query("SELECT * FROM $order_v_log
            WHERE order_id = '" . $_GET['order_id'] . "'
            ORDER BY create_date DESC
            LIMIT 1")->result();
        
            // if ($order_v_log == 'quatation_version') {
            //     $data2 = $this->db->query("SELECT * FROM enquiry_version
            //         WHERE order_id = '" . $_GET['order_id'] . "'
            //         ORDER BY create_date DESC
            //         LIMIT 1")->result();
            // } else {
            //     $data2 = array(); // An empty array if the condition is not met
            // }
            
            // $merged_data = array_merge($data1, $data2);
            
            foreach ($data1 as $val) {
                $old_version = $val->version;
                // Your code here to work with $old_version
            }
        
        
            if ($old_version) {
                if ($old_version !== 'O') { // Exclude 'O'
                    if (preg_match('/^R(\d+)$/', $old_version, $matches)) {
                        $i = (int)$matches[1]; // Extracted numeric part
                        $i++; // Increment by 1
                        
                            $version = 'R' . $i; // New version
                    }
                } else {
                        $version = $old_version == 'O' ? 'R1':'';
                }
            }else{
                $version = 'O';
            }
       


          
            
            $parts = explode('/', $order_no);
            

            // Insert 'Q/O' after the first element in the array
            // array_splice($parts, 1, 0,$version);

            // Join the modified array back into a string
            // $updatedOrderID = implode('/', $parts);

            if (count($parts) >= 2) {
                $parts[2] = $version;
                $updatedOrderID = implode('/', $parts);
                // echo $updatedOrderID;
            }
            
            $this->db->query("UPDATE $tablename SET version='" . $version . "', order_no='" . $updatedOrderID . "' WHERE id='" . $id . "'");

            $this->db->query("UPDATE $tablename_sub SET order_no='" . $updatedOrderID . "' WHERE order_id='" . $id . "'");

           


            
            $data['order_id'] = $id;
            $data['order_no'] = $updatedOrderID;
            $data['fields'] = $order_vp_list === 'order_version_product_quatation' ? 'Q':'';
            $data['datas'] = json_encode($product);
            $data['edited_by'] = $this->userid;
            $data['version'] = $version;
            $this->Main_model->insert_commen($data,$order_v_log);

            $data1 = [];
            $dat = 'version changed';
            $data1['userid'] = $this->userid;
            $data1['order_id'] = $id;
            $data1['order_no'] = $updatedOrderID;
            $data1['tablename'] = 'order_product_list_quotation';
            $data1['inputname'] =$dat;            
            $data1['old_value'] = $old_version;            
            $data1['new_value'] = $version;
            $data1['notes'] = 'Org version ';   
            // echo '<pre>';
            // print_r($data1);
            // echo '</pre>';
            $this->Main_model->insert_commen($data1,'bill_changes_log_version'); 

            $product = $this->Main_model->where_names($tablename_sub,'order_id',$id);   
            foreach ($product as $row) {
                // Remove the 'id' property from the $row object
                if (isset($row->id)) {
                    // Remove the 'id' property from the $row object
                    $id = $row->id;
                    unset($row->id);
            
                    $row->version = $version;
            
                    // Check if $tablename_sub is not null before updating sub_version_o_id
                    if ($tablename_sub !== null) {
                        $row->sub_version_o_id = $id;
                    }
            
                    // Insert each record into the 'order_version_product_list'
                    $this->db->insert($order_vp_list, (array)$row);
                }
            }

            $array = array('error' => '2', 'massage' => 'Option updated successfully','order_no' => $updatedOrderID);
            echo json_encode($array); 
    }


  function daywisestock($product_id)
    {

        if($product_id>0)
        {
        $result = $this->Main_model->where_names('product_list','id', $product_id);

        foreach ($result as $value) {

            $data = date('Y-m-d');
            $from_date = date('Y-m-d');

            if($value->sub_categories_id > 0){
                $were = " AND b.sub_categories_id = '".$value->sub_categories_id."'";
                $where1 = " AND c.sub_categories_id = '".$value->sub_categories_id."'";
                $where2 = " AND c.sub_categories_id = '".$value->sub_categories_id."'";
                $where3 = " AND c.sub_categories_id = '".$value->sub_categories_id."'";
                $whereopen = " a.sub_categories_id = '".$value->sub_categories_id."'";
            }else{
                $were = " AND a.product_id = '".$product_id."'";
                $where1 = " AND a.product_id = '".$product_id."'";
                $where2 = " AND a.sub_product_id = '".$product_id."'";
                $where3 = " AND a.tile_material_id = '".$product_id."'";
                $whereopen = " a.id = '".$product_id."'";
            }

        //inward stock get
        $inward_stock = "";
        $resultinw = $this->db->query("SELECT SUM(a.inward_qty) as inward_qty FROM purchase_order_coilupdate as a
        JOIN product_list as b ON b.id = a.product_id WHERE a.deleteid != 1 AND DATE(a.inward_date) = '" . $data .
        "' $were ORDER BY a.id DESC")->result();
        foreach ($resultinw as $valuess) {
        $inward_stock = $valuess->inward_qty;
        }

        // //sales stock get
        // $sales1 = 0;
        // $resultsales1 = $this->db->query("SELECT SUM(a.weight) as sales
        // FROM order_product_list_process AS a
        // JOIN orders_process AS b ON a.order_id = b.id
        // JOIN product_list as c ON c.id = a.product_id
        // WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) = '" . $from_date . "' AND (a.sub_product_id = 0 OR
        // a.sub_product_id IS NULL) AND (a.tile_material_id = 0 OR a.tile_material_id IS NULL) $where1 ORDER BY a.id
        // DESC")->result();

        // foreach ($resultsales1 as $valuess1) {
        // $sales1 = $valuess1->sales > 0 ? $valuess1->sales : 0;
        // }

        //sales stock get
        // $sales_sub = 0;
        // $resultsales2 = $this->db->query("SELECT SUM(a.weight) as sales
        // FROM order_product_list_process AS a
        // JOIN orders_process AS b ON a.order_id = b.id
        // JOIN product_list as c ON c.id = a.sub_product_id
        // WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) = '" . $from_date . "' $where2 ORDER BY a.id DESC")->result();

        // foreach ($resultsales2 as $valuess2) {
        // $sales_sub = $valuess2->sales > 0 ? $valuess2->sales : 0;
        // }

        // //sales stock get
        // $sales_tile_mat = 0;
        // $resultsales3 = $this->db->query("SELECT SUM(a.weight) as sales
        // FROM order_product_list_process AS a
        // JOIN orders_process AS b ON a.order_id = b.id
        // JOIN product_list as c ON c.id = a.tile_material_id
        // WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) = '" . $from_date . "' $where3 ORDER BY a.id DESC")->result();

        // foreach ($resultsales3 as $valuess3) {
        // $sales_tile_mat = $valuess3->sales > 0 ? $valuess3->sales : 0;
        // }


        // $sales = ($sales1+$sales_sub+$sales_tile_mat) /1000;

        //sales stock get
        $sales = $this->salesvalget($value->uom,$from_date,'',$value->sub_categories_id,$value->id);


        $opening_qty = "";
        $data = date('Y-m-d');
        $resulti = $this->db->query("SELECT SUM(a.opening_qty) as opening_qty FROM product_list as a WHERE 
        $whereopen AND DATE(a.create_date) = '" . $from_date . "' ORDER BY a.id DESC")->result();
        foreach ($resulti as $resulti) {
        $opening_qty = $resulti->opening_qty;
        }

        $stock = ($opening_qty + $inward_stock) - ($value->optimal_stock + $value->production_stock + $sales);

        $datastock['product_id']=$product_id;
        $datastock['user_id']=$this->userid;
        $datastock['opening_qty']=round($opening_qty,2);
        $datastock['stock']=round($stock,2);
        $datastock['inward_qty'] = $inward_stock;
        $datastock['sales'] = round($sales,2);
        $datastock['optimal_stock']=round($value->optimal_stock,2);
        $datastock['production_stock']=round($value->production_stock,2);
        $datastock['stock_date']=date('Y-m-d');
        $datastock['closing_stock']=round($stock,2);
        $datastock['create_date']=date('Y-m-d H:i:s');

        }
        $this->Main_model->insert_commen($datastock,'daywise_stock');
        }
    }

    function salesvalget($uom,$from_date,$to_date,$sub_categories_id,$product_id){


    if($sub_categories_id > 0){

        $were = " AND b.sub_categories_id = '".$sub_categories_id."'";
        $where1 = " AND c.sub_categories_id = '".$sub_categories_id."'";
        $where2 = " AND c.sub_categories_id = '".$sub_categories_id."'";
        $where3 = " AND c.sub_categories_id = '".$sub_categories_id."'";
        $whereopen = " a.sub_categories_id  = '".$sub_categories_id."'";

    }else{

        $were = " AND a.product_id = '".$product_id."'";
        $where1 = " AND a.product_id = '".$product_id."'";
        $where2 = " AND a.sub_product_id = '".$product_id."'";
        $where3 = " AND a.tile_material_id = '".$product_id."'";
        $whereopen = " a.id  = '".$product_id."'";

    }

    $proddata = $this->Main_model->select_where_names_row('*','product_list','id',$product_id,'deleteid',0);

    $sales = 0;
    // echo $uom;
    if($uom === 'Nos' || $uom === 'nos'){

        if($product_id == 20   ){

            $resultsales_nos = $this->db->query("SELECT SUM(a.nos) as sales
            FROM order_product_list_process AS a 
            JOIN orders_process AS b ON a.order_id = b.id 
            JOIN product_list as c ON c.id = a.product_id
            WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) BETWEEN '".$from_date."' AND '".$to_date."' $where1 ORDER BY a.id DESC")->result();

            foreach ($resultsales_nos as  $value_nos) {
                $sales = $value_nos->sales > 0 ? $value_nos->sales : 0;
            }

        }else{
            

            $resultsales_nos = $this->db->query("SELECT SUM(a.qty) as sales
            FROM order_product_list_process AS a 
            JOIN orders_process AS b ON a.order_id = b.id 
            JOIN product_list as c ON c.id = a.product_id
            WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) BETWEEN '".$from_date."' AND '".$to_date."' $where1 ORDER BY a.id DESC")->result();

            foreach ($resultsales_nos as  $value_nos) {
                $sales = $value_nos->sales > 0 ? $value_nos->sales : 0;
            }
        }

    }else{

        // echo "else two";
        //sales stock get
        if( $product_id == 1068 || $product_id == 1017 || $product_id == 1067){

            $resultsales_nos = $this->db->query("SELECT SUM(a.nos) as sales
            FROM order_product_list_process AS a 
            JOIN orders_process AS b ON a.order_id = b.id 
            JOIN product_list as c ON c.id = a.product_id
            WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) BETWEEN '".$from_date."' AND '".$to_date."' $where1 ORDER BY a.id DESC")->result();

            foreach ($resultsales_nos as  $value_nos) {
                $sales = $value_nos->sales > 0 ? $value_nos->sales : 0;
            }

        }else{
        $sales1 = 0;
        $resultsales1 = $this->db->query("SELECT SUM(a.weight) as sales
                    FROM order_product_list_process AS a 
                    JOIN orders_process AS b ON a.order_id = b.id 
                    JOIN product_list as c ON c.id = a.product_id
                    WHERE b.deleteid = 0 AND a.deleteid = 0 AND DATE(a.create_date) BETWEEN '".$from_date."' AND '".$to_date."' AND (a.sub_product_id = 0 OR a.sub_product_id IS NULL) AND (a.tile_material_id = 0 OR a.tile_material_id IS NULL) $where1 ORDER BY a.id DESC")->result();

        foreach ($resultsales1 as  $valuess1) {
            $sales1 = $valuess1->sales > 0 ? $valuess1->sales : 0;
        }
       
        //sales stock get
        $sales_sub = 0;
        $resultsales2 = $this->db->query("SELECT SUM(a.weight) as sales
                    FROM order_product_list_process AS a 
                    JOIN orders_process AS b ON a.order_id = b.id 
                    JOIN product_list as c ON c.id = a.sub_product_id
                    WHERE b.deleteid = 0  AND a.deleteid = 0 AND DATE(a.create_date) BETWEEN '".$from_date."' AND '".$to_date."'$where2 ORDER BY a.id DESC")->result();


        foreach ($resultsales2 as  $valuess2) {
            $sales_sub = $valuess2->sales > 0 ? $valuess2->sales : 0;
        }
      
        //sales stock get
        $sales_tile_mat = 0;
        $resultsales3 = $this->db->query("SELECT SUM(a.weight) as sales
                    FROM order_product_list_process AS a 
                    JOIN orders_process AS b ON a.order_id = b.id 
                    JOIN product_list as c ON c.id = a.tile_material_id
                    WHERE b.deleteid = 0  AND a.deleteid = 0 AND DATE(a.create_date) BETWEEN '".$from_date."' AND '".$to_date."' $where3 ORDER BY a.id DESC")->result();

        foreach ($resultsales3 as  $valuess3) {
            $sales_tile_mat = $valuess3->sales > 0 ? $valuess3->sales : 0;
        }

        $sales = ($sales1+$sales_sub+$sales_tile_mat) /1000;
    }

    }
    // echo $sales;exit();

    return $sales;
   
}

        public function fetchproduct_basecaetgary()
        {
            $form_data= json_decode(file_get_contents("php://input"));
            $cate_id = $form_data->category;        
            $id = $form_data->id;
            $tablename_sub = $form_data->tablename_sub;
    
            $point['meterial_category'] = $cate_id;
            $point['get_id'] = $id;

            $this->Main_model->update_commen($point, $tablename_sub);

            $result = $this->Main_model->where_names($tablename_sub,'id', $id);

            foreach ($result as $value) {
                $sub_cat = $value->meterial_category;                
                $tile_material_id = $value->tile_material_id;                
                $tile_material_name = $value->tile_material_name;

                $result1 = $this->Main_model->where_names('product_list','id', $tile_material_id);

                foreach ($result1 as $value1) {
                    $cat = $value1->categories_id;
    
                    if($value1->categories_id === $sub_cat){
                        $tile_material =  $tile_material_name;
                    }else{
                        $point1['tile_material_id'] = '';                    
                        $point1['tile_material_name'] = '';
                        $point1['get_id'] = $id;
                        $tile_material =  '';

                        $this->Main_model->update_commen($point1, $tablename_sub);
                    }
                }
            }

        $array = array('error' => '2', 'massage' => 'update successsfull','tile_material_name' => $tile_material,'id' => $id, 'tile_material_id' => $tile_material_id,'categories'=> $cat, 'sub_cat' => $sub_cat);
        echo json_encode($array);

        }
    
     function storeThicknessPuffPanel()
    {
        $form_data = json_decode(file_get_contents("php://input"));

                $tablename_sub = $form_data->tablename_sub;                
                $tablenamemain = $form_data->tablenamemain;
                
                $data['get_id'] = $form_data->id; 
                $data['top_thick'] = round($form_data->top,2);
                $data['bottom_thick'] = round($form_data->bot,2);
                $data['foarm_thick'] = round($form_data->foarm,2);
                $data['weight'] = round($form_data->weigh,2);
                $this->Main_model->update_commen($data, $tablename_sub);

    }

    public function first_check_select_base_product() {
        
        $form_data = json_decode(file_get_contents("php://input"));
        $product_name = $form_data->values;
        $product_name = $form_data->setgetvalue;
        $categories_id = $form_data->id;
        $inputname = $form_data->inputname;
        $category_value = $form_data->category_value;
        $product_value = $form_data->product_value;



        $where="";
        if($categories_id!=32)
        {



         
                      $group_by="";


                 

                    $group_by='  GROUP BY '.$inputname;
                    $order_by='  ORDER BY '.$inputname.' ASC';
                    $ssname=$inputname;
                
                    $resultpp = $this->db->query("SELECT * FROM product_list WHERE categories_id='".$categories_id."' AND deleteid=0 $where $group_by $order_by");
                    $results = $resultpp->result();



        }


        if($categories_id==32)
        {



         
                 $group_by="";


                 

                    $group_by='  GROUP BY product_name';
                    $order_by='  ORDER BY  product_name ASC';
                    $ssname=$inputname;
                    $resultpp = $this->db->query("SELECT product_name as brand FROM product_list  WHERE categories_id='".$categories_id."' AND deleteid=0 $where $group_by $order_by");
                    $results = $resultpp->result();

        }


        if($categories_id==590)
        {



         
                 $group_by="";


                 

                    $group_by='  GROUP BY product_name';
                    $order_by='  ORDER BY  product_name ASC';
                    $ssname=$inputname;
                    $resultpp = $this->db->query("SELECT product_name  FROM product_list  WHERE categories_id='".$categories_id."' AND deleteid=0 $where $group_by $order_by");
                    $results = $resultpp->result();

        }





      

        $output = array();
        $check = array();
        
        if(count($results)>0)
        {


                foreach ($results as $values)
                {
                    if($values->$ssname!='')
                    {
                            $check[$ssname][] = trim($values->$ssname);
                          $output[$ssname][] = trim($values->$ssname);

                    }
                }

        }
        else
        {
            $output['success'] = 0;
        }
        
         if(count($check)>0)
         {
                $ss='Select ';
         }
         else
         { 
                $ss='Empty ';

         }
         $output['ssname'] =$ssname;
         $output['sst'] =$ss;
         //asort($output);
         echo json_encode($output);
 


   
  
    }

     public function fetch_product_name_base() {
        
        $form_data = json_decode(file_get_contents("php://input"));

       



        $product_name = $form_data->values;
        $categories_id = $form_data->id;
        $inputname = $form_data->inputname;
        $category_value = $form_data->category_value;
        $product_value = $form_data->product_value;





        $where="";
        if($categories_id!=1)
        {


            for ($i=0; $i <count($category_value) ; $i++) { 

                  
                    if($product_value[$i]!='')
                     {

                         $ddt=$category_value[$i];
                         $where.=' AND '.$ddt.'="'.$product_value[$i].'"';

                       }
             

            }

if($categories_id==3)
{

   $nonEmptyCount = count(array_filter($product_value));
   $checkarray=array('3','4');
   if(!in_array($nonEmptyCount,$checkarray))
   {
            $where=' AND product_name="'.$product_name.'"';
   } 
  

}
   
if($categories_id==36)
{

   $nonEmptyCount = count(array_filter($product_value));
   $checkarray=array('4');
   if(!in_array($nonEmptyCount,$checkarray))
   {
            $where=' AND product_name="'.$product_name.'"';
   } 
  

}

  
if($categories_id==19)
{

   $nonEmptyCount = count(array_filter($product_value));
   $checkarray=array('3');
   if(!in_array($nonEmptyCount,$checkarray))
   {
            $where=' AND product_name="'.$product_name.'"';
   } 
  

}

  
if($categories_id==5)
{

   $nonEmptyCount = count(array_filter($product_value));
   $checkarray=array('4','5');
   if(!in_array($nonEmptyCount,$checkarray))
   {
            $where=' AND product_name="'.$product_name.'"';
   } 
  

}

if($categories_id==7)
{

   $nonEmptyCount = count(array_filter($product_value));
   $checkarray=array('2','3');
   if(!in_array($nonEmptyCount,$checkarray))
   {
            $where=' AND product_name="'.$product_name.'"';
   } 
  

}
          //$where=' AND product_name="'.$product_name.'"';

        }



   
        if($categories_id==1)
        {

             $where=' AND product_name="'.$product_name.'"';

        }

        if($categories_id==628)
        {

             $where=' AND product_name="'.$product_name.'"';

        }

         if($categories_id==631)
        {

             $where=' AND product_name="'.$product_name.'"';

        }


        if($categories_id==591)
        {

             $where=' AND product_name="'.$product_name.'"';

        }

         if($categories_id==32)
        {

             $where=' AND product_name="'.$product_name.'"';

        }



        $resultpp = $this->db->query("SELECT * FROM product_list  WHERE  categories_id='".$categories_id."' AND deleteid=0 $where");
        $results = $resultpp->result();

        $output = array();

        //echo count($results);
        //echo "SELECT * FROM product_list  WHERE  categories_id='".$categories_id."' AND deleteid=0 $where";

        
        if(count($results)>0)
        {


                    foreach ($results as $values)
                    {
                        
                        $output['id'] = $values->id;
                        $output['success'] = 1;
                        $output['product_name'] = $values->product_name;
                    }

        }
        else
        {
            $output['success'] = 0;
        }
        echo json_encode($output);



    }
    public function select_base_product() {
        
        $form_data = json_decode(file_get_contents("php://input"));
        $product_name = $form_data->values;
        $product_name = $form_data->setgetvalue;
        $categories_id = $form_data->id;
        $inputname = $form_data->inputname;
        $category_value = $form_data->category_value;
        $product_value = $form_data->product_value;


        // echo "<pre>";
        // print_r($form_data);
        // exit;


        $where="";
        if($categories_id!=1)
        {


             for ($i=0; $i <count($category_value) ; $i++) { 

                  
                    if($product_value[$i]!='')
                     {

                        $ddt=$category_value[$i];
                        $where.=' AND '.$ddt.'="'.$product_value[$i].'"';

                     }
             

            }

         
            $group_by="";



             if($inputname=='shape_of_product')
            {    

                $group_by='  GROUP BY size ORDER BY option_size_sort_id ASC';
                $ssname='size';
            }


             if($inputname=='size')
            {    

                $group_by='  GROUP BY material_type ORDER BY material_type ASC';
                $ssname='material_type';
            }


             if($inputname=='material_type')
            {    

                $group_by='  GROUP BY thickness ORDER BY thickness ASC';
                $ssname='thickness';
            }

            

            if($categories_id==7)
            {
               
                if($inputname=='brand')
                {    

                    $group_by='  GROUP BY length_of_screw ORDER BY length_of_screw ASC';
                    $ssname='length_of_screw';
                }

                 if($inputname=='length_of_screw')
                {    

                    $group_by='  GROUP BY type_of_thread ORDER BY type_of_thread ASC';
                    $ssname='type_of_thread';
                }


            }
            elseif($categories_id==36)
            {
               
                

                if($inputname=='material_type')
                {    

                    $group_by='  GROUP BY thickness ORDER BY thickness ASC';
                    $ssname='thickness';
                    
                }

                if($inputname=='thickness')
                {    

                    $group_by='  GROUP BY brand ORDER BY brand ASC';
                    $ssname='brand';
                    
                }

                if($inputname=='brand')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                 


                

            }
           
            elseif($categories_id==9)
            {
               
                

                if($inputname=='product_name')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }


                if($inputname=='color')
                {    

                    $group_by='  GROUP BY brand ORDER BY brand ASC';
                    $ssname='brand';
                    
                }

                

            }
            elseif($categories_id==5)
            {
               
                

           

                if($inputname=='thickness')
                {    

                    $group_by='  GROUP BY brand ORDER BY brand ASC';
                    $ssname='brand';
                }

                

            }
             elseif($categories_id==26)
            {
               
                

           

                // if($inputname=='material_type')
                // {    

                //     $group_by='  GROUP BY brand ORDER BY brand ASC';
                //     $ssname='brand';
                // }


                 if($inputname=='material_type')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                  if($inputname=='brand')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                

            }
            elseif($categories_id==631)
            {
               
                

           

                // if($inputname=='material_type')
                // {    

                //     $group_by='  GROUP BY brand ORDER BY brand ASC';
                //     $ssname='brand';
                // }


                 if($inputname=='material_type')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                  if($inputname=='brand')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                

            }
            elseif($categories_id==628)
            {
               
                

           

                // if($inputname=='material_type')
                // {    

                //     $group_by='  GROUP BY brand ORDER BY brand ASC';
                //     $ssname='brand';
                // }


                 if($inputname=='material_type')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                  if($inputname=='brand')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                

            }
            elseif($categories_id==15)
            {

                if($inputname=='product_name_base')
                {    

                    $group_by='  GROUP BY brand ORDER BY brand ASC';
                    $ssname='brand';
                }
               
                if($inputname=='brand')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }

                 if($inputname=='color')
                {    

                    $group_by='  GROUP BY size ORDER BY size ASC';
                    $ssname='size';
                }
                
                

            }
            else
            {

                if($inputname=='brand')
                {    

                    $group_by='  GROUP BY color ORDER BY color ASC';
                    $ssname='color';
                }


            }



             if($inputname=='type_of_panel')
            {    

                $group_by='  GROUP BY color ORDER BY color ASC';
                $ssname='color';

            }

            if($categories_id!=15)
            {


                  if($categories_id!=36)
                   { 

                 if($inputname=='color')
                {    

                   $group_by='  GROUP BY thickness ORDER BY thickness ASC';
                    $ssname='thickness';
                }

                   }

            }


            if($categories_id!=5)
            {


                   if($categories_id!=36)
                   {  
                            if($inputname=='thickness')
                            {    

                                $group_by='  GROUP BY coating_mass ORDER BY coating_mass ASC';
                                $ssname='coating_mass';
                            }
                  }


             }








        }

         if($categories_id==1)
        {

             $where=' AND product_name LIKE "%'.$product_name.'%"';

        }


        
            if($categories_id==34)
            {

                             if($inputname=='material_type')
                            {    

                                $group_by='  GROUP BY thickness ORDER BY thickness ASC';
                                $ssname='thickness';
                            }
                  
                            if($inputname=='thickness')
                            {    

                                $group_by='  GROUP BY coating_mass ORDER BY coating_mass ASC';
                                $ssname='coating_mass';
                            }

                            if($inputname=='coating_mass')
                            {    

                                $group_by='  GROUP BY yield_strength ORDER BY yield_strength ASC';
                                $ssname='yield_strength';
                            }

                            if($inputname=='yield_strength')
                            {    

                                $group_by='  GROUP BY brand ORDER BY brand ASC';
                                $ssname='brand';
                            }

                             if($inputname=='brand')
                            {    

                                $group_by='  GROUP BY coil_width ORDER BY coil_width ASC';
                                $ssname='coil_width';
                            }
                  


             }

        //echo "SELECT * FROM product_list  WHERE categories_id='".$categories_id."' AND deleteid=0 $where $group_by";
        //exit;


        $resultpp = $this->db->query("SELECT * FROM product_list  WHERE categories_id='".$categories_id."' AND deleteid=0 $where $group_by");
        $results = $resultpp->result();

        $output = array();
        $check = array();


        if(count($results)>0)
        {


                foreach ($results as $values)
                {
                    if($values->$ssname!='')
                    {
                                $check[$ssname][] = trim($values->$ssname);
                          $output[$ssname][] = trim($values->$ssname);

                    }
                }

        }
        else
        {
            $output['success'] = 0;
        }


         if(count($check)>0)
         {
                $ss='Select ';
         }
         else
         { 
                $ss='Empty ';

         }
         $output['ssname'] =$ssname;
         $output['sst'] =$ss;
         asort($output);
         echo json_encode($output);
 

 
    }
    
 //    AStockUpdate-live-01/07
    function daywisestocksave_order($order_id){

            $table = "orders_process";    

                //order sales weight update in stock report
                if($table == "orders_process")  
                {        
                    $results_val = $this->db->query("SELECT * FROM order_product_list_process WHERE order_id = '".$order_id."' AND deleteid = 0 ORDER BY id DESC")->result();
                    foreach($results_val as $valord)
                    {
                        $product_id=$valord->product_id;                                
                        $sub_id=$valord->id;
                        $order_id=$valord->order_id;
                        $order_no=$valord->order_no;
                        $this->date_stock_order($product_id,$sub_id,$order_id,$order_no,'edit');
                    }
                    
                }
                    
    }

    
    public function stockUpdate()
    {

        $form_data = json_decode(file_get_contents("php://input"));

            $table = $form_data->table;                
            $order_id = $form_data->order_id;

            $array = array();
                    //order sales weight update in stock report
                    if($table == "orders_process")  
                    {        

                        $results_val = $this->db->query("SELECT * FROM order_product_list_process WHERE order_id = '".$order_id."' AND deleteid = 0 ORDER BY id DESC")->result();
                        foreach($results_val as $valord)
                        {
                            $product_id=$valord->product_id;                                
                            $sub_id=$valord->id;
                            $order_id=$valord->order_id;
                            $order_no=$valord->order_no;
                            $this->date_stock_order($product_id,$sub_id,$order_id,$order_no,'move');
                        }

                        
                    }

                    $array = ['product_id'=>$product_id, "order_id"=>$order_id, "order_no"=>$order_no ];
                    echo json_encode($array);
                   
                    //order sales weight update in stock report
            
            
    }

    public function stockUpdate_new()
    {

        $form_data = json_decode(file_get_contents("php://input"));

            $table = $form_data->table;                
            $order_id = $form_data->order_id;
            $id = $form_data->id;

            $array = array();
                    //order sales weight update in stock report
                    if($table == "orders_process")  
                    {        

                        $results_val = $this->db->query("SELECT * FROM order_product_list_process WHERE id = '".$id."' AND deleteid = 0 ORDER BY id DESC")->result();
                        foreach($results_val as $valord)
                        {
                            $product_id=$valord->product_id;                                
                            $sub_id=$valord->id;
                            $order_id=$valord->order_id;
                            $order_no=$valord->order_no;
                            $this->date_stock_order($product_id,$sub_id,$order_id,$order_no,'move');
                        }

                        
                    }

                    $array = ['product_id'=>$product_id, "order_id"=>$order_id, "order_no"=>$order_no ];
                    echo json_encode($array);
                   
                    //order sales weight update in stock report
            
            
    }

    function date_stock_order($product_id,$sub_id,$order_id,$order_no,$type){
            // echo "okkkkk";exit();
        if($product_id>0)
        {
            $result = $this->Main_model->where_names('product_list','id', $product_id);

            foreach ($result as $value) {

                if(($value->uom === 'Nos' || $value->uom === 'nos')){

                    if($product_id == 20   ){
                        $select = 'nos';
                    }else{
                        $select = 'qty';
                    }
                }else{
                    if( $product_id == 1068 || $product_id == 1017 || $product_id == 1067){
                        $select = 'nos';
                    }else{
                        $select = 'weight';
                    }
                }
                $query1 =  $this->db->query("SELECT $select as sales,product_id,sub_product_id,tile_material_id,id FROM order_product_list_process WHERE order_id = '".$order_id."'  AND product_id = '".$product_id."' AND id = '".$sub_id."' AND deleteid = 0 ORDER BY id DESC")->result();
        
                foreach ($query1 as $val1) {
                    if($val1->sub_product_id > 0 && $val1->sub_product_id != null){
                        $sub_id = $val1->id;
                        $product = $val1->sub_product_id;
                        $weight_new = $val1->sales;
                    }else if($val1->tile_material_id > 0 && $val1->tile_material_id != null){
                        $sub_id = $val1->id;
                        $product = $val1->tile_material_id;
                        $weight_new = $val1->sales;
                    }else{
                        $sub_id = $val1->id;
                        $product = $val1->product_id;
                        $weight_new = $val1->sales;
                    }
                
                }

                if($select == 'nos' || $select == 'qty' ){
                    $weight_new = round($weight_new,3);
                }else{
                    $weight_new = round($weight_new/1000,3);
                }

                
                
                    $query2 = $this->db->query("SELECT SUM(billed_stock) as billed_stock FROM stockreport AS a WHERE a.order_id = '".$order_id."'  AND a.product_id = '".$product."' AND a.sub_prod_id= '".$sub_id."' ORDER BY a.id DESC LIMIT 1")->result();
        
        
                foreach ($query2 as $val2) {
                    $weight_old = $val2->billed_stock;
                } 
                
                if($weight_old != 0 ){
                    $weight = round($weight_new,3) - round($weight_old,3);
                }else {
                    $weight = round($weight_new,3);
                }
        
                $from_date = date('Y-m-d');

                // if($weight!= 0){
        
                    $res = $this->db->query("SELECT actual_closing FROM stockreport WHERE product_id = '".$product."'  ORDER BY id DESC LIMIT 1")->row();

                    $res_open = $this->db->query("SELECT * FROM stockreport WHERE product_id = '".$product."' ORDER BY id DESC LIMIT 1")->row();

                    $today_open = $this->db->query("SELECT * FROM stockreport WHERE product_id = '".$product."' AND order_no = 'open' AND DATE(create_date) = '" . $from_date . "' ORDER BY id DESC LIMIT 1")->row();

                    $open = $this->db->query("SELECT * FROM stockreport WHERE product_id = '".$product."' AND order_no = 'open' ORDER BY id DESC LIMIT 1")->row();

                    if($res_open->actual_closing != 0){
                        $opening_stock = $res_open->actual_closing;    
                        if($today_open->opening_stock > 0){
                                    $opening_stock = $today_open->opening_stock;
                                } 
                    }else{
                        $opening_stock = $open->opening_stock;    
                    }

                    $actual_cloaing_stock = ($opening_stock + $inward) - ($weight); //$value->optimal_stock + $value->production_stock +

                    //billied date //stockref
                    $billied_date = $this->db->query("SELECT create_date FROM orders_process WHERE id = '".$order_id."' ORDER BY id DESC LIMIT 1")->row();

                
                    $datastock['product_id']=$product;        
                    $datastock['sub_prod_id']=$sub_id;        
                    $datastock['order_id']=$order_id;
                    $datastock['order_no']=$order_no;
                    $datastock['user_id']=$this->userid;
                    $datastock['create_date']=$billied_date->create_date;
                    $datastock['opening_stock']=round($opening_stock,3);
                    $datastock['inward']=0;
                    $datastock['return_stock']=0;
                    $datastock['billed_stock'] = $weight;
                    $datastock['actual_closing'] = round($actual_cloaing_stock,3);

                    $this->Main_model->insert_commen($datastock,'stockreport');
                // }

                }
            }
    } 


    function date_stock_order_return($product_id,$return_sub_id,$complains_order_id,$sub_id,$order_id,$order_no,$type){
      
        $inward=0;
         if($product_id>0)
         {
             $result = $this->Main_model->where_names('product_list','id', $product_id);
 
             foreach ($result as $value) {
 
                 if(($value->uom === 'Nos' || $value->uom === 'nos')){
 
                     if($product_id == 20   ){
                         $select = 'nos';
                     }else{
                         $select = 'qty';
                     }
                 }else{
                     if( $product_id == 1068 || $product_id == 1017 || $product_id == 1067){
                         $select = 'nos';
                     }else{
                         $select = 'weight';
                     }
                 }
 
                 $query1 =  $this->db->query("SELECT $select as sales,weight as sales1,product_id,sub_product_id,tile_material_id,id FROM order_product_list_process WHERE order_id = '".$order_id."'  AND product_id = '".$product_id."' AND id = '".$sub_id."' AND deleteid = 0 ORDER BY id DESC")->result();
 
                
         
                 foreach ($query1 as $val1) {
                     if($val1->sub_product_id > 0 && $val1->sub_product_id != null){
                         $sub_id = $val1->id;
                         $product = $val1->sub_product_id;
                         $return_new = $val1->sales;
                     }else if($val1->tile_material_id > 0 && $val1->tile_material_id != null){
                         $sub_id = $val1->id;
                         $product = $val1->tile_material_id;
                         $return_new = $val1->sales;
                     }else{
                         $sub_id = $val1->id;
                         $product = $val1->product_id;
                         $return_new = $val1->sales;
                     }
                 
                 }
 
                 $resret = $this->db->query("SELECT * FROM sales_return_products WHERE id = '".$return_sub_id."'  ORDER BY id DESC LIMIT 1")->row();
                 $org_nos = $resret->org_nos;
                 $returned_nos= $resret->edit_nos;
 
                 
 
                 if($select == 'nos' || $select == 'qty'){
                     if($returned_nos >0){
                         $return_val = round($returned_nos,3);
                     }else{
                         $return_val = round($return_new,3);
                     }
                 }
                 else{
                     if($returned_nos >0 ){
                         $singlewei = $return_new/$org_nos;
                         $return_val = round(($singlewei * $returned_nos)/1000,3);
                     }else{
                         $return_val = round($return_new/1000,3);
                     }
                 }
 
                 $return = round($return_val,3);
         
                 $from_date = date('Y-m-d');
 
                 if($return!= 0){
         
                     $res = $this->db->query("SELECT actual_closing FROM stockreport WHERE product_id = '".$product."'  ORDER BY id DESC LIMIT 1")->row();
 
                     $res_open = $this->db->query("SELECT * FROM stockreport WHERE product_id = '".$product."' ORDER BY id DESC LIMIT 1")->row();
 
                     $today_open = $this->db->query("SELECT * FROM stockreport WHERE product_id = '".$product."' AND order_no = 'open' AND DATE(create_date) = '" . $from_date . "' ORDER BY id DESC LIMIT 1")->row();
 
                     $open = $this->db->query("SELECT * FROM stockreport WHERE product_id = '".$product."' AND order_no = 'open' ORDER BY id DESC LIMIT 1")->row();
 
                     if($res_open->actual_closing != 0){
                         $opening_stock = $res_open->actual_closing;    
                         if($today_open->opening_stock > 0){
                                     $opening_stock = $today_open->opening_stock;
                                 } 
                     }else{
                         $opening_stock = $open->opening_stock;    
                     }
                     $opening_stock = $opening_stock >0 ? $opening_stock : 0;
                     $actual_cloaing_stock = ($opening_stock + $inward) + ($return); 

                     //return date  //stockref
                     $returndate = $this->db->query("SELECT update_date FROM order_sales_return_complaints WHERE id = '".$complains_order_id."' ORDER BY id DESC LIMIT 1")->row();
                     
                 
                     $datastock['product_id']=$product;        
                     $datastock['sub_prod_id']=$sub_id;        
                     $datastock['order_id']=$order_id;
                     $datastock['order_no']=$return_sub_id ." M  ".$complains_order_id;
                     $datastock['user_id']=$this->userid;
                     $datastock['create_date']=$returndate->update_date;
                     $datastock['opening_stock']=round($opening_stock,3);
                     $datastock['inward']=0;
                     $datastock['return_stock']= $return;
                     $datastock['billed_stock'] =0;
                     $datastock['actual_closing'] = round($actual_cloaing_stock,3);
 
                     $this->Main_model->insert_commen($datastock,'stockreport');
                 }
 
                 }
          }
    } 


    public function return_weight_update() 
    {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        
        $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
        foreach($results as $vl)
        {
            $nos_re=$vl->nos;                                     
            $process_id=$vl->order_process_product_id;


        if($tablename == 'order_product_list_process_return_temp'){
                    $process_data = $this->db->query("SELECT * FROM order_product_list_process WHERE id = '".$process_id."' ORDER BY id DESC LIMIT 1")->row();

                    $nos = $process_data->nos > 0 ? $process_data->nos : $process_data->qty;
                    $weg = $process_data->weight;
                    $single_we = $process_data->single_we;
                    $singlewei = $weg/$nos;
                    $return_weg = round(($singlewei * $nos_re),3);

                    if($return_weg!=0){
                        $this->db->query("UPDATE $tablename SET weight='".$return_weg."' WHERE id='" . $form_data->id . "'");
                    }


            }
        }

        $myData = ["weight" => $return_weg, "order_product_id" => $process_id];

        echo json_encode($myData);
    }

    //    AStockUpdate-live-01/07

     // AStockUpdate-live-01/07
    
    public function getFactForDeckingRollSheet() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $tablemain = $form_data->tablename_sub;
        $fact1 = "0";        
        $fact2 = "0";
        $data = $this->Main_model->where_names($tablename_sub,'id',$form_data->order_product_id);
        foreach($data as $val){

            if($val->fact > 0){
                $fact1 = $val->fact;
            }
            if($val->fact2 > 0){
                $fact2 = $val->fact2;
            }
            $subprodid = $val->sub_product_id;
            if($val->sub_product_id > 0){
                $dataprod = $this->Main_model->where_names_row('*','product_list','id',$val->sub_product_id);
                $fact1 = $dataprod->formula;
                $fact2 = $dataprod->formula2;
            }
        }

        $myData = ["fact1" => $fact1,"fact2" => $fact2,"sub_prod" => $subprodid,"tablename_sub" => $tablename_sub, "order_product_id" => $form_data->order_product_id];

        echo json_encode($myData);
    }

   
 public function QtyUpdate()
    {
        $form_data = json_decode(file_get_contents("php://input"));
        
        $id = $form_data->order_product_id;
        $table_sub = $form_data->tablename_sub;
        $data = $this->Main_model->where_names_row('*',$table_sub,'id',$id);
        $uom = $data->uom;
        $fact = $data->fact;
        $profile = $data->profile;
        $crimp = $data->crimp;
        $nos = $data->nos;        
        $product_id = $data->product_id;

        $prod_data = $this->Main_model->where_names_row('type','product_list','id',$product_id);
        $type = $prod_data->type;

        if($type==1)
        {
            if($uom==4)
            {
                $profile= $profile / 304.8;
            }
            if($uom==5)
            {
                $profile= $profile * 3.281;
            }
            if($uom==6)
            {
                $profile= $profile / 12;
            }

            $sqt_qty=$profile*$nos;
            $sqt_qty=round($sqt_qty,3);
        }

        if($type==2)
        {
                if($uom==4)
                {
                    $profile= $profile / 304.8;
                }
                if($uom==5)
                {
                    $profile= $profile * 3.281;
                }
                if($uom==6)
                {
                    $profile= $profile / 12;
                }
                if($uom==4)
                {
                    $crimp= $crimp/ 304.8;
                    $crimp=round(crimp,3);
                }
                if($uom==5)
                {
                    $crimp= $crimp * 3.281;
                    $crimp=round(crimp,3);
                }
                if($uom==6)
                {
                    $crimp= $crimp / 12;
                    $crimp=round($crimp,3);
                }
                
                $sqt_qty=$profile*$nos*$crimp;
                $sqt_qty=round($sqt_qty,3);
        }
        
        if($type==3)
        {
                $sqt_qty=$nos;
                $sqt_qty=round($sqt_qty,3);
        }
        if($type==8)
        {

            $profile = $profile+$crimp;
            if($uom==6)
            {
                $profile= $profile/39.37;
                $profile=$profile; 
            }

            if($uom==4)
            {
                $profile= $profile/1000;
                $profile=$profile;
            }
            if($uom==3)
            {
                $profile= $profile*0.305;
                $profile=$profile;
            }
           
            $sqt_qty=$profile*$nos*$fact;
            $sqt_qty=round($sqt_qty,3);
        }
        if($type==10)
        {
           if($uom==6)
            {
                $profile= $profile/39.37;
                $profile=$profile; 
            }

            if($uom==4)
            {
                $profile= $profile/1000;
                $profile=$profile;
            }
            if($uom==3)
            {
                $profile= $profile*0.305;
                $profile=$profile;
            }
           $sqt_qty=$profile*$fact*$nos;
           $sqt_qty=round($sqt_qty,3);
           
          
       }

        
       $this->db->query("UPDATE `".$table_sub."` SET `qty` = '" . $sqt_qty . "' WHERE `id` = '" . $id . "'");

       echo $sqt_qty; 

    }
     
}
