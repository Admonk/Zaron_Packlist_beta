<?php
defined('BASEPATH') OR exit('No direct script access allowed');
ini_set('memory_limit', '4400M');
class Order extends CI_Controller {
    function __construct() {
        error_reporting(0);
        parent::__construct();
        $this->load->model('Admin/Users_model');
        if (isset($this->session->userdata['logged_in'])) {
            $sess_array = $this->session->userdata['logged_in'];
            $userid = $sess_array['userid'];
            $email = $sess_array['email'];
            $sales_id = $sess_array['sales_id'];
            $define_saleshd_id = $sess_array['define_saleshd_id'];
            $define_salesteam_id = $sess_array['define_salesteam_id'];
            $define_driver_id = $sess_array['define_driver_id'];
            $customer_id = $sess_array['customer_id'];
            $username = $sess_array['username'];
            $this->userid = $userid;
            $this->username = $username;
            $this->user_mail = $email;
            $this->sales_id = $sales_id;
            $this->define_saleshd_id = $define_saleshd_id;
            $this->define_salesteam_id = $define_salesteam_id;
            $this->define_driver_id = $define_driver_id;
            $this->customer_id = $customer_id;
            profile($this->user_mail);
        }
    }
    
    public function sales_complaints()
	{
        
		                              


									    if(isset($this->session->userdata['logged_in']))
							            {
							                
							                
							                
							                 
                                             $data['po_number']='PO-'.substr(time(), 5).'/'.date('Y');
							            	 $data['user_group'] = $this->Main_model->where_names('user_group','deleteid','0');
							            	 
							            	 
							            	$neworder_id = 1;
                                            $order_last_count = $this->Main_model->order_last_count('purchase_orders_process');
                                            foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                $data['neworder_id'] = base64_encode($neworder_id);
							            	 
							            	 
                                             $data['active_base']='customer_1';
										     $data['active']='customer_1';
								             $data['title']    = 'Sales Complaints List';
								             $data['top_nav']  = $this->load->view('commen/top_nav', $data, TRUE);
								             $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
								             $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
									         $this->load->view('order/sales_complaints_list',$data);
										
										
										}
										else
										{
										     $this->load->view('admin/index');
										}
	     

	}
	
    
      public function sales_return()
	{
        
		                              


									    if(isset($this->session->userdata['logged_in']))
							            {
							                
							                $data['racksetup'] = $this->Main_model->where_names('racksetup', 'id', '1');
							                $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '15', 'deleteid', '0', 'id', 'ASC');
            
							                 
                                             $data['po_number']='PO-'.substr(time(), 5).'/'.date('Y');
							            	 $data['user_group'] = $this->Main_model->where_names('user_group','deleteid','0');
							            	 
							            	 
							            	$neworder_id = 1;
                                            $order_last_count = $this->Main_model->order_last_count('purchase_orders_process');
                                            foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                $data['neworder_id'] = base64_encode($neworder_id);
							            	 
							            	 
                                             $data['active_base']='customer_1';
										     $data['active']='customer_1';
								             $data['title']    = 'Sales Complaints List';
								             $data['top_nav']  = $this->load->view('commen/top_nav', $data, TRUE);
								             $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
								             $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
									         $this->load->view('order/sales_return_list',$data);
										
										
										}
										else
										{
										     $this->load->view('admin/index');
										}
	     

	}
	
    
    
    
     public function fetch_data_complaints_table() {
	    
	    date_default_timezone_set('Asia/Kolkata');
	    
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND  a.customer_id LIKE '%" . $search . "%' OR b.name LIKE '%" . $search . "%' OR a.order_no LIKE '%" . $search . "' OR a.invoice_date LIKE '%" . $search . "%' OR a.create_date LIKE '%" . $search . "%'";
        }
        
        if($this->session->userdata['logged_in']['access'] !=1)
        {
             $sqls = " AND a.user_id='".$this->userid."'";
             $sqls1 = " AND user_id='".$this->userid."'";
        }
        
        if($this->session->userdata['logged_in']['access']==11)
        {
          
          
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('admin_users','define_saleshd_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sqls = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $sqls1 = ' AND  user_id IN (' . $sales_team_id . ')';
             
        }
        
        
        
            $i = 1;
            $array = array();
            
            
            $querycount = $this->db->query("SELECT a.*,b.name FROM $tablename as a JOIN admin_users as b ON a.user_id=b.id  WHERE a.deleteid='0' AND a.order_base='" . $order_base . "' $sqls $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.*,b.name FROM $tablename as a JOIN admin_users as b ON a.user_id=b.id  WHERE a.deleteid='0' AND a.order_base='" . $order_base . "' $sqls $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
       
        
        
        
        
        foreach ($result as $value) {
         
               
               
                 $totalqty=0;
         
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."'");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess)
                {      
                    
                        if($value->order_base>1)
                        {  
                           
                            if($valuess->return_recived_status==1)
                            {
                             
                             
                             $totalqty+=$valuess->qty;
                             $totalamount += round($valuess->qty*$valuess->rate,2);
                            
                            }
                        }
                        else
                        {
                            
                             $totalqty+=$valuess->qty;
                             $totalamount += round($valuess->qty*$valuess->rate,2);
                        }
                    
                       
                }
                    
         
        
            
            $array[] = array('no' => $i, 'id' => $value->id,'amount' => $totalamount,'order_base' => $value->order_base,'order_by' => $value->name,'qty'=>$totalqty,'customer_id'=>$value->customer_id,'order_no' => $value->order_no, 'remarks' => $value->remarks, 'product_id' => $value->product_id,'create_date' => date('d-m-Y', strtotime($value->create_date)),'invoice_date' => date('d-m-Y', strtotime($value->invoice_date)),'update_date' => date('d-m-Y', strtotime($value->update_date)));
            $i++;
            
            
            
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    	public function purchase_fetch_cp_products()
	{
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                     $array=array();
                 	 $result= $this->Main_model->where_names('sales_complient_products','c_id',$id);
                 	 foreach ($result as  $value) {
                 	     
                 	     
                     
                 	 $array[] = array(
                 	 	    
                 	 	    'no' => $i, 
                            'id' => $value->id, 
                 	 		'product_name'=>$value->product_name,
                 	 	    'notes'=>$value->notes,
                 	 		'qty' =>  $value->qty,
                 	 		'batch_no' =>  $value->batch_no,
                 	 		

                 	 	);
                 	 	
                 	 	
                 	  
                 	 	

                       $i++;


                 	 }

                    echo json_encode($array);

	}
	
	
	
	
		public function oder_return_fetch_cp_products()
	{
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                     $array=array();
                 	 $result= $this->Main_model->where_names('sales_return_products','c_id',$id);
                 	 foreach ($result as  $value) {
                 	     
                 	     if($value->return_recived_status==1)
                 	     {
                 	         $status='Received By Driver';
                 	     }
                 	     else
                 	     {
                 	         $status='';
                 	     }
                 	     
                 	      if($value->rack_info!='')
                 	     {
                 	         $instatus='Inwarded';
                 	     }
                 	     else
                 	     {
                 	         $instatus='';
                 	     }
                     
                     
                 	 $array[] = array(
                 	 	    
                 	 	    'no' => $i, 
                            'id' => $value->id, 
                 	 		'product_name'=>$value->product_name,
                 	 	    'notes'=>$value->notes,
                 	 		'qty' =>  $value->qty,
                 	 		 'rate' =>  $value->rate,
                 	 		'total' => round($value->qty*$value->rate,2),
                 	 		'rack_info' =>  $value->rack_info,
                 	 		'status' =>  $status,
                 	 		'in_status' =>  $instatus,
                 	 		'bin_info' =>  $value->bin_info,
                 	 		'batch_no' =>  $value->batch_no,
                 	 		

                 	 	);
                 	 	
                 	 	
                 	  
                 	 	

                       $i++;


                 	 }

                    echo json_encode($array);

	}
    
    
    
    	public function purchase_fetch_cp_remarks_fetch()
	{
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                      $array=array();
                 	 $result= $this->Main_model->where_names('sales_complaints_remarks','c_id',$id);
                 	 foreach ($result as  $value) {
                 	     
                 	      $order_no="";
                 	      $resultp= $this->Main_model->where_names('order_sales_complaints','id',$id);
                     	  foreach ($resultp as  $valuep) {
                     	     
                     	     $order_no=$valuep->order_no;
                     	  }
                     	  
                     	if($value->order_base==1)
                     	{
                     	    $value->order_base='ASSIGN DRIVER';
                     	}
                     	elseif($value->order_base==4)
                     	{
                     	    $value->order_base='TRIP STARTED';
                     	}
                     	elseif($value->order_base==5)
                     	{
                     	    $value->order_base='FACTORY INWARD';
                     	}
                     	elseif($value->order_base==2)
                     	{
                     	    $value->order_base='APPROVED';
                     	}
                     	elseif($value->order_base==6)
                     	{
                     	    $value->order_base='RESCHEDULE';
                     	}
                     	elseif($value->order_base==0)
                     	{
                     	   $value->order_base='UN-ASSIGNED';
                     	}
                     	else
                     	{
                     	    $value->order_base='REJECTED';
                     	}

                 	 $array[] = array(
                 	 	    
                 	 	    'no' => $i, 
                            'id' => $value->id, 
                 	 		'order_no' => $order_no, 
                 	 	    'order_base'=>$value->order_base,
                 	 	    'remarks'=>$value->remarks,
                 	 		'create_date' =>  date('d-m-Y', strtotime($value->create_date)),
                 	 		'create_time' =>  $value->create_time,
                 	 		

                 	 	);
                 	 	
                 	 	
                 	  
                 	 	

                       $i++;


                 	 }

                    echo json_encode($array);

	}
	
		public function oder_return_fetch_cp_remarks_fetch()
	{
                     
                     
                     $i=1;
                     
                     
                     $id=$_GET['id'];
                      $array=array();
                 	 $result= $this->Main_model->where_names('sales_return_remarks','c_id',$id);
                 	 foreach ($result as  $value) {
                 	     
                 	      $order_no="";
                 	      $resultp= $this->Main_model->where_names('order_sales_return_complaints','id',$id);
                     	  foreach ($resultp as  $valuep) {
                     	     
                     	     $order_no=$valuep->order_no;
                     	  }
                     	  
                       
                     	if($value->order_base==1)
                     	{
                     	    $value->order_base='ASSIGN DRIVER';
                     	}
                     	elseif($value->order_base==4)
                     	{
                     	    $value->order_base='TRIP STARTED';
                     	}
                     	elseif($value->order_base==5)
                     	{
                     	    $value->order_base='FACTORY INWARD';
                     	}
                     	elseif($value->order_base==2)
                     	{
                     	    $value->order_base='APPROVED';
                     	}
                     	elseif($value->order_base==6)
                     	{
                     	    $value->order_base='RESCHEDULE';
                     	}
                     	elseif($value->order_base==0)
                     	{
                     	    $value->order_base='UN-ASSIGNED';
                     	}
                     	else
                     	{
                     	    $value->order_base='REJECTED';
                     	}

                 	 $array[] = array(
                 	 	    
                 	 	    'no' => $i, 
                            'id' => $value->id, 
                 	 		'order_no' => $order_no, 
                 	 	    'order_base'=>$value->order_base,
                 	 	    'remarks'=>$value->remarks,
                 	 		'create_date' =>  date('d-m-Y', strtotime($value->create_date)),
                 	 		'create_time' =>  $value->create_time,
                 	 		

                 	 	);
                 	 	
                 	 	
                 	  
                 	 	

                       $i++;


                 	 }

                    echo json_encode($array);

	}
	
	public function fetch_product_get_vendor_order_no() {
        $form_data = json_decode(file_get_contents("php://input"));
        $search = $_GET['search'];
        $sql="";
        if($search!='')
        {
            
            $search=explode('-', $search);
            
            $sql=' AND a.id="'.$search[0].'"';
          
        }
        
        $array = array();
        $query = $this->db->query("SELECT b.order_no FROM customers as a JOIN orders_process as b ON a.id=b.customer_id  WHERE a.deleteid='0' AND b.order_base=1 AND b.finance_status=5  $sql  ORDER BY b.order_no  ASC");
        $result=$query->result();                       
        foreach ($result as $value) {
            $array[] = array('order_no'=>$value->order_no);
        }
        echo json_encode($array);
    }
    
       public function fetch_product_get_customer() 
       {
                        $form_data = json_decode(file_get_contents("php://input"));
                        $search = $form_data->search;
                        $sql="";
                        if($search!='')
                        {
                          $sql=' AND a.company_name LIKE "%'.$search.'%"';
                          
                        }
                        
                        $array = array();
                        $query = $this->db->query("SELECT a.company_name,a.id,b.order_no FROM customers as a JOIN orders_process as b ON a.id=b.customer_id  WHERE a.deleteid='0' AND b.order_base=1 AND b.finance_status=5  $sql  GROUP BY a.id  ORDER BY b.order_no  ASC");
                        $result=$query->result();                       
                        foreach ($result as $value) {
                            $array[] = trim($value->id.'-'.$value->company_name);
                        }
                        echo json_encode($array);
     }
    
    
    
    
    	public function get_purchase_product_list()
	{
                     
                     
                     $i=1;
                     
                     
                     $order_no=$_GET['order_no'];
                     $array=array();
                 	 $queryss = $this->db->query("SELECT a.*  FROM order_product_list_process as a  JOIN orders_process as b ON a.order_id=b.id WHERE a.deleteid='0' AND b.order_no='" . $order_no . "'   ORDER BY a.id ASC");
                     $result = $queryss->result();
                 	 foreach ($result as  $value) {
                 	     
                 	  

                 	 $array[] = array(
                 	 	    
                 	 	    'no' => $i, 
                            'id' => $value->id, 
                 	 		'product_name' => $value->product_name, 
                 	 	    'qty'=>$value->qty,
                 	 	    'rate'=>$value->rate

                 	 	);
                 	 	
                 	 	

                       $i++;


                 	 }

                    echo json_encode($array);

	}
	
	
	
	
	
	
	
	
	
		public function get_purchase_product_list_by_return()
	{
                     
                     
                     $i=1;
                     
                     
                     $order_no=$_GET['id'];
                     $array=array();
                 	 $queryss = $this->db->query("SELECT a.*  FROM sales_return_products as a   WHERE a.deleteid='0' AND a.c_id='" . $order_no . "'   ORDER BY a.id ASC");
                     $result = $queryss->result();
                 	 foreach ($result as  $value) {
                 	     
                 	  

                 	 $array[] = array(
                 	 	    
                 	 	    'no' => $i, 
                            'id' => $value->id,
                            'c_id' => $value->c_id, 
                 	 		'product_name' => $value->product_name, 
                 	 	    'qty'=>$value->qty,
                 	 	    'rate'=>$value->rate,
                 	 	    'notes'=>$value->notes

                 	 	);
                 	 	
                 	 	

                       $i++;


                 	 }

                    echo json_encode($array);

	}
	
	
	
	
		public function purchase_complaints_data()
	{
	    
	    
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                        
                                        
                                      
                                     
                                        
                                         $customer_id=0;
                                         $result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);
                                         foreach ($result as  $value) {
                                            	     
                                            	     $create_date=$value->create_date;
                                            	     $order_id=$value->id;
                                            	     $customer_id=$value->customer_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                            	     
                                            	       $company_name=$value2->company_name;
                                            	      
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;
                                         
                                         //$data['product_id']="";
                                       
                                        
                                         $data['user_id']=$this->userid;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         
                                         
                                         $data['invoice_date']= $create_date;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,$tablename);
                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         
                                        
                                         
                                         $netweight=0;
                                	  	 for ($i=0; $i <count($purchase_order_product_id) ; $i++) { 
                                		
                                			
                                		    $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                            	     //$qty=$value->qty;
                                            	     $product_name=$value->product_name;
                                            }
                                			$netweight+=$purchase_qty_data[$i];
                                			$datadd['qty']=$purchase_qty_data[$i];
                                			$datadd['c_id']=$insert_id;
                                			$datadd['product_name']=$product_name;
                                			$datadd['notes']=$purchase_notes_data[$i];
                                		    $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];
                                		    $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_complient_products');
                                			
                                			
                                		 }

                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Complaints Created..');
                                         echo json_encode($array);
  
                 	


	}
	
	
	
	
    			public function purchase_complaints_data_remarks_update()
	{
	    
	    
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                 
                 
                                         $data['create_date']= $date;
                                         $data['create_time']= $time;
                                         $data['c_id']= $form_data->id;
                                         $data['order_base']= $form_data->order_base;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,'sales_complaints_remarks');
                                         $this->db->query("UPDATE order_sales_complaints SET order_base='".$form_data->order_base."' WHERE id='".$form_data->id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Complaints Remarks Updated..');
                                         echo json_encode($array);
  
                 	


	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		public function sales_return_data()
	{
	    
	    
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                        
                          
                                     
                                        
                                         $customer_id=0;
                                         $result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);
                                         foreach ($result as  $value) {
                                            	     
                                            	     $create_date=$value->create_date;
                                            	     $order_id=$value->id;
                                            	     $order_no=$value->order_no;
                                            	     $customer_id=$value->customer_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                            	     
                                            	       $company_name=$value2->company_name;
                                            	      
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;
                                         
                                         //$data['product_id']="";
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;
                                       
                                        
                                         $data['user_id']=$this->userid;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         
                                         
                                         $data['invoice_date']= $create_date;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,$tablename);
                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         $totalamount=0;
                                	  	 for ($i=0; $i <count($purchase_order_product_id) ; $i++) { 
                                		
                                			
                                		    $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                            	     //$qty=$value->qty;
                                            	     $product_name=$value->product_name;
                                            	     $rate=$value->rate;
                                            }
                                            
                                            $totalamount+=$purchase_qty_data[$i]*$rate;
                                            
                                			$netweight+=$purchase_qty_data[$i];
                                			$datadd['qty']=$purchase_qty_data[$i];
                                			
                                			$datadd['rate']=$rate;
                                			$datadd['c_id']=$insert_id;
                                			$datadd['product_name']=$product_name;
                                			$datadd['notes']=$purchase_notes_data[$i];
                                		    $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];
                                		    
                                		    
                                		    $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');
                                			$this->db->query("UPDATE order_product_list_process SET return_status=1,return_id='".$insert_id_data."' WHERE id='".$purchase_order_product_id[$i]."'");
                                            
                                			
                                		 }

                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         $this->db->query("UPDATE orders_process SET return_status=1,return_id='".$insert_id."' WHERE id='".$order_id."'");
                                		 $totalamount=round($totalamount,2);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                        $balancetotal = 0;
                                        $debitsamount = 0;
                                        $creditsamount = 0;
                                        foreach ($res as $val) {
                                                $payid = $val->id;
                                                $customer_id = $val->customer_id;
                                                $amount = $val->amount;
                                                $debitsamount+= $val->debits;
                                                $creditsamount+= $val->credits;
                                                $balancetotal+= $val->balance;
                                        }
                                        $balancetotal=$creditsamount-$debitsamount;
                                        $data_address['order_id'] = $insert_id;
                                        $data_address['customer_id'] = $customer_id;
                                        $data_address['user_id'] = $this->userid;
                                        $data_address['notes'] = 'Sales Return';
                                        $data_address['payment_mode'] = 'Cash';
                                        $data_address['order_no'] = 'RE-'.$insertid;
                                        $data_address['difference'] = 0;
                                        $data_address['reference_no'] = $order_no;
                                        $data_address['amount'] = $totalamount;
                                        $data_address['account_head_id'] = 68;
                                        $data_address['account_heads_id_2'] = 2;
                                        $data_address['order_trancation_status'] = 0;
                                        $data_address['paid_status'] = 1;
                                        $data_address['credits'] = $totalamount;
                                        $data_address['balance'] = $balancetotal + $totalamount;
                                        $data_address['collected_amount'] = $totalamount;
                                        $data_address['payment_date'] = $create_date;
                                        $data_address['process_by'] = 'Sales Return';
                                        $data_address['payment_time'] = $time;
                                        $data_address['party_type'] = 1;
                                        $data_address['bank_id'] = 25;
                                        
                                        
                                        $data_address['deletemod'] = 'RE-'.$insert_id;
                                        //$this->Main_model->insert_commen($data_address, 'all_ledgers');
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return  Created..');
                                         echo json_encode($array);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
  
                 	


	}
	
	
	public function sales_return_data_by_driver()
	{
	    
	    
                   date_default_timezone_set("Asia/Kolkata"); 
                   $date= date('Y-m-d');
                   $time= date('h:i A');
                   $form_data = json_decode(file_get_contents("php://input"));
                 
                                        
                          
                                     
                                        
                                         $customer_id=0;
                                         $result= $this->Main_model->where_names('orders_process','order_no',$form_data->order_no);
                                         foreach ($result as  $value) {
                                            	     
                                            	     $create_date=$value->create_date;
                                            	     $order_id=$value->id;
                                            	     $order_no=$value->order_no;
                                            	     $customer_id=$value->customer_id;
                                         }
                                         
                                         
                                         
                                        
                                         
                                         $company_name="";
                                         $resultvordervv= $this->Main_model->where_names('customers','id',$customer_id);
                                         foreach ($resultvordervv as  $value2) {
                                            	     
                                            	       $company_name=$value2->company_name;
                                            	      
                                         }
                                         
                                         
                                         $data['customer_id']=$company_name;
                
               
                                         $tablename=$form_data->tablename;
                                         
                                         //$data['product_id']="";
                                         $data['customer']=$customer_id;
                                         $data['order_id']=$order_id;
                                       
                                        
                                         $data['user_id']=$this->userid;
                                         $data['order_no']=$form_data->order_no;
                                         
                                         $data['update_date']= $form_data->create_date;
                                         
                                         
                                         $data['invoice_date']= $create_date;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,$tablename);
                                         $purchase_order_product_id=explode('|', $form_data->purchase_order_product_id);
                                         $purchase_notes_data=explode('|', $form_data->purchase_notes_data);
                                         $purchase_qty_data=explode('|', $form_data->purchase_qty_data);
                                         
                                        
                                         
                                         $netweight=0;
                                         $totalamount=0;
                                	  	 for ($i=0; $i <count($purchase_order_product_id) ; $i++) { 
                                		
                                			
                                		    $resultgetprodut= $this->Main_model->where_names('order_product_list_process','id',$purchase_order_product_id[$i]);
                                            foreach ($resultgetprodut as  $value) {
                                            	     //$qty=$value->qty;
                                            	     $product_name=$value->product_name;
                                            	     $rate=$value->rate;
                                            }
                                            
                                            $totalamount+=$purchase_qty_data[$i]*$rate;
                                            
                                			$netweight+=$purchase_qty_data[$i];
                                			$datadd['qty']=$purchase_qty_data[$i];
                                			
                                			$datadd['rate']=$rate;
                                			$datadd['c_id']=$insert_id;
                                			$datadd['product_name']=$product_name;
                                			$datadd['return_recived_status']=1;
                                			$datadd['notes']=$purchase_notes_data[$i];
                                		    $datadd['purchase_order_product_id']=$purchase_order_product_id[$i];
                                		    
                                		    
                                		    $insert_id_data=$this->Main_model->insert_commen($datadd,'sales_return_products');
                                			$this->db->query("UPDATE order_product_list_process SET return_status=1,return_id='".$insert_id_data."' WHERE id='".$purchase_order_product_id[$i]."'");
                                            
                                			
                                		 }
                                		 
                                		 
                         

                                         $this->db->query("UPDATE $tablename SET qty='".$netweight."' WHERE id='".$insert_id."'");
                                         $this->db->query("UPDATE orders_process SET order_base=25,reason='Driver Return Approval',return_status='1',return_id='".$insert_id."' WHERE id='".$order_id."'");
                                		 $totalamount=round($totalamount,2);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                        $balancetotal = 0;
                                        $debitsamount = 0;
                                        $creditsamount = 0;
                                        foreach ($res as $val) {
                                                $payid = $val->id;
                                                $customer_id = $val->customer_id;
                                                $amount = $val->amount;
                                                $debitsamount+= $val->debits;
                                                $creditsamount+= $val->credits;
                                                $balancetotal+= $val->balance;
                                        }
                                        $balancetotal=$creditsamount-$debitsamount;
                                        $data_address['order_id'] = $insert_id;
                                        $data_address['customer_id'] = $customer_id;
                                        $data_address['user_id'] = $this->userid;
                                        $data_address['notes'] = 'Sales Return';
                                        $data_address['payment_mode'] = 'Cash';
                                        $data_address['order_no'] = 'RE-'.$insertid;
                                        $data_address['difference'] = 0;
                                        $data_address['reference_no'] = $order_no;
                                        $data_address['amount'] = $totalamount;
                                        $data_address['account_head_id'] = 68;
                                        $data_address['account_heads_id_2'] = 2;
                                        $data_address['order_trancation_status'] = 0;
                                        $data_address['paid_status'] = 1;
                                        $data_address['credits'] = $totalamount;
                                        $data_address['balance'] = $balancetotal + $totalamount;
                                        $data_address['collected_amount'] = $totalamount;
                                        $data_address['payment_date'] = $create_date;
                                        $data_address['process_by'] = 'Sales Return';
                                        $data_address['payment_time'] = $time;
                                        $data_address['party_type'] = 1;
                                        $data_address['bank_id'] = 25;
                                        
                                        
                                        $data_address['deletemod'] = 'RE-'.$insert_id;
                                        //$this->Main_model->insert_commen($data_address, 'all_ledgers');
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return  Created..');
                                         echo json_encode($array);
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
  
                 	


	}
	
	
	    public function inward_bin_update()
	{
	    
	    
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                                         $name= $form_data->name;
                                         $values= $form_data->values;
                                         
                                         
                                         
                                         $this->db->query("UPDATE sales_return_products SET $name='".$values."' WHERE id='".$form_data->id."'");
                                         $array=array('error'=>'2','insert_id'=>1,'massage'=>'Sales Return Remarks Updated..');
                                         echo json_encode($array);
  


	}
	
    public function sales_return_data_remarks_update()
	{
	    
	    
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                                         
                                         
                 
                                         $data['create_date']= $date;
                                         $data['create_time']= $time;
                                         $data['c_id']= $form_data->id;
                                         $data['order_base']= $form_data->order_base;
                                         $data['remarks']= $form_data->remarks;
                                         $this->db->query("UPDATE all_ledgers SET deleteid='1' WHERE deletemod='RE-".$form_data->id."'");
                                         
                                         
                                         if($form_data->order_base==2)
                                         {
                                             
                                             
                                              
                                         
                                              $resultmain = $this->db->query("SELECT b.customer_id,b.id,b.order_no FROM `order_sales_return_complaints` as a JOIN orders_process as b ON a.order_id=b.id WHERE a.deleteid=0  AND a.id='".$form_data->id."' ORDER BY a.id DESC");
                                              $getdata = $resultmain->result();
                                              
                                                  foreach($getdata as $vl)
                                                  {
                                                      $customer_id=$vl->customer_id;
                                                      $order_id=$vl->id;
                                                      $order_no=$vl->order_no;
                                                  }
                                                  
                                                  $totalamount=0;
                                                  $resultmainre = $this->db->query("SELECT * FROM `sales_return_products`  WHERE c_id='".$form_data->id."'  ORDER BY id DESC");
                                                  $getdatare = $resultmainre->result();
                                                  foreach($getdatare as $vlre)
                                                  {
                                                      if($vlre->return_recived_status==1)
                                                      {
                                                          $totalamount+=round($vlre->qty*$vlre->rate,2);
                                                      }
                                                      
                                                  }
                                                  
                                              
                                                  $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                                  $balancetotal = 0;
                                                  $debitsamount = 0;
                                                  $creditsamount = 0;
                                                  foreach ($res as $val) {
                                                        $payid = $val->id;
                                                        $customer_id = $val->customer_id;
                                                        $amount = $val->amount;
                                                        $debitsamount+= $val->debits;
                                                        $creditsamount+= $val->credits;
                                                        $balancetotal+= $val->balance;
                                                 }
                                                 $balancetotal=$creditsamount-$debitsamount;
                                                
                                                    $data_address['order_id'] = $order_id;
                                                    $data_address['customer_id'] = $customer_id;
                                                    $data_address['user_id'] = $this->userid;
                                                    $data_address['notes'] = 'Sales Return';
                                                    $data_address['payment_mode'] = 'Cash';
                                                    $data_address['order_no'] = 'RE-'.$form_data->id;
                                                    $data_address['difference'] = 0;
                                                    $data_address['reference_no'] = $order_no;
                                                    
                                                    $data_address['amount'] = $totalamount;
                                                    $data_address['account_head_id'] = 68;
                                                    $data_address['account_heads_id_2'] = 2;
                                                    $data_address['order_trancation_status'] = 0;
                                                    $data_address['paid_status'] = 1;
                                                    $data_address['credits'] = $totalamount;
                                                    $data_address['balance'] = $balancetotal + $totalamount;
                                                    $data_address['collected_amount'] = $totalamount;
                                                    $data_address['payment_date'] = $date;
                                                    $data_address['process_by'] = 'Sales Return';
                                                    $data_address['payment_time'] = $time;
                                                    $data_address['party_type'] = 1;
                                                    $data_address['bank_id'] = 25;
                                                    
                                                    
                                                    $data_address['deletemod'] = 'RE-'.$form_data->id;
                                                    $this->Main_model->insert_commen($data_address, 'all_ledgers');
                                                                  
                                              
                                         }
                                         
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,'sales_return_remarks');
                                         $this->db->query("UPDATE order_sales_return_complaints SET order_base='".$form_data->order_base."',remarks='".$form_data->remarks."' WHERE id='".$form_data->id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return Remarks Updated..');
                                         echo json_encode($array);
  


	}
	
	
	
	public function sales_return_data_remarks_update_md()
	{
	    
	    
                                         date_default_timezone_set("Asia/Kolkata"); 
                                         $date= date('Y-m-d');
                                         $time= date('h:i A');
                                         $form_data = json_decode(file_get_contents("php://input"));
                                         
                                        
                 
                                         $data['create_date']= $date;
                                         $data['create_time']= $time;
                                         $data['c_id']= $form_data->id;
                                         $data['order_base']= $form_data->order_base;
                                         $data['remarks']= $form_data->remarks;
                                         
                                         if($form_data->order_base==2)
                                         {
                                             $reason='Return Approved By MD';
                                             $order_base='1';
                                             $md_approved_status=1;
                                         }
                                         else
                                         {
                                             $reason='Return Rejected By MD';  
                                             $order_base='1';
                                             $md_approved_status=2;
                                         }
                                         
                                         $resultmain = $this->db->query("SELECT b.customer_id,b.id,b.order_no FROM `order_sales_return_complaints` as a JOIN orders_process as b ON a.order_id=b.id WHERE a.deleteid=0  AND a.id='".$form_data->id."' ORDER BY a.id DESC");
                                         $getdata = $resultmain->result();
                                         foreach($getdata as $vl)
                                         {
                                                      $customer_id=$vl->customer_id;
                                                      $order_id=$vl->id;
                                                      $order_no=$vl->order_no;
                                         }
                                         
                                         $this->db->query("UPDATE orders_process SET reason='".$reason."',order_base='".$order_base."',md_approved_status='".$md_approved_status."' WHERE id='".$order_id."'");
                                         $this->db->query("UPDATE all_ledgers SET deleteid='1' WHERE deletemod='RE-".$form_data->id."'");         
                                         
                                         if($form_data->order_base==2)
                                         {
                                             
                                             
                                              
                                         
                                         
                                                
                                                  
                                                  
                                                 
                                                  $totalamount=0;
                                                  $resultmainre = $this->db->query("SELECT * FROM `sales_return_products`  WHERE c_id='".$form_data->id."'  ORDER BY id DESC");
                                                  $getdatare = $resultmainre->result();
                                                  foreach($getdatare as $vlre)
                                                  {
                                                      $totalamount+=round($vlre->qty*$vlre->rate,2);
                                                  }
                                                  
                                              
                                                  $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                                  $balancetotal = 0;
                                                  $debitsamount = 0;
                                                  $creditsamount = 0;
                                                  foreach ($res as $val) {
                                                        $payid = $val->id;
                                                        $customer_id = $val->customer_id;
                                                        $amount = $val->amount;
                                                        $debitsamount+= $val->debits;
                                                        $creditsamount+= $val->credits;
                                                        $balancetotal+= $val->balance;
                                                 }
                                                 $balancetotal=$creditsamount-$debitsamount;
                                                
                                                    $data_address['order_id'] = $order_id;
                                                    $data_address['customer_id'] = $customer_id;
                                                    $data_address['user_id'] = $this->userid;
                                                    $data_address['notes'] = 'Sales Return';
                                                    $data_address['payment_mode'] = 'Cash';
                                                    $data_address['order_no'] = 'RE-'.$form_data->id;
                                                    $data_address['difference'] = 0;
                                                    $data_address['reference_no'] = $order_no;
                                                    
                                                    $data_address['amount'] = $totalamount;
                                                    $data_address['account_head_id'] = 68;
                                                    $data_address['account_heads_id_2'] = 2;
                                                    $data_address['order_trancation_status'] = 0;
                                                    $data_address['paid_status'] = 1;
                                                    $data_address['credits'] = $totalamount;
                                                    $data_address['balance'] = $balancetotal + $totalamount;
                                                    $data_address['collected_amount'] = $totalamount;
                                                    $data_address['payment_date'] = $date;
                                                    $data_address['process_by'] = 'Sales Return';
                                                    $data_address['payment_time'] = $time;
                                                    $data_address['party_type'] = 1;
                                                    $data_address['bank_id'] = 25;
                                                    
                                                    
                                                    $data_address['deletemod'] = 'RE-'.$form_data->id;
                                                    $this->Main_model->insert_commen($data_address, 'all_ledgers');
                                                                  
                                              
                                         }
                                         
                                         
                                         $insert_id=$this->Main_model->insert_commen($data,'sales_return_remarks');
                                         $this->db->query("UPDATE order_sales_return_complaints SET order_base='".$form_data->order_base."',remarks='".$reason."' WHERE id='".$form_data->id."'");
                                         
                                         $array=array('error'=>'2','insert_id'=>$insert_id,'massage'=>'Sales Return Remarks Updated..');
                                         echo json_encode($array);
  


	}
	
	
	
	
    public function ordercreate() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_quotation');
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->id + 1;
            }
            $data['neworder_quotation_id'] = base64_encode($neworder_quotation_id);
            
            
            
             if($this->session->userdata['logged_in']['access']=='20')
            {
                     $neworder_id = 1;
                     $order_last_count = $this->Main_model->order_last_count('orders_process');
                     foreach ($order_last_count as $r) {
                        $neworder_id = $r->id + 1;
                     }
                     $data['neworder_id'] = base64_encode($neworder_id);                                        
                                                            
            }
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Customer Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/ordercreate', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_price_request_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_price_request_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function quotation_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_quotation');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/quotation_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function quotation_price_request_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_quotation');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/quotation_price_request_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function orders_list_all() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            
            
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orderlist_overall', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    public function transport_complated_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_complated_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
      public function reconciliation_completed_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_completed_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
     public function pick_up_loading() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/pick_up_loading', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    public function mass_search() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/mass_search', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    public function transport_overview_search() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_overview_search', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    public function orders_list_purchase() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Purchase Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_list_purchase', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_list_purchase() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Purchase Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_list_purchase', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiries_list_md() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Purchase Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/enquiries_list_md', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    public function orders_list_md() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'MD Price Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_list_md', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
      public function orders_approval_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'MD Approvel List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/orders_approval_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    public function orders_list_sales_head() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Sales Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/sales_head_order_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function finance_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
             $data['accountheads'] = $this->Main_model->where_names_order_by('accountheads','deleteid','0','id','ASC');
              $data['bankaccount'] = $this->Main_model->where_names('bankaccount','deleteid','0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Finance Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/finance_order_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    public function finance_reconciliation_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
             $data['accountheads'] = $this->Main_model->where_names_order_by('accountheads','deleteid','0','id','ASC');
              $data['bankaccount'] = $this->Main_model->where_names('bankaccount','deleteid','0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Finance Verification';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/finance_reconciliation_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    public function production_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_panel_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_panel_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_quality_check_panel_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_quality_check_panel_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
     public function fetch_data_table_production_by_order() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names_three_order_by_new($tablename, 'production_assign', $order_base, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'phone' => $phone, 'reason' => $value->reason, 'address' => $address, 'order_base' => $value->production_assign, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
    public function warehouse_panel_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/warehouse_panel_list_by_order', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_panel() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = base64_decode($_GET['product_id']);
            $data['product_id'] = $_GET['product_id'];
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_panel', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function production_panel_quality_check() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = base64_decode($_GET['order_id']);
            $data['status'] = $_GET['status'];
             
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production_panel_quality_check', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function warehouse_check() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['racksetup'] = $this->Main_model->where_names('racksetup', 'id', '1');
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = base64_decode($_GET['order_id']);
            
              $data['status'] =$_GET['status'];
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Production Order';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/warehouse_panel_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    public function transport_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
      
    public function transport_return_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_return_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    public function transport_orders_list_own() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/transport_orders_list_own', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function reconciliation_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['bankaccount'] = $this->Main_model->where_names('bankaccount', 'deleteid', '0');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    public function reconciliation_orders_list_self() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['bankaccount'] = $this->Main_model->where_names('bankaccount', 'deleteid', '0');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/reconciliation_orders_list_self', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    public function vehicle_wise_assigned() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['bankaccount'] = $this->Main_model->where_names('bankaccount', 'deleteid', '0');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Transport List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/vehicle_wise_assigned', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    public function driver_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    public function driver_open_orders_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_open_orders_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
     public function driver_orders_return_list() 
     {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Return Panel';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_return_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
   
   
    public function driver_orders_list_view() {
        if (isset($this->session->userdata['logged_in'])) {
            
             $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '15', 'deleteid', '0', 'id', 'ASC');
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = $_GET['id'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_list_view', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    public function driver_orders_list_view_return() {
        if (isset($this->session->userdata['logged_in'])) {
            
             $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '15', 'deleteid', '0', 'id', 'ASC');
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = $_GET['id'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel Return View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/driver_orders_list_view_return', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function pickup_orders_list_view() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['id'] = $_GET['id'];
            $data['driver_pickip'] = $_GET['driver_pickip'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/pickup_orders_list_view', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    public function production() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['production'] = $this->Main_model->where_names_order_by('production', 'deleteid', '0', 'id', 'ASC');
            $data['categories'] = $this->Main_model->where_names_order_by('categories', 'deleteid', '0', 'id', 'ASC');
            
            
            $data['purchase_order'] = $this->Main_model->where_names_two_order_by('purchase_order', 'inward_qty!=', '', 'product_id', $_GET['product_id'], 'id', 'ASC');
            
            
            $data['id'] = base64_decode($_GET['product_id']);
            $data['product_id'] = $_GET['product_id'];
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Driver Panel View';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/production', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if($this->session->userdata['logged_in']['access'] == '11')
            {            
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                           
            } 
            else 
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            
            
            
            
            
            
            
            
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 0;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            
            
            
            
           
            
            
            
         
            
            
            
            
            
            
            
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_price_request() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
               
               
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } 
            else
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 11;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiry_product_process_purchase_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 14;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function enquiry_product_process_md_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = '0';
            $data['old_tablename_sub'] = '0';
            $data['tablename'] = 'orders';
            $data['tablename_sub'] = 'order_product_list';
            $data['movetablename'] = 'orders_quotation';
            $data['movetablename_sub'] = 'order_product_list_quotation';
            $data['order_title'] = 'Enquiry NO';
            $data['order_lable'] = 'Enquiry Create';
            $data['missed'] = 'Enquiry';
            $data['move'] = 'Quotation';
            $data['status_base'] = 15;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Enquiry Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function overviewtrans() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = $_GET['order_id'];
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $data['order_id'], 'id', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overviewtrans', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function overview() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            
            
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            
            
             if($_GET['tablename']=='orders_quotation')
             {
                 $order_id='QC_'.$data['order_id'];
             }
             else
             {
                 $order_id='OR_'.$data['order_id'];
             }
            
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $order_id, 'id', 'ASC');
            
            
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overview', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function po() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $data['order_id'], 'id', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overview', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function overview_commission() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['overview_invoice_content'] = $this->Main_model->where_names_order_by('overview_invoice_content', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = $_GET['old_tablename'];
            $data['old_tablename_sub'] = $_GET['old_tablename_sub'];
            $data['tablename'] = $_GET['tablename'];
            $data['tablename_sub'] = $_GET['tablename_sub'];
            $data['movetablename'] = $_GET['movetablename'];
            $data['movetablename_sub'] = $_GET['movetablename_sub'];
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            
            
             if($_GET['tablename']=='orders_quotation')
             {
                 $order_id='QC_'.$data['order_id'];
             }
             else
             {
                 $order_id='OR_'.$data['order_id'];
             }
            
            
            $data['overview_invoice_content_base_order'] = $this->Main_model->where_names_order_by('overview_invoice_content_base_order', 'order_id', $order_id, 'id', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation ' . $data['order_no'];
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overview_commission', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_quotation() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
           
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = 'orders';
            $data['old_tablename_sub'] = 'order_product_list';
            $data['tablename'] = 'orders_quotation';
            $data['tablename_sub'] = 'order_product_list_quotation';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_convertion() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
               
               
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = 'orders';
            $data['old_tablename_sub'] = 'order_product_list';
            $data['tablename'] = 'orders_quotation';
            $data['tablename_sub'] = 'order_product_list_quotation';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 10;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders_quotation', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_quotation_price_request() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            }
            else
            {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['old_tablename'] = 'orders';
            $data['old_tablename_sub'] = 'order_product_list';
            $data['tablename'] = 'orders_quotation';
            $data['tablename_sub'] = 'order_product_list_quotation';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_title'] = 'Quotation NO';
            $data['order_lable'] = 'Quotation Create';
            $data['missed'] = 'Quotation';
            $data['move'] = 'Order ';
            $data['status_base'] = 12;
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users('orders', $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            if ($neworder_quotation_id < 10) {
                $neworder_quotation_id = '00' . $neworder_quotation_id;
            }
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['count_id'] = $neworder_quotation_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['count_id'] = $neworder_quotation_id;
                $data['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Quotation Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['additional_information'] = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11')
            {
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'TL  Approval Request ';
            $data['status_base'] = 1;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $data['order_base'] = 0;
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                    $data['order_base'] = $data_val->order_base;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process_tl_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                             $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Order';
            $data['status_base'] = 13;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process_purchase_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                            $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 4;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function ordercreate_product_process_md_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
           
           
           
             $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 5;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function ordercreate_product_process_finance_verification() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') 
            {
                
                $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 6;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function sales_return_to_order() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
           
           
           
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
               $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                 
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['baseset'] = $_GET['baseset'];
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Create Return Order';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 6;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/return_order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    public function sales_return_to_order_view() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') 
            {
                
                $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $data['baseset'] = $_GET['baseset'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Create Return Order';
            $data['missed'] = 'Order';
            $data['move'] = 'Finacle Verification ';
            $data['status_base'] = 6;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process_return';
            $data['tablename_sub'] = 'order_product_list_process_return';
            $data['movetablename'] = 'orders_process_return';
            $data['movetablename_sub'] = 'order_product_list_process_return';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/return_order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function sales_order_return() 
   {
    	    
    	        date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
                $form_data = json_decode(file_get_contents("php://input"));
                
                
                $order_product_id=$form_data->order_product_id;
                $order_product_id=explode('|',$order_product_id);
                
                
                
                
                
                
                
                
                            $resultpss= $this->Main_model->where_names($form_data->tablenamemain,'id',$form_data->order_id);
                     	    foreach ($resultpss as  $valuepss) {
                     	        
                     	        $customer_id=$valuepss->customer_id;
                     	        $driver_id=$valuepss->driver_id;
                     	        $order_no_set=$valuepss->order_no;
                     	        
                     	    }
                     	    
                     	    
                     	    
                     	                $tablename = 'orders_process_return';
                                        $basedata['count_id'] = 1;
                                        $basedata['create_time'] = $time;
                                        $basedata['user_id'] = $this->userid;
                                        $basedata['entry_user_id'] = $this->userid;
                                        $basedata['create_date']  = $form_data->arrival_date;
                                        $basedata['customer_id']   = $customer_id;
                                        $basedata['rescheduling_remarks']   = $form_data->return_remarks;
                                        
                                        $basedata['return_status'] = 1;
                                        $basedata['driver_id'] = $driver_id;
                                        
                                        $basedata['order_base'] = 1;
                                        $basedata['return_id'] = 1;
                                        
                                        
                                        $neworder_quotation_id = 1;
                                        $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
                                        foreach ($order_last_count as $r) {
                                            $neworder_quotation_id = $r->count_id + 1;
                                           
                                        }
                                        $neworder_id = 1;
                                        $order_last_count = $this->Main_model->order_last_count($tablename);
                                        foreach ($order_last_count as $r) {
                                            $neworder_id = $r->id + 1;
                                        }
                                        $basedata['id'] = $neworder_id;
                                        $order_no = $order_no_set . '/RE-'.$neworder_id;
                                        $basedata['order_no'] = $order_no;
                                        $insertid = $this->Main_model->insert_commen($basedata, $tablename);
                     	    
                      
                
                
                
                                        
                                        $totalamount=0;
                                        for($i=0;$i<count($order_product_id);$i++)
                                        {
                                            
                                       
                                        
                                        
                                       
                                                    $resultp= $this->Main_model->where_names($form_data->tablename_sub,'id',$order_product_id[$i]);
                                             	    foreach ($resultp as  $valuep) {
                                             	                
                                             	                
                                             	                 $order_id=$valuep->order_id;
                                                         	     $product_id=$valuep->product_id;
                                                         	     $product_name=$valuep->product_name;
                                                         	     $categories_name=$valuep->categories_name;
                                                         	     $categories_id=$valuep->categories_id;
                                                         	     
                                                         	     
                                                         	     $qty=$valuep->qty;
                                                         	     $rate=$valuep->rate;
                                                         	    
                                                         	    
                                                         	    
                                                         	     $tile_material_name = $valuep->tile_material_name;
                                                                 $tile_material_id = $valuep->tile_material_id;
                                                               
                                                                $dim_one = $valuep->dim_one;
                                                                $dim_two = $valuep->dim_two;
                                                                $dim_three = $valuep->dim_three;
                                                                $base_id = $valuep->base_id;
                                                                $image_length = $valuep->image_length;
                                                                $gst = $valuep->gst;
                                                                $gst_check = $valuep->gst_check;
                                                                $categories_id = $valuep->categories_id;
                                                                $profile = $valuep->profile;
                                                                $commission = $valuep->commission;
                                                                $address_id = $valuep->address_id;
                                                                $address_id_mark = $valuep->address_id_mark;
                                                                $crimp = $valuep->crimp;
                                                                $extra_crimp = $valuep->extra_crimp;
                                                                $sort_id = $valuep->sort_id;
                                                                $count_id = $valuep->count_id;
                                                                $back_crimp = $valuep->back_crimp;
                                                                $uom = $uom;
                                                                $billing_options = $valuep->billing_options;
                                                                $Meter_to_Sqr_feet = $valuep->Meter_to_Sqr_feet;
                                                                $Sqr_feet_to_Meter = $valuep->Sqr_feet_to_Meter;
                                                                
                                                                
                                                                
                                                                
                                                                if($valuep->return_nos!=0)
                                                                {
                                                                    $valuep->nos=$valuep->return_nos;
                                                                }
                                                                
                                                                if($valuep->return_qty!=0)
                                                                {
                                                                    $valuep->qty=$valuep->return_qty;
                                                                }
                                                                
                                                                
                                                                $nos = $valuep->nos;
                                                                $qty=$valuep->qty;
                                                                
                                                                
                                                                
                                                                $unit = $valuep->unit;
                                                                $fact = $valuep->fact;
                                                                
                                                                
                                                                $section_lable = $valuep->section_lable;
                                                                $section_value = $valuep->section_value;
                                                                $degree = $valuep->degree;
                                            
                                            
                                            
                                                                $sub_product_id = $valuep->sub_product_id;
                                                                $value_id = $valuep->value_id;
                                                                $reference_image = $valuep->reference_image;
                                                         	    
                                                         	    
                                                         	    
                                                         	    
                                                         	    
                                                         	    
                                                         	    
                                                         	    
                                             	    }
                                             	    
                                             	    
                                                                
                                             	    
                                             	    
                                             	    $tablename_sub=$form_data->tablename_sub;
                                             	    $tablenamemain=$form_data->tablenamemain;
                                             	    
                                             	    
                                             $purchase_product_list_process = $this->Main_model->where_names_two_order_by('order_product_list_process_return', 'sale_return_op_id', $order_product_id[$i], 'sale_return_o_no', $form_data->order_no, 'id', 'ASC');
                                             if(count($purchase_product_list_process)==0)
                                             {
                                                       
                                                             
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                                                $basedataproduct['sale_return_op_id'] = $order_product_id[$i];
                                                                $basedataproduct['sale_return_o_no'] = $form_data->order_no;
                                                                $basedataproduct['order_no'] = $order_no;
                                                                $basedataproduct['order_id'] = $insertid;
                                                                $basedataproduct['product_id'] = $product_id;
                                                                $basedataproduct['product_name'] = $product_name;
                                                                $basedataproduct['categories_name'] = $categories_name;
                                                                $basedataproduct['categories_id'] = $categories_id;
                                                                
                                                                
                                                                
                                                                $basedataproduct['tile_material_name'] = $tile_material_name;
                                                                $basedataproduct['tile_material_id'] = $tile_material_id;
                                                                $basedataproduct['dim_one'] = $dim_one;
                                                                $basedataproduct['dim_one'] = $dim_one;
                                                                $basedataproduct['dim_two'] = $dim_two;
                                                                $basedataproduct['dim_three'] = $dim_three;
                                                                $basedataproduct['base_id'] = $base_id;
                                                                $basedataproduct['image_length'] = $image_length;
                                                                $basedataproduct['gst'] = $gst;
                                                                $basedataproduct['gst_check'] = $gst_check;
                                                                $basedataproduct['categories_id'] = $categories_id;
                                                                $basedataproduct['profile'] = $profile;
                                                                $basedataproduct['commission'] = $commission;
                                                                $basedataproduct['address_id'] = $address_id;
                                                                $basedataproduct['address_id_mark'] = $address_id_mark;
                                                                $basedataproduct['crimp'] = $crimp;
                                                                $basedataproduct['extra_crimp'] = $extra_crimp;
                                                                $basedataproduct['sort_id'] = $sort_id;
                                                                $basedataproduct['count_id'] = $count_id;
                                                                $basedataproduct['back_crimp'] = $back_crimp;
                                                                $basedataproduct['uom'] = $uom;
                                                                $basedataproduct['billing_options'] = $billing_options;
                                                                $basedataproduct['Meter_to_Sqr_feet'] = $Meter_to_Sqr_feet;
                                                                $basedataproduct['Sqr_feet_to_Meter'] = $Sqr_feet_to_Meter;
                                                                $basedataproduct['nos'] = $nos;
                                                                $basedataproduct['unit'] = $unit;
                                                                $basedataproduct['fact'] = $fact;
                                                                
                                                                
                                                                $basedataproduct['section_lable'] = $section_lable;
                                                                $basedataproduct['section_value'] = $section_value;
                                                                $basedataproduct['degree'] = $degree;
                                            
                                            
                                            
                                                                $basedataproduct['sub_product_id'] = $sub_product_id;
                                                                $basedataproduct['value_id'] = $value_id;
                                                                $basedataproduct['reference_image'] = $reference_image;
                                            
                                                                                    
                                                                                    
                                                                $basedataproduct['qty'] = $qty;
                                                                $basedataproduct['rate'] = $rate;
                                                                
                                                                $totalamount+=round($rate*$qty,2);
                                                         	    
                                                                $basedataproduct['amount'] = round($rate*$qty,2);
                                                                $basedataproduct['return_status'] = 1;
                                                                $basedataproduct['return_id'] = 1;
                                                                $this->Main_model->insert_commen($basedataproduct, 'order_product_list_process_return');
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                
                                                                $this->db->query("UPDATE $tablename_sub SET return_status=1,return_id='".$insertid."' WHERE id='".$order_product_id[$i]."'");
                                             	                $this->db->query("UPDATE $tablenamemain SET return_status=1,return_id='".$insertid."' WHERE id='".$order_id."'");
                                             	               // $this->db->query("UPDATE purchase_orders_process SET customer_id='".$customer_id."' WHERE id='".$insertid."'");
                                                            
                                                    
                                                }    
                                                    
                                                    
                                                    
                                                    
                                        }   
                                        
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
                                        $balancetotal = 0;
                                        $debitsamount = 0;
                                        $creditsamount = 0;
                                        foreach ($res as $val) {
                                                $payid = $val->id;
                                                $customer_id = $val->customer_id;
                                                $amount = $val->amount;
                                                $debitsamount+= $val->debits;
                                                $creditsamount+= $val->credits;
                                                $balancetotal+= $val->balance;
                                        }
                                        $balancetotal=$creditsamount-$debitsamount;
                                        
                                        
                                        
                                        
                                        $data_address['order_id'] = $form_data->order_id;
                                        $data_address['customer_id'] = $customer_id;
                                        $data_address['user_id'] = $this->userid;
                                        $data_address['notes'] = 'Sales Return';
                                        $data_address['payment_mode'] = 'Cash';
                                        $data_address['order_no'] = 'RE-'.$insertid;
                                        $data_address['difference'] = 0;
                                        $data_address['reference_no'] = $order_no;
                                        $data_address['amount'] = $totalamount;
                                        $data_address['account_head_id'] = 68;
                                        $data_address['account_heads_id_2'] = 2;
                                        $data_address['order_trancation_status'] = 0;
                                        $data_address['paid_status'] = 1;
                                        $data_address['credits'] = $totalamount;
                                        $data_address['balance'] = $balancetotal + $totalamount;
                                        $data_address['collected_amount'] = $totalamount;
                                        $data_address['payment_date'] = $date;
                                        $data_address['process_by'] = 'Sales Return';
                                        $data_address['payment_time'] = $time;
                                        $data_address['party_type'] = 1;
                                        $data_address['bank_id'] = 25;
                                       
                                        
                                        
                                        $this->Main_model->insert_commen($data_address, 'all_ledgers');
                                            
                                    
                
    	    
   }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function ordercreate_product_process_transport_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['locality'] = $this->Main_model->where_names('locality', 'deleteid', '0');
            
            
            
            $resultmain = $this->db->query("SELECT * FROM `layout_plan` WHERE deleteid=0 GROUP BY name ORDER BY `layout_plan`.`id` DESC");
            $data['layout_plan'] = $resultmain->result();
            
            
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            if ($this->session->userdata['logged_in']['access'] == '11') {
                
                 $sales_team_id = array($this->userid);
                            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
                            foreach ($resultsales_team as $values) {
                                $sales_team_id[] = $values->sales_member_id;
                            }
                            $data['sales_team'] = $this->Main_model->where_in_names('admin_users','id',$sales_team_id);
                
            } else {
                $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            }
            $data['enable_order'] = $_GET['order_id'];
            $neworder_id = base64_decode($_GET['order_id']);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['order_title'] = 'Order NO';
            $data['order_lable'] = 'Order Create';
            $data['missed'] = 'Order';
            $data['move'] = 'Transport Setup ';
            $data['status_base'] = 5;
            $data['old_tablename'] = 'orders_quotation';
            $data['old_tablename_sub'] = 'order_product_list_quotation';
            $data['tablename'] = 'orders_process';
            $data['tablename_sub'] = 'order_product_list_process';
            $data['movetablename'] = 'orders_process';
            $data['movetablename_sub'] = 'order_product_list_process';
            $resorder = $this->Main_model->where_names($data['tablename'], 'id', $neworder_id);
            if (count($resorder) > 0) {
                foreach ($resorder as $data_val) {
                    $order_no = $data_val->order_no;
                    $data['order_id'] = $neworder_id;
                    $data['order_no'] = $order_no;
                }
            } else {
                $data['order_id'] = $neworder_id;
                $data['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            }
            $data['iron'] = $this->Main_model->where_names_order_by('product_list', 'categories_id', '3', 'product_name', 'ASC');
            $data['title'] = 'Order Add';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/order_product', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function discountupdate() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['discount'] = $form_data->discount;
        $tablename = $form_data->tablenamemain;
        
         
        if($tablename=='orders_process')
        {
             
             
             
             
             
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           if($order_base==1)
                           {
                                if($finance_status==2)
                                {
             
             
                                          $datass['order_base'] = 20;
                                          $datass['reason'] = 'MD Approvel Request For Discount';
             
                                }
                                
                                
                           }
             
             
             
             
             
        }
        
        $this->Main_model->update_commen($datass, $tablename);
    }
   
   
   
    public function roundoff() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['roundoff'] = $form_data->roundoff;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);
    }
     public function reading_update() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['km_reading_end'] = $form_data->end_reading;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);
    }
    
    public function convertPlus() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $datass['roundoffstatus'] = $form_data->num;
        $tablename = $form_data->tablenamemain;
        $this->Main_model->update_commen($datass, $tablename);
    }
    public function saveRemarks() {
        $form_data = json_decode(file_get_contents("php://input"));
        $fieldset = $form_data->fieldset;
        $datass['get_id'] = $form_data->order_product_id;
        $datass[$fieldset] = $form_data->fieldsetval;
        $tablenamemain = $form_data->tablename_sub;
        $this->Main_model->update_commen($datass, $tablenamemain);
    }
    public function savereason() {
        $form_data = json_decode(file_get_contents("php://input"));
        $datass['get_id'] = $form_data->order_id;
        $order_no = $form_data->order_no;
        $old_tablename = $form_data->old_tablename;
        $datass['reason'] = $form_data->reason;
        if ($form_data->reason == - 2) {
            $datass['order_base'] = - 2;
            $datass_old['get_id'] = $form_data->order_no;
            $datass_old['order_base'] = - 2;
            $datass_old['reason'] = $form_data->reason;
            $this->Main_model->update_commen_where($datass_old, 'order_no', $old_tablename);
        } else {
            $datass['order_base'] = - 1;
        }
        $tablename = $form_data->tablenamemain;
        $movetablename = $form_data->movetablename;
        $order_qt = $this->Main_model->where_names($movetablename, 'order_no', $order_no);
        if (count($order_qt) > 0) {
            $datass_val['get_id'] = $order_no;
            if ($movetablename != 'orders_process') {
                $datass_val['deleteid'] = 1;
                $this->Main_model->update_commen_where($datass_val, 'order_no', $movetablename);
            }
        }
        $this->Main_model->update_commen($datass, $tablename);
    }
    public function customerupdate() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
        $insertid = $form_data->order_id;
        $basedata['id'] = $form_data->order_id;
        $basedata['order_no'] = $form_data->order_no;
        $basedata['count_id'] = $form_data->count_id;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;
        $basedata['user_id'] = $this->userid;
        $basedata['entry_user_id'] = $this->userid;
        $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE id='" . $form_data->order_id . "' AND entry_user_id='" . $this->userid . "'");
        $resultcs = $resultmain->result();
        if (count($resultcs) > 0) {
        } else {
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count($tablename);
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $basedata['id'] = $neworder_id;
            if ($tablename == 'orders_process') {
                $basedata['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            } else {
                $basedata['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $insertid = $this->Main_model->insert_commen($basedata, $tablename);
        }
        $customer = $form_data->customer;
        $customer = explode('/', $customer);
        $customer_id = 0;
        $result = $this->Main_model->where_names('customers', 'id', $customer[2]);
         foreach ($result as $form_data_val) 
         {
            $customer_id = $form_data_val->id;
            $locality = $form_data_val->locality;
            $sales_group = $form_data_val->sales_group;
            $sales_team_id = $form_data_val->sales_team_id;
         }
        
         $sales_team_name ='';
         $user_group_team = $this->Main_model->where_names('admin_users','id',$sales_team_id);
         foreach ($user_group_team as  $team) {
                        	$sales_team_name=$team->name;
                        	$sales_group=$team->sales_group_id;
         }
                       
                       
                        
        
        
        
        
        
        $route_id = 0;
        $routeset = $this->Main_model->where_names('locality', 'id', $locality);
        foreach ($routeset as $routesetval) {
            $route_id = $routesetval->route_id;
        }
        $datass['get_id'] = $insertid;
        $datass['customer_id'] = $customer_id;
        $datass['route_id'] = $route_id;
        $datass['sales_group'] = $sales_group;
        
        
        
        $this->Main_model->update_commen($datass, $tablename);
        
        
        
        if($tablename=='orders_process')
        {
         
          $this->db->query("UPDATE all_ledgers SET customer_id='".$customer_id."'  WHERE order_id='" . $form_data->order_id . "' AND party_type=1 ");
                
        }
        
        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);
    }
    public function salesteam() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablenamemain;
        $insertid = $form_data->order_id;
        $basedata['id'] = $form_data->order_id;
        $basedata['order_no'] = $form_data->order_no;
        $basedata['count_id'] = $form_data->count_id;
        $basedata['user_id'] = $this->userid;
        $basedata['entry_user_id'] = $this->userid;
        $basedata['create_date'] = $date;
        $basedata['create_time'] = $time;
        $sales_group_idss = 0;
        $resultss = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultss as $form_data_valss)
        {
            $basedata['sales_group'] = $form_data_val->sales_group_id;
        }
        $result_ordercount = $this->Main_model->where_names($tablename, 'id', $form_data->order_id);
        if (count($result_ordercount) == 0) {
            $this->Main_model->insert_commen($basedata, $tablename);
        }
        $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE id='" . $form_data->order_id . "' AND entry_user_id='" . $this->userid . "'");
        $resultcs = $resultmain->result();
        if (count($resultcs) > 0) {
        } else {
            $neworder_quotation_id = 1;
            $order_last_count = $this->Main_model->order_last_count_users($tablename, $this->userid);
            foreach ($order_last_count as $r) {
                $neworder_quotation_id = $r->count_id + 1;
            }
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count($tablename);
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $basedata['id'] = $neworder_id;
            if ($tablename == 'orders_process') {
                $basedata['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
            } else {
                $basedata['order_no'] = $neworder_id . '/' . $this->sales_id . '/' . $neworder_quotation_id . '/' . date('Y');
            }
            $insertid = $this->Main_model->insert_commen($basedata, $tablename);
        }
        $user_id = $form_data->user_id;
        $customer_id = 0;
        $sales_id = 0;
        $sales_group_id = 0;
        $result = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($result as $form_data_val) {
            $customer_id = $form_data_val->id;
            $sales_id = $form_data_val->sales_id;
            $sales_group_id = $form_data_val->sales_group_id;
        }
        $datass['get_id'] = $insertid;
        $datass['user_id'] = $customer_id;
        $datass['entry_user_id'] = $this->userid;
        $datass['sales_group'] = $sales_group_id;
        $this->Main_model->update_commen($datass, $tablename);
        $array = array('error' => '2', 'id' => base64_encode($insertid), 'base_id' => $insertid);
        echo json_encode($array);
    }
    public function insertandupdate() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        
        
       
        
        
        $tablename = $form_data->tablename_sub;
        $tablenamemain = $form_data->tablenamemain;
        if ($form_data->action == 'Save') {
            if ($form_data->profile != '') {
                $checkboxformula = $form_data->checkboxformula;
                $profile = $form_data->profile;
                $profile = explode('/', $profile);
                $data['product_id'] = 0;
                $data['product_name'] = 0;
                if (isset($profile[0])) {
                    
                    
                    $product_id= explode('-', $profile[0]);
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                    foreach ($result as $form_data_val) {
                        
                        if($tablenamemain!='purchase_orders_process')
                        {
                             $data['product_name'] = $form_data_val->product_name;
                        }
                        
                        
                        $data['product_id'] = $form_data_val->id;
                        $data['categories_id'] = $form_data_val->categories_id;
                        $data['categories_name'] = $form_data_val->categories;
                        
                        
                        if($form_data_val->purchase_name=='')
                        {
                            $purchase_name = $form_data_val->product_name;
                        }
                        else
                        {
                            $purchase_name = $form_data_val->purchase_name;
                        }
                        
                        $specification = $form_data_val->specification;
                        
                        $mos = $form_data_val->mos;
                        if ($mos == '') {
                            $mos = 0;
                        }
                        $product_id = $form_data_val->id;
                        $categories_id = $form_data_val->categories_id;
                        $gst = $form_data_val->gst;
                        if ($gst == '') {
                            $gst = 0;
                        }
                        $uom = $form_data_val->uom;
                        $formula = $form_data_val->formula;
                        if ($form_data_val->categories_id == 32) {
                            $data['rate'] = $form_data_val->price + $form_data_val->kg_price;
                        } else {
                            $data['rate'] = $form_data_val->price;
                        }
                        
                        
                        
                      
                        
                        
                        $formula2 = $form_data_val->formula2;
                        $data['sort_id'] = $form_data_val->id;
                        $categories = $form_data_val->categories;
                        $type = $form_data_val->type;
                    }
                }
                $data['gst'] = $gst;
                $data['rate_edit'] = 0;
                if ($categories == 'Accessories') {
                    if ($type == 2) {
                        $data['profile'] = 0;
                        if (isset($profile[1])) {
                            $data['profile'] = $profile[1];
                        }
                        $data['crimp'] = 0;
                        if (isset($profile[2])) {
                            $data['crimp'] = $profile[2];
                        }
                        $data['nos'] = 0;
                        if (isset($profile[3])) {
                            $data['nos'] = $profile[3];
                        }
                        $data['unit'] = 0;
                        if (isset($profile[4])) {
                            $data['unit'] = $profile[4];
                        }
                    } else {
                        $data['profile'] = 0;
                        if (isset($profile[1])) {
                            $data['profile'] = $profile[1];
                        }
                        $data['nos'] = 0;
                        if (isset($profile[2])) {
                            $data['nos'] = $profile[2];
                        }
                        $data['crimp'] = 0;
                        if (isset($profile[3])) {
                            $data['crimp'] = 0;
                        }
                        $data['unit'] = 0;
                        if (isset($profile[4])) {
                            $data['unit'] = $profile[4];
                        }
                    }
                } elseif ($categories == 'Purlin' || $categories == 'Tile sheet' || $categories == 'Profile ridge & Arch' || $categories == 'Decking sheet' || $categories == 'Polycarbonate' || $categories == 'Sag Road' || $categories == 'Liner Sheets' || $categories == 'Roll Sheet') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[2])) {
                        $data['nos'] = $profile[2];
                    }
                } elseif ($categories == 'Screw accessories' || $categories == 'Screw' || $categories == 'Cleat' || $categories == 'Fan & Base' || $categories == 'Rent&charges') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = 0;
                    if (isset($profile[1])) {
                        $data['nos'] = $profile[1];
                    }
                } elseif ($categories == 'UPVC') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = $mos;
                } elseif ($categories == 'Polynum') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                } elseif ($categories == 'Steel Coil' || $categories == 'Rent Bill') {
                    $data['crimp'] = 0;
                    $data['unit'] = 0;
                    $data['profile'] = 0;
                    $data['nos'] = 0;
                    if (isset($profile[1])) {
                        $data['nos'] = $profile[1];
                    }
                } elseif ($categories == 'L angle') {
                    $data['dim_one'] = 0;
                    if (isset($profile[1])) {
                        $data['dim_one'] = $profile[1];
                    }
                    $data['dim_two'] = 0;
                    if (isset($profile[2])) {
                        $data['dim_two'] = $profile[2];
                    }
                    $data['profile'] = 0;
                    if (isset($profile[3])) {
                        $data['profile'] = $profile[3];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[4])) {
                        $data['crimp'] = $profile[4];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[5])) {
                        $data['nos'] = $profile[5];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[6])) {
                        $data['unit'] = $profile[6];
                    }
                } elseif ($categories == 'Z angle') {
                    $data['dim_one'] = 0;
                    if (isset($profile[1])) {
                        $data['dim_one'] = $profile[1];
                    }
                    $data['dim_two'] = 0;
                    if (isset($profile[2])) {
                        $data['dim_two'] = $profile[2];
                    }
                    $data['dim_three'] = 0;
                    if (isset($profile[3])) {
                        $data['dim_three'] = $profile[3];
                    }
                    $data['profile'] = 0;
                    if (isset($profile[4])) {
                        $data['profile'] = $profile[4];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[5])) {
                        $data['crimp'] = $profile[5];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[6])) {
                        $data['nos'] = $profile[6];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[7])) {
                        $data['unit'] = $profile[7];
                    }
                } elseif ($categories == 'Multiwall') {
                    $data['profile'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[2])) {
                        $data['crimp'] = $profile[2];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[3])) {
                        $data['nos'] = $profile[3];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[4])) {
                        $data['unit'] = $profile[4];
                    }
                } else {
                    $data['profile'] = 0;
                    if (isset($profile[1])) {
                        $data['profile'] = $profile[1];
                    }
                    $data['crimp'] = 0;
                    if (isset($profile[2])) {
                        $data['crimp'] = $profile[2];
                    }
                    $data['nos'] = 0;
                    if (isset($profile[3])) {
                        $data['nos'] = $profile[3];
                    }
                    $data['unit'] = 0;
                    if (isset($profile[4])) {
                        $data['unit'] = $profile[4];
                    }
                }
                $basedata['id'] = $form_data->order_id;
                $basedata['order_no'] = $form_data->order_no;
                $basedata['count_id'] = $form_data->count_id;
                $basedata['create_date'] = $date;
                $basedata['create_time'] = $time;
                $basedata['user_id'] = $this->userid;
                $basedata['entry_user_id'] = $this->userid;
                $result_ordercount = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
                if (count($result_ordercount) == 0) {
                    $this->Main_model->insert_commen($basedata, $tablenamemain);
                }
                $data['fact'] = $formula;
                if ($categories == 'Accessories') {
                    $profile=0;
                    if ($type == 1) {
                        if ($checkboxformula == 3) {
                            $profile = round($data['profile'], 4);
                        }
                        if ($checkboxformula == 4) {
                            $profile = round($data['profile'], 4);
                        }
                        if ($checkboxformula == 5) {
                            $profile = $data['profile'];
                        }
                        if ($checkboxformula == 6) {
                            $profile = round($data['profile'], 4);
                        }
                        $qty = $profile * $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    }
                    if ($type == 2) {
                        $let=0;
                        if ($checkboxformula == 3) {
                            $let = round($data['crimp'] *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $let = round($data['crimp'] / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $let = $data['crimp'];
                        }
                        if ($checkboxformula == 6) {
                            $let = round($data['crimp'] / 39.37, 4);
                        }
                        $qty = $data['profile'] * $data['crimp'] * $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    }
                    if ($type == 3) {
                        $qty = $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    }
                    if ($type == 0) {
                        $subqty = $data['profile'] + $data['crimp'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 3);
                    }
                } else {
                    if ($type == 4) {
                        $profile=0;
                        if ($checkboxformula == 3) {
                            $profile = round($data['profile'] *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $profile = round($data['profile'] / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $profile = $data['profile'];
                        }
                        if ($checkboxformula == 6) {
                            $profile = round($data['profile'] / 39.37, 4);
                        }
                        $qty = $profile * $data['nos'] * $data['fact'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    } elseif ($type == 5 || $type == 8) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty * $data['nos'] *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty * $data['nos'] / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty * $data['nos'];
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty * $data['nos'] / 39.37, 4);
                        }
                        $sqt = $data['Meter_to_Sqr_feet'] * $data['fact'];
                        $sqft = round($subqty * $data['nos'], 4);
                        $data['Sqr_feet_to_Meter'] = $sqft * $data['fact'];
                        $data['qty'] = round($sqt, 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 3);
                    } elseif ($type == 9) {
                        $qty = $data['nos'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    } elseif ($type == 14) {
                        $qty = $data['nos'] * $data['fact'];
                        $data['Meter_to_Sqr_feet'] = $qty;
                        $data['Sqr_feet_to_Meter'] = $qty;
                        $data['qty'] = round($qty, 3);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    } elseif ($type == 6) {
                        $profile = $data['profile'] + $data['crimp'];
                        if ($checkboxformula == 3) {
                            $profile = round($profile *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $profile = round($profile / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $profile = $data['profile'] + $data['crimp'];
                        }
                        if ($checkboxformula == 6) {
                            $profile = round($profile / 39.37, 4);
                        }
                        if ($data['crimp'] == 0 || $data['crimp'] == "") {
                            $crimpval == 0;
                        } else {
                            $crimpval = 15;
                        }
                        $data['rate'] = $data['rate'] + $crimpval;
                        $qty = $profile * $data['fact'] * $data['nos'];
                        $data['qty'] = round($qty, 3);
                        $data['Meter_to_Sqr_feet'] = 0;
                        $data['Sqr_feet_to_Meter'] = round($data['rate'] * $qty, 4);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    } elseif ($type == 15) {
                        $profile = $data['profile'] * $data['crimp'];
                        //   if($checkboxformula==3)
                        //   {
                        //       $profile= round($profile*0.305,3);
                        //   }
                        //   if($checkboxformula==4)
                        //   {
                        //       $profile= round($profile/1000,3);
                        //   }
                        //   if($checkboxformula==5)
                        //   {
                        //       $profile= $data['profile']*$data['crimp'];
                        //   }
                        //   if($checkboxformula==6)
                        //   {
                        //       $profile= round($profile/39.37,3);
                        //   }
                        //   $qty=$profile*$data['nos']/1000;
                        if ($checkboxformula == 4) {
                            $profile = round($profile / 1000, 4);
                            $qty = $profile * $data['nos'] / 1000;
                        } else {
                            $qty = $profile * $data['nos'];
                        }
                        $data['qty'] = round($qty, 3);
                        $data['Meter_to_Sqr_feet'] = 0;
                        $data['Sqr_feet_to_Meter'] = round($data['rate'] * $qty, 4);
                        $data['amount'] = round($data['rate'] * $qty, 3);
                    } elseif ($type == 7 || $type == 10 || $type == 16) {
                        if ($categories_id == '13') {
                            $profile = round($data['profile'] / $formula, 4);
                            $data['amount'] = round($profile * $data['rate'], 4);
                            $data['nos'] = round($profile);
                            $profileset = round($data['profile'] / $formula, 4);
                            $factt = $data['profile'] - round($profileset) * $formula;
                            $data['fact'] = str_replace('-', '', $factt);
                            $data['qty'] = $data['profile'];
                            $data['amount'] = round($data['rate'] * $data['profile'], 3);
                        } else {
                            
                             $profile =0;
                            if ($checkboxformula == 3) {
                                $profile = round($data['profile'] *0.305, 4);
                            }
                            if ($checkboxformula == 4) {
                                $profile = round($data['profile'] / 1000, 4);
                            }
                            if ($checkboxformula == 5) {
                                $profile = $data['profile'];
                            }
                            if ($checkboxformula == 6) {
                                $profile = round($data['profile'] / 39.37, 4);
                            }
                            $qty = $profile * $data['fact'] * $data['nos'];
                            $data['qty'] = round($qty, 3);
                            $data['Meter_to_Sqr_feet'] = 0;
                            $data['Sqr_feet_to_Meter'] = round($data['rate'] * $qty, 4);
                            $data['amount'] = round($data['rate'] * $qty, 3);
                        }
                    } elseif ($type == 11) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $dim = round($dim *0.305, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $dim = round($dim / 1000, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $dim = $data['dim_two'] + $data['dim_two'];
                            $dim = round($dim / 39.37, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $dim * $data['crimp'] * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 3);
                    } elseif ($type == 12) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $dim = round($dim *0.305, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $dim = round($dim / 1000, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $dim = $data['dim_two'] + $data['dim_two'] + $data['dim_three'];
                            $dim = round($dim / 39.37, 4);
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $dim * $data['crimp'] * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 3);
                    } elseif ($type == 17) {
                        $subqty = $data['profile'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $data['crimp'] * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 3);
                    } else {
                        $subqty = $data['profile'] + $data['crimp'];
                        if ($checkboxformula == 3) {
                            $data['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                        }
                        if ($checkboxformula == 4) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                        }
                        if ($checkboxformula == 5) {
                            $data['Meter_to_Sqr_feet'] = $subqty;
                        }
                        if ($checkboxformula == 6) {
                            $data['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                        }
                        $sqft = round($subqty, 4);
                        $mtr = $sqft * $data['fact']; // 1.09 fact
                        $data['Sqr_feet_to_Meter'] = round($mtr * $data['nos'], 4);
                        $sqt = $data['Meter_to_Sqr_feet'];
                        $data['qty'] = round($sqt * $data['nos'] * $data['fact'], 3);
                        $data['amount'] = round($data['rate'] * $data['qty'], 3);
                    }
                }
                if ($categories_id == '13') {
                    $data['uom'] = 2;
                } else {
                    $data['uom'] = $checkboxformula;
                }
                $data['order_id'] = $form_data->order_id;
                $data['order_no'] = $form_data->order_no;
                $count_id = 1;
                $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $form_data->order_no . "' AND categories_id='" . $categories_id . "'  AND deleteid='0' ORDER BY id DESC LIMIT 0,1");
                $resultcs = $resultmain->result();
                foreach ($resultcs as $vl) {
                    $count_id = $vl->count_id + 1;
                }
                $data_update['count_id'] = $count_id;
                
                
                if($tablenamemain=='purchase_orders_process')
                {
                            $data['rate'] =0;
                            
                                         $resultc= $this->Main_model->where_names('categories','id',$data['categories_id']);
                     	                 foreach ($resultc as  $valuec)
                     	                 {
                     	                     $data['uom']=$valuec->uom;
                     	                 }
                            
                           
                            
                            $data['product_name']  =$purchase_name;
                            $data['specifications']  =$specification;
                            
                }
                
                $insertid = $this->Main_model->insert_commen($data, $tablename);
                $data_update['get_id'] = $insertid;
                $data_update['sort_id'] = $insertid;
                $this->Main_model->update_commen($data_update, $tablename);
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
                $array = array('error' => '2', 'id' => $insertid, 'product_id' => $product_id, 'cateid' => $categories_id, 'cate_status' => $cate_status);
                echo json_encode($array);
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
        
         if ($form_data->action == "Loadinsertproductdata")
         {
             
             
             //$this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "'");
             $load['order_product_id'] = $form_data->id;
             $load['nos'] = $form_data->nos;
             $load['qty'] = $form_data->qty;
             $load['rate'] = $form_data->rate;
             
            $this->db->query("UPDATE order_product_list_process SET delivery_status='0'  WHERE id='" . $form_data->id . "' ");
             
            $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=0 ORDER BY id DESC");
            $resultcss = $resultmainss->result();
            
            if(count($resultcss)==0)
            {
                
                
                     $load['loadstatus'] = 1;
                     $load['commission'] = 0;
                     $load['amount'] = round($form_data->qty*$form_data->rate,2);
                     $this->Main_model->insert_commen($load, 'sales_load_products');
                     
            }
            else
            {
                    $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=1 ORDER BY id DESC");
                    $resultcss = $resultmainss->result();
                    if(count($resultcss)==0)
                    {
                        
                         $load['get_id'] = $form_data->id;
                         $load['amount'] = round($form_data->qty*$form_data->rate,2);
                         $this->Main_model->update_commen_where($load,'order_product_id', 'sales_load_products');
                       
                       
                    }
                    else
                    {
                            $resultmainss = $this->db->query("SELECT * FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=0 ORDER BY id DESC");
                            $resultcss = $resultmainss->result();
                            if(count($resultcss)==0)
                            {
                                
                                    $load['loadstatus'] = 1;
                                    $load['amount'] = round($form_data->qty*$form_data->rate,2);
                                    $this->Main_model->insert_commen($load, 'sales_load_products');
                        
                                
                            }
                            else
                            {
                                    
                                     $load['amount'] = round($form_data->qty*$form_data->rate,2);
                                     $this->db->query("UPDATE sales_load_products SET nos='".$load['nos']."',amount='".$load['amount']."',rate='".$load['rate']."' WHERE order_product_id='" . $form_data->id . "' AND  delivered_products=0");
                                     
                                     
                            }
                         
                        
                    }
                
                 
                     
                     
            }
             
            
             
            
             
         }
        
        if ($form_data->action == "InputUpdate") {
            
            
            
            if ($form_data->values != '' || $form_data->values == '0') {
                $categories = "";
                
                // $sqt_qty = $form_data->sqt_qty;
                
                
                
                
                
                 
                    
                    if($tablename=='order_product_list_process')
                    {
                        
                        
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                           foreach($results as $vl)
                           {
                                $inputval=$form_data->inputname;
                                $order_id=$vl->order_id;
                                $orgchages=$vl->$inputval;
                               
                           }
                           
                           $results = $this->Main_model->where_names('orders_process', 'id', $order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           
                           
                           
                           if($order_base>0)
                           {
                                if($finance_status==2)
                                {
                                    
                               $notin_array=array('product_name','tile_material_name');

                                if(!in_array($form_data->inputname, $notin_array))
                                {
                                    
                                    
                                    $vv['get_id'] = $order_id;
                                    $vv['reason'] = 'MD Approvel changes';
                                    $vv['order_base'] = 23;
                                    $this->Main_model->update_commen($vv, 'orders_process');
                                    
                                    
                                    
                                    
                                    
                    
                                    $basedata['order_id'] = $order_id;
                                    $basedata['order_product_id'] = $form_data->id;
                                    $basedata['create_date'] = $date;
                                    $basedata['create_time'] = $time;
                                    $basedata['user_id'] = $this->userid;
                                    $basedata['names'] = $form_data->inputname;
                                    $basedata['org_changes'] = $orgchages;

         
           if($orgchages>0)
           {


           

            $result_ordercount = $this->Main_model->where_names_two_order_by('order_edit_changes', 'order_product_id', $form_data->id, 'names', $form_data->inputname, 'id', 'ASC');
            if(count($result_ordercount) == 0) {

                                        $this->Main_model->insert_commen($basedata, 'order_edit_changes');
                                        
                                         $edit=$form_data->inputname.'_edit';
                                         $this->db->query("UPDATE $tablename SET $edit='".$orgchages."'  WHERE id='" . $form_data->id . "'");   
                                        
            }


            }



                                                        
                                        
                                    
                                   
                               
                                }
                
                                }
                           }
                            
                            
                    
                    }
                    
                    
                
                
                
                $ratechange = $form_data->ratechange;
                $factchange = $form_data->factchange;
                $data['get_id'] = $form_data->id;
                // Decking sheet rate Update
                if ($ratechange != 0) {
                    $data['rate'] = $ratechange;
                }
                if ($factchange != 0) {
                    $data['fact'] = $factchange;
                }
                if ($form_data->inputname == 'product_name') {
                    
                     $product_id= explode('-', $form_data->values);
                     $data[$form_data->inputname] = $product_id[1];
                     $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                     if(count($result)>0)
                     {
                         
                     
                             foreach ($result as $product) {
                                $data['product_name'] = $product->product_name;
                                $data['product_id'] = $product->id;
                                $data['categories_id'] = $product->categories_id;
                                $data['categories_name'] = $product->categories;
                                $data['rate'] = $product->price;
                                $data['fact'] = $product->formula;
                                $uom = $product->uom;
                                $formula = $product->formula;
                                $priceset = $product->price;
                                $kg_priceset = $product->kg_price;
                                $categories = $product->categories;
                            }
                    
                     }
                     else
                     {
                          $data['product_name'] = $form_data->values;
                     }
                    
                    
                } elseif ($form_data->inputname == 'tile_material_name') {
                     $product_id= explode('-', $form_data->values);
                     $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                    foreach ($result as $product) {
                        $data['tile_material_name'] = $product->product_name;
                        $data['tile_material_id'] = $product->id;
                    }
                } else {
                    $resultff = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                    foreach ($resultff as $ssdd) {
                        $cul = $ssdd->cul;
                    }
                    $data[$form_data->inputname] = $form_data->values;
                }
                if ($form_data->inputname == 'rate') {
                    $data['rate_edit'] = 1;
                }
                $this->Main_model->update_commen($data, $tablename);
                $array = array('error' => '2', 'massage' => 'Customer successfully Updated..');
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data) {
                    $id = $form_data->id;
                    $profile = $form_data->profile;
                    $extra_crimp = $form_data->extra_crimp;
                    $dim_one = $form_data->dim_one;
                    $dim_two = $form_data->dim_two;
                    $dim_three = $form_data->dim_three;
                    $uom = $form_data->uom;
                    $crimp = $form_data->crimp;
                    $nos = $form_data->nos;
                    $fact = $form_data->fact;
                    $rate = $form_data->rate;
                    $categories_id = $form_data->categories_id;
                    $billing_options = $form_data->billing_options;
                    $formula = 0;
                    $formula2 = 0;
                    $resultcc = $this->Main_model->where_names('product_list', 'id', $form_data->product_id);
                    foreach ($resultcc as $productcc) {
                        $categories = $productcc->categories;
                        $type = $productcc->type;
                        $type = $productcc->type;
                        $formula = $productcc->formula;
                        $formula2 = $productcc->formula2;
                        $priceset = $productcc->price;
                        $kg_priceset = $productcc->kg_price;
                    }
                    $datass['get_id'] = $id;
                    if ($categories == 'Accessories') {
                        if ($type == 1) {
                            if ($uom == 3) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 5) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 6) {
                                $profile = round($profile, 4);
                            }
                            $qty = $profile * $nos;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 2) {
                            if ($uom == 3) {
                                $let = round($crimp *0.305, 4);
                            }
                            if ($uom == 4) {
                                $let = round($crimp / 1000, 4);
                            }
                            if ($uom == 5) {
                                $let = $crimp;
                            }
                            if ($uom == 6) {
                                $let = round($crimp / 39.37, 4);
                            }
                            $qty = $profile * $crimp * $nos;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 3) {
                            $qty = $nos;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 0) {
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        }
                    } else {
                        if ($type == 4) {
                            if ($uom == 3) {
                                $profile = round($profile *0.305, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                            }
                            if ($uom == 5) {
                                $profile = $profile;
                            }
                            if ($uom == 6) {
                                $profile = round($profile / 39.37, 4);
                            }
                            $qty = $profile * $nos * $fact;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 9) {
                            $qty = $nos;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 19) {
                            $qty = $form_data->qty;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 14) {
                            $qty = $nos * $fact;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 5) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty * $nos;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 39.37, 4);
                            }
                            $sqft = round($subqty * $nos, 4);
                            $datass['Sqr_feet_to_Meter'] = $sqft * $fact;
                            $sqt = $datass['Meter_to_Sqr_feet'] * $fact;
                            $datass['qty'] = round($sqt, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 8) {
                            //  extra crimp
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty * $nos;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 39.37, 4);
                            }
                            $sqft = round($subqty * $nos, 4);
                            $datass['Sqr_feet_to_Meter'] = $sqft * $fact;
                            $sqt = $datass['Meter_to_Sqr_feet'] * $fact;
                            $datass['qty'] = round($sqt, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 6) {
                            $profile = $profile + $crimp;
                            if ($uom == 3) {
                                $profile = round($profile *0.305, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                            }
                            if ($uom == 5) {
                                $profile = $profile + $crimp;
                            }
                            if ($uom == 6) {
                                $profile = round($profile / 39.37, 4);
                            }
                            if ($crimp == 0 || $crimp == "") {
                                $crimpval == 0;
                            } else {
                                $crimpval = 15;
                            }
                            if ($billing_options == 1) {
                                $rateavl = $priceset + $crimpval;
                            } else {
                                $rateavl = $kg_priceset + $crimpval;
                            }
                            $qty = $profile * $fact * $nos;
                            $datass['qty'] = round($qty, 3);
                            $datass['Meter_to_Sqr_feet'] = 0;
                            $datass['rate'] = $rateavl;
                            $datass['Sqr_feet_to_Meter'] = round($rateavl * $qty, 4);
                            $datass['amount'] = round($rateavl * $qty, 3);
                        } elseif ($type == 15) {
                            $profile = $profile * $crimp;
                            //   if($uom==3)
                            //   {
                            //       $profile= round($profile*0.305,3);
                            //   }
                            //   if($uom==4)
                            //   {
                            //       $profile= round($profile/1000,3);
                            //   }
                            //   if($uom==5)
                            //   {
                            //       $profile= $profile*$crimp;
                            //   }
                            //   if($uom==6)
                            //   {
                            //       $profile= round($profile/39.37,3);
                            //   }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                                $qty = $profile * $nos / 1000;
                            } else {
                                $qty = $profile * $nos;
                            }
                            $datass['qty'] = round($qty, 3);
                            $datass['Meter_to_Sqr_feet'] = 0;
                            $datass['rate'] = $rate;
                            $datass['Sqr_feet_to_Meter'] = round($rate * $qty, 4);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 7 || $type == 10 || $type == 16) {
                            if ($categories_id == '13') {
                                if ($uom == 2) {
                                    $formula = $formula;
                                } else {
                                    $formula = $formula2;
                                }
                                $profilevv = round($profile / $formula, 4);
                                $datass['amount'] = round($profilevv * $rate, 4);
                                if ($uom == 2) {
                                    $datass['nos'] = round($profilevv);
                                } else {
                                    $datass['nos'] = round($profilevv, 1);
                                }
                                $profileset = round($profile / $formula, 4);
                                $facttt = $profile - round($profileset) * $formula;
                                if ($uom == 2) {
                                    $datass['fact'] = str_replace('-', '', $facttt);
                                } else {
                                    $datass['fact'] = 0;
                                }
                                $datass['qty'] = $profile;
                                $datass['amount'] = round($rate * $profile, 3);
                            } else {
                                if ($uom == 3) {
                                    $profile = round($profile *0.305, 4);
                                }
                                if ($uom == 4) {
                                    $profile = round($profile / 1000, 4);
                                }
                                if ($uom == 5) {
                                    $profile = $profile;
                                }
                                if ($uom == 6) {
                                    $profile = round($profile / 39.37, 4);
                                }
                                $qty = $profile * $fact * $nos;
                                $datass['qty'] = round($qty, 3);
                                $datass['Meter_to_Sqr_feet'] = 0;
                                $datass['Sqr_feet_to_Meter'] = round($rate * $qty, 4);
                                $datass['amount'] = round($rate * $qty, 3);
                            }
                        } elseif ($type == 11) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim *0.305, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim / 1000, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $toatldim = $dim_one + $dim_two;
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim / 39.37, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $toatldim * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 12) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim *0.305, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim / 1000, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim / 39.37, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $toatldim * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 17) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } else {
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        }
                    }
                    
                    
                    //$datass['qty']=$sqt_qty;
                    
                    $this->Main_model->update_commen($datass, $tablename);
                    
                    
                    
                }
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                echo json_encode($array);
                
                
                
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
            
            
            
            
            
        }
        
        
        
        
          if ($form_data->action == "InputUpdatereturn") {
            
            
            
            if ($form_data->values != '' || $form_data->values == '0') {
                $categories = "";
                $ratechange = $form_data->ratechange;
                $factchange = $form_data->factchange;
                $data['get_id'] = $form_data->id;
                // Decking sheet rate Update
                if ($ratechange != 0) {
                    $data['rate'] = $ratechange;
                }
                if ($factchange != 0) {
                    $data['fact'] = $factchange;
                }
                if ($form_data->inputname == 'product_name') {
                    $product_id= explode('-', $form_data->values);
                    $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                   
                   
                     if(count($result)>0)
                     {
                         
                    foreach ($result as $product) {
                        $data['product_name'] = $product->product_name;
                        $data['product_id'] = $product->id;
                        $data['categories_id'] = $product->categories_id;
                        $data['categories_name'] = $product->categories;
                        $data['rate'] = $product->price;
                        $data['fact'] = $product->formula;
                        $uom = $product->uom;
                        $formula = $product->formula;
                        $priceset = $product->price;
                        $kg_priceset = $product->kg_price;
                        $categories = $product->categories;
                    }
                    
                     }
                     else
                     {
                         $data['product_name'] = $form_data->values;
                         
                     }
                    
                    
                    
                } elseif ($form_data->inputname == 'tile_material_name') {
                    $product_id= explode('-', $form_data->values);
                    $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                    foreach ($result as $product) {
                        $data['tile_material_name'] = $product->product_name;
                        $data['tile_material_id'] = $product->id;
                    }
                } else {
                    $resultff = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                    foreach ($resultff as $ssdd) {
                        $cul = $ssdd->cul;
                    }
                    $data[$form_data->inputname] = $form_data->values;
                }
                if ($form_data->inputname == 'rate') {
                    $data['rate_edit'] = 1;
                }
                
                
                $nos = $data['nos'];
                //$this->Main_model->update_commen($data, $tablename);
                
                
                
                
                $array = array('error' => '2', 'massage' => 'Customer successfully Updated..');
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data) {
                    $id = $form_data->id;
                    $profile = $form_data->profile;
                    $extra_crimp = $form_data->extra_crimp;
                    $dim_one = $form_data->dim_one;
                    $dim_two = $form_data->dim_two;
                    $dim_three = $form_data->dim_three;
                    $uom = $form_data->uom;
                    $crimp = $form_data->crimp;
                  
                    $fact = $form_data->fact;
                    $rate = $form_data->rate;
                    $categories_id = $form_data->categories_id;
                    $billing_options = $form_data->billing_options;
                    $formula = 0;
                    $formula2 = 0;
                    $resultcc = $this->Main_model->where_names('product_list', 'id', $form_data->product_id);
                    foreach ($resultcc as $productcc) {
                        $categories = $productcc->categories;
                        $type = $productcc->type;
                        $type = $productcc->type;
                        $formula = $productcc->formula;
                        $formula2 = $productcc->formula2;
                        $priceset = $productcc->price;
                        $kg_priceset = $productcc->kg_price;
                    }
                    $datass['get_id'] = $id;
                    if ($categories == 'Accessories') {
                        if ($type == 1) {
                            if ($uom == 3) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 5) {
                                $profile = round($profile, 4);
                            }
                            if ($uom == 6) {
                                $profile = round($profile, 4);
                            }
                            $qty = $profile * $nos;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 2) {
                            if ($uom == 3) {
                                $let = round($crimp *0.305, 4);
                            }
                            if ($uom == 4) {
                                $let = round($crimp / 1000, 4);
                            }
                            if ($uom == 5) {
                                $let = $crimp;
                            }
                            if ($uom == 6) {
                                $let = round($crimp / 39.37, 4);
                            }
                            $qty = $profile * $crimp * $nos;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 3) {
                            $qty = $nos;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        }
                        if ($type == 0) {
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        }
                    } else {
                        if ($type == 4) {
                            if ($uom == 3) {
                                $profile = round($profile *0.305, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                            }
                            if ($uom == 5) {
                                $profile = $profile;
                            }
                            if ($uom == 6) {
                                $profile = round($profile / 39.37, 4);
                            }
                            $qty = $profile * $nos * $fact;
                            $datass['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 9) {
                            $qty = $nos;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 19) {
                            $qty = $form_data->qty;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 14) {
                            $qty = $nos * $fact;
                            $data['Meter_to_Sqr_feet'] = $qty;
                            $datass['Sqr_feet_to_Meter'] = $qty;
                            $datass['qty'] = round($qty, 3);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 5) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty * $nos;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 39.37, 4);
                            }
                            $sqft = round($subqty * $nos, 4);
                            $datass['Sqr_feet_to_Meter'] = $sqft * $fact;
                            $sqt = $datass['Meter_to_Sqr_feet'] * $fact;
                            $datass['qty'] = round($sqt, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 8) {
                            //  extra crimp
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty * $nos;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty * $nos / 39.37, 4);
                            }
                            $sqft = round($subqty * $nos, 4);
                            $datass['Sqr_feet_to_Meter'] = $sqft * $fact;
                            $sqt = $datass['Meter_to_Sqr_feet'] * $fact;
                            $datass['qty'] = round($sqt, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 6) {
                            $profile = $profile + $crimp;
                            if ($uom == 3) {
                                $profile = round($profile *0.305, 4);
                            }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                            }
                            if ($uom == 5) {
                                $profile = $profile + $crimp;
                            }
                            if ($uom == 6) {
                                $profile = round($profile / 39.37, 4);
                            }
                            if ($crimp == 0 || $crimp == "") {
                                $crimpval == 0;
                            } else {
                                $crimpval = 15;
                            }
                            if ($billing_options == 1) {
                                $rateavl = $priceset + $crimpval;
                            } else {
                                $rateavl = $kg_priceset + $crimpval;
                            }
                            $qty = $profile * $fact * $nos;
                            $datass['qty'] = round($qty, 3);
                            $datass['Meter_to_Sqr_feet'] = 0;
                            $datass['rate'] = $rateavl;
                            $datass['Sqr_feet_to_Meter'] = round($rateavl * $qty, 4);
                            $datass['amount'] = round($rateavl * $qty, 3);
                        } elseif ($type == 15) {
                            $profile = $profile * $crimp;
                            //   if($uom==3)
                            //   {
                            //       $profile= round($profile*0.305,3);
                            //   }
                            //   if($uom==4)
                            //   {
                            //       $profile= round($profile/1000,3);
                            //   }
                            //   if($uom==5)
                            //   {
                            //       $profile= $profile*$crimp;
                            //   }
                            //   if($uom==6)
                            //   {
                            //       $profile= round($profile/39.37,3);
                            //   }
                            if ($uom == 4) {
                                $profile = round($profile / 1000, 4);
                                $qty = $profile * $nos / 1000;
                            } else {
                                $qty = $profile * $nos;
                            }
                            $datass['qty'] = round($qty, 3);
                            $datass['Meter_to_Sqr_feet'] = 0;
                            $datass['rate'] = $rate;
                            $datass['Sqr_feet_to_Meter'] = round($rate * $qty, 4);
                            $datass['amount'] = round($rate * $qty, 3);
                        } elseif ($type == 7 || $type == 10 || $type == 16) {
                            if ($categories_id == '13') {
                                if ($uom == 2) {
                                    $formula = $formula;
                                } else {
                                    $formula = $formula2;
                                }
                                $profilevv = round($profile / $formula, 4);
                                $datass['amount'] = round($profilevv * $rate, 4);
                                if ($uom == 2) {
                                    $datass['nos'] = round($profilevv);
                                } else {
                                    $datass['nos'] = round($profilevv, 1);
                                }
                                $profileset = round($profile / $formula, 4);
                                $facttt = $profile - round($profileset) * $formula;
                                if ($uom == 2) {
                                    $datass['fact'] = str_replace('-', '', $facttt);
                                } else {
                                    $datass['fact'] = 0;
                                }
                                $datass['qty'] = $profile;
                                $datass['amount'] = round($rate * $profile, 3);
                            } else {
                                if ($uom == 3) {
                                    $profile = round($profile *0.305, 4);
                                }
                                if ($uom == 4) {
                                    $profile = round($profile / 1000, 4);
                                }
                                if ($uom == 5) {
                                    $profile = $profile;
                                }
                                if ($uom == 6) {
                                    $profile = round($profile / 39.37, 4);
                                }
                                $qty = $profile * $fact * $nos;
                                $datass['qty'] = round($qty, 3);
                                $datass['Meter_to_Sqr_feet'] = 0;
                                $datass['Sqr_feet_to_Meter'] = round($rate * $qty, 4);
                                $datass['amount'] = round($rate * $qty, 3);
                            }
                        } elseif ($type == 11) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim *0.305, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim / 1000, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $toatldim = $dim_one + $dim_two;
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $toatldim = $dim_one + $dim_two;
                                $toatldim = round($toatldim / 39.37, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $toatldim * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 12) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim *0.305, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim / 1000, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $toatldim = $dim_one + $dim_two + $dim_three;
                                $toatldim = round($toatldim / 39.37, 4);
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $toatldim * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } elseif ($type == 17) {
                            $subqty = $profile;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $crimp * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        } else {
                            $subqty = $profile + $crimp;
                            if ($uom == 3) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty *0.305, 4);
                            }
                            if ($uom == 4) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 1000, 4);
                            }
                            if ($uom == 5) {
                                $datass['Meter_to_Sqr_feet'] = $subqty;
                            }
                            if ($uom == 6) {
                                $datass['Meter_to_Sqr_feet'] = round($subqty / 39.37, 4);
                            }
                            $sqft = round($subqty, 4);
                            $mtr = $sqft * $fact;
                            $datass['Sqr_feet_to_Meter'] = round($mtr * $nos, 4);
                            $sqt = $datass['Meter_to_Sqr_feet'];
                            $datass['qty'] = round($sqt * $nos * $fact, 3);
                            $datass['amount'] = round($rate * $datass['qty'], 3);
                        }
                    }
                    
                   
                    
                    $datass_return['get_id'] = $id;
                    $datass_return['return_qty'] = $datass['qty'];
                    $datass_return['return_nos'] = $nos;
                    $datass_return['return_amount'] = $datass['amount'];
                    
                    
                
                    $this->Main_model->update_commen($datass_return, $tablename);
                    
                    
                    
                }
                echo json_encode($array);
                
                
                
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
            
            
            
            
            
        }
        
        
        
        if ($form_data->action == "convertionqty") {
            
            
            
            $tablenamemain=$form_data->tablenamemain;
            $order_id=$_GET['order_id'];
            
            if ($form_data->values != '' || $form_data->values == '0') {
                $categories = "";
                $data['get_id'] = $form_data->id;
                if ($form_data->inputname == 'product_name') {
                    $product_id= explode('-', $form_data->values);
                    $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                   

                     if(count($result)>0)
                     {
                                  foreach ($result as $product) {
                                            $data['product_name'] = $product->product_name;
                                            $data['product_id'] = $product->id;
                        $data['categories_id'] = $product->categories_id;
                        $data['categories_name'] = $product->categories;
                        $data['rate'] = $product->price;
                        $data['fact'] = $product->formula;
                        $uom = $product->uom;
                        $formula = $product->formula;
                        $categories = $product->categories;
                             }
                     }
                     else
                     {
                                                   $data['product_name'] = $form_data->values;

                         
                     }
                    
                    
                    
                    
                } elseif ($form_data->inputname == 'tile_material_name') {
                    $product_id= explode('-', $form_data->values);
                    $data[$form_data->inputname] = $product_id[1];
                    $result = $this->Main_model->where_names('product_list', 'id', $product_id[0]);
                    foreach ($result as $product) {
                        $data['tile_material_name'] = $product->product_name;
                        $data['tile_material_id'] = $product->id;
                    }
                } else {
                    $resultff = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                    foreach ($resultff as $ssdd) {
                        $cul = $ssdd->cul;
                    }
                    $data[$form_data->inputname] = $form_data->values;
                }
                if ($form_data->inputname == 'rate')
                {
                   
                    //$data['rate_edit'] = 1;
                    
                    if($tablenamemain=='orders_process')
                    {
                           
                           $results = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                           foreach($results as $vl)
                           {
                                $inputval='rate';
                                $order_id=$vl->order_id;
                                $orgchages=$vl->rate;
                               
                           }
                        
                           $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           if($order_base>0)
                           {
                                if($finance_status==2)
                                {
                                  
                                  
                                    
                                
                                $vv['get_id'] = $order_id;
                                $vv['reason'] = 'MD Approvel Price Edit';
                                $vv['order_base'] = 23;
                                $this->Main_model->update_commen($vv, $tablenamemain);
                                
                                
                                
                                
                                    $basedata['order_id'] = $order_id;
                                    $basedata['order_product_id'] = $form_data->id;
                                    $basedata['create_date'] = $date;
                                    $basedata['create_time'] = $time;
                                    $basedata['user_id'] = $this->userid;
                                    $basedata['names'] = $form_data->inputname;
                                    $basedata['org_changes'] = $orgchages;


                                  if($orgchages>0)
                                  {



                                    $result_ordercount = $this->Main_model->where_names_two_order_by('order_edit_changes', 'order_product_id', $form_data->id, 'names', 'rate', 'id', 'ASC');
                                    if(count($result_ordercount) == 0) {
                                    $this->Main_model->insert_commen($basedata, 'order_edit_changes');
                                    
                                    $edit='rate_edit';
                                    $this->db->query("UPDATE $tablename SET $edit='".$orgchages."'  WHERE id='" . $form_data->id . "'");
                                
                                    
                                    }


                                    }
                            
                                
                                
                                
                                
                                 
                                
                                
                                }
                           }
                            
                            
                    
                    }
                   
                }
                $this->Main_model->update_commen($data, $tablename);
                $array = array('error' => '2', 'massage' => 'successfully Updated..');
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data) {
                    $datass['get_id'] = $form_data->id;
                    $qty = $form_data->qty;
                    $rate = $form_data->rate;
                    $datass['amount'] = $qty * $rate;
                    $this->Main_model->update_commen($datass, $tablename);
                }
                echo json_encode($array);
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
        if ($form_data->action == 'Delete') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $this->Main_model->deleteupdate($id, $tablename);
        }
        if ($form_data->action == 'Returndelete')
        {
            
            
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $this->Main_model->deleteupdate($id, $tablename);
                
                $result = $this->Main_model->where_names($tablename, 'id', $form_data->id);
                foreach ($result as $form_data) {
                    $order_id = $form_data->order_id;
                    $this->db->query("UPDATE orders_process SET return_status=0,return_id=0 WHERE id='" . $order_id . "'");
                }
                
                
                $this->db->query("UPDATE all_ledgers SET deleteid=1 WHERE deletemod='RE-" . $id . "'");
                
                
            
        }

         if ($form_data->action == 'Reached_location')
        {
            $rl['get_id'] =  $form_data->order_id;
            $rl['reason'] = 'Reached location';
            //$rl['finance_status'] = 7;
            $this->Main_model->update_commen($rl, $tablenamemain);
        }

        if ($form_data->action == 'Deletesub') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $this->Main_model->deleteupdate($id, $tablename);
            $id = $form_data->id;
            $additional_information = $this->Main_model->where_names_two_order_by($tablename, 'id', $id, 'deleteid', '1', 'id', 'ASC');
            foreach ($additional_information as $vl) {
                $product_id = $vl->product_id;
                $categories_id = $vl->categories_id;
                $product_name = $vl->product_name;
                $order_no = $vl->order_no;
                $sort_id = $vl->sort_id;
            }
            $i = 1;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $order_no . "' AND categories_id='" . $categories_id . "' AND deleteid='0' AND id!='" . $id . "' ORDER BY sort_id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $vl) {
                $data_update['count_id'] = $i;
                $data_update['get_id'] = $vl->id;
                $this->Main_model->update_commen($data_update, $tablename);
                $i++;
            }
            exit;
        }
        if ($form_data->action == 'markDeliveryaddress') {
            $tablename = $form_data->tablename_sub;
            $tablenamemain = $form_data->tablenamemain;
            $partial = $form_data->partial;
            $delivery_mode = $form_data->delivery_mode;
            $order_id = $form_data->order_id;
            $idval = $form_data->id;
            
           
            
            $id = explode('|', $idval);
            $ss['get_id'] = $order_id;
            $ss['paricel_mode'] = 0;
            $this->Main_model->update_commen_where($ss, 'order_id', $tablename);
            if($partial == 1) {
                $address_idval = $form_data->address_id;
                $address_id = explode('|', $address_idval);
                for ($i = 0;$i < count($id);$i++) {
                    $datass_appprox['get_id'] = $id[$i];
                    $datass_appprox['address_id'] = $address_id[$i];
                    if ($datass_appprox['address_id'] != 0) {
                        $datass_appprox['address_id_mark'] = 1;
                    } else {
                        $datass_appprox['address_id_mark'] = 0;
                    }
                    $datass_appprox['paricel_mode'] = $partial;
                    $this->Main_model->update_commen($datass_appprox, $tablename);
                }
                $dat['get_id'] = $order_id;
                $dat['paricel_mode'] = $partial;
                $dat['delivery_mode'] = $delivery_mode;
                $this->Main_model->update_commen($dat, $tablenamemain);
            }elseif ($partial == 2) {
               
                $datass_appprox['address_id_mark'] = 0;
                $datass_appprox['paricel_mode'] = $partial;
                $datass_appprox['get_id'] = $order_id;
                $this->Main_model->update_commen_where($datass_appprox, 'order_id', $tablename);
                
                $dat['get_id'] = $order_id;
                $dat['paricel_mode'] = $partial;
                $dat['delivery_mode'] = $delivery_mode;
                $this->Main_model->update_commen($dat, $tablenamemain);
            }else {
                $address_idval = $form_data->address_id;
                $address_id = explode('|', $address_idval);
                for ($i = 0;$i < count($id);$i++) {
                    $datass_appprox['get_id'] = $id[$i];
                    $datass_appprox['paricel_mode'] = 0;
                    $this->Main_model->update_commen($datass_appprox, $tablename);
                }
                $dat['get_id'] = $order_id;
                $dat['paricel_mode'] = $partial;
                $dat['delivery_mode'] = $delivery_mode;
                $this->Main_model->update_commen($dat, $tablenamemain);
            }
            echo "1";
            exit;
        }
        if ($form_data->action == 'returnproduct') {
            $tablename = $form_data->tablename_sub;
            $idval = $form_data->order_product_id;
            $id = explode('|', $idval);
            $statusv = $form_data->status;
            $status = explode('|', $statusv);
            $statusfinal = array_sum($status);
            if ($statusfinal == 0) {
                $statusfinalbase = 0;
            } else {
                $statusfinalbase = 1;
            }
            for ($i = 0;$i < count($id);$i++) {
                $datass_appprox['get_id'] = $id[$i];
                $datass_appprox['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox, $tablename);
                $result = $this->Main_model->where_names($tablename, 'id', $id[$i]);
                foreach ($result as $form_data) {
                    $order_id = $form_data->order_id;
                }
                $datass_appprox_order['get_id'] = $order_id;
                $datass_appprox_order['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox_order, 'orders_process');
            }
            echo "1";
            exit;
        }
       
       
       
       
       
       
        if ($form_data->action == 'returnproduct_driver') {
            $tablename = $form_data->tablename_sub;
            $idval = $form_data->order_product_id;
            $id = explode('|', $idval);
            $statusv = $form_data->status;
            $status = explode('|', $statusv);
            $statusfinal = array_sum($status);
            if ($statusfinal == 1) {
                $statusfinalbase = 1;
            } else {
                $statusfinalbase = 2;
            }
            for ($i = 0;$i < count($id);$i++) {
                $datass_appprox['get_id'] = $id[$i];
                $datass_appprox['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox, $tablename);
                $result = $this->Main_model->where_names($tablename, 'id', $id[$i]);
                foreach ($result as $form_data) {
                    $order_id = $form_data->order_id;
                }
                $datass_appprox_order['get_id'] = $order_id;
                $datass_appprox_order['return_status'] = $status[$i];
                $this->Main_model->update_commen($datass_appprox_order, 'orders_process');
            }
            echo "1";
            exit;
        }
        
        if ($form_data->action == 'returnproduct_driver_trip_completed') 
        {
             $otp = $form_data->otp;
             $otp = str_replace('|', '', $form_data->otp);
             $id = $form_data->id;
             $return_order_product_id = explode('|', $form_data->return_order_product_id);
             $qty = explode('|', $form_data->purchase_qty_data);
             
             
              $km_reading_end = $form_data->km_reading_end;
              $rescheduling_delivery = $form_data->rescheduling_delivery;
              $rescheduling_date = $form_data->rescheduling_date;
              $rescheduling_remarks = $form_data->rescheduling_remarks;
            
             $resultmainss = $this->db->query("SELECT * FROM order_sales_return_complaints  WHERE id='" . $id . "' AND otp='".$otp."' ORDER BY id DESC");
             $resultcss = $resultmainss->result();
              
              
             if($otp!='')
             {
                 
             
                         if(count($resultcss)>0)
                         {
                            foreach($resultcss as $vlval)
                            {
                                $order_id=$vlval->order_id;
                            }
                            
                            if($rescheduling_delivery=='YES')
                            {
                                
                                
                                             for($i=0;$i<count($return_order_product_id);$i++)
                                             {
                                                 
                                                 
                                                 
                                                 $order_product_id=$return_order_product_id[$i];
                                                 if($order_product_id!='')
                                                 {
                                                     
                                                     
                                                       $this->db->query("UPDATE sales_return_products SET qty='" . $qty[$i] . "',return_recived_status='1' WHERE id='" . $order_product_id . "'");
                                                      
                                                      
                                                      
                                                       $resultmainss = $this->db->query("SELECT * FROM sales_return_products  WHERE id='" . $order_product_id . "'  ORDER BY id DESC");
                                                       $resultcss = $resultmainss->result();
                                                       foreach($resultcss as $vl)
                                                       {
                                                           
                                                          $purchase_order_product_id= $vl->purchase_order_product_id;
                                                          $this->db->query("UPDATE order_product_list_process SET return_status='1' WHERE id='" . $purchase_order_product_id . "'");
                                      
                                                          
                                                       }
                                                      
                                                      
                                                      
                                                
                                                 }
                                                 
                                                 
                                                 
                                                 
                                                 
                                                 
                                             }
                                             
                                                     
                                        $remarks='Return Trip Completed';
                                        $this->db->query("UPDATE order_sales_return_complaints SET km_reading_end='".$km_reading_end."',order_base='8',remarks='".$remarks."' WHERE id='" . $id . "'");
                                        $this->db->query("UPDATE orders_process SET order_base='25',reason='".$remarks."' WHERE id='" . $order_id . "'");
                                      
                                                           
                                        $datassh['c_id'] = $id;
                                        $datassh['create_date'] = $date;
                                        $datassh['create_time'] = $time;
                                        $datassh['order_base'] = 5;
                                        $datassh['remarks'] = $remarks;
                                        $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                                             
                                             
                                
                                
                            }
                            else
                            {
                                
                                $remarks='Reschedule Date '.$rescheduling_date;
                                $this->db->query("UPDATE order_sales_return_complaints SET rescheduling_delivery='" . $rescheduling_delivery . "',rescheduling_date='" . $rescheduling_date . "',order_base='6',rescheduling_remarks='".$rescheduling_remarks."',remarks='".$remarks."' WHERE id='" . $id . "'");
                              
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                                   
                                $datassh['c_id'] = $id;
                                $datassh['create_date'] = $date;
                                $datassh['create_time'] = $time;
                                $datassh['order_base'] = 6;
                                $datassh['remarks'] = $remarks;
                                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
                                  
                                  
                                  
                                  
                                
                            }
                             
                             
                             
                             
                             
                         }
                         else
                         {
                             
                              $array = array('error' => '1', 'massage' => 'OTP Is Wrong');
                              echo json_encode($array);
                             
                             
                         }
                
                
             }
             else
             {
                 
                  $array = array('error' => '1', 'massage' => 'OTP Is Required');
                  echo json_encode($array);
                 
             }
            
            
            
            
        }
        
        
        
        if ($form_data->action == 'Cancel')
        {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $this->Main_model->cancelupdate($id, $tablename);
            
                    if($tablename=='orders_quotation')
                    {
                        
                        
                           $results = $this->Main_model->where_names($tablename, 'id', $id);
                           foreach($results as $vl)
                           {
                                $move_id=$vl->move_id;
                                $move_id_order_no=$vl->order_no;
                                
                           }
                           
                                    
                                
                                $vv['get_id'] = $move_id;
                                $vv['reason'] = 'Quotation '.$move_id_order_no;
                                $vv['order_base'] = -1;
                                $this->Main_model->update_commen($vv, 'orders');
                            
                            
                    
                    }

                     if($tablename=='orders_process')
                    {
                        
                        
                          $tablename = $form_data->tablenamemain;
                          $id = $form_data->id;
                          $order['get_id'] = $id;
                          $order['order_base'] = 22;
                          $order['reason'] = 'MD cancel order request';
                          $this->Main_model->update_commen($order, $tablename);
                            
                            
                    
                    }
                  
            
            
        }
        if($form_data->action == 'Cancel_by_order') 
        {
            
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $order['get_id'] = $id;
                $order['order_base'] = 22;
                $order['reason'] = 'MD cancel order request';
                $this->Main_model->update_commen($order, $tablename);
            
            
        }
        if ($form_data->action == 'updateWeight') {
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $order['get_id'] = $id;
                $order['weight'] = $form_data->weight;
                $this->Main_model->update_commen($order, $tablename);
        }
        if ($form_data->action == 'DateUpdate') {
                $tablename = $form_data->tablenamemain;
                $id = $form_data->order_id;
                $order['get_id'] = $id;
                $order['create_date'] = $form_data->create_date;
                $this->Main_model->update_commen($order, $tablename);
        }
        if ($form_data->action == 'process_status_assign') 
        {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->product_id;
            $order_product_id = $form_data->order_product_id;
            
            $order_product_id=explode("|",$order_product_id);
            $status = $form_data->status;
            
            
            for($i=0;$i<count($order_product_id);$i++)
            {
                
                    $datass_appprox['get_id'] = $order_product_id[$i];
                    $datass_appprox['production_start'] = $status;
                    $datass_appprox['production_start_date'] = $date;
                    $datass_appprox['production_start_time'] = $time;
                    $this->Main_model->update_commen($datass_appprox, $tablename);
                    
                    $result = $this->Main_model->where_names($tablename, 'id', $order_product_id[$i]);
                    foreach ($result as $form_datas) {
                        $order_id = $form_datas->order_id;
                    }
                    
                    
                    $datass_appprox1['get_id'] = $order_id;
                    $datass_appprox1['production_assign'] = $status;
                    $datass_appprox1['reason'] = $form_data->reason;
                    $datass_appprox1['production_start_date'] = $date;
                    $datass_appprox1['production_start_time'] = $time;
                    $this->Main_model->update_commen($datass_appprox1, 'orders_process');
                    
                
            }
            
            
                   
            
          
            
            
        }
        if ($form_data->action == 'actioncalculation') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['uom'] = $form_data->values;
            $datass_appprox['profile'] = $form_data->profile;
            $datass_appprox['dim_one'] = $form_data->dim_one;
            $datass_appprox['dim_two'] = $form_data->dim_two;
            $datass_appprox['dim_three'] = $form_data->dim_three;
            $datass_appprox['crimp'] = $form_data->crimp;
            if ($form_data->nosval != '0') {
                $datass_appprox['nos'] = $form_data->nosval;
            }
            if ($form_data->factval != '0') {
                $datass_appprox['fact'] = str_replace("-", "", $form_data->factval);
            }
            
            
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'appprox') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->order_id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['approx'] = $form_data->appprox_status;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'qtymodifiy') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['modify_qty'] = $form_data->qty;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
        
        if ($form_data->action == 'statuschange') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $start_reading = $form_data->start_reading;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['assign_status'] = 2;
            $datass_appprox['start_reading'] = $start_reading;
            $datass_appprox['reason'] = "Driver Trip Started";
            $datass_appprox['trip_start_date'] = $date;
            $datass_appprox['trip_start_time'] = $time;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
        
        if ($form_data->action == 'weightupdate')
        {
                $tablename = $form_data->tablenamemain;
                $id = $form_data->id;
                $gate_weight = $form_data->gate_weight;
                $datass_appprox['get_id'] = $id;
                $datass_appprox['gate_status'] = 1;
                $datass_appprox['gate_weight'] = $gate_weight;
                $datass_appprox['reason'] = "Gate Weight Updated";
                $datass_appprox['gate_date'] = $date;
                $datass_appprox['gate_time'] = $time;
                $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
          if ($form_data->action == 'statuschangeReturn') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $start_reading = $form_data->start_reading;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['order_base'] = 4;
            $datass_appprox['start_reading'] = $start_reading;
            $datass_appprox['remarks'] = "Driver Trip Started";
            $datass_appprox['trip_start_date'] = $date;
            $datass_appprox['trip_start_time'] = $time;
            $this->Main_model->update_commen($datass_appprox, $tablename);
            
            
            
                $datassh['c_id'] = $form_data->id;
                $datassh['create_date'] = $date;
                $datassh['create_time'] = $time;
                $datassh['order_base'] = 4;
                $datassh['remarks'] = 'Driver Trip Started';
                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
            
            
            
            
            
            
            
            
            
            
            
            
        }
        
        
        if ($form_data->action == 'loadcompleted') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->order_id;
            $driver_pickip = $form_data->driver_pickip;
            $datass_appprox['get_id'] = $id;
            
            
            $datass_appprox['loading_status'] = 0;
            if($driver_pickip==0)
            {
                
                
                 $datass_appprox['assign_status'] = 12;
                 $datass_appprox['finance_status'] = 3;
                 $datass_appprox['reason'] = "Dispatch Loaded";
                 
            }
            else
            {
                 $datass_appprox['assign_status'] = 1;
                 $datass_appprox['reason'] = "Driver Picked";
                 
                 
                 
                 
            }
            
            
           
            
            
            
            $datass_appprox['loading_date'] = $date;
            $datass_appprox['loading_time'] = $time;
            
            $resultmain = $this->db->query("SELECT SUM(nos) as totalnos FROM order_product_list_process  WHERE order_id='" . $form_data->order_id . "' AND deleteid='0' ORDER BY id DESC");
            $resultcs = $resultmain->result();
            $totalproductcount=$resultcs[0]->totalnos;
            
            
            
            $resultmainss = $this->db->query("SELECT SUM(b.nos) as totalnosload FROM order_product_list_process as a JOIN sales_load_products as b ON a.id=b.order_product_id WHERE a.order_id='" . $form_data->order_id . "' AND a.deleteid='0' AND a.loadstatus=1 ORDER BY a.id DESC");
            $resultcss = $resultmainss->result();
            $totalproductcountloadstatus=$resultcss[0]->totalnosload;
            
            
           
            if($driver_pickip==1)
            {
                
                     if($totalproductcount!=$totalproductcountloadstatus)
                    {
                          $datass_appprox['loading_status'] = 1;
                          $datass_appprox['reason'] = "Driver Partial Loaded";
                    }
                    else
                    {
                         $datass_appprox['loading_status'] = 0;
                    }
                    
                
            }
            else
            {
                
                    if($totalproductcount!=$totalproductcountloadstatus)
                    {
                          //$datass_appprox['loading_status'] = 1;
                          $datass_appprox['reason'] = "Dispatch Partial Loaded";
                    }
                    else
                    {
                         $datass_appprox['loading_status'] = 0;
                    }
                
            }
            
            
            
           
               $st['get_id']=$id;
               $st['delivery_status']=0;
               $st['driver_payment_status']=0;
               //$this->Main_model->update_commen_where($st, 'order_id', 'order_product_list_process');
           
           
               $this->Main_model->update_commen($datass_appprox, $tablename);
            
            
        }
        
        
        if($form_data->action == 'loadstatus') 
        {
            
            
                        $id = $form_data->id;
                        $status = $form_data->status;
                        $driver_pickip = $form_data->driver_pickip;
                        
                        
                        if($driver_pickip==0)
                        {
                               
                                $result = $this->Main_model->where_names('order_product_list_process', 'id', $id);
                                foreach ($result as $form_datavv) {
                                    $qty = $form_datavv->qty;
                                    $product_id = $form_datavv->product_id;
                                }
                                if($status==1)
                                {
                                     $this->db->query("UPDATE product_list SET stock=stock-'" . $qty . "' WHERE id='" . $product_id . "'");
                                }
                               
                                
                        }
                        
                        
                        $resultcheck =$this->Main_model->where_names_two_order_by('sales_load_products', 'order_product_id', $id, 'delivered_products', '0', 'id', 'ASC');
                        if(count($resultcheck)==0)
                        {
                            
                            
                              $this->db->query("DELETE FROM sales_load_products  WHERE order_product_id='" . $form_data->id . "' AND delivered_products=0");
                              $load['order_product_id'] = $form_data->id;
                              
                              $resultmainss = $this->db->query("SELECT * FROM order_product_list_process  WHERE id='" . $form_data->id . "' ORDER BY id DESC");
                              $resultcss = $resultmainss->result();
                              foreach($resultcss as $vl)
                              {
                                  
                                      $load['nos'] = $vl->nos;
                                      $load['qty'] = $vl->qty;
                                      $load['rate'] = $vl->rate;
                                      $load['loadstatus'] = $status;
                                      $load['commission'] = $vl->commission;
                                      $load['amount'] = round($vl->qty*$vl->rate+$vl->commission,2);
                              }
                             
                              $this->Main_model->insert_commen($load, 'sales_load_products');
                            
                        }
                        else
                        {
                            $this->db->query("UPDATE sales_load_products SET loadstatus='" . $status . "' WHERE order_product_id='" . $id . "' AND delivered_products=0");
                        }
                        
                        
                        
                        $datass_appprox['get_id'] = $id;
                        $datass_appprox['loadstatus'] = $status;
                        $this->Main_model->update_commen($datass_appprox, 'order_product_list_process');
                        
                        
        }
        
        if($form_data->action == 'loadstatus_by_cate') 
        {
            
                        $id = $form_data->id;
                        $status = $form_data->status;
                        $datass_appprox['get_id'] = $id;
                        $datass_appprox['loadstatus_by_cate'] = $status;
                        $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        
        
        
        
        
        if ($form_data->action == 'bayinfocnage') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['bay_info'] = $form_data->value;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'bininfocnage') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $datass_appprox['get_id'] = $id;
            $datass_appprox['bin_info'] = $form_data->value;
            $this->Main_model->update_commen($datass_appprox, $tablename);
        }
        if ($form_data->action == 'InputUpdateprocess') {
            $tablename = 'proudtcion_order_products';
            $id = $form_data->id;
            $this->db->query("UPDATE proudtcion_order_products SET proudtcion_no=proudtcion_no+'" . $form_data->values . "' WHERE id='" . $id . "'");
        }
        if ($form_data->action == 'qcstatuschange')
        {
            
         
           
            $tablename = 'proudtcion_order_products';
            $id = $form_data->id;
            $idstatus = $form_data->idstatus;
            $statuss = $form_data->statuss;
            $field = $form_data->field;
            if($idstatus == '-1')
            {  
                $start_status=2;
                $this->db->query("UPDATE proudtcion_order_products SET $field='" . $statuss . "',production_status='" . $idstatus . "',proudtcion_no='0' WHERE id='" . $id . "'");
            } 
            else
            {
                $this->db->query("UPDATE proudtcion_order_products SET $field='" . $statuss . "',production_status='" . $idstatus . "' WHERE id='" . $id . "'");
                $start_status=$idstatus;
                
                
            }
            if ($idstatus == '-1') {
                $reason = 'Production Re-assign '.$field;
            } else {
                $reason = 'Production QC Verified';
                
            }
           
            
            $result = $this->Main_model->where_names('proudtcion_order_products', 'id', $id);
            foreach ($result as $form_datavv) 
            {
                $order_product_id = $form_datavv->order_product_id;
                $order_id = $form_datavv->order_id;
            }
            
            $this->db->query("UPDATE orders_process SET production_assign='" . $idstatus . "',reason='" . $reason . "' WHERE id='" . $order_id . "'");
            $this->db->query("UPDATE order_product_list_process SET production_start='" . $idstatus . "' WHERE id='" . $order_product_id . "'");
            
            
            
            
            
            
            
            
        }
        if ($form_data->action == 'processStatuschages') {
            $tablename = $form_data->tablenamemain;
           
            $id = $form_data->order_product_id;
            $orer_p_id = explode('|', $id);
            $order_production_no = explode('|', $form_data->order_production_no);
            $order_production_no_cmd = explode('|', $form_data->order_production_no_cmd);
            for ($i = 0;$i < count($orer_p_id);$i++) {
                
                
                 $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        
                        $order_product_id = $form_datavv->order_product_id;
                        $order_id = $form_datavv->order_id;
                    }
                
                
                $datass_appprox['get_id'] = $orer_p_id[$i];
                $datass_appprox['production_status'] = $form_data->status;
                if ($form_data->status == 1) {
                    //$datass_appprox['proudtcion_no']=0;
                    
                } elseif ($form_data->status == 3) {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_status = $form_datavv->production_status;
                        $production_no = $form_datavv->production_no;
                        if ($order_production_no_cmd[$i] != 0) {
                            $proudtcion_no_data = $order_production_no_cmd[$i];
                        } else {
                            $proudtcion_no_data = $order_production_no[$i];
                        }
                    }
                    if ($production_status == 1) {
                        $datass_appprox['production_status'] = 2;
                    }
                    $datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                } else {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_no = $form_datavv->production_no;
                        if ($production_no == 0 || $production_no = "") {
                            if ($order_production_no_cmd[$i] != 0) {
                                $proudtcion_no_data = $order_production_no_cmd[$i];
                            } else {
                                $proudtcion_no_data = $order_production_no[$i];
                            }
                        } else {
                            $proudtcion_no_data = $production_no;
                        }
                    }
                    //$datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                }
                $datass_appprox['process_start_date'] = $date;
                $datass_appprox['process_start_time'] = $time;
                $this->Main_model->update_commen($datass_appprox, $tablename);
                
                
                
                
                
                
                
                    $datass['get_id'] = $order_product_id;
                    $datass['production_start'] = $form_data->status;
                    $datass['process_start_date'] = $date;
                    $datass['process_start_time'] = $time;
                    $this->Main_model->update_commen($datass, 'order_product_list_process');
                    
                    
                    
                    if ($form_data->status == 2) {
                     $reason = 'Production In-progress';
                    }
                    if ($form_data->status == 1) {
                     $reason = 'Production Started';
                    }
                    if ($form_data->status == 3) {
                        $reason = 'Production Completed';
                    }
                    if ($form_data->status == 4) {
                        $reason = 'Production QC Verified';
                    }
                    if ($form_data->status == -1) {
                        $reason = 'Production Re-assign';
                    }
                    if ($form_data->status == 5) {
                        $reason = 'Production Move Transport';
                        $datass_val['finance_status'] = 2;
                    }
                    
                    $datass_val['get_id'] = $order_id;
                    $datass_val['reason'] = $reason;
                    $datass_val['production_assign'] = $form_data->status;
                    
                    $this->Main_model->update_commen($datass_val, 'orders_process');
                
                
                
                
                
            }
            
            
            
            
        }
        if ($form_data->action == 'processStatuschagesAll') {
            $tablename = $form_data->tablenamemain;
            $order_id = $form_data->order_id;
            $datass_appprox['get_id'] = $order_id;
            $datass_appprox['production_status'] = $form_data->status;
            $this->Main_model->update_commen_where($datass_appprox, 'order_id', $tablename);
            $datass['get_id'] = $order_id;
            $datass['production_status'] = $form_data->status;
            $datass['reason'] = $form_data->reason;
            $this->Main_model->update_commen($datass, 'orders_process');
        }
        if ($form_data->action == 'processStatuschages_single') {
            
            
            $tablename = $form_data->tablenamemain;
            $id = $form_data->order_product_id;
            $orer_p_id = explode('|', $id);
            $order_production_no = explode('|', $form_data->order_production_no);
            $order_production_no_cmd = explode('|', $form_data->order_production_no_cmd);
            for ($i = 0;$i < count($orer_p_id);$i++) {
                
                
                
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        
                        $order_product_id = $form_datavv->order_product_id;
                        $order_id = $form_datavv->order_id;
                    }
                
                
                $datass_appprox['get_id'] = $orer_p_id[$i];
                $datass_appprox['production_status'] = $form_data->status;
                if ($form_data->status == 1) {
                    //$datass_appprox['proudtcion_no']=0;
                    
                    $reason='Production Started';
                    
                } elseif ($form_data->status == 3) {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_status = $form_datavv->production_status;
                        $production_no = $form_datavv->production_no;
                        if ($order_production_no_cmd[$i] != 0) {
                            $proudtcion_no_data = $order_production_no_cmd[$i];
                        } else {
                            $proudtcion_no_data = $order_production_no[$i];
                        }
                    }
                    if ($production_status == 1) {
                        $datass_appprox['production_status'] = 2;
                    }
                    $datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                    $reason='Production Complated';
                } else {
                    $result = $this->Main_model->where_names($tablename, 'id', $orer_p_id[$i]);
                    foreach ($result as $form_datavv) {
                        $production_no = $form_datavv->production_no;
                        if ($production_no == 0 || $production_no = "") {
                            if ($order_production_no_cmd[$i] != 0) {
                                $proudtcion_no_data = $order_production_no_cmd[$i];
                            } else {
                                $proudtcion_no_data = $order_production_no[$i];
                            }
                        } else {
                            $proudtcion_no_data = $production_no;
                        }
                    }
                    $datass_appprox['proudtcion_no'] = $proudtcion_no_data;
                    $reason='Production In-progress';
                }
                $datass_appprox['process_start_date'] = $date;
                $datass_appprox['process_start_time'] = $time;
                $this->Main_model->update_commen($datass_appprox, $tablename);
                
                
                
                    $datass['get_id'] = $order_product_id;
                    $datass['production_start'] = $form_data->status;
                    $datass['process_start_date'] = $date;
                    $datass['process_start_time'] = $time;
                    $this->Main_model->update_commen($datass, 'order_product_list_process');
                    
                    
                    $datass_val['get_id'] = $order_id;
                    $datass_val['reason'] = $reason;
                    $datass_val['production_assign'] = $form_data->status;
                    $this->Main_model->update_commen($datass_val, 'orders_process');
            
                
                
                
            }
           
            
            
            
        }
        if ($form_data->action == 'addprocessdelete') {
            $tablename = $form_data->tablenamemain;
            $this->db->query("DELETE FROM $tablename  WHERE id='" . $form_data->id . "'");
        }
        if ($form_data->action == 'addprocess') {
            
            
            $this->db->query("DELETE FROM proudtcion_order_products  WHERE order_product_id='" . $form_data->order_product_id . "'");
            
            
            $tablename = $form_data->tablenamemain;
            $datass['proudtcion_id'] = $form_data->id;
            $datass['order_product_id'] = $form_data->order_product_id;
            $datass['product_id'] = $form_data->product_id;
            $result = $this->Main_model->where_names('order_product_list_process', 'id', $form_data->order_product_id);
            foreach ($result as $form_datavv) {
                $datass['categorie_id'] = $form_datavv->categories_id;
                $datass['order_id'] = $form_datavv->order_id;
            }
          
            $datass['proudtcion_name'] = $form_data->name;
            $datass['userid'] = $this->userid;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $datass['order_id'] . "' AND order_product_id='" . $form_data->order_product_id . "' ORDER BY id DESC LIMIT 0,1");
            $resultcs = $resultmain->result();
            if (count($resultcs) > 0) {
                foreach ($resultcs as $v) {
                    $datass['sort_order'] = $v->sort_order + 1;
                }
            } else {
                $datass['sort_order'] = 1;
            }
            $this->db->query("UPDATE order_product_list_process SET checked='1' WHERE id='" . $form_data->order_product_id . "'");
            $datass['create_date'] = $date;
            $datass['create_time'] = $time;
            $this->Main_model->insert_commen($datass, $tablename);
            
            
        }
        if ($form_data->action == 'addprocessloop') {
            $tablename = $form_data->tablenamemain;
            $order_product_id = explode('|', $form_data->order_product_id);
            for ($i = 0;$i < count($order_product_id);$i++) {
                
                $this->db->query("DELETE FROM proudtcion_order_products  WHERE order_product_id='" . $order_product_id[$i] . "'");
         
                $datass['order_product_id'] = $order_product_id[$i];
                $datass['proudtcion_id'] = $form_data->id;
                $result = $this->Main_model->where_names('order_product_list_process', 'id', $order_product_id[$i]);
                foreach ($result as $form_datavv) {
                    $datass['categorie_id'] = $form_datavv->categories_id;
                    $datass['product_id'] = $form_datavv->product_id;
                    $datass['order_id'] = $form_datavv->order_id;
                }
                
                $datass['proudtcion_name'] = $form_data->name;
                $datass['userid'] = $this->userid;
                $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_id='" . $form_data->order_id . "' AND order_product_id='" . $order_product_id[$i] . "' ORDER BY id DESC LIMIT 0,1");
                $resultcs = $resultmain->result();
                if (count($resultcs) > 0) {
                    foreach ($resultcs as $v) {
                        $datass['sort_order'] = $v->sort_order + 1;
                    }
                } else {
                    $datass['sort_order'] = 1;
                }
                $this->db->query("UPDATE order_product_list_process SET checked='1' WHERE id='" . $order_product_id[$i] . "'");
                $datass['create_date'] = $date;
                $datass['create_time'] = $time;
                $this->Main_model->insert_commen($datass, $tablename);
            }
        }
        if ($form_data->action == 'sizesave') {
            $tablename_sub = $form_data->tablename_sub;
            $id = $form_data->order_product_id;
            $ss['get_id'] = $id;
            $ss['sub_product_id'] = $form_data->sub_product;
            $ss['value_id'] = 0;
            $ss['section_lable'] = 0;
            $ss['section_value'] = 0;
            $ss['degree'] = 0;
            $this->Main_model->update_commen($ss, $tablename_sub);
            $datass_appprox['get_id'] = $id;
            $datass_appprox['sub_product_id'] = $form_data->sub_product;
            $datass_appprox['value_id'] = $form_data->value_id;
            $datass_appprox['section_lable'] = $form_data->lab1;
            $datass_appprox['section_value'] = $form_data->lab2;
            $datass_appprox['degree'] = $form_data->degree;
            $datass_appprox['image_length'] = $form_data->image_length;
            $this->Main_model->update_commen($datass_appprox, $tablename_sub);
        }
        if ($form_data->action == 'Cancelfinance') {
            $tablename = $form_data->tablenamemain;
            $id = $form_data->id;
            $this->Main_model->cancelupdatefinance($id, $tablename);
        }
        if ($form_data->action == 'Commission') {
            $tablename = $form_data->tablename_sub;
            $order_id = $form_data->order_id;
            $commission = $form_data->commissionval;
            $datass['get_id'] = $form_data->order_id;
            $datass['commission'] = $commission;
            $this->Main_model->update_commen_where($datass, 'order_id', $tablename);
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->order_id;
            $val['commission_check'] = 1;
            
            
                     
            if($tablenamemain=='orders_process')
            {
                
                
                
                           $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                           foreach($results as $vl)
                           {
                                $order_base=$vl->order_base;
                                $finance_status=$vl->finance_status;
                           }
                           if($order_base==1)
                           {
                                if($finance_status==2)
                                {
                
                
                
                $val['order_base'] = 21;
                $val['reason'] = 'MD Approvel Request For Commission';
                
                                }
                                
                                
                           }
                
                
                
                
                
                
                
            }
                
            
            $this->Main_model->update_commen($val, $tablenamemain);
        }
        if ($form_data->action == 'deliverystatus') {
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->order_id;
            $val['delivery_charge'] = $form_data->delivery_charge;
            $val['delivery_status'] = $form_data->deliverystatus;
            $val['delivery_mode'] = $form_data->delivery_mode;
            $val['payment_mode'] = $form_data->payment_mode;
            $this->Main_model->update_commen($val, $tablenamemain);
        }
        
        
        if ($form_data->action == 'removeassign') {
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->id;
            $val['finance_status'] = 2;
            $val['assign_status'] = 0;
            $val['reason'] = "Un-assiend Vehicle";
            $val['driver_id'] = 0;
            $val['vehicle_id'] = 0;
            
            $this->Main_model->update_commen($val, $tablenamemain);
        }
        
        if ($form_data->action == 'removeassign_return') {
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->id;
            $val['driver_assign'] = 0;
            $val['order_base'] = 0;
            $val['remarks'] = "Un-assiend Vehicle";
            $val['driver_id'] = 0;
            $val['vehicle_id'] = 0;
            $this->Main_model->update_commen($val, $tablenamemain);
            
            
                $datassh['c_id'] = $val['get_id'];
                $datassh['create_date'] = $date;
                $datassh['create_time'] = $time;
                $datassh['order_base'] = 0;
                $datassh['remarks'] = 'Un-assiend Vehicle';
                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
            
            
            
        }
        
        
        if ($form_data->action == 'removeAssignCallback') {
            $tablenamemain = $form_data->tablenamemain;
            $val['get_id'] = $form_data->id;
            $val['finance_status'] = 3;
            $val['assign_status'] = 1;
            $val['reason'] = "CallBack";
            $val['driver_id'] = 0;
            $val['vehicle_id'] = 0;
            $this->Main_model->update_commen($val, $tablenamemain);
        }
        if ($form_data->action == 'Copy') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $result = $this->Main_model->where_names($tablename, 'id', $id);
            foreach ($result as $form_data) {
                $data['product_id'] = $form_data->product_id;
                $data['product_name'] = $form_data->product_name;
                $data['tile_material_name'] = $form_data->tile_material_name;
                $data['tile_material_id'] = $form_data->tile_material_id;
                $data['categories_id'] = $form_data->categories_id;
                $data['categories_name'] = $form_data->categories_name;
                $data['dim_one'] = $form_data->dim_one;
                $data['dim_two'] = $form_data->dim_two;
                $data['dim_three'] = $form_data->dim_three;
                $data['image_length'] = $form_data->image_length;
                $data['gst'] = $form_data->gst;
                $data['gst_check'] = $form_data->gst_check;
                $data['profile'] = $form_data->profile;
                $data['crimp'] = $form_data->crimp;
                $data['extra_crimp'] = $form_data->extra_crimp;
                $data['back_crimp'] = $form_data->back_crimp;
                $data['Meter_to_Sqr_feet'] = $form_data->Meter_to_Sqr_feet;
                $data['Sqr_feet_to_Meter'] = $form_data->Sqr_feet_to_Meter;
                $data['nos'] = $form_data->nos;
                $data['uom'] = $form_data->uom;
                $data['billing_options'] = $form_data->billing_options;
                $data['commission'] = $form_data->commission;
                $data['address_id'] = $form_data->address_id;
                $data['address_id_mark'] = $form_data->address_id_mark;
                $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                foreach ($additional_information as $vl) {
                    $label_name = strtolower($vl->label_name);
                    $data[$label_name] = $form_data->$label_name;
                }
                $data['reference_image'] = $form_data->reference_image;
                $data['section_lable'] = $form_data->section_lable;
                $data['section_value'] = $form_data->section_value;
                $data['degree'] = $form_data->degree;
                $data['sub_product_id'] = $form_data->sub_product_id;
                $data['value_id'] = $form_data->value_id;
                $data['unit'] = $form_data->unit;
                $data['order_id'] = $form_data->order_id;
                $data['order_no'] = $form_data->order_no;
                $data['fact'] = $form_data->fact;
                $data['rate'] = $form_data->rate;
                $data['qty'] = $form_data->qty;
                $data['sort_id'] = $form_data->sort_id;
                $data['amount'] = $form_data->amount;
                $this->Main_model->insert_commen($data, $tablename);
            }
            $array = array('success' => '2');
            echo json_encode($array);
        }
        if ($form_data->action == 'Copygroup') {
            $tablename = $form_data->tablename_sub;
            $id = $form_data->id;
            $rows_input = $form_data->rows_input;
            for ($i = 0;$i < $rows_input;$i++) {
                $result = $this->Main_model->where_names($tablename, 'id', $id);
                foreach ($result as $form_data) {
                    $data['product_id'] = $form_data->product_id;
                    $data['product_name'] = $form_data->product_name;
                    $data['tile_material_name'] = $form_data->tile_material_name;
                    $data['tile_material_id'] = $form_data->tile_material_id;
                    $data['categories_id'] = $form_data->categories_id;
                    $categories_id = $form_data->categories_id;
                    $data['categories_name'] = $form_data->categories_name;
                    $data['dim_one'] = $form_data->dim_one;
                    $data['dim_two'] = $form_data->dim_two;
                    $data['dim_three'] = $form_data->dim_three;
                    $data['image_length'] = $form_data->image_length;
                    $data['gst'] = $form_data->gst;
                    $data['gst_check'] = $form_data->gst_check;
                    $data['profile'] = $form_data->profile;
                    $data['crimp'] = $form_data->crimp;
                    $data['extra_crimp'] = $form_data->extra_crimp;
                    $data['back_crimp'] = $form_data->back_crimp;
                    $data['Meter_to_Sqr_feet'] = $form_data->Meter_to_Sqr_feet;
                    $data['Sqr_feet_to_Meter'] = $form_data->Sqr_feet_to_Meter;
                    $data['nos'] = $form_data->nos;
                    $data['uom'] = $form_data->uom;
                    $data['billing_options'] = $form_data->billing_options;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $data[$label_name] = $form_data->$label_name;
                    }
                    $data['commission'] = $form_data->commission;
                    $data['address_id'] = $form_data->address_id;
                    $data['address_id_mark'] = $form_data->address_id_mark;
                    $data['reference_image'] = $form_data->reference_image;
                    $data['sub_product_id'] = $form_data->sub_product_id;
                    $data['value_id'] = $form_data->value_id;
                    $data['section_lable'] = $form_data->section_lable;
                    $data['section_value'] = $form_data->section_value;
                    $data['degree'] = $form_data->degree;
                    $data['unit'] = $form_data->unit;
                    $data['order_id'] = $form_data->order_id;
                    $data['order_no'] = $form_data->order_no;
                    $data['fact'] = $form_data->fact;
                    $data['rate'] = $form_data->rate;
                    $data['qty'] = $form_data->qty;
                    $data['sort_id'] = $form_data->sort_id;
                    $data['amount'] = $form_data->amount;
                    $this->Main_model->insert_commen($data, $tablename);
                }
            }
            $i = 1;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $form_data->order_no . "' AND categories_id='" . $categories_id . "' AND deleteid='0'  ORDER BY sort_id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $vl) {
                $data_update['count_id'] = $i;
                $data_update['get_id'] = $vl->id;
                $this->Main_model->update_commen($data_update, $tablename);
                $i++;
            }
            $array = array('success' => '2');
            echo json_encode($array);
        }
        if ($form_data->action == 'Copyempty') {
            $tablename = $form_data->tablename_sub;
            $rows_input = $form_data->rows_input;
            $checkinsert = $form_data->checkinsert;
            $additional_information = $this->Main_model->where_names_two_order_by($tablename, 'id', $checkinsert, 'deleteid', '0', 'id', 'ASC');
            foreach ($additional_information as $vl) {
                $product_id = $vl->product_id;
                $categories_id = $vl->categories_id;
                $product_name = $vl->product_name;
                $sort_id = $vl->sort_id;
            }
            for ($i = 0;$i < $rows_input;$i++) {
                if ($categories_id == 1) {
                    $data['product_id'] = $product_id;
                    $data['product_name'] = $product_name;
                }
                $data['tile_material_name'] = "";
                $data['tile_material_id'] = "";
                $data['categories_id'] = $categories_id;
                $data['categories_name'] = "";
                $data['dim_one'] = "";
                $data['dim_two'] = "";
                $data['dim_three'] = "";
                $data['image_length'] = "0";
                $data['gst'] = "0";
                $data['gst_check'] = "0";
                $data['profile'] = "0";
                $data['crimp'] = "0";
                $data['extra_crimp'] = "0";
                $data['back_crimp'] = "0";
                $data['commission'] = "0";
                $data['address_id'] = "0";
                $data['address_id_mark'] = "0";
                $data['nos'] = "0";
                $data['unit'] = "0";
                $data['order_id'] = $form_data->order_id;
                $data['order_no'] = $form_data->order_no;
                $data['fact'] = "0";
                $data['uom'] = "0";
                $data['rate'] = "0";
                $data['qty'] = "0";
                $data['sort_id'] = $sort_id;
                $data['amount'] = "0";
                $this->Main_model->insert_commen($data, $tablename);
            }
            $i = 1;
            $resultmain = $this->db->query("SELECT * FROM $tablename  WHERE order_no='" . $form_data->order_no . "' AND categories_id='" . $categories_id . "' AND deleteid='0' ORDER BY sort_id ASC");
            $resultcs = $resultmain->result();
            foreach ($resultcs as $vl) {
                $data_update['count_id'] = $i;
                $data_update['get_id'] = $vl->id;
                $this->Main_model->update_commen($data_update, $tablename);
                $i++;
            }
            $array = array('success' => '2');
            echo json_encode($array);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_by_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE product_id='" . $_GET['product_id'] . "' AND deleteid=0  ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                
                       if($tablenamemain=='purchase_orders_process')
                        {    
                             if($csval->purchase_name!='')
                             {
                                 $product_name = $csval->purchase_name;
                             }
                             
                        }
                
                
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $this->db->query("UPDATE $tablename_sub SET cul='3' WHERE id='" . $value->id . "'");
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->qty * 10.764, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($value->base_id == "") {
                $value->base_id = 1;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
                $value->reference_image=0;
            }
            else
            {
                $value->reference_image=base_url().$value->reference_image;
            }
            
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            if ($value->count_id != '') {
                $count_id = $i;
            } else {
                $count_id = $i;
            }
            
           
            $array[] = array('no' => $count_id, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus,'production_start' => $value->production_start, 'order_id' => $value->order_id,'purchase_request' => $value->purchase_request,'purchase_id' => $value->purchase_id, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id,'reference_image' => $value->reference_image,'sub_product_id' => $value->sub_product_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'return_status' => $value->return_status,'rate_edit' => $value->rate_edit, 'categories_id' => $value->categories_id, 'specifications' => $value->specifications, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'base_id' => $value->base_id, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    public function fetch_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0  ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                
                       if($tablenamemain=='purchase_orders_process')
                        {    
                             if($csval->purchase_name!='')
                             {
                                 $product_name = $csval->purchase_name;
                             }
                             
                        }
                
                
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $this->db->query("UPDATE $tablename_sub SET cul='3' WHERE id='" . $value->id . "'");
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->qty * 10.764, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($value->base_id == "") {
                $value->base_id = 1;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
                $value->reference_image=0;
            }
            else
            {
                $value->reference_image=base_url().$value->reference_image;
            }
            
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            if ($value->count_id != '') {
                $count_id = $i;
            } else {
                $count_id = $i;
            }
            
            
                 $profile_edit='';
                $crimp_edit='';
                $fact_edit='';
                $nos_edit='';
                $qty_edit='';
            if($tablename_sub=='order_product_list_process')
            {
                $profile_edit=$value->profile_edit;
                $crimp_edit=$value->crimp_edit;
                $fact_edit=$value->fact_edit;
                $nos_edit=$value->nos_edit;
                $qty_edit=$value->qty_edit;
            }
            
           
            $array[] = array('no' => $count_id,
            'profile_edit' => $profile_edit,
            'crimp_edit' => $crimp_edit,
            'fact_edit' => $fact_edit,
            'nos_edit' => $nos_edit,
            'qty_edit' => $qty_edit,
            'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id,'purchase_request' => $value->purchase_request,'purchase_id' => $value->purchase_id, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id,'reference_image' => $value->reference_image,'sub_product_id' => $value->sub_product_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'return_status' => $value->return_status,'rate_edit' => $value->rate_edit, 'categories_id' => $value->categories_id, 'specifications' => $value->specifications, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'base_id' => $value->base_id, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_delivery_data_by_load() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        
         $driver_pickip=0;
         $loadset="";
         if(isset($_GET['driver_pickip']))
         {
             $driver_pickip = $_GET['driver_pickip'];
             
             if($driver_pickip==1)
             {
                //$loadset=" AND loadstatus='".$driver_pickip."'";
              
             }
             
         }
         
                   
        
        $customer_id = 0;
        $paricel_mode = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $paricel_mode = $valuecs->paricel_mode;
            $customer_id = $valuecs->customer_id;
        }
        
        if($driver_pickip==0)
        {
            
            
            $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND loadstatus_by_cate=0  AND product_id!='' $loadset ORDER BY sort_id ASC");
         
         
        }
        else
        {
             $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND loadstatus_by_cate=0  AND delivery_status=0 AND product_id!='' $loadset ORDER BY sort_id ASC");
        
        }
        
        
       
        
        
        $result = $result->result();
        foreach ($result as $value) {
            
            
            
            
            
            
            
            
            
            
            
            
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            if ($value->paricel_mode == '1') {
                
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                
                $amountdata = $value->rate * $value->modify_qty;
                $amount = $amountdata + $value->commission;
            }
            
            
            
            
            
         
           if($driver_pickip==0)
           {
            
            $resultload = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND loadstatus=1  ORDER BY id ASC");
            $resultload = $resultload->result();
            foreach ($resultload as $valueload)
            {
                
                    $loadnos= $valueload->nos;
                    $value->nos= $value->nos-$valueload->nos;
                    $loadamount= $valueload->amount;
                    $loadqty= $valueload->qty;
                
            }
            
           }
           
            if($driver_pickip==1)
           {
            
            $resultload = $this->db->query("SELECT SUM(nos) as nos,SUM(amount) as amount,SUM(qty) as qty FROM sales_load_products  WHERE order_product_id='" . $value->id . "' AND loadstatus=1 AND delivered_products=0  ORDER BY id ASC");
            $resultload = $resultload->result();
            foreach ($resultload as $valueload)
            {
                
                    $loadnos= $valueload->nos;
                    //$value->nos= $value->nos-$valueload->nos;
                    $loadamount= $valueload->amount;
                    $loadqty= $valueload->qty;
                
            }
            
           }
            
            
            
            
            $address_id = $value->address_id;
            $addresstopariel = "";
            if ($value->paricel_mode == 1) {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($value->paricel_mode == '1') {
                $qty = $value->modify_qty;
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id,'loadnos' => $loadnos,'loadamount' => round($loadamount,2),'loadqty' => round($loadqty,2), 'same' => $same, 'imagestatus' => $imagestatus, 'loadstatus' => $value->loadstatus,'delivery_status' => $value->delivery_status,'order_id' => $value->order_id, 'paricel_mode' => $value->paricel_mode, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => $qty, 'addresstopariel' => $addresstopariel, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    public function fetch_data_delivery_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $paricel_mode = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $paricel_mode = $valuecs->paricel_mode;
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND loadstatus_by_cate=0 AND loadstatus=1 AND product_id!='' ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            if ($value->paricel_mode == '1') {
                
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                
                $amountdata = $value->rate * $value->modify_qty;
                $amount = $amountdata + $value->commission;
            }
            $address_id = $value->address_id;
            $addresstopariel = "";
            if ($value->paricel_mode == 1) {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($value->paricel_mode == '1') {
                $qty = $value->modify_qty;
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'loadstatus' => $value->loadstatus,'order_id' => $value->order_id, 'paricel_mode' => $value->paricel_mode, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => $qty, 'addresstopariel' => $addresstopariel, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
     public function fetch_data_delivery_data_driver() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $paricel_mode = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $paricel_mode = $valuecs->paricel_mode;
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND  paricel_mode='" . $paricel_mode . "' AND deleteid=0 AND delivery_status=0 AND loadstatus=1 AND product_id!='' ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            
            
            
            
            $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
            
            foreach ($resultload as $valueload)
            {
                if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                {  
                    $value->rate= $valueload->rate;
                    $value->qty= $valueload->qty;
                }
                
            }
            
            
            
            
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            if ($value->paricel_mode == '1') {
                
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                
                $amountdata = $value->rate * $value->modify_qty;
                $amount = $amountdata + $value->commission;
            }
            $address_id = $value->address_id;
            $addresstopariel = "";
            if ($value->paricel_mode == 1) {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $addresstopariel = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $description = "";
            $product_name = "";
            $kg_price = 0;
            $og_price = 0;
            $og_formula = 0;
            $kg_formula2 = 0;
            $stock = 0;
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                $kg_price = $csval->kg_price;
                $og_price = $csval->price;
                $stock = round($csval->stock);
                $og_formula = $csval->formula;
                $kg_formula2 = $csval->formula2;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($value->paricel_mode == '1') {
                $qty = $value->modify_qty;
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'loadstatus' => $value->loadstatus,'order_id' => $value->order_id, 'paricel_mode' => $value->paricel_mode, 'product_name_tab' => $product_name, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'stock' => $stock, 'kg_price' => $kg_price, 'og_price' => $og_price, 'og_formula' => $og_formula, 'kg_formula2' => $kg_formula2, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => $qty, 'addresstopariel' => $addresstopariel, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_get() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0 AND product_id!='0'  ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            if ($value->paricel_mode == 1) {
                if ($value->modify_qty == "") {
                    $amountdata = $value->rate * $value->qty;
                } else {
                    
                    if($value->modify_qty==0)
                    {
                        $value->modify_qty=$value->qty;
                    }
                    
                    $amountdata = $value->rate * $value->modify_qty;
                }
            } else {
                $amountdata = $value->rate * $value->qty;
            }
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($convert == 3) {
                if ($type == 4) {
                    $profile = round($value->profile / 304.8, 4);
                    $crimp = round($value->crimp / 304.8, 4);
                } else {
                    $profile = $value->profile;
                    $crimp = $value->crimp;
                }
            }
            if ($convert == 4) {
                if ($type == 4) {
                    $profile = $value->profile;
                    $crimp = $value->crimp;
                } else {
                    $profile = round($value->profile * 304.8, 4);
                    $crimp = round($value->crimp * 304.8, 4);
                }
            }
            if ($convert == 5) {
                $profile = round($value->profile *0.305, 4);
                $crimp = round($value->crimp *0.305, 4);
            }
            if ($convert == 6) {
                $profile = round($value->profile * 12, 4);
                $crimp = round($value->crimp * 12, 4);
            }
            if ($value->paricel_mode == 1)
            {
                
                $modify_qty = $value->modify_qty;
                $modify_qty=round($value->qty-$modify_qty,2);
                
            }
            else
            { 
                $modify_qty = 0;
            }
            
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'loadstatus_by_cate' => $value->loadstatus_by_cate,'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'categories_id' => $value->categories_id, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'address_id' => $value->address_id, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'paricel_mode' => $value->paricel_mode, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'modify_qty' => $modify_qty, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
        
    }
    public function fetch_data_calculation() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $cid = $_GET['cid'];
        $typev = $_GET['type'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "'  AND deleteid=0 ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            $profile = $value->profile;
            $crimp = $value->crimp;
            if ($cid == $value->id) {
                $this->db->query("UPDATE $tablename_sub SET cul='" . $convert . "' WHERE id='" . $value->id . "'");
                if ($convert == 5) {
                    $profile = round($value->profile *0.305, 4);
                    $crimp = round($value->crimp *0.305, 4);
                }
                if ($convert == 6) {
                    $profile = round($value->profile * 12, 4);
                    $crimp = round($value->crimp * 12, 4);
                }
                if ($convert == 3) {
                    if ($type == 4) {
                        $profile = round($value->profile / 304.8, 4);
                        $crimp = round($value->crimp / 304.8, 4);
                    } else {
                        $profile = $value->profile;
                        $crimp = $value->crimp;
                    }
                }
                if ($convert == 4) {
                    if ($type == 4) {
                        $profile = $value->profile;
                        $crimp = $value->crimp;
                    } else {
                        $profile = round($value->profile * 304.8, 4);
                        $crimp = round($value->crimp * 304.8, 4);
                    }
                }
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'type' => $type, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => $profile, 'crimp_tab' => $crimp, 'checked' => $value->checked, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'proudtcion_no' => $value->proudtcion_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'cul' => $value->cul, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
     public function fetch_data_production_order_by() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $status = $_GET['status'];
        $sqlstatus = '';
        //$sqlstatus = ' AND   b.production_status=' . $status;
        $order_id = $_GET['order_id'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $order_id . "' AND  deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT a.*,b.color,b.color_qty,b.thickness,b.thickness_qty,b.corners,b.corners_qty,b.crimp_check,b.crimp_check_qty,b.bay_info,b.bin_info,b.proudtcion_no as proudtcion_no_val,b.id as labelid,b.production_status as production_status,b.proudtcion_id as proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE a.order_id='" . $order_id . "' AND  a.deleteid=0 $sqlstatus ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE  a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            if ($value->proudtcion_no_val == 0 || $value->proudtcion_no_val == '') {
                $proudtcion_no_val = $value->nos;
                $cmp_no = 0;
            } else {
                $cmp_no = $value->proudtcion_no_val;
                $proudtcion_no_val = $value->nos - $value->proudtcion_no_val;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'labelid' => $value->labelid, 'order_no' => $value->order_no, 'type' => $type, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'proudtcion_id' => $value->proudtcion_id, 'categories_id' => $value->categories_id, 'profile_tab' => $value->profile, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'checked' => $value->checked, 'production_status' => $value->production_status, 'bay_info' => $value->bay_info, 'bin_info' => $value->bin_info, 'color' => $value->color, 'color_qty' => $value->color_qty, 'thickness' => $value->thickness, 'thickness_qty' => $value->thickness_qty, 'corners' => $value->corners, 'corners_qty' => $value->corners_qty, 'crimp_check' => $value->crimp_check, 'crimp_check_qty' => $value->crimp_check_qty, 'proudtcion_no' => $proudtcion_no_val, 'cmp_no' => $cmp_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    public function fetch_data_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $status = $_GET['status'];
        $sqlstatus = '';
        if ($status == 1) {
            $sqlstatus = ' AND  b.production_status=1 OR b.production_status=-1 OR b.production_status=2';
        } elseif ($status == 3) {
            $sqlstatus = ' AND   b.production_status=4 OR b.production_status=5 OR b.production_status=' . $status;
        } elseif ($status == 4) {
            $sqlstatus = ' AND   b.production_status=5 OR b.production_status=' . $status;
        } elseif ($status == 10) {
            $sqlstatus = ' AND  b.production_status=4 OR b.production_status=-1 OR b.production_status=5 OR b.production_status=3';
        } else {
            $sqlstatus = ' AND  b.production_status=' . $status;
        }
        $product_id = $_GET['product_id'];
        $customer_id = 0;
       
        $result = $this->db->query("SELECT a.*,b.color,b.color_qty,b.thickness,b.thickness_qty,b.corners,b.corners_qty,b.crimp_check,b.crimp_check_qty,b.bay_info,b.bin_info,b.proudtcion_no as proudtcion_no_val,b.id as labelid,b.production_status as production_status,b.proudtcion_id as proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE b.product_id='" . $product_id . "' AND  a.deleteid=0 $sqlstatus ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE  a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            if ($value->proudtcion_no_val == 0 || $value->proudtcion_no_val == '') {
                $proudtcion_no_val = $value->nos;
                $cmp_no = 0;
            } else {
                $cmp_no = $value->proudtcion_no_val;
                $proudtcion_no_val = $value->nos - $value->proudtcion_no_val;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'labelid' => $value->labelid, 'order_no' => $value->order_no, 'type' => $type, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'proudtcion_id' => $value->proudtcion_id, 'categories_id' => $value->categories_id, 'profile_tab' => $value->profile, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'checked' => $value->checked, 'production_status' => $value->production_status, 'bay_info' => $value->bay_info, 'bin_info' => $value->bin_info, 'color' => $value->color, 'color_qty' => $value->color_qty, 'thickness' => $value->thickness, 'thickness_qty' => $value->thickness_qty, 'corners' => $value->corners, 'corners_qty' => $value->corners_qty, 'crimp_check' => $value->crimp_check, 'crimp_check_qty' => $value->crimp_check_qty, 'proudtcion_no' => $proudtcion_no_val, 'cmp_no' => $cmp_no, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
   
    public function fetch_data_order_process_by_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablenamemain = $_GET['tablename'];
        $order_product_id = $_GET['order_product_id'];
        $order_product_id=explode(",",$order_product_id);
        
        
        $order_product_id=implode("','",$order_product_id);
        
        
        $result = $this->db->query("SELECT * FROM $tablenamemain  WHERE product_id='" . $_GET['product_id'] . "' AND order_product_id IN ('" . $order_product_id . "') AND deleteid=0 ORDER BY sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'order_id' => $value->order_id, 'product_id' => $value->product_id, 'order_product_id' => $value->order_product_id, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name, 'sort_order' => $value->sort_order, 'create_date' => $value->create_date, 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
   
    public function fetch_data_order_process() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablenamemain = $_GET['tablename'];
        $order_id = $_GET['order_id'];
        $order_product_id = $_GET['order_product_id'];
        $result = $this->db->query("SELECT * FROM $tablenamemain  WHERE order_id='" . $_GET['order_id'] . "' AND order_product_id='" . $_GET['order_product_id'] . "' AND deleteid=0 ORDER BY sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'order_id' => $value->order_id, 'product_id' => $value->product_id, 'order_product_id' => $value->order_product_id, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name, 'sort_order' => $value->sort_order, 'create_date' => $value->create_date, 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    public function fetch_data_vendor() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT a.* FROM $tablename_sub as a JOIN product_list as b ON b.id=a.product_id WHERE a.order_id='" . $_GET['order_id'] . "' AND b.link_to_purchase=1 AND a.deleteid=0 ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $gst = $csval->gst;
                $type = $csval->type;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = 0;
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 3) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            if ($convert == 4) {
                $qty = round($value->profile * $value->nos * 304.8, 4);
            }
            if ($convert == 5) {
                $qty = round($value->profile * $value->nos / 3.2808, 4);
            }
            if ($convert == 6) {
                $qty = round($value->profile * $value->nos * 12, 4);
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => $value->profile, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_similer() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $tablenamemain = $_GET['tablenamemain'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $customer_id = 0;
        $resultmain = $this->db->query("SELECT * FROM $tablenamemain  WHERE id='" . $_GET['order_id'] . "' AND deleteid=0 ORDER BY id ASC");
        $resultcs = $resultmain->result();
        foreach ($resultcs as $valuecs) {
            $customer_id = $valuecs->customer_id;
        }
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id!='" . $_GET['order_id'] . "' AND product_id='" . $product_id . "' AND deleteid=0 ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            $resultsameqty = $this->db->query("SELECT b.customer_id FROM $tablename_sub as a  JOIN $tablenamemain as b ON a.order_id=b.id WHERE a.order_id!='" . $_GET['order_id'] . "' AND a.product_id='" . $value->product_id . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.sort_id ASC");
            $resultsameqty = $resultsameqty->result();
            $same = 0;
            if (count($resultsameqty) > 0) {
                $same = 1;
            }
            $qty = round($value->qty, 4);
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            }
            if ($convert == 2) {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            if ($convert == 'undefined') {
                $qty = round($value->qty, 4);
            }
            $profile = $value->profile;
            if ($convert == 3) {
                $profile = $value->profile;
            }
            if ($convert == 4) {
                $profile = round($value->profile * 304.8, 4);
            }
            if ($convert == 5) {
                $profile = round($value->profile *0.305, 4);
            }
            if ($convert == 6) {
                $profile = round($value->profile * 12, 4);
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'same' => $same, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => $profile, 'type' => $type, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_commission() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $result = $this->db->query("SELECT * FROM $tablename_sub  WHERE order_id='" . $_GET['order_id'] . "' AND deleteid=0 AND product_id!='0' ORDER BY sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $gst = $csval->gst;
                $type = $csval->type;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            }
            if ($convert == 1) {
                $qty = round($value->qty, 4);
            } else {
                $qty = round($value->Sqr_feet_to_Meter, 4);
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => $value->profile, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'cate_status' => $cate_status, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchDataCategorybase_by_production() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE b.id='" . $_GET['product_id'] . "' AND a.deleteid=0 GROUP BY a.categories_id,b.type ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            if ($convert == 1) {
                $qty = $value->qty_total;
            } else {
                $qty = $value->Sqr_feet_to_Meter;
            }
            if ($value->categories_name == 'Puff panel') {
                $value->type = '13';
            }
            $lablenos = 'Nos';
            if ($value->type == '2') {
                $lable = 'Height';
                $lable2 = 'Length';
                $lablenos = 'Nos';
                $labletype = 2;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '4') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $lablenos = 'Nos';
                $labletype = 4;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '5') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 5;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '6') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 6;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '15') {
                $lable = 'Length';
                $lable2 = 'Width';
                $labletype = 15;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '16') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 16;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '19') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 19;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '7') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 7;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                if ($value->categories_name == 'Polynum') {
                    $lablenos = 'Full Roll';
                    $lablefact1 = 'Partial Roll';
                    $lablefact2 = '';
                }
            } elseif ($value->type == '10') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 10;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '11') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 11;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '12') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 12;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '9') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 9;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '8') {
                $lable = 'Crimp';
                $lable2 = 'Crimp';
                $labletype = 8;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '0') {
                $lable = 'Profile';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '13') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '14') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 14;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } else {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            }
            if ($value->uom != '') {
                $value->uom = $value->uom;
            } else {
                $value->uom = 'QTY';
            }
                
                
                $categories_id=$value->categories_id;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            
            
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id,'cate_status' => $cate_status, 'type' => $value->type, 'lable' => $lable, 'lable2' => $lable2, 'lablenos' => $lablenos, 'labletype' => $labletype, 'lablefact1' => $lablefact1, 'lablefact2' => $lablefact2, 'categories_name' => $value->categories_name, 'uom' => $value->uom, 'commission_total' => round($value->commission_total, 4), 'nos_total' => round($value->nos_total, 4), 'fact_total' => round($value->fact_total, 4), 'qty_total' => round($qty, 4), 'amount_total' => round($value->amount_total + $value->commission_total, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    public function fetchDataCategorybase() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0 GROUP BY a.categories_id,b.type ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            if ($convert == 1) {
                $qty = $value->qty_total;
            } else {
                $qty = $value->Sqr_feet_to_Meter;
            }
            if ($value->categories_name == 'Puff panel') {
                $value->type = '13';
            }
            $lablenos = 'Nos';
            if ($value->type == '2') {
                $lable = 'Height';
                $lable2 = 'Length';
                $lablenos = 'Nos';
                $labletype = 2;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '4') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $lablenos = 'Nos';
                $labletype = 4;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '5') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 5;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '6') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 6;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '15') {
                $lable = 'Length';
                $lable2 = 'Width';
                $labletype = 15;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '16') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 16;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '19') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 19;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '7') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 7;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                if ($value->categories_name == 'Polynum') {
                    $lablenos = 'Full Roll';
                    $lablefact1 = 'Partial Roll';
                    $lablefact2 = '';
                }
            } elseif ($value->type == '10') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 10;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '11') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 11;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '12') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 12;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '9') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 9;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '8') {
                $lable = 'Crimp';
                $lable2 = 'Crimp';
                $labletype = 8;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '0') {
                $lable = 'Profile';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '13') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '14') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 14;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } else {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            }
            if ($value->uom != '') {
                $value->uom = $value->uom;
            } else {
                $value->uom = 'QTY';
            }
                
                
                $categories_id=$value->categories_id;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            
            
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id,'cate_status' => $cate_status, 'type' => $value->type, 'lable' => $lable, 'lable2' => $lable2, 'lablenos' => $lablenos, 'labletype' => $labletype, 'lablefact1' => $lablefact1, 'lablefact2' => $lablefact2, 'categories_name' => $value->categories_name, 'uom' => $value->uom, 'commission_total' => round($value->commission_total, 4), 'nos_total' => round($value->nos_total, 4), 'fact_total' => round($value->fact_total, 4), 'qty_total' => round($qty, 4), 'amount_total' => round($value->amount_total + $value->commission_total, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function fetchDataCategorybase_delivery() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        
        $driver_pickip=0;
         $loadset="";
         if(isset($_GET['driver_pickip']))
         {
             $driver_pickip = $_GET['driver_pickip'];
             
             if($driver_pickip==1)
             {
                //$loadset=" AND a.loadstatus='".$driver_pickip."'";
              
             }
             
         }
        
        
        if($_GET['driver_pickip']==0)
        {
          $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0  $loadset GROUP BY a.categories_id,b.type ORDER BY a.sort_id ASC");
           
        }
        else
        {
             $result = $this->db->query("SELECT b.type,b.uom,a.id,a.categories_name,SUM(a.Sqr_feet_to_Meter) as Sqr_feet_to_Meter,a.product_name,a.categories_id,SUM(a.commission) as commission_total,SUM(a.nos) as nos_total,SUM(a.fact) as fact_total,SUM(a.qty) as qty_total,SUM(a.amount) as amount_total FROM $tablename_sub as a JOIN product_list as b ON a.product_id=b.id WHERE a.order_id='" . $_GET['order_id'] . "' AND a.deleteid=0 AND a.delivery_status=0 $loadset GROUP BY a.categories_id,b.type ORDER BY a.sort_id ASC");
        
        }
        
       
        
        
        $result = $result->result();
        foreach ($result as $value) {
            if ($convert == 1) {
                $qty = $value->qty_total;
            } else {
                $qty = $value->Sqr_feet_to_Meter;
            }
            if ($value->categories_name == 'Puff panel') {
                $value->type = '13';
            }
            $lablenos = 'Nos';
            if ($value->type == '2') {
                $lable = 'Height';
                $lable2 = 'Length';
                $lablenos = 'Nos';
                $labletype = 2;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '4') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $lablenos = 'Nos';
                $labletype = 4;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '5') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 5;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '6') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 6;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '15') {
                $lable = 'Length';
                $lable2 = 'Width';
                $labletype = 15;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '16') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 16;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '19') {
                $lable = 'Profile';
                $lable2 = 'Width';
                $labletype = 19;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '7') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 7;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
                if ($value->categories_name == 'Polynum') {
                    $lablenos = 'Full Roll';
                    $lablefact1 = 'Partial Roll';
                    $lablefact2 = '';
                }
            } elseif ($value->type == '10') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 10;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '11') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 11;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '12') {
                $lable = 'Length';
                $lable2 = 'Thickness';
                $labletype = 12;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '9') {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 9;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '8') {
                $lable = 'Crimp';
                $lable2 = 'Crimp';
                $labletype = 8;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '0') {
                $lable = 'Profile';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '13') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } elseif ($value->type == '14') {
                $lable = 'Profile';
                $lable2 = 'Lapping';
                $labletype = 14;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            } else {
                $lable = 'Length';
                $lable2 = 'Crimp';
                $labletype = 1;
                $lablefact1 = 'Fact';
                $lablefact2 = '';
            }
            if ($value->uom != '') {
                $value->uom = $value->uom;
            } else {
                $value->uom = 'QTY';
            }
            
            
            
                $categories_id=$value->categories_id;
                if ($categories_id == '1') {
                    $cate_status = 1;
                } elseif ($categories_id == '26') {
                    $cate_status = 1;
                } elseif ($categories_id == '5') {
                    $cate_status = 1;
                } elseif ($categories_id == '32') {
                    $cate_status = 1;
                } elseif ($categories_id == '40') {
                    $cate_status = 1;
                } elseif ($categories_id == '41') {
                    $cate_status = 1;
                } else {
                    $cate_status = 0;
                }
            
            
            
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'cate_status' => $cate_status,'type' => $value->type, 'lable' => $lable, 'lable2' => $lable2, 'lablenos' => $lablenos, 'labletype' => $labletype, 'lablefact1' => $lablefact1, 'lablefact2' => $lablefact2, 'categories_name' => $value->categories_name, 'uom' => $value->uom, 'commission_total' => round($value->commission_total, 4), 'nos_total' => round($value->nos_total, 4), 'fact_total' => round($value->fact_total, 4), 'qty_total' => round($qty, 4), 'amount_total' => round($value->amount_total + $value->commission_total, 4));
            $i++;
        }
        echo json_encode($array);
    }
    
    public function fetchDataCategorybase_order_process_group() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        $sqlstatus = ' AND  b.production_status=' . $convert;
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0 $sqlstatus  GROUP BY b.proudtcion_id ORDER BY b.sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
     public function fetchDataCategorybase_order_process_group_base_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        
        if($convert==1)
        {
            $sqlstatus = ' AND  b.production_status IN (1,2,-1)';
        }
        else
        {
            $sqlstatus = ' AND  b.production_status IN (3,4,5)';
        }
        
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0 $sqlstatus  GROUP BY b.proudtcion_id ORDER BY b.sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    public function fetchDataCategorybase_order_process_panel_base_data() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        
        if($convert==1)
        {
           $sqlstatus = ' AND  b.production_status IN (1,2,-1)';
        }
        else
        {
            $sqlstatus = ' AND  b.production_status IN (3,4,5)';
        }
        
      
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0  $sqlstatus GROUP BY a.categories_id ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    public function fetchDataCategorybase_order_process_group_by_order() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $order_id = $_GET['order_id'];
        $sqlstatus = '';
        //$sqlstatus = ' AND  b.production_status=' . $convert;
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.order_id='" . $order_id . "' AND a.deleteid=0 $sqlstatus  GROUP BY b.proudtcion_id ORDER BY b.sort_order ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name, 'proudtcion_id' => $value->proudtcion_id, 'proudtcion_name' => $value->proudtcion_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    public function fetchDataCategorybase_order_process_panel() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $product_id = $_GET['product_id'];
        $sqlstatus = '';
        
        
        $sqlstatus = ' AND  b.production_status=' . $convert;
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.product_id='" . $product_id . "' AND a.deleteid=0  $sqlstatus GROUP BY a.categories_id ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    public function fetchDataCategorybase_order_process_panel_order_by() {
        $i = 1;
        $array = array();
        $cate_status = '0';
        $tablename_sub = $_GET['tablename_sub'];
        $convert = $_GET['convert'];
        $order_id = $_GET['order_id'];
        $sqlstatus = '';
        
        
        //$sqlstatus = ' AND  b.production_status=' . $convert;
        
        $result = $this->db->query("SELECT a.id,a.categories_id,a.categories_name,b.proudtcion_name,b.proudtcion_id FROM $tablename_sub as a JOIN proudtcion_order_products as b ON a.id=b.order_product_id  WHERE  b.order_id='" . $order_id . "' AND a.deleteid=0  $sqlstatus GROUP BY a.categories_id ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'categories_id' => $value->categories_id, 'categories_name' => $value->categories_name);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function getcounttl_md_approvel_request() 
     {
            $tablename = $_GET['tablename'];
            $price_requerst_status = 3;
            $discount= $this->Main_model->where_names_three_order_by($tablename, 'order_base', '20', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $commission = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '21', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $cancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '22', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $edit = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '23', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $excess_payment = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '24', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $driver_return = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '25', 'deleteid', '0', 'price_requerst_status', '0', 'id', 'DESC');
            $approvel_order = $this->Main_model->where_names_two_order_by($tablename,  'deleteid', '0', 'md_approved_status', '1', 'id', 'DESC');
            $rejected_order = $this->Main_model->where_names_two_order_by($tablename,  'deleteid', '0', 'md_approved_status', '2', 'id', 'DESC');
        
            $array = array('discount' => count($discount),'rejected_order' => count($rejected_order), 'commission' => count($commission), 'cancel' => count($cancel), 'edit' => count($edit), 'excess_payment' => count($excess_payment), 'driver_return' => count($driver_return), 'approvel_order' => count($approvel_order));
            echo json_encode($array);
     }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function getcounttl_price_request() {
        $tablename = $_GET['tablename'];
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
         
            
            $resultpending = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '1', 'price_requerst_status', '3', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'price_requerst_status', '3', 'order_base', '3', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '5', 'price_requerst_status', '3', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
         
         
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $resultpending = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '1', 'price_requerst_status', '3', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'price_requerst_status', '3', 'order_base', '3', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '5', 'price_requerst_status', '3', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'sales_group', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $resultpending = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '1', 'price_requerst_status', '3', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'price_requerst_status', '3', 'order_base', '3', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '5', 'price_requerst_status', '3', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'user_id', $sales_team_id, 'price_requerst_status', '3', 'id', 'DESC');
         
         
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } elseif ($this->session->userdata['logged_in']['access'] == '4' || $this->session->userdata['logged_in']['access'] == '10') {
            $price_requerst_status = 3;
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'deleteid', 'price_requerst_status', '3', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } else {
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            $waiting = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'price_requerst_status', '3', 'id', 'DESC');
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        }
        $array = array('pending' => count($resultpending), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'rejected' => count($resultcancel), 'purchase_team' => count($purchase_team), 'request' => count($resultrequest), 'requestp' => count($purchase_team), 'md_team' => count($md_team), 'reassign' => count($reassign), 'finance_team' => count($finance_team), 'waiting' => count($waiting), 'vendor_po_order' => count($vendor_po_order));
        echo json_encode($array);
    }
    
    
    
    
    public function getcount() {
        $tablename = $_GET['tablename'];
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            
            
            $resultpending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $p_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'paricel_mode', '1', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $missing = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'missing_customer', '1', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            
            $rejected_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            
            $request_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '0', 'order_base>=', '20', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '0', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-1', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '3', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '4', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '5', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '7', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-2', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '-3', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
            $missing = $this->Main_model->where_names_three_order_by($tablename, 'missing_customer', '1', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           
           
            $rejected_order = $this->Main_model->where_names_three_order_by($tablename, 'md_approved_status', '2', 'user_id', $this->userid, 'deleteid', '0', 'id', 'DESC');
           $request_order = $this->Main_model->where_names_three_order_by($tablename, 'md_approved_status', '0', 'user_id', $this->userid, 'order_base>=', '20', 'id', 'DESC');
           
           
            $p_completed = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'user_id', $this->userid, 'paricel_mode', '1', 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $resultpending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $p_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'paricel_mode', '1', 'user_id', $sales_team_id, 'id', 'DESC');
            $missing = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'missing_customer', '1', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            
            
            $rejected_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $request_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '0', 'order_base>=', '20', 'user_id', $sales_team_id, 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $resultpending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $md_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $reassign = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $archive = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
          
            $missing = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'missing_customer', '1', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
          
            
            $rejected_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $request_order = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'md_approved_status', '0', 'order_base>=', '20', 'sales_group', $sales_team_id, 'id', 'DESC');
          
            
            
             $p_completed = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'order_base', '1', 'paricel_mode', '1', 'sales_group', $sales_team_id, 'id', 'DESC');
          
          
          
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        } else {
            $resultpending = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '0', 'deleteid', '0', 'id', 'DESC');
            $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
            $resultcancel = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-1', 'deleteid', '0', 'id', 'DESC');
            $resultrequest = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '3', 'deleteid', '0', 'id', 'DESC');
            $purchase_team = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '4', 'deleteid', '0', 'id', 'DESC');
            $md_team = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '5', 'deleteid', '0', 'id', 'DESC');
            $finance_team = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '7', 'deleteid', '0', 'id', 'DESC');
            $reassign = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-2', 'deleteid', '0', 'id', 'DESC');
            $archive = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '-3', 'deleteid', '0', 'id', 'DESC');
            
            $missing = $this->Main_model->where_names_two_order_by($tablename, 'missing_customer', '1', 'deleteid', '0', 'id', 'DESC');
           
            $rejected_order = $this->Main_model->where_names_two_order_by($tablename, 'md_approved_status', '2', 'deleteid', '0', 'id', 'DESC');
            $request_order = $this->Main_model->where_names_two_order_by($tablename, 'order_base>=', '20', 'deleteid', '0', 'id', 'DESC');
           
            
            $p_completed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'paricel_mode', '1', 'id', 'DESC');
            
            
            if ($tablename == 'orders') {
                $tablenamemain = 'order_product_list';
            }
            if ($tablename == 'orders_process') {
                $tablenamemain = 'order_product_list_process';
            }
            if ($tablename == 'orders_quotation') {
                $tablenamemain = 'order_product_list_quotation';
            }
            $resultsameqty = $this->db->query("SELECT a.customer_id FROM $tablename as a JOIN $tablenamemain as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 GROUP BY b.order_id ORDER BY a.id DESC");
            $vendor_po_order = $resultsameqty->result();
        }
        $array = array('pending' => count($resultpending),'request_order' => count($request_order),'rejected_order' => count($rejected_order),'missing' => count($missing),'p_completed' => count($p_completed), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'purchase_team' => count($purchase_team), 'request' => count($resultrequest), 'requestp' => count($purchase_team), 'md_team' => count($md_team), 'reassign' => count($reassign), 'archive' => count($archive), 'finance_team' => count($finance_team), 'vendor_po_order' => count($vendor_po_order));
        echo json_encode($array);
    }
    public function getcount_finance() {
        $tablename = $_GET['tablename'];
        $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '0', 'deleteid', '0', 'order_base', '1');
        $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '-1', 'deleteid', '0', 'order_base', '1');
        $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '1', 'deleteid', '0', 'order_base', '1');
        
        
        
        
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
           
            
            
           $transpot = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 3, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 4, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           $reconciliation = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 5, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
           $b_c_pending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 6, 'deleteid', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
         
            
             $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 AND b.entry_user_id IN ('".implode("','", $sales_team_id)."') GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;
      
      
       
       
       
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $transpot = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 3, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 4, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 5, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $b_c_pending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 6, 'deleteid', '0', 'user_id', $sales_team_id, 'id', 'DESC');
         
            
            $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 AND b.user_id IN ('".implode("','", $sales_team_id)."') GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;
      
      
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $transpot = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 3, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 4, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 5, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
      
      $b_c_pending = $this->Main_model->where_names_three_thried_where_in_order_by($tablename, 'finance_status', 6, 'deleteid', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
      
      
      
      
            $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 AND b.sales_group IN ('".implode("','", $sales_team_id)."') GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;
      
      
      
      
      
      
      
        } else {
            $transpot = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '3', 'deleteid', '0', 'order_base', '1');
            $delivered = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '4', 'deleteid', '0', 'order_base', '1');
            $reconciliation = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '5', 'deleteid', '0', 'order_base', '1');
            $b_c_pending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '6', 'deleteid', '0', 'order_base', '1');
      
      
      
      
      
      
      
      
      
      
      
            $query = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid FROM orders_process as b WHERE b.finance_status='4' AND b.selforder=1 GROUP BY b.payment_mode,b.create_date ORDER BY b.id DESC");
            $result = $query->result();
            $self=$result;
      
      
      
      
      
      
        }
        
        
        
        
        
        
        $array = array('pending' => count($resultpending),'Self' => count($self), 'b_c_pending' => count($b_c_pending),'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'request' => count($resultrequest), 'transpot' => count($transpot), 'delivered' => count($delivered), 'reconciliation' => count($reconciliation));
        echo json_encode($array);
    }
    
    
    
    
    public function getcount_transpotcount() {
        $tablename = $_GET['tablename'];
        $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '0', 'deleteid', '0', 'order_base', '1');
        $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '-1', 'deleteid', '0', 'order_base', '1');
        $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '1', 'deleteid', '0', 'order_base', '1');
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
              $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            
            
              
            $ready_for_delivery = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '11','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $ready_for_driver = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '12','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $transpot = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '1','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $opentrip = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', '3', 'assign_status', '1', 'entry_user_id', $sales_team_id, 'deleteid', '0', 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 4, 'assign_status', '3','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 5, 'assign_status', '3','loading_status', '0', 'entry_user_id', $sales_team_id, 'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '8', 'loading_status', '0','entry_user_id', $sales_team_id, 'id', 'DESC');
            $return = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'return_status', 1, 'assign_status', '3', 'loading_status', '0','entry_user_id', $sales_team_id, 'id', 'DESC');
            $tripstart = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '2', 'loading_status', '0','entry_user_id', $sales_team_id, 'id', 'DESC');
        
        
           
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND entry_user_id IN ('".implode("','", $sales_team_id)."') ORDER BY id DESC");
            $result = $query->result();
            $partialLoaded=$result;
       
          
       
        } 
        elseif($this->session->userdata['logged_in']['access'] == '13') 
        {
            
            $ready_for_delivery = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '11', 'id', 'DESC');
            
            $ready_for_driver = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '12', 'id', 'DESC');
            
            
            $transpot = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '1', 'id', 'DESC');
          
            $opentrip = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '1', 'id', 'DESC');
          
          
            $delivered = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 4, 'driver_id', $this->userid, 'assign_status', '3', 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 5, 'driver_id', $this->userid, 'assign_status','3',  'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '8', 'id', 'DESC');
          
          
            $return = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'return_status', 1, 'driver_id', $this->userid, 'assign_status', '3', 'id', 'DESC');
          
          
            $tripstart = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', 1, 'finance_status', 3, 'driver_id', $this->userid, 'assign_status', '2', 'id', 'DESC');
            
       
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND driver_id='".$this->userid."' ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
       
       
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            
            $ready_for_delivery = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '11','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $ready_for_driver = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '12','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $transpot = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '1','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $opentrip = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', '3', 'assign_status', '1', 'user_id', $sales_team_id, 'deleteid', '0', 'id', 'DESC');
            $delivered = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 4, 'assign_status', '3','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 5, 'assign_status', '3','loading_status', '0', 'user_id', $sales_team_id, 'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '8', 'loading_status', '0','user_id', $sales_team_id, 'id', 'DESC');
            $return = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'return_status', 1, 'assign_status', '3', 'loading_status', '0','user_id', $sales_team_id, 'id', 'DESC');
            $tripstart = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '2', 'loading_status', '0','user_id', $sales_team_id, 'id', 'DESC');
        
        
        
        
       
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND user_id IN ('".implode("','", $sales_team_id)."') ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
       
       
       
       
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
           
            $ready_for_delivery = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '11','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
           $ready_for_driver = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '12','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
           
            $transpot = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '1','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
           
           $opentrip = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', '3', 'assign_status', '1', 'sales_group', $sales_team_id, 'deleteid', '0', 'id', 'DESC');
            
           
           
           
            $delivered = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 4, 'assign_status', '3','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $reconciliation = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 5, 'assign_status', '3','loading_status', '0', 'sales_group', $sales_team_id, 'id', 'DESC');
            $re_sudule = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '8', 'loading_status', '0','sales_group', $sales_team_id, 'id', 'DESC');
            
            
            $return = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'return_status', 1, 'assign_status', '3', 'loading_status', '0','sales_group', $sales_team_id, 'id', 'DESC');
            
            
            $tripstart = $this->Main_model->where_names_three_forth_where_in_order_by($tablename, 'finance_status', 3, 'assign_status', '2', 'loading_status', '0','sales_group', $sales_team_id, 'id', 'DESC');
       
             
             
            
       
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND sales_group IN ('".implode("','", $sales_team_id)."') ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
       
       
        } else {
            
            
            
            
           
           
               $ready_for_delivery = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '3', 'assign_status', '11', 'order_base', '1', 'id', 'DESC');
               $ready_for_driver = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '3', 'assign_status', '12', 'order_base', '1', 'id', 'DESC');
            
               $transpot = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1', 'id', 'DESC');
            
               $opentrip = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1', 'id', 'DESC');
            
            
               $delivered = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '4', 'assign_status', '3', 'order_base', '1', 'id', 'DESC');
               $reconciliation = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '5', 'assign_status', '3', 'order_base', '1', 'id', 'DESC');
               $re_sudule = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '3', 'assign_status', '8', 'order_base', '1', 'id', 'DESC');
            
            
               $return = $this->Main_model->where_names_three_order_by_new($tablename, 'return_status', '1', 'assign_status', '3', 'order_base', '1', 'id', 'DESC');
               $tripstart = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', '3', 'assign_status', '2', 'order_base', '1', 'id', 'DESC');
       
           
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1'  ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
        
        
       
        }
        $array = array('ready_for_delivery' => count($ready_for_delivery),'return' => count($return),'opentrip' => count($opentrip),'ready_for_driver'=>count($ready_for_driver),'pending' => count($resultpending),'partialLoaded' => count($partialLoaded), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'request' => count($resultrequest), 'transpot' => count($transpot), 'delivered' => count($delivered), 're_sudule' => count($re_sudule), 'tripstart' => count($tripstart), 'reconciliation' => count($reconciliation));
        echo json_encode($array);
    }
    
    
    
    public function getcount_transpotcount_driver() {
        $tablename = $_GET['tablename'];
        $resultpending = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '0', 'deleteid', '0', 'order_base', '1');
        $resultprocessed = $this->Main_model->where_names_two_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        $resultcancel = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '-1', 'deleteid', '0', 'order_base', '1');
        $resultrequest = $this->Main_model->where_names_three_order_by($tablename, 'finance_status', '1', 'deleteid', '0', 'order_base', '1');
  
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        
       if($this->session->userdata['logged_in']['access'] == '13')
       {
           
           
               $ready_for_delivery = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '11', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
               $ready_for_driver = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '12', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
               $transpot = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
               $opentrip = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
            
            
            
            
               $delivered = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '4', 'assign_status', '3', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
               $reconciliation = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '5', 'assign_status', '3', 'driver_id', $define_driver_id,'order_base','1','selforder', '0',  'id', 'DESC');
               $re_sudule = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '8', 'driver_id', $define_driver_id,'order_base', '1','selforder', '0', 'id', 'DESC');
            
            
               $return = $this->Main_model->where_names_five_order_by_new($tablename, 'return_status', '1', 'assign_status', '3','driver_id',$define_driver_id, 'order_base', '1','selforder', '0', 'id', 'DESC');
               $tripstart = $this->Main_model->where_names_five_order_by_new($tablename, 'finance_status', '3', 'assign_status', '2','driver_id', $define_driver_id, 'order_base', '1','selforder', '0', 'id', 'DESC');
               
       
       
       
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('3') AND assign_status IN('1','3') AND order_base='1'  AND driver_id='".$define_driver_id."' AND selforder=0 AND gate_status=0 ORDER BY id DESC");
                $result = $query->result();
                $gate_status1=$result;
                
                
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND order_base='1'  AND driver_id='".$define_driver_id."' AND selforder=0 AND gate_status=1 ORDER BY id DESC");
                $result = $query->result();
                $gate_status2=$result;
       
       
       
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND driver_id='".$define_driver_id."' AND selforder=0 ORDER BY id DESC");
                $result = $query->result();
                $partialLoaded=$result;
               
        
        
       
        }
        else
        {
            
               $ready_for_delivery = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '11', 'order_base', '1','selforder', '0', 'id', 'DESC');
               $ready_for_driver = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '12', 'order_base', '1','selforder', '0', 'id', 'DESC');
            
               $transpot = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1','selforder', '0', 'id', 'DESC');
            
               $opentrip = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '1', 'order_base', '1','selforder', '0', 'id', 'DESC');
            
            
               $delivered = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '4', 'assign_status', '3', 'order_base', '1','selforder', '0', 'id', 'DESC');
               $reconciliation = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '5', 'assign_status', '3', 'order_base','1','selforder', '0',  'id', 'DESC');
               $re_sudule = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '8', 'order_base', '1','selforder', '0', 'id', 'DESC');
            
            
               $return = $this->Main_model->where_names_four_order_by_new($tablename, 'return_status', '1', 'assign_status', '3', 'order_base', '1','selforder', '0', 'id', 'DESC');
               $tripstart = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', '3', 'assign_status', '2', 'order_base', '1','selforder', '0', 'id', 'DESC');
               
               
               
               
               
               
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('3') AND assign_status IN('1','3') AND order_base='1'   AND selforder=0 AND gate_status=0 ORDER BY id DESC");
                $result = $query->result();
                $gate_status1=$result;
                
                
                $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND  order_base='1'   AND selforder=0 AND gate_status=1 ORDER BY id DESC");
                $result = $query->result();
                $gate_status2=$result;
               
               
               $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND finance_status IN('4','5','3') AND assign_status IN('1','3')    AND order_base='1' AND loading_status='1' AND selforder=0  ORDER BY id DESC");
               $result = $query->result();
               $partialLoaded=$result;
            
        }
        
        
        
        
        $array = array('gate_status1' => count($gate_status1),'gate_status2' => count($gate_status2),'ready_for_delivery' => count($ready_for_delivery),'return' => count($return),'opentrip' => count($opentrip),'ready_for_driver'=>count($ready_for_driver),'pending' => count($resultpending),'partialLoaded' => count($partialLoaded), 'proceed' => count($resultprocessed), 'cancel' => count($resultcancel), 'request' => count($resultrequest), 'transpot' => count($transpot), 'delivered' => count($delivered), 're_sudule' => count($re_sudule), 'tripstart' => count($tripstart), 'reconciliation' => count($reconciliation));
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function getcount_transpotcount_driver_return() {
        $tablename = 'order_sales_return_complaints';
    
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        
       if($this->session->userdata['logged_in']['access'] == '13')
       {
           
           
               
                   $opentrip = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1',  'driver_assign', '1', 'driver_id', $this->userid,'deleteid', '0', 'id', 'DESC');
                   $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename,'driver_id', $this->userid, 'deleteid', '0','order_base', array('5','2','8'), 'id', 'DESC');
                   $re_sudule = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '1', 'driver_assign', '6', 'driver_id', $this->userid,'deleteid', '0', 'id', 'DESC');
                   $tripstart = $this->Main_model->where_names_four_order_by_new($tablename, 'order_base', '4', 'driver_assign', '1','driver_id', $this->userid,'deleteid', '0', 'id', 'DESC');
                   
       
        
        
       
        }
        else
        {
            
             
                 $opentrip = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '1','deleteid', '0', 'id', 'DESC');
                 
                 $delivered = $this->Main_model->where_names_three_thried_where_in_order_by($tablename,'driver_assign', '1', 'deleteid', '0','order_base', array('5','2','8'), 'id', 'DESC');
                 
                 $re_sudule = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '6','deleteid', '0', 'id', 'DESC');
                 $tripstart = $this->Main_model->where_names_three_order_by_new($tablename,'driver_assign', '1', 'order_base', '4','deleteid', '0', 'id', 'DESC');
               
            
        }
        
        
        
        
        $array = array('opentrip' => count($opentrip),'delivered' => count($delivered), 're_sudule' => count($re_sudule), 'tripstart' => count($tripstart));
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
      public function getcount_production_start() {
        $tablename = $_GET['tablename'];
        
        
        
        
        $result = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '0' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $allprocess = count($result->result());
        
        
        $result1 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '1' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_assign = count($result1->result());
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '3' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_assign_completed = count($result2->result());
        
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '2' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_inprogress = count($result2->result());
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '-1' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $production_re_assign = count($result2->result());
        
          $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '4' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $qc_verifived = count($result2->result());
        
        
        $result2 = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '5' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY b.product_id ASC");
        $moveto_transpot= count($result2->result());
        
        
        
         $array = array(
            'production_assign' => $production_assign, 
            'production_assign_completed' => $production_assign_completed,
            'allprocess' => $allprocess,
            'production_inprogress' => $production_inprogress,
            'production_re_assign' => $production_re_assign,
            'qc_verifived' => $qc_verifived,
             'moveto_transpot' => $moveto_transpot
         );
         echo json_encode($array);
         
         
    }
    
    public function getcount_production() {
        $tablename = $_GET['tablename'];
        $allprocess = $this->Main_model->where_names_three_order_by($tablename, 'order_base', '1', 'deleteid', '0', 'production_assign', '0');
        $production_assign = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '1', 'deleteid', '0', 'id', 'DESC');
        $production_inprogress = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '2', 'deleteid', '0', 'id', 'DESC');
        $production_re_assign = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '-1', 'deleteid', '0', 'id', 'DESC');
        $production_assign_completed = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '3', 'deleteid', '0', 'id', 'DESC');
        $production_qc_completed = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '4', 'deleteid', '0', 'id', 'DESC');
        $moveto_transpot = $this->Main_model->where_names_two_order_by($tablename, 'production_assign', '5', 'deleteid', '0', 'id', 'DESC');
        $array = array('production_assign' => count($production_assign), 'production_assign_completed' => count($production_assign_completed), 'production_inprogress' => count($production_inprogress), 'production_re_assign' => count($production_re_assign), 'production_qc_completed' => count($production_qc_completed), 'moveto_transpot' => count($moveto_transpot), 'allprocess' => count($allprocess));
        echo json_encode($array);
    }
    
    
    
    public function fetch_data_table() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $where1 = "";
        
        
        
        
        
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }
        
        
        
        
        
        
        $sqls = "";
        
        
        
       
        
       
        
        if($order_base==110)
        {
            $where .=" AND a.paricel_mode=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==156)
        {
            
            $where .=" AND a.missing_customer=1";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==26)
        {
            $where .= " AND a.md_approved_status = '1'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==27)
        {
            $where .= " AND a.md_approved_status = '2'";
            $order_base=1;
            $where .= " AND a.order_base = '".$order_base."'";
        }
        elseif($order_base==28)
        {
            //$where .= " AND a.md_approved_status = '0'";
            $where .= " AND a.order_base >= '20'";
            
        }
        else
        {
             $where .= " AND a.order_base = '".$order_base."'";
        }
        
        
        
        if($search != "")
        {
                   
              
                    if($this->session->userdata['logged_in']['access']!=12)
                    {
                       $where .=" AND c.name LIKE '%" . $search . "%'";
                    }
                   
                    
                    $where .= " OR a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                    $where1 .= " AND order_no LIKE '%" . $search . "'";
            
            
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.* FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.* FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                
                 
                    $totalamount+= $tot->amount + $tot->commission;
                    $commission+= $tot->commission;
               
            }
            
            
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Own Scope';
             }
            
            $array[] = array('no' => $i, 'finance_status' => $value->finance_status,'id' => $value->id,'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_all() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
     
        
        
        
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $where1 = "";
        
        $valueorder=explode("|",$order_base);
        
        
        
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }
        
        
        
        
        
        
        $sqls = "";
        
        
        
       
        
       if($order_base!='')
       {
           
      
          if (in_array("0", $valueorder))
          {
           
          }
          else
          {  
              
              if (in_array("28", $valueorder))
              {
               
                  $valueorder=implode("','",$valueorder);
                  $where .= " AND a.order_base IN ('".$valueorder."','20','21','22','23','24','25')";
               
              }
              else
              {
                  
                    $valueorder=implode("','",$valueorder);
                    $where .= " AND a.order_base IN ('".$valueorder."')";
                  
              }
              
              
              
          }
       
       }
        
        if($search != "")
        {
                   
              
                    if($this->session->userdata['logged_in']['access']!=12)
                    {
                       $where .=" AND c.name LIKE '%" . $search . "%'";
                    }
                   
                    
                    $where .=" OR a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%'";
                    $where1 .=" AND order_no LIKE '%" . $search . "'";
            
            
        }
        
        
        
        $i = 1;
        $array = array();
        
        
        
        
        
        
      
        if($this->session->userdata['logged_in']['access'] == '17')
        {
                 
                 
                 
                $sales_team_id = array($this->userid);
                $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
                foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
                }
                
                $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
                $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.* FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '20') {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            if (count($result) == 0) {
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.* FROM $tablename  as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  AND a.entry_user_id='" . $this->userid . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } 
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '11'  || $this->session->userdata['logged_in']['access'] == '12')
        {
            
         
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
           
           
           
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            
            
           
         
           
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'   $userslog $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        elseif ($this->session->userdata['logged_in']['access'] == '16') 
        {
           
           
            $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id WHERE a.deleteid='0'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        else
        {
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                
                 
                    $totalamount+= $tot->amount + $tot->commission;
                    $commission+= $tot->commission;
               
            }
            
            
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
             if ($value->delivery_status == '1') {
                $value->delivery_status = 'Client Scope';
             }
             
             if ($value->delivery_status == '2') {
                $value->delivery_status = 'Own Scope';
             }
            
            $array[] = array('no' => $i, 'finance_status' => $value->finance_status,'id' => $value->id,'delivery_status' => $value->delivery_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_tl_price_request() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND order_no LIKE '%" . $search . "'";
        }
        $i = 1;
        $array = array();
        if($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            
            $price_requerst_status = 3;
           
            
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $userslog1 $where ORDER BY id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $userslog1 $where ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
              $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $price_requerst_status = 3;
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  user_id IN (' . $sales_team_id . ')';
          
           
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $price_requerst_status = 3;
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  sales_group IN (' . $sales_team_id . ')';
           
            
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'   AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where $userslog ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '4' || $this->session->userdata['logged_in']['access'] == '10') {
            $price_requerst_status = 3;
           
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0'  AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where ORDER BY id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0'  AND price_requerst_status='" . $price_requerst_status . "'  AND order_base='" . $order_base . "' $where ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        } else {
            $price_requerst_status = 3;
            
            
            
            $querycount = $this->db->query("SELECT id FROM $tablename  WHERE deleteid='0' AND price_requerst_status='" . $price_requerst_status . "' AND order_base='" . $order_base . "' $where ORDER BY id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
            
            $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' AND price_requerst_status='" . $price_requerst_status . "' AND order_base='" . $order_base . "' $where ORDER BY id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
        }
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_md_approved_request() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND order_no LIKE '%" . $search . "'";
        }
        $i = 1;
        $array = array();
        $price_requerst_status = 3;
        
        $sql= " AND order_base='" . $order_base . "'";
        if($order_base==26)
        {
            $sql = " AND md_approved_status = '1'";
           
        }
        
        if($order_base==27)
        {
            $sql = " AND md_approved_status = '2'";
        }
        
        
      
     
        $queryss = $this->db->query("SELECT count(id) as totalcount  FROM $tablename  WHERE deleteid='0'   $sql  $where ORDER BY id DESC");
        $resultcount = $queryss->result();
        foreach ($resultcount as $cc) {
                $count = $cc->totalcount;
        }
        $query = $this->db->query("SELECT * FROM $tablename  WHERE deleteid='0' $sql $where ORDER BY id DESC LIMIT $offset, $pagesize");
        $result = $query->result();
            
            
        
        
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            $array[] = array('no' => $i, 'id' => $value->id,'return_id' => $value->return_id,'return_status' => $value->return_status, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    public function fetch_data_table_po() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $where = "";
        $sqls = "";
        if ($search != "") {
            $where = " AND a.order_no LIKE '%" . $search . "'";
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        $resultsameqty = $this->db->query("SELECT a.id FROM $tablename as a JOIN $tablename_sub as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 $where GROUP BY b.order_id ORDER BY a.id DESC");
        $result = $resultsameqty->result();
        $count = count($result);
        
        $resultsameqty = $this->db->query("SELECT a.* FROM $tablename as a JOIN $tablename_sub as b ON b.order_id=a.id JOIN product_list as c ON c.id=b.product_id WHERE  c.link_to_purchase=1 $where GROUP BY b.order_id ORDER BY a.id DESC LIMIT $offset, $pagesize");
        $result = $resultsameqty->result();
        foreach ($result as $value) {
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => 'Vendor PO Order', 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    public function fetch_data_table_finance() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $where = "";
        $sqls = "";
        
        
        
         if(isset($_GET['from_date'])) 
        {     
            if($_GET['from_date']!='')
            {
                
                  $from_date = $_GET['from_date'];
                  $to_date = $_GET['to_date'];
                  $where .= " AND a.create_date BETWEEN  '".$from_date."' AND '".$to_date."'";
                
            }
             
        }
        
        
        if ($search != "") {
                     if($this->session->userdata['logged_in']['access']!=12)
                     {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                     }
                   
                     $where .= " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR a.reason LIKE '%" . $search . "%' $sales_search";
            
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
            
              $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
           
           
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
           
           
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } else {
            if ($order_base == 111) {
                
                
              
                
                 $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where ORDER BY a.id DESC");
                 $resultcount = $querycount->result();
                 $count=count($resultcount);
                
                
                $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
            } else {
                
                
             
                
                
                 $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "' $where ORDER BY a.id DESC");
                 $resultcount = $querycount->result();
                 $count=count($resultcount);
                
                
                 $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "' $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
                 $result = $query->result();
                 
            }
        }
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            
            $totalamountfull=0;
         
            $resulttotal = $this->Main_model->where_names_four_order_by_new($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode,'loadstatus', 1,'deleteid', '0', 'id', 'DESC');
  
            
            $payment_id=array();
            foreach ($resulttotal as $tot) {
              
                   $commission+= $tot->commission;
                   $totalamountfull+= $tot->amount + $tot->commission;
                
                    $resultload =$this->Main_model->where_names_three_order_by('sales_load_products','order_product_id',$tot->id,'delivered_products','1','driver_payment_status','0','id','ASC');
                   
                    if(count($resultload)>0)
                    {
                        
                    
                   
                            foreach ($resultload as $valueload)
                            {
                                   
                                    $payment_id[]=$valueload->id;
                                    $totalamount += round($valueload->rate*$valueload->qty);
                                
                                
                            }
                    
                    }
                    else
                    {
                            
                        
                    }
                
                
                
            }
            
            
            $payment_id_base=implode('|', $payment_id);
            
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            
            
            
            if($totalamount==0)
            {
                $totalamount=$totalamountfull;
            }
            
            
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $order_byd = "";
            $orderbyd = $this->Main_model->where_names_two_order_by('driver', 'id', $value->driver_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderbyd as $orderbyvald) {
                $order_byd = $orderbyvald->name;
            }
            
                $vehicle_number="";
              $vehicleorderbyd = $this->Main_model->where_names_two_order_by('vehicle', 'id', $value->vehicle_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($vehicleorderbyd as $orderbyvaldvv) {
                
                $vehicle_number = $orderbyvaldvv->vehicle_number;
            }
            
            
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'payment_id_base' => $payment_id_base,'id' => $value->id,'vehicle_number' => $vehicle_number, 'base_id' => base64_encode($value->id), 'selforder' => $value->selforder,'customer_id' => $value->customer_id,'finance_status' => $value->finance_status,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'phone' => $phone, 'reason' => $value->reason, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    public function fetch_data_table_trasport_base() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_set = $_GET['order_base'];
        
        $assign = $_GET['assign'];
          
        if($order_base_set==6666)
        {
            $tablename='orders_process_return';
            $order_base = 0;
            $assign = 0;
        }
        
        
        
      
        $i = 1;
        $array = array();
        $where = "";
        $sqls = "";
        
        if ($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
                    $where .= " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' $sales_search";
            
            
        }
        
        if($assign==13)
        {
            
            
                 $where.= " AND a.loading_status='1'";
                 $sqls.= " AND loading_status='1'";
                 
                 $where.= " AND a.assign_status IN ('1','3')";
                 $sqls.= " AND assign_status IN ('1','3')";
                 
                 $where.= " AND a.finance_status IN ('4','5','3')";
                 $sqls.= " AND finance_status IN ('4','5','3')";
             
        }
        else
        {
                 $where.= " AND a.loading_status IN ('0','1')";
                 $sqls.= " AND loading_status IN ('0','1')";
            
                 $where.= " AND a.assign_status='" . $assign . "'";
                 $sqls.= " AND assign_status='" . $assign . "'";
                 
                 $where.= " AND a.finance_status='" . $order_base . "'";
                 $sqls.= " AND finance_status='" . $order_base . "'";
            
        }
        
      
        
        if ($this->session->userdata['logged_in']['access'] == '17') {
           
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
           
           
           
           
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'   $userslog $where ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'   $userslog $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        }elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  user_id IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  sales_group IN (' . $sales_team_id . ')';
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } else {
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0' AND a.order_base='1'  $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        
        
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            
            
                if($order_base_set==6666)
                {
                    $tablename_sub='order_product_list_process_return';
                }
            
            
            $totalamount = 0;
            $commission = 0;
        
           if($tablename_sub=='order_product_list_process_return')  
           {
                $returnid=$value->id;
                $resulttotal = $this->Main_model->where_names_four_order_by_new($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode,'loadstatus', 0,'deleteid', '0', 'id', 'DESC');
                   
           }
           else
           {
                
                $loadstatus=1;
                $resulttotal = $this->Main_model->where_names_three_order_by_new($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode,'deleteid', '0', 'id', 'DESC');
                    
                $returnid=$value->return_id;
           }
                
           
           
           
            $loadamount=0;
            foreach ($resulttotal as $tot)
            {
                
                
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
                
                
                 $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $tot->id);
            
                 foreach ($resultload as $valueload)
                 {
                    if($valueload->loadstatus==1)
                    {
                       
                        $loadamount+= $valueload->amount;
                        
                    }
                    
    
                 }
                    
                
                
                
            }
            
            
            
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            
            
            
            
            
            
            
                 if($loadamount!=0)
                {
                   
                   
                    if($roundoffstatus == 1) 
                    {
                        $loadamount = $loadamount - $discount + $minisroundoff;
                    } 
                    else 
                    {
                        $loadamount = $loadamount - $discount - $minisroundoff;
                    }
                   
                   
                }
            
            
            
            
            
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $order_byd = "";
            $vehicle_id="";
            $orderbyd = $this->Main_model->where_names_two_order_by('driver', 'id', $value->driver_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderbyd as $orderbyvald) {
                $order_byd = $orderbyvald->name;
                $vehicle_id = $orderbyvald->vehicle_id;
            }
            
            $vehicle_number="";
            
            if($value->vehicle_id!=0)
            {
                
                
            
            $vehicleorderbyd = $this->Main_model->where_names_two_order_by('vehicle', 'id', $value->vehicle_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($vehicleorderbyd as $orderbyvaldvv) {
                
                $vehicle_number = $orderbyvaldvv->vehicle_number;
            }
            
            
            }
            
            
            
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->assign_status == 8) {
                $value->finance_status = 8;
            }
            if ($value->assign_status == 2) {
                $value->finance_status = 2;
            }
            
           
               
            
            $array[] = array('no' => $i, 'id' => $value->id,'loadamount' => round($loadamount),'vehicle_number' => $vehicle_number, 'return_id' => base64_encode($returnid),'base_id' => base64_encode($value->id), 'loading_status' => $value->loading_status,'selforder' => $value->selforder,'return_status' => $value->return_status,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'assign_status' => $value->assign_status, 'phone' => $phone, 'reason' => $value->reason, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
  public function fetch_data_table_trasport_base_mass_search() {
         $pagenum = $_GET['page'];
        
         $pagesize = $_GET['size'];
         $offset = ($pagenum - 1) * $pagesize;
        
        
        
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $order_base_set = $_GET['order_base'];
        
        $assign = $_GET['assign'];
          
        if($order_base_set==6666)
        {
            $tablename='orders_process_return';
            $order_base = 0;
            $assign = 0;
        }
        
        
        
      
        $i = 1;
        $myData=array();
        $array = array();
        $where = "";
        $sqls = "";
        
        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
                    $where .= " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' $sales_search";
            
            
       
        
       
        
      
        
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog1 = ' AND  entry_user_id IN (' . $sales_team_id . ')';
            $userslog = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
           
            
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $userslog  $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $userslog  $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  user_id IN (' . $sales_team_id . ')';
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $where $userslog ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $where $userslog ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
            $userslog1 = ' AND  sales_group IN (' . $sales_team_id . ')';
           
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
        } else {
            
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $where ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'   $where ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
            
            
        }
        
        
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            
            
            
            
            
            $totalamount = 0;
            $commission = 0;
        
           
                
            $loadstatus=1;
            $resulttotal = $this->Main_model->where_names_three_order_by_new($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode,'deleteid', '0', 'id', 'DESC');
             
           
           
           
           
            $loadamount=0;
            foreach ($resulttotal as $tot)
            {
                
                
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
                
                
                 $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $tot->id);
            
                 foreach ($resultload as $valueload)
                 {
                    if($valueload->loadstatus==1)
                    {
                       
                        $loadamount+= $valueload->amount;
                        
                    }
                    
    
                 }
                    
                
                
            }
            
            
            
            
            
            
            
            
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            
            
            
            
            
            
                if($loadamount!=0)
                {
                   
                   
                    if ($roundoffstatus == 1) 
                    {
                        $loadamount = $loadamount - $discount + $minisroundoff;
                    } 
                    else 
                    {
                        $loadamount = $loadamount - $discount - $minisroundoff;
                    }
                   
                   
                }
            
            
            
            
            
            
            
            
            
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $order_byd = "";
            $vehicle_id="";
            $orderbyd = $this->Main_model->where_names_two_order_by('driver', 'id', $value->driver_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderbyd as $orderbyvald) {
                $order_byd = $orderbyvald->name;
                $vehicle_id = $orderbyvald->vehicle_id;
            }
            
            $vehicle_number="";
            
            if($value->vehicle_id!=0)
            {
                
            
                   $vehicleorderbyd = $this->Main_model->where_names_two_order_by('vehicle', 'id', $value->vehicle_id, 'deleteid', '0', 'id', 'DESC');
                    foreach ($vehicleorderbyd as $orderbyvaldvv) {
                        
                        $vehicle_number = $orderbyvaldvv->vehicle_number;
                    }
            }
            
            
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->assign_status == 8) {
                $value->finance_status = 8;
            }
            if ($value->assign_status == 2) {
                $value->finance_status = 2;
            }
            
            
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Own Scope";
            }
            
            
            $array[] = array('no' => $i, 'delivery_status' => $delivery_status,'payment_mode' => $value->payment_mode,'gate_weight' => $value->gate_weight,'id' => $value->id,'loadamount' => round($loadamount),'vehicle_number' => $vehicle_number, 'base_id' => base64_encode($value->id), 'loading_status' => $value->loading_status,'selforder' => $value->selforder,'return_status' => $value->return_status,'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'order_byd' => $order_byd, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'assign_status' => $value->assign_status, 'phone' => $phone, 'reason' => $value->reason, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->finance_status, 'assign_date' => date('d-m-Y', strtotime($value->assign_date)), 'assign_time' => $value->assign_time,'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        
        }
        
        echo json_encode($myData);
    }
    
    
    
    
    
    
    public function fetch_data_table_production() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $i = 1;
        $array = array();
        
        
        
        
        
        
        $result = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE b.production_start = '".$order_base."' AND a.order_base = '1' AND b.deleteid = '0' AND b.product_id>0 GROUP BY b.product_id ORDER BY a.id DESC");
        $result = $result->result();
        
        
        foreach ($result as $value)
        {
            
            
            $array[] = array('no' => $i, 
            'id' => $value->order_id,
            'order_no' => $value->order_no,
            'product_id' => $value->product_id,
            'product_name' => $value->product_name,
            'categories_id' => $value->categories_id,
            'categories_name' => $value->categories_name,
            'reason' => $value->reason,
            'order_base' => $value->production_start,
            'create_date' => date('d-m-Y', strtotime($value->create_date)),
            'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
        
        
        
        
    }
    public function fetch_data_table_transpot() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $array = array();
        if ($route_id != '0') {
            $result = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'route_id', $route_id, 'id', 'DESC');
        } else {
            //$date=date('Y-m-d');
            //$result= $this->Main_model->where_names_four_order_by_new($tablename,'finance_status',$order_base,'order_base','1','deleteid','0','create_date',$date,'id','DESC');
            $result = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'id', 'DESC');
        }
        $i = 1;
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            $route_id_base = $value->route_id;
            if ($value->assign_status == 0) {
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id == "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($vehicle as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,'loading_status' => $value->loading_status, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value->reason, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_return_table_transpot_by_server() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $where = "";
        $sqls = "";
        
        
        $wheresearch="";
        if ($search != "") {
            $wheresearch = " AND  b.order_no LIKE '%" . $search . "' OR  c.company_name LIKE '%" . $search . "%' OR  c.phone LIKE '%" . $search . "%'";
        }
        $array = array();
        if($route_id != '0') 
        {
            
            $sqls=" AND b.route_id='" . $route_id . "'";
           
        }
       
        
      
        $querycount = $this->db->query("SELECT a.order_no,a.id,c.company_name,c.phone,b.route_id,a.order_id,c.id as customer_id,a.create_date  FROM order_sales_return_complaints as a JOIN orders_process as b ON a.order_id=b.id JOIN customers as c ON b.customer_id=c.id WHERE a.deleteid='0' AND a.order_base=0 $sqls $wheresearch");
        $resultcount = $querycount->result();
        $count=count($resultcount);
       
    
        $query = $this->db->query("SELECT a.order_no,a.id,c.company_name,c.phone,b.route_id,a.order_id,c.id as customer_id,a.create_date  FROM order_sales_return_complaints as a JOIN orders_process as b ON a.order_id=b.id JOIN customers as c ON b.customer_id=c.id WHERE a.deleteid='0' AND a.order_base=0 $sqls $wheresearch");
        $result = $query->result();
        
        
        
        $i = 1;
        foreach ($result as $value)
        {
            
            
            
            
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."'");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess) {
                    $totalamount += round($valuess->qty*$valuess->rate,2);
                }
                
                $route_id_base = $value->route_id;
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                        $route_name = $route_v->name;
                }
            
            
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id == "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
               
               $array[] = array('no' => $i, 'id' => $value->id,'route_names_val'=>$route_name, 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone,  'totalamount' => round($totalamount),  'address' => $address, 'create_date' => date('d-m-Y g:i A', strtotime($value->create_date)));
            
               $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_by_server() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $where = "";
        $sqls = "";
        
        
        $wheresearch="";
        if ($search != "") {
            $wheresearch = " AND  a.order_no LIKE '%" . $search . "' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%'";
        }
        $array = array();
        if ($route_id != '0') {
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.delivery_status='1' AND a.order_base='1' AND a.route_id='" . $route_id . "' AND a.finance_status='" . $order_base . "'  $wheresearch ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.delivery_status='1' AND a.order_base='1' AND a.route_id='" . $route_id . "' AND a.finance_status='" . $order_base . "'  $wheresearch ORDER BY a.id DESC LIMIT $offset, $pagesize");
       
       
       
        } else {
           
           
           $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.order_base='1'  AND a.delivery_status='1'  AND a.finance_status='" . $order_base . "' $wheresearch ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.order_base='1'  AND a.delivery_status='1'  AND a.finance_status='" . $order_base . "' $wheresearch ORDER BY a.id DESC LIMIT $offset, $pagesize");
        
            
            
        }
        
        
        
        
        $result = $query->result();
        $i = 1;
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            
            
           
            
            
            $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM $tablename_sub  WHERE order_id='".$value->id."'");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
         
         
         
            
            $route_id_base = $value->route_id;
            if ($value->assign_status == 0) {
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id == "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($vehicle as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }









               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'route_id', $value->route_id);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            
                
                
                

           $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
                
                
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                
                $discountfulltotal=$discountfulltotal+$value->delivery_charge;
                
                $array[] = array('no' => $i,'loc_name'=>$loc_name, 'id' => $value->id,'sales_name' => $sales_name,'sales_phone' => $sales_phone,'lengeth' => $lengeth, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value->reason, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_by_server_own() {
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
        $search = $_GET['search'];
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $where = "";
        $sqls = "";
        $wheresearch="";
        if ($search != "") {
            $wheresearch = " AND  a.order_no LIKE '%" . $search . "' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%'";
        }
        $array = array();
        if ($route_id != '0') {
            
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.delivery_status='2' AND a.order_base='1' AND a.route_id='" . $route_id . "' AND a.finance_status='" . $order_base . "'  $wheresearch ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount); 
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.delivery_status='2' AND a.order_base='1' AND a.route_id='" . $route_id . "' AND a.finance_status='" . $order_base . "'  $wheresearch ORDER BY a.id DESC LIMIT $offset, $pagesize");
       
       
       
        } else {
           
           
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.order_base='1'  AND a.delivery_status='2'  AND a.finance_status='" . $order_base . "' $wheresearch ORDER BY a.id DESC");
            $resultcount = $querycount->result();
            $count=count($resultcount); 
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0' AND a.order_base='1'  AND a.delivery_status='2'  AND a.finance_status='" . $order_base . "' $wheresearch ORDER BY a.id DESC LIMIT $offset, $pagesize");
        }
        
        
        $result = $query->result();
        $i = 1;
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            
            
            
            
          
            $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM $tablename_sub  WHERE order_id='".$value->id."'");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
         
            
            
            
            
            
            
            $route_id_base = $value->route_id;
            if ($value->assign_status == 0) {
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id == "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($vehicle as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                



               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'route_id', $value->route_id);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            
                
                
                
                

   $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
                
                
                
                
                
                
                
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                $array[] = array('no' => $i,'loc_name'=>$loc_name, 'id' => $value->id,'lengeth'=>$lengeth,'sales_name'=>$sales_name,'sales_phone'=>$sales_phone, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'reason' => $value->reason, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_names_val' => $route_name, 'address' => $address, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
    }
    
    
    public function fetch_data_table_transpot_vehicle() {
        $route_id = $_GET['route_id'];
        $array = array();
        $sql = "";
        if ($route_id != 0) {
            //$sql="AND a.route_id='".$route_id."' ";
            
        }
        $result = $this->db->query("SELECT c.name as route_name,c.id as route_id,a.vehicle_number as vehicle_number,a.vehicle_name as vehicle_name,b.phone as driver_phone,b.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN driver as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id WHERE   a.deleteid=0 AND b.deleteid=0  $sql ORDER BY a.id ASC");
        $result = $result->result();
        $i = 1;
        foreach ($result as $value) {



            $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'route_id', $value->route_id);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            
                


           

            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id,'loc_name'=>$loc_name, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name);
            $i++;




        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_with_retail_shop() {
        $status = $_GET['status'];
        $order_base = $_GET['order_base'];
        $vehicle_id = $_GET['vehicle_id'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        
        
        
      
            
        $result = $this->db->query("SELECT GROUP_CONCAT(b.id) as groupid,b.order_no,b.payment_mode,b.customer_id,b.delivery_mode,b.id as order_id,b.create_date as trip_end_date,b.create_time as trip_end_time FROM  orders_process as b  WHERE  b.finance_status='4' AND b.selforder=1 GROUP BY b.payment_mode,b.create_date  ORDER BY b.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value)
        {
             
            $array[] = array('no' => $i,  'order_id' => base64_encode($value->groupid),'payment_mode' => $value->payment_mode,  'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time,  'delivery_mode' => $value->delivery_mode,  'count' => count($result));
            $i++;
            
            
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list() {
        $status = $_GET['status'];
        $order_base = $_GET['order_base'];
        $vehicle_id = $_GET['vehicle_id'];



        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17') {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql .= ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql .= ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql .= ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        
        
        
          if($vehicle_id!=0)
          {


          $sql .=" AND b.vehicle_id='" . $vehicle_id . "'";

          }

        
        if($order_base==10000)
        {
            
            
             $result = $this->db->query("SELECT b.order_no,b.user_id,b.reason,b.customer_id,b.delivery_mode,b.id as order_id,b.create_date as trip_end_date,b.create_time as trip_end_time FROM  orders_process as b  WHERE  b.finance_status='4' AND b.selforder=1   ORDER BY b.id DESC");
        
        }
        else
        {
            
             $result = $this->db->query("SELECT b.order_no,b.user_id,b.reason,b.customer_id,b.delivery_mode,b.id as order_id,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='4'  AND b.order_base='1' AND b.md_approved_status IN ('1','0')  $sql ORDER BY b.id DESC");
        
            
        }

       
        
        
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            
            
            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
            
            
            $array[] = array('no' => $i, 'company_name' => $company_name,'sales_name' => $sales_name,'sales_phone' => $sales_phone, 'phone' => $phone, 'reason' => $value->reason,'order_id' => $value->order_id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time, 'vehicle_id' => $value->vehicle_id, 'delivery_mode' => $value->delivery_mode, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => count($result));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_table_transpot_vehicle_delivered_order_list_assign() {
        $status = $_GET['status'];
        $vehicle_id = $_GET['vehicle_id'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17') 
        {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT b.order_no,b.customer_id,b.delivery_mode,b.id as order_id,b.assign_date,b.assign_date_time,b.assign_time,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3'  AND b.vehicle_id='" . $vehicle_id . "' $sql ORDER BY a.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'company_name' => $company_name, 'phone' => $phone, 'order_id' => $value->order_id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->assign_date)), 'trip_end_time' => $value->assign_time, 'vehicle_id' => $value->vehicle_id, 'delivery_mode' => $value->delivery_mode, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => count($result));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function fetch_data_table_transpot_vehicle_delivered_order_list_assign_un_load() {
        $status = $_GET['status'];
        $vehicle_id = $_GET['vehicle_id'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT b.order_no,b.customer_id,b.delivery_mode,b.id as order_id,b.assign_date,b.assign_date_time,b.assign_time,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3'  AND b.assign_status='11' AND b.vehicle_id='" . $vehicle_id . "' $sql ORDER BY a.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            $array[] = array('no' => $i, 'company_name' => $company_name, 'phone' => $phone, 'order_id' => $value->order_id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'trip_end_date' => date('d-M-Y', strtotime($value->assign_date)), 'trip_end_time' => $value->assign_time, 'vehicle_id' => $value->vehicle_id, 'delivery_mode' => $value->delivery_mode, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => count($result));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id_retail() {
        
         $status = $_GET['status'];
         $order_id = $_GET['order_id'];
         $order_id=base64_decode($order_id);
         $order_id=explode(',', $order_id);
         $order_id=implode("','", $order_id);
         
         
         
         
         
         $order_base = $_GET['order_base'];
         $result = $this->db->query("SELECT b.user_id,b.delivery_mode,b.payment_mode,GROUP_CONCAT(b.id) as groupid,b.create_date as trip_end_date,b.create_time as trip_end_time FROM  orders_process as b  WHERE  b.finance_status='4' AND b.id IN ('" . $order_id . "') GROUP BY b.payment_mode ORDER BY b.id DESC");
        
        
       
        
        
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            
            $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id IN ('" . $order_id . "')  AND deleteid=0");
            $results = $resultpp->result();
            foreach ($results as $valuep)
            {
                
                $totalamount += round($valuep->rate*$valuep->qty);
                
            }
            
            
            $array[] = array('no' => $i, 'order_id' => $value->groupid, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time,  'payment_mode' => $value->payment_mode, 'totalamount' => round($totalamount));
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id() {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
         $order_base = $_GET['order_base'];
         
         
         if($order_base==10000)
         {
             
           
              $result = $this->db->query("SELECT b.user_id,b.reason,b.gate_weight,b.roundoff,b.roundoffstatus,b.discount,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.create_date as trip_end_date,b.create_time as trip_end_time FROM  orders_process as b  WHERE  b.finance_status='4' AND b.id='" . $order_id . "' ORDER BY b.id DESC");
        
         }
         else
         {
            $result = $this->db->query("SELECT b.user_id,b.reason,b.gate_weight,b.roundoff,b.roundoffstatus,b.discount,d.delivery_fixced,d.km_base_charge,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='4' AND b.id='" . $order_id . "' ORDER BY a.id DESC");
          
         }
        
       
        
        
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            
            if($order_base==10000)
          {
             
                $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "'  AND deleteid=0");
           
          }
          else
          {
                $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "' AND paricel_mode='" . $paricel_mode . "' AND deleteid=0");
            
         }
            
          
            
            
            $loadqty=0;
            $results = $resultpp->result();
            $totalamountload=0;
            foreach ($results as $valuep)
            {
                
                
                
                    if ($paricel_mode == 1) {
                        
                        if($valuep->modify_qty==0)
                        {
                            $valuep->modify_qty=$valuep->qty;
                        }
                       
                        $totalamount += round($valuep->rate*$valuep->modify_qty);
                    } else {
                         $totalamount += round($valuep->rate*$valuep->qty);
                    }
                
                
                   
                    $resultload =$this->Main_model->where_names_two_order_by('sales_load_products','order_product_id',$valuep->id,'delivered_products','1','id','ASC');
                    
                    foreach ($resultload as $valueload)
                    {
                        if($valueload->driver_payment_status==0)
                        {
                          
                            $loadqty+= $valueload->qty;
                            $totalamountload += round($valueload->rate*$valueload->qty);
                        }
                        
                    }
                
                
                
            }
            
            
           
            
            
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            
            
            
            
            
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            
            if($value->km_reading_end=='')
            {
                $value->km_reading_end=0;
            }
            
            $totalkm = $value->km_reading_end - $value->start_reading;
            if ($totalkm == '') {
                $totalkm = 0;
            }
            
            
           
            
               $result_getfiexed = $this->db->query("SELECT * FROM `driver_charge_fixed` WHERE   `fixed_km_from` <= '".$totalkm."' AND fixed_km >= '".$totalkm."'");
               $result_getfiexed = $result_getfiexed->result();
               if(count($result_getfiexed)>0)
               {
                           $fixed_charge=0;
                           foreach($result_getfiexed as $val)
                           {
                               $fixed_charge=$val->fixed_charge;
                           }
                        
                           $totalcharges=$fixed_charge;
                           
                           
                           $km_base_charge='FIXED';
               }
               else
               {
                   
                        $km_base_charge=$value->km_base_charge;
                       
                        if($loadqty==0)
                        {
                            $totalcharges=$km_base_charge*$totalkm;
                        }
                        else
                        {
                            //$totalcharges=$loadqty*$km_base_charge*$totalkm;
                             $totalcharges=$km_base_charge*$totalkm;

                        }
                     
                   
               }
            
            
            
              if($totalkm<0)
              {
                  $totalkm="No data";
                  $totalcharges=0;
              }
            
            
            
            
            $array[] = array('no' => $i,'gate_weight' => $value->gate_weight,'reason' => $value->reason, 'totalamountload' => $totalamountload,'order_id' => $value->order_id,'total_drver_charge' => round($totalcharges),'total_driver_kg' => round($loadqty), 'order_no' => $value->order_no, 'company_name' => $company_name, 'phone' => $phone, 'address' => $address, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'driver_id' => $value->driver_id, 'customer_id' => $value->customer_id, 'payment_mode' => $value->payment_mode, 'reference_no' => $value->reference_no, 'delivery_charge' => $value->delivery_charge, 'delivery_fixced' => $value->delivery_fixced, 'km_base_charge' => $km_base_charge, 'return_excess' => $value->return_excess, 'collecttion_id' => $value->collecttion_id, 'payment_image' => $payment_image, 'totalamount' => $discountfulltotal, 'fulltotalamount' => $discountfulltotal + $value->delivery_charge, 'totalkm' => $totalkm);
            $i++;
        }
        echo json_encode($array);
    }
    
    
      public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id_by_view() {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        
        $order_base = $_GET['order_base'];
        
        
        
        if($order_base==10000)
        {
                $result = $this->db->query("SELECT b.weight,b.user_id,b.roundoff,b.roundoffstatus,b.discount,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time FROM  orders_process as b  WHERE  b.finance_status IN ('5','4') AND b.id='" . $order_id . "' ORDER BY b.id DESC");
      
        }
        else
        {
             $result = $this->db->query("SELECT b.weight,b.user_id,b.roundoff,b.roundoffstatus,b.discount,d.delivery_fixced,d.km_base_charge,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status IN ('5','4') AND b.id='" . $order_id . "' ORDER BY a.id DESC");
         
        }
        
        
     
       
       
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            $totalamountload=0;
            $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "' AND paricel_mode='" . $paricel_mode . "' AND deleteid=0");
            $results = $resultpp->result();
            foreach ($results as $valuep) {
                
                if ($paricel_mode == 1)
                {
                    
                     if($valuep->modify_qty==0)
                    {
                        $valuep->modify_qty=$valuep->qty;
                    }
                   
                    $totalamount += round($valuep->rate*$valuep->modify_qty);
                } 
                else 
                {
                     $totalamount += round($valuep->rate*$valuep->qty);
                }
                
                
                
                      $resultload =$this->Main_model->where_names_two_order_by('sales_load_products','order_product_id',$valuep->id,'delivered_products','1','id','ASC');
                    
                    foreach ($resultload as $valueload)
                    {
                        if($valueload->driver_payment_status==1)
                        {
                          
                           
                            $totalamountload += round($valueload->rate*$valueload->qty);
                        }
                        
                    }
                
                
                
                
                
                
            }
            
            
            
            
            
       
            
            
            
            
              $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM order_product_list_process  WHERE order_id='".$value->id."'");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
            
            
            
            
            
            
            
            
            if($value->weight==0)
            {
                $weight=0;
            }
            else
            {
               $weight=$value->weight; 
            }
            
            
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $totalkm = $value->km_reading_end - $value->start_reading;
            if ($totalkm == '') {
                $totalkm = 0;
            }
            $array[] = array('no' => $i, 'totalamountload' => $totalamountload,'base_id' => base64_encode($value->order_id),'order_id' => $value->order_id, 'lengeth' => $lengeth,'weight' => $weight,'order_no' => $value->order_no, 'company_name' => $company_name, 'phone' => $phone, 'address' => $address, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->trip_end_date)), 'trip_end_time' => $value->trip_end_time, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'driver_id' => $value->driver_id, 'customer_id' => $value->customer_id, 'payment_mode' => $value->payment_mode, 'reference_no' => $value->reference_no, 'delivery_charge' => $value->delivery_charge, 'delivery_fixced' => $value->delivery_fixced, 'km_base_charge' => $value->km_base_charge, 'return_excess' => $value->return_excess, 'collecttion_id' => $value->collecttion_id, 'payment_image' => $payment_image, 'totalamount' => $discountfulltotal, 'fulltotalamount' => $discountfulltotal + $value->delivery_charge, 'totalkm' => $totalkm);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    public function fetch_data_table_transpot_vehicle_delivered_order_list_by_id_assign() {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $result = $this->db->query("SELECT b.assign_date,b.assign_time,b.user_id,b.roundoff,b.roundoffstatus,b.discount,d.delivery_fixced,d.km_base_charge,b.collecttion_id,b.return_excess,b.km_reading_end,b.start_reading,b.paricel_mode,b.delivery_mode,b.order_no,b.customer_id,b.delivery_charge,b.payment_mode,b.payment_image,b.reference_no,b.id as order_id,b.trip_end_date,b.trip_end_time,c.name as route_name,a.vehicle_number as vehicle_number,d.id as driver_id,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3' AND b.id='" . $order_id . "' ORDER BY a.id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $sales_name = "";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
            }
            $paricel_mode = $value->paricel_mode;
            $totalamount = 0;
            $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $value->order_id . "' AND paricel_mode='" . $paricel_mode . "' AND deleteid=0");
            $results = $resultpp->result();
            foreach ($results as $valuep) {
                if ($paricel_mode == 1)
                {
                    
                     if($valuep->modify_qty==0)
                    {
                        $valuep->modify_qty=$valuep->qty;
                    }
                   
                    $totalamount += round($valuep->rate*$valuep->modify_qty);
                } 
                else 
                {
                     $totalamount += round($valuep->rate*$valuep->qty);
                }
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $totalkm = $value->km_reading_end - $value->start_reading;
            if ($totalkm == '') {
                $totalkm = 0;
            }
            $array[] = array('no' => $i, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'company_name' => $company_name, 'phone' => $phone, 'address' => $address, 'sales_name' => $sales_name, 'trip_end_date' => date('d-M-Y', strtotime($value->assign_date)), 'trip_end_time' => $value->assign_time, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'driver_id' => $value->driver_id, 'customer_id' => $value->customer_id, 'payment_mode' => $value->payment_mode, 'reference_no' => $value->reference_no, 'delivery_charge' => $value->delivery_charge, 'delivery_fixced' => $value->delivery_fixced, 'km_base_charge' => $value->km_base_charge, 'return_excess' => $value->return_excess, 'collecttion_id' => $value->collecttion_id, 'payment_image' => $payment_image, 'totalamount' => $discountfulltotal, 'fulltotalamount' => $discountfulltotal + $value->delivery_charge, 'totalkm' => $totalkm);
            $i++;
        }
        echo json_encode($array);
    }
    public function fetch_data_table_transpot_vehicle_delivered() {
        $status = $_GET['status'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')'; 
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
            $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT count(b.order_no) as cordercount,c.name as route_name,a.vehicle_name as vehicle_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='4' AND b.order_base='1'  AND b.md_approved_status IN ('1','0') $sql GROUP BY b.vehicle_id  ORDER BY a.id ASC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => $value->cordercount);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    public function fetch_data_table_transpot_vehicle_assign() {
        $status = $_GET['status'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
             
             $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT count(b.order_no) as cordercount,c.name as route_name,a.vehicle_name as vehicle_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3'  $sql GROUP BY b.vehicle_id  ORDER BY a.id ASC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => $value->cordercount);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
     public function fetch_data_table_transpot_vehicle_assign_un_load() {
        $status = $_GET['status'];
        $sql = "";
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.entry_user_id IN (' . $sales_team_id . ')';
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
            
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
            
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.user_id IN (' . $sales_team_id . ')';
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  b.sales_group IN (' . $sales_team_id . ')';
        }
        $result = $this->db->query("SELECT count(b.order_no) as cordercount,c.name as route_name,a.vehicle_name as vehicle_name,a.vehicle_number as vehicle_number,d.phone as driver_phone,d.name as driver_name,a.id as vehicle_id FROM vehicle as a JOIN orders_process as b ON a.id=b.vehicle_id JOIN route as c ON c.id=a.route_id JOIN driver as d ON d.id=b.driver_id  WHERE  b.finance_status='3' AND b.assign_status='11'  $sql GROUP BY b.vehicle_id  ORDER BY a.id ASC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'vehicle_id' => $value->vehicle_id, 'route_name' => $value->route_name, 'vehicle_number' => $value->vehicle_number, 'vehicle_name' => $value->vehicle_name, 'driver_phone' => $value->driver_phone, 'driver_name' => $value->driver_name, 'count' => $value->cordercount);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    public function cash_mode() 
    {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $order_id . "'   GROUP BY order_id ORDER BY id DESC");
        $result = $result->result();
        $collecttion_id = 0;
        $resultss = $this->db->query("SELECT * FROM orders_process WHERE  id='" . $order_id . "' ORDER BY id DESC");
        $resultss = $resultss->result();
        foreach ($resultss as $value) {
            $collecttion_id = $value->collecttion_id;
            $return_excess = $value->return_excess;
        }
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
           
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            if ($collecttion_id == 1) {
                $denomination_total = $denomination_total - $return_excess;
            }
            $array = array('no' => $i, 'order_id' => $value->order_id, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            

        }
        echo json_encode($array);
    }
    
    
    
    
    public function cash_mode_reconciliation() {
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        
        
        
        
        
        
        
        $denomination_totalexe=0;
        $resultexest = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=1  GROUP BY order_id ORDER BY id DESC");
        $resultexe = $resultexest->result();
         foreach ($resultexe as $valuess) {
             
             
               
            if($valuess->c1rs=='')
            {
                $valuess->c1rs=0;
            }
            
            if($valuess->c2rs=='')
            {
                $valuess->c2rs=0;
            }
            
            if($valuess->c5rs=='')
            {
                $valuess->c5rs=0;
            }
             
            if($valuess->c10rs=='')
            {
                $valuess->c10rs=0;
            }
            
            
            if($valuess->c20rs=='')
            {
                $valuess->c20rs=0;
            }
            
             if($valuess->c50rs=='')
            {
                $valuess->c50rs=0;
            }
            
            
            if($valuess->c100rs=='')
            {
                $valuess->c100rs=0;
            }
            
            if($valuess->c200rs=='')
            {
                $valuess->c200rs=0;
            }
            
            
              if($valuess->c500rs=='')
            {
                $valuess->c500rs=0;
            }
            
            
            if($valuess->c2000rs=='')
            {
                $valuess->c2000rs=0;
            }
            
            
           
            
            $denomination_totalexe = 1 * $valuess->c1rs + 2 * $valuess->c2rs + 5 * $valuess->c5rs + 10 * $valuess->c10rs + 20 * $valuess->c20rs + 50 * $valuess->c50rs + 100 * $valuess->c100rs + 200 * $valuess->c200rs + 500 * $valuess->c500rs + 2000 * $valuess->c2000rs;
           
             
         }
        
        
        
        
        
        
        
        
        
        //$result = $this->db->query("SELECT * FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=0 ORDER BY id DESC");
        //$result = $result->result();
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $order_id . "' AND delivery_status=0  GROUP BY order_id ORDER BY id DESC");
        $result = $result->result();
        
        
        $collecttion_id = 0;
        $return_excess=0;
        $resultss = $this->db->query("SELECT * FROM orders_process WHERE  id='" . $order_id . "' ORDER BY id DESC");
        $resultss = $resultss->result();
        foreach ($resultss as $value) {
            $collecttion_id = $value->collecttion_id;
            $return_excess = $value->return_excess;
        }
        
        
        
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
           
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            if ($collecttion_id == 1) {
                $denomination_total = $denomination_total - $return_excess;
            }
            
            $Fulltotal=$denomination_totalexe+$denomination_total;
            $array = array('no' => $i, 'order_id' => $value->order_id,'alreadycollected'=>$denomination_totalexe,'denomination_totalexe'=>$Fulltotal, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            

        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function cash_mode_retails()
     {
         
         
        $status = $_GET['status'];
        $order_id = $_GET['order_id'];
        $order_id=base64_decode($order_id);
        $order_id=explode(',', $order_id);
        $order_id=implode("','", $order_id);
        
        
        
        
        
        $denomination_totalexe=0;
        $resultexest = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id IN ('" . $order_id . "')   ORDER BY id DESC");
        $resultexe = $resultexest->result();
         foreach ($resultexe as $valuess) {
             
             
               
            if($valuess->c1rs=='')
            {
                $valuess->c1rs=0;
            }
            
            if($valuess->c2rs=='')
            {
                $valuess->c2rs=0;
            }
            
            if($valuess->c5rs=='')
            {
                $valuess->c5rs=0;
            }
             
            if($valuess->c10rs=='')
            {
                $valuess->c10rs=0;
            }
            
            
            if($valuess->c20rs=='')
            {
                $valuess->c20rs=0;
            }
            
             if($valuess->c50rs=='')
            {
                $valuess->c50rs=0;
            }
            
            
            if($valuess->c100rs=='')
            {
                $valuess->c100rs=0;
            }
            
            if($valuess->c200rs=='')
            {
                $valuess->c200rs=0;
            }
            
            
              if($valuess->c500rs=='')
            {
                $valuess->c500rs=0;
            }
            
            
            if($valuess->c2000rs=='')
            {
                $valuess->c2000rs=0;
            }
            
            
           
            
            $denomination_totalexe = 1 * $valuess->c1rs + 2 * $valuess->c2rs + 5 * $valuess->c5rs + 10 * $valuess->c10rs + 20 * $valuess->c20rs + 50 * $valuess->c50rs + 100 * $valuess->c100rs + 200 * $valuess->c200rs + 500 * $valuess->c500rs + 2000 * $valuess->c2000rs;
           
             
         }
        
        
        
        
        
        
        
        
   
   
        $result = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id IN ('" . $order_id . "')  ORDER BY id DESC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            
            if($value->c1rs=='')
            {
                $value->c1rs=0;
            }
            
            if($value->c2rs=='')
            {
                $value->c2rs=0;
            }
            
            if($value->c5rs=='')
            {
                $value->c5rs=0;
            }
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            
            if($value->c10rs=='')
            {
                $value->c10rs=0;
            }
            
            
            if($value->c20rs=='')
            {
                $value->c20rs=0;
            }
            
             if($value->c50rs=='')
            {
                $value->c50rs=0;
            }
            
            
            if($value->c100rs=='')
            {
                $value->c100rs=0;
            }
            
            if($value->c200rs=='')
            {
                $value->c200rs=0;
            }
            
            
              if($value->c500rs=='')
            {
                $value->c500rs=0;
            }
            
            
              if($value->c2000rs=='')
            {
                $value->c2000rs=0;
            }
            
            
           
            
            $denomination_total = 1 * $value->c1rs + 2 * $value->c2rs + 5 * $value->c5rs + 10 * $value->c10rs + 20 * $value->c20rs + 50 * $value->c50rs + 100 * $value->c100rs + 200 * $value->c200rs + 500 * $value->c500rs + 2000 * $value->c2000rs;
           
            $Fulltotal=$denomination_totalexe+$denomination_total;
            $array = array('no' => $i, 'order_id' => $value->order_id,'alreadycollected'=>$denomination_totalexe,'denomination_totalexe'=>$Fulltotal, 'c1rs' => $value->c1rs,'c2rs' => $value->c2rs,'c5rs' => $value->c5rs,'c10rs' => $value->c10rs, 'c20rs' => $value->c20rs, 'c50rs' => $value->c50rs, 'c100rs' => $value->c100rs, 'c200rs' => $value->c200rs, 'c500rs' => $value->c500rs, 'c2000rs' => $value->c2000rs, 'c1rs_s' => 1 * $value->c1rs,'c2rs_s' => 2 * $value->c2rs,'c5rs_s' => 5 * $value->c5rs,'c10rs_s' => 10 * $value->c10rs, 'c20rs_s' => 20 * $value->c20rs, 'c50rs_s' => 50 * $value->c50rs, 'c100rs_s' => 100 * $value->c100rs, 'c200rs_s' => 200 * $value->c200rs, 'c500rs_s' => 500 * $value->c500rs, 'c2000rs_s' => 2000 * $value->c2000rs, 'denomination_total' => $denomination_total);
            $i++;
            
            

        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_driver() {
        $route_id = $_GET['route_id'];
        $result = $this->db->query("SELECT * FROM driver  WHERE deleteid=0  ORDER BY name ASC");
        $result = $result->result();
        $array = array();
        $i = 1;
        foreach ($result as $value) {
            $array[] = array('no' => $i, 'id' => $value->id, 'name' => $value->name, 'phone' => $value->phone);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id=0;
        $where='';
         if($_GET['route_id']!='')
        {
             $route_id = $_GET['route_id'];
            
        }
       
        $assigen_status = $_GET['assaignstates'];
        $dateval = $_GET['dateval'];
        $dateval2 = $_GET['dateval2'];
        $i = 1;
        $array = array();
        if ($route_id != 0) {
             $order_base = 3;
             $where.=" AND a.route_id='".$route_id."'";
        }
        
        
        
        
        if($assigen_status==11)
        {
           
           $where.=" AND a.finance_status > 0 AND a.assign_status >0 AND a.selforder=0";
         
        }
        else
        {
            $where.=" AND a.finance_status > 0 AND a.assign_status=".$assigen_status." AND a.selforder=0";
        }
         
        
        if($dateval!=0)
        {
            
        
        $where.=" AND a.assign_date BETWEEN '".$dateval."' AND '".$dateval2."'";
        
        }
       
        $search = $_GET['search'];
        $limit="";
        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
                    $where .= " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%'  OR d.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR r.name LIKE '%" . $search . "%' $sales_search";
            
            
        }
        else
        {
            $limit="LIMIT 0,10";
        }
        
        $query = $this->db->query(" SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id LEFT JOIN route as r ON a.route_id=r.id WHERE a.deleteid='0' AND a.order_base='1' AND  a.delivery_status='1'  $where ORDER BY a.id DESC $limit");
        $result = $query->result();
        
        
        
        
        
       
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            $route_id_base = $value->route_id;
           
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle_name = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_name = $vehicle_v->vehicle_name;
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }









               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'route_id', $value->route_id);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            
                
                
                $assigen_status=$value->assign_status;
                if ($assigen_status == '11') {
                    $statusval = "Assigned to Dispatch";
                }
                if ($assigen_status == '12') {
                    $statusval = "Driver Dispatch";
                }
                if ($assigen_status == '1') {
                    $statusval = "Driver Picked";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                 if ($value->finance_status == '5') {
                    $statusval = "Reconciliation Completed";
                }
                if ($assigen_status == '8') {
                    $statusval = "Driver Re-scheduled";
                }
                if ($assigen_status == '0') {
                    $statusval = "Not Assigned";
                }
                
                
                
                
                
                
                
                
                

            $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
               
                
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                $array[] = array('no' => $i,'loc_name'=>$loc_name,'sales_name' => $sales_name,'sales_phone' => $sales_phone, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'vehicle_name' => $vehicle_name, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason, 'assign_status' => $value->assign_status, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->assign_date)), 'create_time' => $value->create_time);
           
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_return() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id=0;
        $where='';
         if($_GET['route_id']!='')
        {
             $route_id = $_GET['route_id'];
            
        }
       
        $assigen_status = $_GET['assaignstates'];
        $dateval = $_GET['dateval'];
        $dateval2 = $_GET['dateval2'];
        $i = 1;
        $array = array();
        if ($route_id != 0) {
             $order_base = 3;
             $where.=" AND b.route_id='".$route_id."'";
        }
        
        
        
        if($assigen_status==11)
        {
            $where.=" AND a.order_base > 0";
        }
        else
        {
            $where.=" AND a.order_base='".$assigen_status."'";
        }
        
        
        if($dateval!=0)
        {
            
        
        $where.=" AND a.assign_date BETWEEN '".$dateval."' AND '".$dateval2."'";
        
        }
       
        $search = $_GET['search'];
        $limit="";
        if($search != "") 
        {
            
          $where .= " AND a.order_no LIKE '%" . $search . "' OR c.company_name LIKE '%" . $search . "%'  OR d.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' $sales_search";
            
            
        }
        else
        {
            $limit="LIMIT 0,10";
        }
        
        
        $query = $this->db->query("SELECT a.sort_id,a.driver_assign,a.assign_date,a.assign_time,a.order_no,a.vehicle_id,a.driver_id,a.order_base,a.id,c.company_name,c.phone,b.route_id,a.order_id,c.id as customer_id,a.create_date  FROM order_sales_return_complaints as a JOIN orders_process as b ON a.order_id=b.id JOIN customers as c ON b.customer_id=c.id   JOIN driver as d ON a.driver_id=d.id  JOIN vehicle as v ON a.vehicle_id=v.id WHERE a.deleteid='0'  $where ORDER BY a.id DESC $limit");
        $result = $query->result();
        
        
  
        
        
        
        
        
       
        foreach ($result as $value) {
           
           
           
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."'");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess) {
                        $totalamount += round($valuess->qty*$valuess->rate,2);
                }
                    
            
            
                $route_id_base = $value->route_id;
           
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle_name = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_name = $vehicle_v->vehicle_name;
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                
                $assigen_status=$value->order_base;
                if ($assigen_status == '1') {
                    $statusval = "Assigned to Retrun";
                }
                if ($assigen_status == '4') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '5') {
                    $statusval = "Retrun Inward";
                }
                if ($assigen_status == '2') {
                    $statusval = "Retrun Approved";
                }
                if ($assigen_status == '3') {
                    $statusval = "Retrun Rejected";
                }
                 
                
                
                $array[] = array('no' => $i, 'id' => $value->id,  'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'vehicle_name' => $vehicle_name, 'totalamount' => round($totalamount), 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'driver_assign' => $value->driver_assign, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->assign_date)), 'create_time' => $value->assign_time);
           
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_own() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id=0;
        $where='';
         if($_GET['route_id']!='')
        {
             $route_id = $_GET['route_id'];
            
        }
       
        $assigen_status = $_GET['assaignstates'];
        $dateval = $_GET['dateval'];
        $dateval2 = $_GET['dateval2'];
        $i = 1;
        $array = array();
        if ($route_id != 0) {
             $order_base = 3;
             $where.=" AND a.route_id='".$route_id."'";
        }
        
        
         if($assigen_status==11)
        {
           
           $where.=" AND a.finance_status > 0 AND a.assign_status >0 AND a.selforder=0";
         
        }
        else
        {
            $where.=" AND a.finance_status > 0 AND a.assign_status=".$assigen_status." AND a.selforder=0";
        }
        
        
        if($dateval!=0)
        {
            
        
        $where.=" AND a.assign_date BETWEEN '".$dateval."' AND '".$dateval2."'";
        
        }
       
        $search = $_GET['search'];
        $limit="";
        if($search != "") 
        {
            
                  
                   if($this->session->userdata['logged_in']['access']!=12)
                   {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                   }
                   
                    $where .= " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%'  OR d.phone LIKE '%" . $search . "%' OR d.name LIKE '%" . $search . "%' OR v.vehicle_number LIKE '%" . $search . "%' OR r.name LIKE '%" . $search . "%' $sales_search";
            
            
        }
        else
        {
            $limit="LIMIT 0,10";
        }
        
        $query = $this->db->query(" SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id LEFT JOIN driver as d ON a.driver_id=d.id LEFT JOIN vehicle as v ON a.vehicle_id=v.id LEFT JOIN route as r ON a.route_id=r.id WHERE a.deleteid='0' AND a.order_base='1' AND  a.delivery_status='2'  $where ORDER BY a.id DESC $limit");
        $result = $query->result();
        
        
        
        
        
       
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            $route_id_base = $value->route_id;
           
                $company_name = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle_name = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_name = $vehicle_v->vehicle_name;
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                

   $sales_name = "";
            $sales_phone="";
            $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($sales_team_id as $val) {
                $sales_name = $val->name;
                $sales_phone = $val->phone;
            }
            
                

               $loc_name = "";
           
            $loc_name_id = $this->Main_model->where_names('locality', 'route_id', $value->route_id);
            foreach ($loc_name_id as $valc) {
              
                $loc_name = $valc->name;
            }
            
                
                
                
                
                $assigen_status=$value->assign_status;
                if ($assigen_status == '11') {
                    $statusval = "Assigned to Dispatch";
                }
                if ($assigen_status == '12') {
                    $statusval = "Driver Dispatch";
                }
                if ($assigen_status == '1') {
                    $statusval = "Driver Picked";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                if ($value->finance_status == '5') {
                    $statusval = "Reconciliation Completed";
                }
                if ($assigen_status == '8') {
                    $statusval = "Driver Re-scheduled";
                }
                if ($assigen_status == '0') {
                    $statusval = "Not Assigned";
                }
                
               
                
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                $array[] = array('no' => $i,'loc_name'=> $loc_name,'sales_phone' => $sales_phone,'sales_name' => $sales_name, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'vehicle_name' => $vehicle_name, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason, 'assign_status' => $value->assign_status, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'delivery_mode' => $value->delivery_mode, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->assign_date)), 'create_time' => $value->create_time);
           
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_driver_list() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $assigen_status = $_GET['assaignstates'];
        $i = 1;
        $array = array();
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        $resultsub = $this->db->query("SELECT b.route_id FROM driver as a JOIN vehicle as b ON a.vehicle_id=b.id  WHERE a.id='" . $define_driver_id . "' AND a.deleteid=0");
        $resultsubcheck = $resultsub->result();
        foreach ($resultsubcheck as $valuesalesss) {
            $route_id = $valuesalesss->route_id;
        }
        if ($this->session->userdata['logged_in']['access'] == '1' || $this->session->userdata['logged_in']['access'] == '6') {
            $result = $this->Main_model->where_names_three_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'sort_id', 'ASC');
        } else {
            $result = $this->Main_model->where_names_four_order_by_new($tablename, 'finance_status', $order_base, 'order_base', '1', 'deleteid', '0', 'driver_id', $define_driver_id, 'sort_id', 'ASC');
        }
        $paricel_mode = 0;
        foreach ($result as $value) {
            $paricel_mode = $value->paricel_mode;
            $tablename_sub = "order_product_list_process";
            $delivery_charge = $value->delivery_charge;
            $totalamount_total = 0;
            $commission_total = 0;
            $totalamountparciel = 0;
            $commissionparciel = 0;
            $resulttotal = $this->Main_model->where_names_three_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $paricel_mode, 'deleteid', '0', 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount_total+= $tot->amount + $tot->commission;
                $commission_total+= $tot->commission;
                
                
                    if($tot->modify_qty==0)
                    {
                        $tot->modify_qty=$tot->qty;
                    }
                
                    $totalamountparciel+= $tot->rate * $tot->modify_qty + $tot->commission;
                    $commissionparciel+= $tot->commission;
                    
            }
            if ($paricel_mode == 0) {
                $totalamount = round($totalamount_total + $delivery_charge);
                $commission = $commission_total;
            }
            if ($paricel_mode == 1) {
                $totalamount = round($totalamountparciel + $delivery_charge);
                $commission = $commissionparciel;
            }
            $route_id_base = $value->route_id;
            if ($value->assign_status == $assigen_status) {
                $company_name_company = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name_company = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                if ($assigen_status == '1') {
                    $statusval = "Waiting";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'rescheduling_delivery' => $value->rescheduling_delivery, 'rescheduling_date' => date('d-m-Y', strtotime($value->rescheduling_date)), 'rescheduling_remarks' => $value->rescheduling_remarks, 'name' => $company_name, 'company_name' => $company_name_company, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_data_table_transpot_assign_data_driver_list_limit_return() {
        
        
        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
       
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $assigen_status = $_GET['assaignstates'];
        
        $wheredata=0;
        if($assigen_status==5)
        {
            $wheredata=" AND  order_base IN ('5','8','2')";
            $wheredatas=" AND  a.order_base IN ('5','8','2')";
        }
        else
        {
            $wheredata=" AND  order_base='" . $assigen_status . "'";
            $wheredatas=" AND  a.order_base='" . $assigen_status . "'";
        }
        
         $search = $_GET['search'];

                $where="";
                $wheresearch="";
                if ($search != "") {
                    $wheresearch .= " AND  a.order_no LIKE '%" . $search . "' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%'";
                }
               
        
                $i = 1;
                $array = array();
                $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
                foreach ($resultsales as $valuesales) {
                    $define_driver_id = $valuesales->define_driver_id;
                }
                $resultsub = $this->db->query("SELECT b.route_id FROM driver as a JOIN vehicle as b ON a.vehicle_id=b.id  WHERE a.id='" . $define_driver_id . "' AND a.deleteid=0");
                $resultsubcheck = $resultsub->result();
                foreach ($resultsubcheck as $valuesalesss) {
                    $route_id = $valuesalesss->route_id;
                }
                
                
        
                
                if($this->session->userdata['logged_in']['access'] == '13') 
                {
                   
                    $wheresearch .= "  AND a.driver_id='".$define_driver_id."'";
                    
                    $where= "  AND driver_id='".$define_driver_id."'";
                    
                 
                    
                }
                
        
        
                
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN customers as b ON a.customer=b.id  WHERE a.deleteid='0'  AND a.driver_assign='1'  $wheredatas $wheresearch  ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
        
                
                $query = $this->db->query("SELECT a.*,b.address_id FROM $tablename as a JOIN customers as b ON a.customer=b.id  WHERE a.deleteid='0'  AND a.driver_assign='1'  $wheredatas $wheresearch  ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
        
        
 
        
        
        
        
        
        
        
        
        
        $paricel_mode = 0;
        foreach ($result as $value){
            
            
            
            
            
                $totalamount=0;
                $query_profle_get = $this->db->query("SELECT * FROM sales_return_products  WHERE c_id='".$value->id."'");
                $result_lengeth = $query_profle_get->result();
                foreach ($result_lengeth as $valuess) {
                        $totalamount += round($valuess->qty*$valuess->rate,2);
                }
                    
            
                
           
                $company_name_company = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer);
                foreach ($customers as $csval) {
                    $company_name_company = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                if ($value->address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                
                
                
                
                
                
                
                
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                
                
                
                
                
                
                
                
                
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                if ($value->order_base == '1') {
                    $statusval = "Waiting";
                }
                if ($value->order_base == '4') {
                    $statusval = "Trip Started";
                }
                if ($value->order_base == '5') {
                    $statusval = "Inward";
                }
                
                if ($value->order_base == '6') {
                    $statusval = "Reschedule";
                }
               
            
                
                $array[] = array('no' => $i,
                'id' => $value->id,
                'base_id' => base64_encode($value->id),
                'order_no' => $value->order_no,
                'rescheduling_delivery' => $value->rescheduling_delivery,
                'rescheduling_date' => date('d-m-Y', strtotime($value->rescheduling_date)), 
                'rescheduling_remarks' => $value->rescheduling_remarks,
                'name' => $company_name, 'company_name' => $company_name_company,
                'email' => $email, 'phone' => $phone, 
                'totalamount' => round($totalamount), 
                'reamrks' => $value->reamrks, 
                'sort_id' => $value->sort_id, 
                'vehicle_number' => $vehicle_number, 
                'driver_phone' => $driver_phone,
                'driver_name' => $driver_name, 
                'route_name' => $route_name, 
                'address' => $address, 
                'statusval' => $statusval,
                'assign_status' => $value->order_base,
                'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
           
            $i++;
        }
        
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     public function fetch_data_table_transpot_assign_data_driver_list_limit() {
        
        
        
        $pagenum = $_GET['page'];
        $pagesize = $_GET['size'];
        $offset = ($pagenum - 1) * $pagesize;
       
        if (isset($_GET['page_next'])) {
            $offset = $_GET['page_next'];
        }
        
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $route_id = $_GET['route_id'];
        $assigen_status = $_GET['assaignstates'];
        $search = $_GET['search'];
        
        $wheresearch="";
        if(isset($_GET['gate_status']))
        {
            
        
                    $gate_status = $_GET['gate_status'];
                    if($gate_status==0)
                    {
                        $wheresearch .=" AND a.assign_status='".$assigen_status."' AND a.gate_status='".$gate_status."'";
                    }
                    else
                    {
                        $wheresearch .=" AND a.assign_status>='".$assigen_status."' AND a.gate_status='".$gate_status."'";
                    }
        
        
        
        
        }
        else
        {
                     $wheresearch .=" AND a.assign_status='".$assigen_status."'";
        }
        
        
        
        if ($search != "") {
            $wheresearch .= " AND  a.order_no LIKE '%" . $search . "' OR  b.company_name LIKE '%" . $search . "%' OR  b.phone LIKE '%" . $search . "%'";
        }
        
        
        
       
        
        $i = 1;
        $array = array();
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $this->userid);
        foreach ($resultsales as $valuesales) {
            $define_driver_id = $valuesales->define_driver_id;
        }
        $resultsub = $this->db->query("SELECT b.route_id FROM driver as a JOIN vehicle as b ON a.vehicle_id=b.id  WHERE a.id='" . $define_driver_id . "' AND a.deleteid=0");
        $resultsubcheck = $resultsub->result();
        foreach ($resultsubcheck as $valuesalesss) {
            $route_id = $valuesalesss->route_id;
        }
        if ($this->session->userdata['logged_in']['access'] != '13') {
           
           
         
            
            
            $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN customers as b ON a.customer_id=b.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  AND a.selforder=0  $wheresearch  ORDER BY a.id DESC ");
            $resultcount = $querycount->result();
            $count=count($resultcount);
           
           
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a JOIN customers as b ON a.customer_id=b.id WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  AND a.selforder=0   $wheresearch  ORDER BY a.id DESC LIMIT $offset, $pagesize");
            $result = $query->result();
           
            
            
            
            
        }
        else
        {
            
            
              
                
                $querycount = $this->db->query("SELECT a.id FROM $tablename as a JOIN customers as b ON a.customer_id=b.id  WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  AND a.selforder=0  AND a.driver_id='".$define_driver_id."' $wheresearch  ORDER BY a.id DESC");
                $resultcount = $querycount->result();
                $count=count($resultcount);
           
                
                $query = $this->db->query("SELECT a.* FROM $tablename as a JOIN customers as b ON a.customer_id=b.id  WHERE a.deleteid='0' AND a.order_base='1' AND a.finance_status='" . $order_base . "'  AND a.selforder=0  AND a.driver_id='".$define_driver_id."' $wheresearch  ORDER BY a.id DESC LIMIT $offset, $pagesize");
                $result = $query->result();
           
            
            
            
        }
        $paricel_mode = 0;
        foreach ($result as $value){
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        $denomination_total=0;    
        $result_d = $this->db->query("SELECT sum(c1rs) as c1rs,sum(c2rs) as c2rs,sum(c5rs) as c5rs,sum(c10rs) as c10rs,sum(c20rs) as c20rs,sum(c50rs) as c50rs,sum(c100rs) as c100rs,sum(c200rs) as c200rs,sum(c500rs) as c500rs,sum(c2000rs) as c2000rs  FROM denomination WHERE  order_id='" . $value->id . "'   GROUP BY order_id ORDER BY id DESC");
        $result_d = $result_d->result();
        $collecttion_id = $value->collecttion_id;
        $return_excess = $value->return_excess;
      
        $i = 1;
        foreach ($result_d as $value_d) {
            
            
            if($value_d->c1rs=='')
            {
                $value_d->c1rs=0;
            }
            
            if($value_d->c2rs=='')
            {
                $value_d->c2rs=0;
            }
            
            if($value_d->c5rs=='')
            {
                $value_d->c5rs=0;
            }
            
            if($value_d->c10rs=='')
            {
                $value_d->c10rs=0;
            }
            
            
            
            if($value_d->c20rs=='')
            {
                $value_d->c20rs=0;
            }
            
             if($value_d->c50rs=='')
            {
                $value_d->c50rs=0;
            }
            
            
            if($value_d->c100rs=='')
            {
                $value_d->c100rs=0;
            }
            
            if($value_d->c200rs=='')
            {
                $value_d->c200rs=0;
            }
            
            
              if($value_d->c500rs=='')
            {
                $value_d->c500rs=0;
            }
            
            
              if($value_d->c2000rs=='')
            {
                $value_d->c2000rs=0;
            }
            
            
           
            
            $denomination_total = 1 * $value_d->c1rs + 2 * $value_d->c2rs + 5 * $value_d->c5rs + 10 * $value_d->c10rs + 20 * $value_d->c20rs + 50 * $value_d->c50rs + 100 * $value_d->c100rs + 200 * $value_d->c200rs + 500 * $value_d->c500rs + 2000 * $value_d->c2000rs;
           
            if ($collecttion_id == 1) {
                $denomination_total = $denomination_total - $return_excess;
            }
            
            
            

        }

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            $paricel_mode = $value->paricel_mode;
            $tablename_sub = "order_product_list_process";
            $delivery_charge = $value->delivery_charge;
            $totalamount_total = 0;
            $commission_total = 0;
            $totalamountparciel = 0;
            $commissionparciel = 0;
            
           
            if($assigen_status==12)
            {
                $resulttotal = $this->Main_model->where_names_three_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $paricel_mode, 'deleteid', '0', 'id', 'DESC');
             
            }
            else
            {

                $resulttotal = $this->Main_model->where_names_five_order_by_new($tablename_sub, 'order_id', $value->id, 'paricel_mode', $paricel_mode, 'deleteid', '0','loadstatus_by_cate', '0','loadstatus', '1', 'id', 'DESC');
            

            }
            
        
            
            $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM $tablename_sub  WHERE order_id='".$value->id."'");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
            
            
            
            
            $loadamount=0;
            foreach ($resulttotal as $tot) {
                $totalamount_total+= $tot->amount + $tot->commission;
                $commission_total+= $tot->commission;
                
                
                if($tot->modify_qty==0)
                {
                        $tot->modify_qty=$tot->qty;
                }
                
                $totalamountparciel+= $tot->rate * $tot->modify_qty + $tot->commission;
                $commissionparciel+= $tot->commission;
                
                
              
            
                
                
                
                if($assigen_status==4 || $assigen_status==5)
                {
                
                $resultload = $this->Main_model->where_names_two_order_by('sales_load_products', 'order_product_id', $tot->id, 'delivered_products', 1, 'id', 'DESC');
           
                }
                else
                {
                  $resultload = $this->Main_model->where_names_two_order_by('sales_load_products', 'order_product_id', $tot->id, 'delivered_products', 0, 'id', 'DESC');
           
                }
                
                
                
                 
                 
                 
            
                 foreach ($resultload as $valueload)
                 {
                    if($valueload->loadstatus==1)
                    {
                       
                        $loadamount+= $valueload->amount;
                        
                    }
                    
    
                 }
                    
                
           
                
                
            }
            
            
           
            
            if ($paricel_mode == 0) {
                $totalamount = round($totalamount_total + $delivery_charge);
                $commission = $commission_total;
            }
            if ($paricel_mode == 1) {
                $totalamount = round($totalamountparciel + $delivery_charge);
                $commission = $commissionparciel;
            }
            $route_id_base = $value->route_id;
           
                $company_name_company = "";
                $email = "";
                $phone = "";
                $address = "";
                $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
                foreach ($customers as $csval) {
                    $company_name_company = $csval->company_name;
                    $email = $csval->email;
                    $phone = $csval->phone;
                    $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
                }
                
                
                $sales_name="";
                $sales_phone="";
                 $sales_person = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
                foreach ($sales_person as $sales) {
                    $sales_name = $sales->name;
                    $sales_phone = $sales->phone;
                    
                }
                
                
                if ($value->customer_address_id != "") {
                    $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                    foreach ($customers_adddrss as $customers_adddrss_v) {
                        $company_name = $customers_adddrss_v->name;
                        $phone = $customers_adddrss_v->phone;
                        $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                    }
                }
                $vehicle_number = "";
                $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
                foreach ($vehicle as $vehicle_v) {
                    $vehicle_number = $vehicle_v->vehicle_number;
                    $vehicle_id = $vehicle_v->id;
                }
                $route_name = "";
                $route = $this->Main_model->where_names('route', 'id', $value->route_id);
                foreach ($route as $route_v) {
                    $route_name = $route_v->name;
                }
                $driver_name = "";
                $driver_phone = "";
                $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
                foreach ($driver as $driver_v) {
                    $driver_name = $driver_v->name;
                    $driver_phone = $driver_v->phone;
                }
                if ($assigen_status == '1') {
                    $statusval = "Waiting";
                }
                if ($assigen_status == '2') {
                    $statusval = "Trip Started";
                }
                if ($assigen_status == '3') {
                    $statusval = "Delivered";
                }
                $minisroundoff = $value->roundoff;
                $roundoffstatus = $value->roundoffstatus;
                $discount = $value->discount;
                if ($roundoffstatus == 1) {
                    $discountfulltotal = $totalamount - $discount + $minisroundoff;
                } else {
                    $discountfulltotal = $totalamount - $discount - $minisroundoff;
                }
              
            
                if($loadamount!=0)
                {
                   
                   
                    if($roundoffstatus == 1) 
                    {
                        
                         $fullloadamount=$loadamount+$delivery_charge;
                        $discountfulltotal = $fullloadamount - $discount + $minisroundoff;
                    } 
                    else 
                    {   
                        $fullloadamount=$loadamount+$delivery_charge;
                        $discountfulltotal = $fullloadamount - $discount - $minisroundoff;
                    }
                   
                   
                }
                
               
                
                $array[] = array('no' => $i,'sales_phone'=>$sales_phone,'sales_name'=>$sales_name,'denomination_total'=>$denomination_total,'weight'=>$weight,'gate_status'=>$value->gate_status,'start_reading'=>$value->start_reading,'km_reading_end'=>$value->km_reading_end,'gate_weight'=>$value->gate_weight,'payment_mode'=>$value->payment_mode,'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'lengeth' => $lengeth, 'rescheduling_delivery' => $value->rescheduling_delivery, 'rescheduling_date' => date('d-m-Y', strtotime($value->rescheduling_date)), 'rescheduling_remarks' => $value->rescheduling_remarks, 'name' => $company_name, 'company_name' => $company_name_company, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
           
            $i++;
        }
        
        $myData = array('PortalActivity' => $array, 'totalCount' => $count);
        echo json_encode($myData);
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchCustomerdetails() {
        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $order_id = $form_data->id;
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names($tablename, 'id', $order_id);
        foreach ($result as $value) {
            $tablename_sub = "order_product_list_process";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            if ($route_id == 0) {
                $route_id_base = 0;
            } else {
                $route_id_base = $value->route_id;
            }
            
            
            
            
          
            
            $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM $tablename_sub  WHERE order_id='".$value->id."'");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
            $lengeth=round($lengeth,2);
            
            
            
            
            $company_name_data = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->customer_address_id != "") {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            
            
                $sales_name="";
                $sales_phone="";
                 $sales_person = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
                foreach ($sales_person as $sales) {
                    $sales_name = $sales->name;
                    $sales_phone = $sales->phone;
                    
                }
                
            
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            if ($assigen_status == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status == '3') {
                $statusval = "Delivered";
            }
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Own Scope";
            }
            if ($value->payment_image != "") {
                $payment_image = base_url() . $value->payment_image;
            } else {
                $payment_image = 0;
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $array = array('no' => $i, 'sales_phone' => $sales_phone, 'sales_name' => $sales_name,'customer_id' => $value->customer_id,'id' => $value->id, 'base_id' => base64_encode($value->id),'lengeth' => $lengeth, 'order_no' => $value->order_no, 'name' => $company_name, 'company_name_data' => $company_name_data, 'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 'payment_mode' => $value->payment_mode, 'payment_image' => $payment_image, 'reference_no' => $value->reference_no, 'delivery_mode' => $value->delivery_mode, 'delivery_status' => $value->delivery_status, 'delivery_status_name' => $delivery_status, 'delivery_charge' => round($value->delivery_charge, 4), 'totalamount' => round($discountfulltotal + $value->delivery_charge, 4), 'commission' => round($commission, 4), 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status, 'order_base' => $value->finance_status,'assign_date' => date('d-m-Y', strtotime($value->assign_date)) . ' ' . $value->assign_time, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date)) . ' ' . $value->trip_start_time,);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchCustomerdetails_return() {
        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $order_id = $form_data->id;
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names($tablename, 'id', $order_id);
        foreach ($result as $value) {
            $tablename_sub = "sales_return_products";
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'c_id', $value->id, 'deleteid', 0, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
               $totalamount = round($tot->qty*$tot->rate,2);
            }
           
            
            
            
            
            $company_name_data = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer);
            foreach ($customers as $csval) {
                $company_name_data = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            
            
            
            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            
            
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'id', $value->vehicle_id);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            
            if ($assigen_status == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status == '3') {
                $statusval = "Delivered";
            }
           
          
            $array = array('no' => $i, 'customer_id' => $value->customer,'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no,
            'name' => $company_name_data, 'company_name_data' => $company_name_data, 
            'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 
            'totalamount' => round($totalamount, 4), 
            'sort_id' => $value->sort_id,
            'lengeth'=>0,
            'vehicle_number' => $vehicle_number, 
            'driver_phone' => $driver_phone, 'driver_name' => $driver_name,
            'route_name' => $route_name, 'address' => $address, 
            'statusval' => $statusval, 'assign_status' => $value->driver_assign, 'order_base' => $value->order_base,'assign_date' => date('d-m-Y', strtotime($value->assign_date)) . ' ' . $value->assign_time, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date)) . ' ' . $value->trip_start_time,);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetchInvoiceloop() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->id;
        $array = array();
        $resultsub = $this->db->query("SELECT address_id,order_id FROM $tablename_sub  WHERE order_id='" . $order_id . "' AND deleteid=0 GROUP BY address_id");
        $resultsubcheck = $resultsub->result();
        $i = 1;
        foreach ($resultsubcheck as $value) {
            $array[] = array('no' => $i, 'address_id' => $value->address_id, 'order_id' => $value->order_id, 'base_order_id' => base64_encode($value->order_id));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerdetails_view_order() {
        $route_id = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->id;
        $i = 1;
        $array = array();
        $result = $this->Main_model->where_names($tablename, 'id', $order_id);
        foreach ($result as $value) {
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            if ($route_id == 0) {
                $route_id_base = 0;
            } else {
                $route_id_base = $value->route_id;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $map = $csval->google_map_link;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->customer_address_id != "") {
                $customers_adddrss = $this->Main_model->where_names('customers_adddrss', 'id', $value->customer_address_id);
                foreach ($customers_adddrss as $customers_adddrss_v) {
                    $company_name = $customers_adddrss_v->name;
                    $phone = $customers_adddrss_v->phone;
                    $map = $customers_adddrss_v->google_map_link;
                    $address = $customers_adddrss_v->address1 . ' ' . $customers_adddrss_v->address2 . ' ' . $customers_adddrss_v->landmark . ' ' . $customers_adddrss_v->zone . ' ' . $customers_adddrss_v->pincode. ' ' . $customers_adddrss_v->state;
                }
            }
            $lat = "";
            $laog = "";
            if ($map != "") {
                $mapset = explode(',', $map);
                $lat = $mapset[0];
                $laog = $mapset[1];
            }
            $vehicle_number = "";
            $vehicle = $this->Main_model->where_names('vehicle', 'route_id', $value->route_id);
            foreach ($vehicle as $vehicle_v) {
                $vehicle_number = $vehicle_v->vehicle_number;
                $vehicle_id = $vehicle_v->id;
            }
            $route_name = "";
            $route = $this->Main_model->where_names('route', 'id', $value->route_id);
            foreach ($route as $route_v) {
                $route_name = $route_v->name;
            }
            $driver_name = "";
            $driver_phone = "";
            $driver = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id);
            foreach ($vehicle as $driver_v) {
                $driver_name = $driver_v->name;
                $driver_phone = $driver_v->phone;
            }
            if ($assigen_status == '1') {
                $statusval = "Waiting";
            }
            if ($assigen_status == '2') {
                $statusval = "Trip Started";
            }
            if ($assigen_status == '3') {
                $statusval = "Delivered";
            }
            if ($value->delivery_status == 1) {
                $delivery_status = "Client Scope";
            } else {
                $delivery_status = "Own Scope";
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $array = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'map' => $map, 'lat' => $lat, 'laog' => $laog, 'payment_mode' => $value->payment_mode, 'delivery_status' => $value->delivery_status, 'delivery_mode' => $value->delivery_mode, 'delivery_status_name' => $delivery_status, 'delivery_charge' => round($value->delivery_charge, 4), 'totalamount' => round($discountfulltotal + $value->delivery_charge, 4), 'commission' => round($commission, 4), 'reason' => $value->reason, 'sort_id' => $value->sort_id, 'vehicle_number' => $vehicle_number, 'driver_phone' => $driver_phone, 'driver_name' => $driver_name, 'route_name' => $route_name, 'address' => $address, 'statusval' => $statusval, 'assign_status' => $value->assign_status, 'order_base' => $value->finance_status, 'create_date' => date('d-m-Y', strtotime($value->trip_start_date)) . ' ' . $value->trip_start_time,);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    public function fetch_single_data_total() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotalgst = 0;
        $amounttotal_with_out_commission = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $result = $this->Main_model->where_names_two_order_by($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($result as $value) {
            $amounttotal+= round($value->rate * $value->qty + $value->commission, 4);
            $amounttotal_with_out_commission+= round($value->rate * $value->qty, 4);
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $amounttotalgst+= round($value->rate * $value->qty * $value->gst / 100);
            $commission+= $value->commission;
            $fullqty+= $value->qty;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $user_id = $valuedis->user_id;
            $user_id = $valuedis->user_id;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $paricel_mode = $valuedis->paricel_mode;
            $order_base = $valuedis->order_base;
            $reason = $valuedis->reason;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        $roundoff = round($amounttotal);
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }
        $array = array('order_no_id' => $order_no,'order_base'=>$order_base,'reason'=>$reason, 'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'paricel_mode' => $paricel_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal, 4), 'discountfulltotal' => $discountfulltotal, 'totalitems' => count($result), 'gsttotal' => $amounttotalgst, 'discount' => round($discount), 'commission' => round($commission), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 4), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 4), 'NOS' => round($nos, 4), 'UNIT' => round($unit, 4), 'FACT' => round($fact, 4), 'fullqty' => round($fullqty, 4));
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_production_details() {
       
       
       
        $result = $this->db->query("SELECT a.create_date,b.production_start,a.reason,a.create_time,b.product_id,b.order_id,b.product_name,b.categories_id,b.categories_name FROM `orders_process` as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE  a.order_base = '1' AND b.deleteid = '0' AND b.product_id='".$_GET['product_id']."' GROUP BY b.product_id ORDER BY b.product_id ASC");
        $result = $result->result();
       
       
       
        foreach ($result as $value) {
          
            $order_id=$value->order_id;
            $order_no= $value->order_no;
            $production_assign=$value->production_start;
            $create_date = date('d-m-Y', strtotime($value->create_date));
            $create_time = $value->create_time;
           
        }
       
       
        $array = array('order_no_id' => $order_no,
        'order_id'=>$order_id,
        'reason'=>'Yet To Start',
        'order_no' => $order_no,
        'production_assign' => $production_assign,
        'create_date' => $create_date,
        'create_time' => $create_time ); 
       
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      public function fetch_single_data_totaldel_view_base() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        
        $result = $this->Main_model->where_names_two_order_by($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($result as $value) {
            if ($value->paricel_mode == 1) {
                
                if($value->modify_qty==0)
                {
                    $value->modify_qty=$value->qty;
                }
                
                $amounttotals+= round($value->rate * $value->modify_qty + $value->commission, 4);
                $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty, 4);
                $fullqtys+= $value->modify_qty;
            }
            
            
            $amounttotal+= round($value->rate * $value->qty + $value->commission, 4);
            $amounttotal_with_out_commission+= round($value->rate * $value->qty, 4);
            $fullqty+= $value->qty;
            $amounttotalgst+= round($value->rate * $value->qty * $value->gst / 100, 4);
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        
        
        
        
        
        
        
        
        
        
            $lengeth=0;
            $weight=0;
            $lengeth_array=array(0);
            $query_profle_get = $this->db->query("SELECT profile as profile FROM $tablename  WHERE order_id='".$value->id."'");
            $result_lengeth = $query_profle_get->result();
            foreach ($result_lengeth as $valuess) {
                $lengeth_array[] = $valuess->profile;
            }
            
            $lengeth=max($lengeth_array);
           $lengeth=round($lengeth,2);
        
        
        
        
     
        
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $paricel_mode = $valuedis->paricel_mode;
            $delivery_mode = $valuedis->delivery_mode;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $start_reading = $valuedis->start_reading;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        if ($paricel_mode == 1) {
            $amounttotal = $amounttotals;
            $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
            $fullqty = $fullqtys;
        }
        $roundoff = round($amounttotal);
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }
        
        
        
        
        
        $array = array('order_no_id' => $order_no, 'user_id' => $user_id, 'salesphone' => $salesphone,'lengeth' => $lengeth, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal), 'discountfulltotal' => $discountfulltotal, 'totalitems' => count($result), 'discount' => round($discount), 'gsttotal' => $amounttotalgst, 'commission' => round($commission), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 4), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 4), 'NOS' => round($nos, 4), 'UNIT' => round($unit, 4), 'FACT' => round($fact, 4), 'fullqty' => round($fullqty, 4));
        echo json_encode($array);
    }
    
    
    public function fetch_single_data_totaldel() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $loadamount=0;
        $unbilledloadamount=0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        
        
         $driver_pickip=0;
        
         if(isset($form_data->driver_pickip))
         {
             $driver_pickip = $form_data->driver_pickip;
             
         }
        
        
        
        if($driver_pickip==0)
        {
            
         $result = $this->Main_model->where_names_three_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','loadstatus_by_cate', '0', 'id', 'DESC');
         
        }
        else
        {
        
        $result = $this->Main_model->where_names_three_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','delivery_status', '0', 'id', 'DESC');
       
        }
        
       
       
       
        foreach ($result as $value)
        {
            if ($value->paricel_mode == 1) {
                
                if($value->modify_qty==0)
                {
                    $value->modify_qty=$value->qty;
                }
                
                $amounttotals+= round($value->rate * $value->modify_qty + $value->commission, 4);
                $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty, 4);
                $fullqtys+= $value->modify_qty;
            }
            
            
            $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
            $loadamount=0;
            foreach ($resultload as $valueload)
            {
                if($valueload->loadstatus==1)
                {
                    $loadamount+= $valueload->amount;
                }
                
                if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                {
                    $unbilledloadamount+= $valueload->amount;
                }
                
            }
            
            
            $amounttotal+= round($value->rate * $value->qty + $value->commission, 4);
            $amounttotal_with_out_commission+= round($value->rate * $value->qty, 4);
            $fullqty+= $value->qty;
            $amounttotalgst+= round($value->rate * $value->qty * $value->gst / 100, 4);
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        
     
        
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $paricel_mode = $valuedis->paricel_mode;
            $delivery_mode = $valuedis->delivery_mode;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $start_reading = $valuedis->start_reading;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        if ($paricel_mode == 1) {
            $amounttotal = $amounttotals;
            $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
            $fullqty = $fullqtys;
        }
        $roundoff = round($amounttotal);
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }
        
        
           if($loadamount==0)
           {
                $loadtotalamount=round($discountfulltotal);
           }
           else
           {    
               
                if($roundoffstatus == 1) 
                {
                    $fullloaded = $loadamount-$discount+$minisroundoff;
                } else {
                    $fullloaded = $loadamount-$discount-$minisroundoff;
                }
                
                $loadtotalamount=$discountfulltotal-$fullloaded;
                
               
                
           }
           
                if($roundoffstatus == 1) 
                {
                    $unbilledloadamount = $unbilledloadamount-$discount+$minisroundoff;
                } else {
                    $unbilledloadamount = $unbilledloadamount-$discount-$minisroundoff;
                }
         
         
         
         
       
          $array = array('order_no_id' => $order_no, 'unbilledloadamount' => round($unbilledloadamount),'loadtotalamount' => round($loadtotalamount),'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal), 'discountfulltotal' => $discountfulltotal, 'totalitems' => count($result), 'discount' => round($discount), 'gsttotal' => $amounttotalgst, 'commission' => round($commission), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 4), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 4), 'NOS' => round($nos, 4), 'UNIT' => round($unit, 4), 'FACT' => round($fact, 4), 'fullqty' => round($fullqty, 4));
          echo json_encode($array);
    }
    
    
    
    
    public function fetch_single_data_totaldel_driver() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $loadamount=0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $result = $this->Main_model->where_names_four_order_by_new($tablename, 'order_id', $_GET['order_id'], 'deleteid', '0','delivery_status', '0','loadstatus', '1', 'id', 'DESC');
        foreach ($result as $value)
        {
            if ($value->paricel_mode == 1) {
                
                if($value->modify_qty==0)
                {
                    $value->modify_qty=$value->qty;
                }
                
                $amounttotals+= round($value->rate * $value->modify_qty + $value->commission, 4);
                $amounttotal_with_out_commissions+= round($value->rate * $value->modify_qty, 4);
                $fullqtys+= $value->modify_qty;
            }
            
            
            $resultload = $this->Main_model->where_names('sales_load_products', 'order_product_id', $value->id);
            
            foreach ($resultload as $valueload)
            {
                if($valueload->loadstatus==1 && $valueload->delivered_products==0)
                {
                    $loadamount+= $valueload->amount;
                }
                
            }
            
            
            $amounttotal+= round($value->rate * $value->qty + $value->commission, 4);
            $amounttotal_with_out_commission+= round($value->rate * $value->qty, 4);
            $fullqty+= $value->qty;
            $amounttotalgst+= round($value->rate * $value->qty * $value->gst / 100, 4);
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        
     
        
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $production_assign = $valuedis->production_assign;
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $paricel_mode = $valuedis->paricel_mode;
            $delivery_mode = $valuedis->delivery_mode;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
            $start_reading = $valuedis->start_reading;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        if ($paricel_mode == 1) {
            $amounttotal = $amounttotals;
            $amounttotal_with_out_commission = $amounttotal_with_out_commissions;
            $fullqty = $fullqtys;
        }
        $roundoff = round($amounttotal);
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }
        
        
                $loadtotalamount=0;
                 if($loadamount!=0)
                {
                   
                   
                    if ($roundoffstatus == 1) 
                    {
                        $discountfulltotal = $loadamount - $discount + $minisroundoff;
                        $loadtotalamount=$loadamount-$discount+ $minisroundoff;
                    } 
                    else 
                    {
                        $discountfulltotal = $loadamount - $discount - $minisroundoff;
                        $loadtotalamount=$loadamount-$discount- $minisroundoff;
                    }
                   
                   
                }
                
             
        
        
        
        
        
        $array = array('order_no_id' => $order_no, 'loadtotalamount' => round($loadtotalamount),'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 'paricel_mode' => $paricel_mode, 'delivery_mode' => $delivery_mode, 'production_assign' => $production_assign, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal), 'discountfulltotal' => round($discountfulltotal), 'totalitems' => count($result), 'discount' => round($discount), 'gsttotal' => $amounttotalgst, 'commission' => round($commission), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 4), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 4), 'NOS' => round($nos, 4), 'UNIT' => round($unit, 4), 'FACT' => round($fact, 4), 'fullqty' => round($fullqty, 4));
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_single_data_totaldel_driver_return() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $amounttotal_with_out_commissions = 0;
        $amounttotals = 0;
        $fullqtys = 0;
        $amounttotalgst = 0;
        $loadamount=0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        
     
        
        $start_reading = "";
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            
           
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $start_reading = $valuedis->start_reading;
        }
        
        
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        
        
        
        $array = array('order_no_id' => $order_no,
        'user_id' => $user_id,
        'salesphone' => $salesphone, 'salesphone2' => $salesphone2,
        'salesname' => $salesname, 'reason' => $reason, 'start_reading' => $start_reading, 
         'create_date' => $create_date, 'create_time' => $create_time);
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function fetch_single_data_total_vendor() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $discount = 0;
        $fullqty = 0;
        $nos = 0;
        $unit = 0;
        $fact = 0;
        $commission = 0;
        $amounttotal_with_out_commission = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $convert = $form_data->convert;
        $result = $this->db->query("SELECT a.* FROM $tablename as a JOIN product_list as b ON b.id=a.product_id WHERE a.order_id='" . $_GET['order_id'] . "' AND b.link_to_purchase=1 AND a.deleteid=0 ORDER BY a.sort_id ASC");
        $result = $result->result();
        foreach ($result as $value) {
            $amounttotal+= round($value->rate * $value->qty + $value->commission, 4);
            $amounttotal_with_out_commission+= round($value->rate * $value->qty, 4);
            $Meter_to_Sqr_feet+= $value->Meter_to_Sqr_feet;
            $Sqr_feet_to_Meter+= $value->Sqr_feet_to_Meter;
            $commission+= $value->commission;
            $fullqty+= $value->qty;
            $nos+= $value->nos;
            $unit+= $value->unit;
            $fact+= $value->fact;
        }
        $resultdis = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        foreach ($resultdis as $valuedis) {
            $discount = $valuedis->discount;
            $order_no = $valuedis->order_no;
            $user_id = $valuedis->user_id;
            $minisroundoff = $valuedis->roundoff;
            $roundoffstatus = $valuedis->roundoffstatus;
            $create_date = date('d/m/Y', strtotime($valuedis->create_date));
            $create_time = $valuedis->create_time;
            $reason = $valuedis->reason;
        }
        if ($minisroundoff == '') {
            $minisroundoff = 0;
        }
        $salesphone = "";
        $salesname = "";
        $resultsales = $this->Main_model->where_names('admin_users', 'id', $user_id);
        foreach ($resultsales as $valuesales) {
            $salesphone = $valuesales->phone;
            $salesphone2 = $valuesales->phone2;
            $salesname = $valuesales->name;
        }
        $roundoff = round($amounttotal);
        if ($roundoffstatus == 1) {
            $discountfulltotal = $roundoff - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $roundoff - $discount - $minisroundoff;
        }
        $array = array('order_no_id' => $order_no, 'user_id' => $user_id, 'salesphone' => $salesphone, 'salesphone2' => $salesphone2, 'salesname' => $salesname, 'reason' => $reason, 'create_date' => $create_date, 'create_time' => $create_time, 'minisroundoff' => $minisroundoff, 'fulltotal' => round($discountfulltotal, 4), 'discountfulltotal' => $discountfulltotal, 'totalitems' => count($result), 'discount' => round($discount), 'commission' => round($commission), 'amounttotal_with_out_commission' => round($amounttotal_with_out_commission, 4), 'Meter_to_Sqr_feet' => round($Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($Sqr_feet_to_Meter, 4), 'NOS' => round($nos, 4), 'UNIT' => round($unit, 4), 'FACT' => round($fact, 4), 'fullqty' => round($fullqty, 4));
        echo json_encode($array);
    }
    public function fetch_single_data() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $id = $form_data->order_product_id;
        $result = $this->Main_model->where_names($tablename, 'id', $id);
        foreach ($result as $value) {
            $output['id'] = $value->id;
            $output['sub_product_id'] = $value->sub_product_id;
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            $output['reference_image'] = base_url() . $value->reference_image;
            $output['imagestatus'] = $imagestatus;
            $output['value_id'] = $value->value_id;
        }
        echo json_encode($output);
    }
    public function fetchcustomerorderdata() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $customer_id = 0;
        $result = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        $approx = 0;
        $order_base = 0;
        $commission_check = 0;
        $packaging = 0;
        $print = 0;
        $others = 0;
        $gst_check = 0;
        $competitorname = "";
        $details = "";
        foreach ($result as $valuec) {
            $customer_id = $valuec->customer_id;
            $order_base = $valuec->order_base;
            $paricel_mode= $valuec->paricel_mode;
            $finance_status = $valuec->finance_status;
            $commission_check = $valuec->commission_check;
            $gst_check = $valuec->gst_check;
            $packaging = $valuec->packaging;
            $print = $valuec->print;
            $others = $valuec->others;
            $competitorname = $valuec->competitorname;
            $details = $valuec->details;
            $customer_address_id = $valuec->customer_address_id;
            if ($valuec->approx != "") {
                $approx = $valuec->approx;
            }
        }
        $delivery_address = "";
        $de_address = $this->Main_model->where_names('customers_adddrss', 'id', $customer_address_id);
        foreach ($de_address as $valuedd) {
            $delivery_address = $valuedd->address1 . ' ' . $valuedd->address2 . ' ' . $valuedd->zone . ' ' . $valuedd->city . ' ' . $valuedd->pincode . ' ' . $valuedd->state;
        }
        $fulltotal = 0;
        $resultorder = $this->db->query("SELECT SUM(b.commission) as total_commission,SUM(b.amount) as total_amount,SUM(a.discount) as total_discount FROM orders_process as a JOIN order_product_list_process as b ON a.id=b.order_id WHERE a.customer_id='" . $customer_id . "'  AND a.finance_status='5'  AND b.deleteid=0 AND a.deleteid=0 AND a.order_base=1");
        $resultorder = $resultorder->result();
        foreach ($resultorder as $valueorder) {
            $total_amount = $valueorder->total_amount + $valueorder->total_commission;
            $total_discount = $valueorder->total_discount;
            $fulltotal = $total_amount - $total_discount;
        }
        $output = array();
        $resultcc = $this->Main_model->where_names('customers', 'id', $customer_id);
        foreach ($resultcc as $value) {
            $output['id'] = $value->id;
            $output['customer_id'] = $customer_id;
            $output['name'] = $value->name;
            $output['company_name'] = $value->company_name;
            $output['email'] = $value->email;
            $output['phone'] = $value->phone;
            $output['gst'] = $value->gst;
            $output['pin'] = $value->pin;
            $output['approx'] = $approx;
            $output['address1'] = $value->address1;
            $output['address2'] = $value->address2;
            if ($customer_address_id != '') {
                $output['delivery_address'] = $delivery_address;
            } else {
                $output['delivery_address'] = $value->address1 . ' ' . $value->address2 . ' ' . $value->zone . ' ' . $value->city . ' ' . $value->pincode . ' ' . $value->state;
            }
            $output['pincode'] = $value->pincode;
            $output['landmark'] = $value->landmark;
            $output['locality'] = $value->locality;
            $output['city'] = $value->city;
            $output['state'] = $value->state;
            $output['sales_group'] = $value->sales_group;
            $output['landline'] = $value->landline;
            $output['order_base'] = $order_base;
            $output['paricel_mode'] = $paricel_mode;
            
            $output['finance_status'] = $finance_status;
            $output['commission_check'] = $commission_check;
            $output['gst_check'] = $gst_check;
            $output['packaging'] = $packaging;
            $output['print'] = $print;
            $output['others'] = $others;
            $output['competitorname'] = $competitorname;
            $output['details'] = $details;
            $localityname = "";
            $resultlocality = $this->Main_model->where_names('locality', 'id', $value->locality);
            foreach ($resultlocality as $vl) {
                $localityname = $vl->name;
            }
            $user_group_name = '';
            $user_group = $this->Main_model->where_names('sales_group', 'id', $value->sales_group);
            foreach ($user_group as $row) {
                $user_group_name = $row->name;
            }
            $output['address'] = $value->address1 . ' , ' . $value->address2 . ' ' . $value->landmark . ' , ' . $localityname . ' , ' . $value->pincode;
            $output['sales_group_name'] = $user_group_name;
            $output['zone'] = $value->zone;
            $output['feedback_details'] = $value->feedback_details;
            $output['credit_limit'] = $value->credit_limit . ' Rs';
            $output['credit_period'] = $value->credit_period;
            $output['ratings'] = $value->ratings;
            $output['locality_name'] = $localityname;
            
                      
                        
                        if($value->credit_limit>0)
                        {
                            
                       
                                
                                $useage = 125 / $value->credit_limit * 100;
                                if (is_nan($useage) == 1) {
                                    $useage = 0;
                                }
                                if ($useage > 100) {
                                    $useage = 100;
                                }
                        
                        }
                        else
                        {
                            $useage = 0;
                        }
            
            $output['useage'] = round($useage, 1);
            $output['fulltotal_usage'] = round($fulltotal, 1) . ' Rs';
            if ($value->ratings == "") {
                $output['ratings'] = 0;
            } else {
                $output['ratings'] = $value->ratings;
            }
            $output['feedback_sub'] = $value->feedback_sub;
        }
        echo json_encode($output);
    }
    public function fetchCustomerorderdelevieryaddress() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $customer_id = 0;
        $result = $this->Main_model->where_names_two_order_by($tablenamemain, 'id', $_GET['order_id'], 'deleteid', '0', 'id', 'DESC');
        $order_base = 0;
        foreach ($result as $valuec) {
            $customer_id = $valuec->customer_id;
            $order_base = $valuec->order_base;
            $customer_address_id = $valuec->customer_address_id;
        }
        
        
        if($customer_id==0)
        {
            $customer_id='ASD000';
        }
        
        $result = $this->Main_model->where_names('customers_adddrss', 'customer_id', $customer_id);
        $i = 1;
        $array = array();
        foreach ($result as $value) {
            if ($value->deleteid == 0) {
                $array[] = array('no' => $i, 'id' => $value->id, 'phone' => $value->phone, 'name' => $value->name, 'address' => $value->address1 . ' ' . $value->address2 . ' ' . $value->landmark . ' ' . $value->zone . '-' . $value->pincode . ' ' . $value->city . ' ' . $value->state, 'city' => $value->city, 'state' => $value->state, 'google_map_link' => $value->google_map_link);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchpricelist() {
        $form_data = json_decode(file_get_contents("php://input"));
        $result = $this->Main_model->where_names('competitor_price_list', 'product_id', $form_data->product_id);
        $i = 1;
        $array = array();
        foreach ($result as $value) {
            if ($value->deleteid == 0) {
                $array[] = array('no' => $i, 'sqft' => $value->sqft, 'price' => $value->price, 'vendor_name' => $value->vendor_name, 'updated_by' => $value->updated_by);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function addresspoint() {
        $amounttotal = 0;
        $Meter_to_Sqr_feet = 0;
        $Sqr_feet_to_Meter = 0;
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename = $form_data->tablename_sub;
        $datass['get_id'] = $form_data->order_id;
        $datass['customer_address_id'] = $form_data->address_id;
        $locality = 0;
        $laoclatset = $this->Main_model->where_names('customers_adddrss', 'id', $form_data->address_id);
        foreach ($laoclatset as $lolval) {
            $locality = $lolval->locality;
        }
        $route_id = 0;
        $routeset = $this->Main_model->where_names('locality', 'id', $locality);
        foreach ($routeset as $routesetval) {
            $route_id = $routesetval->route_id;
        }
        $datass['route_id'] = $route_id;
        $this->Main_model->update_commen($datass, $tablenamemain);
    }
    public function fetchproduct() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $searchText = $_POST['search'];
        if ($searchText != "") {
            $result = $this->Main_model->where_id_like_and_where('product_list', 'product_name', $searchText, 'deleteid', '0');
            foreach ($result as $value) {
                $array[] = array('id' => $value->id, 'label' => $value->product_name, 'price' => $value->price, 'brand' => $value->brand, 'categories' => $value->categories, 'HSN_SAC' => $value->HSN_SAC, 'uom' => $value->uom);
            }
        }
        echo json_encode($array);
    }
    public function fetchproduct_full() {
        $form_data = json_decode(file_get_contents("php://input"));
        $cateid = $form_data->cateid;
        $array = array();
        if ($cateid == 0) {
            $result = $this->Main_model->where_names('product_list', 'deleteid', '0');
        } else {
            $result = $this->Main_model->where_names_two_order_by('product_list', 'categories_id', $cateid, 'deleteid', '0', 'id', 'ASC');
        }
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name) . '/';
        }
        echo json_encode($array);
    }
    
     public function fetchproduct_full_purchase_name() {
        $form_data = json_decode(file_get_contents("php://input"));
        $cateid = $form_data->cateid;
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'deleteid', '0');
        foreach ($result as $value) {
            
            if($value->purchase_name!='')
            {
                $value->product_name=$value->purchase_name;
            }
            $array[] = trim($value->id.'-'.$value->product_name) . '/';
            
            
        }
        echo json_encode($array);
    }
    public function fetchproduct_full_tile_products() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'categories_id', '26');
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
    public function fetchproduct_full2() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'deleteid', '0');
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
    public function fetchproduct_full2_basecaetgary() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'categories_id', '3');
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
    public function fetchproduct_full2_basecaetgary_3() {
        // $form_data= json_decode(file_get_contents("php://input"));
        $array = array();
        $query = $this->db->query("SELECT product_name FROM `product_list`  WHERE categories_id IN ('3','36','5')");
        $result = $query->result();
        foreach ($result as $value) {
            $array[] = trim($value->id.'-'.$value->product_name);
        }
        echo json_encode($array);
    }
    public function fetchproduct_fullmm() {
        $form_data = json_decode(file_get_contents("php://input"));
        $product_id = $form_data->id;
        $convert = $form_data->convert;
        $array = array();
        $resultpending = $this->Main_model->where_names('tiltes_calulation', 'product_name', $product_id, 'id', 'DESC');
        foreach ($resultpending as $value) {
            
            if($value->deleteid==0)
            {
                
           
            if ($convert == 4) {
                $array[] = array('length_mm' => trim($value->length_mm), 'length_feet' => round($value->length_mm / 304.8, 4), 'product_name' => $value->product_name);
            } elseif ($convert == 5) {
                $array[] = array('length_mm' => trim($value->meter), 'length_feet' => round($value->length_mm / 304.8, 4), 'product_name' => $value->product_name);
            } elseif ($convert == 6) {
                $array[] = array('length_mm' => trim($value->inch), 'length_feet' => round($value->length_mm / 304.8, 4), 'product_name' => $value->product_name);
            } else {
                $array[] = array('length_feet' => $value->length_feet, 'length_mm' => round(trim($value->length_mm) / 304.8, 4), 'product_name' => $value->product_name);
            }
            
            }
            
            
            
        }
        echo json_encode($array);
    }
    public function fetchproduct_fullmm_val() {
        $form_data = json_decode(file_get_contents("php://input"));
        //$product_id = str_replace("/", "", $form_data->id);
        
        
        $product_id= explode('-', $form_data->id);
        $product_id=$product_id[0];
        
        $convert = $form_data->convert;
        $array = array();
        $result = $this->Main_model->where_names('product_list', 'id', $product_id);
        foreach ($result as $values) {
            $product_id = $values->id;
        }
        $resultpending = $this->Main_model->where_names('tiltes_calulation', 'product_name', $product_id);
        foreach ($resultpending as $value) {
            
             if($value->deleteid==0)
            {
                
                
                    if ($convert == 4) {
                        $array[] = array('length_mm' => trim($value->length_mm), 'length_feet' => round($value->length_mm / 304.8, 4), 'product_name' => $value->product_name);
                    } elseif ($convert == 5) {
                        $array[] = array('length_mm' => trim($value->meter), 'length_feet' => round($value->length_mm / 304.8, 4), 'product_name' => $value->product_name);
                    } elseif ($convert == 6) {
                        $array[] = array('length_mm' => trim($value->inch), 'length_feet' => round($value->length_mm / 304.8, 4), 'product_name' => $value->product_name);
                    } else {
                        $array[] = array('length_feet' => $value->length_feet, 'length_mm' => round(trim($value->length_mm) / 304.8, 4), 'product_name' => $value->product_name);
                    }
            
            }
        }
        echo json_encode($array);
    }
    public function customeradd() {
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->action == 'Save') {
            if ($form_data->phone != '' && $form_data->company_name != '' && $form_data->gst != '') {
                $tablename = $form_data->tablename;
                $tablenamemain = $form_data->tablenamemain;
                $data['email'] = $form_data->email;
                $data['phone'] = $form_data->phone;
                $data['user_id'] = $this->userid;
                $data['address1'] = $form_data->address1;
                $data['address2'] = $form_data->address2;
                $data['locality'] = $form_data->locality;
                $data['zone'] = $form_data->zone;
                $data['city'] = $form_data->city;
                $data['pincode'] = $form_data->pincode;
                $data['state'] = $form_data->state;
                $data['landmark'] = $form_data->landmark;
                $data['sales_team_id'] = $form_data->sales_team_id;
                $data['status'] = $form_data->status;
                $data['google_map_link'] = $form_data->google_map_link;
                $data['feedback_sub'] = "";
                $data['feedback_details'] = "";
                $data['credit_limit'] = 0;
                $ratings = 5 * 10;
                $data['ratings'] = $ratings * 2;
                $data['pin'] = substr(time(), 4);
                $data['gst'] = $form_data->gst;
                $data['company_name'] = $form_data->company_name;
                $data['landline'] = $form_data->landline;
                $data['sales_group'] = $form_data->sales_group;
                $sales_team_id = $this->Main_model->where_names('admin_users', 'id', $form_data->sales_team_id);
                foreach ($sales_team_id as $val) {
                    $define_saleshd_id = $val->define_saleshd_id;
                }
                $sales_head_id = $this->Main_model->where_names('admin_users', 'id', $define_saleshd_id);
                foreach ($sales_head_id as $val) {
                    $data['sales_group'] = $val->sales_group_id;
                }
                $data['sales_head'] = $define_saleshd_id;
                $result = $this->Main_model->where_names($tablename, 'phone', $data['phone']);
                if (count($result) > 0) {
                    $array = array('error' => '3', 'massage' => 'Customer phone no  already exists');
                    echo json_encode($array);
                } else {
                    $customer_id = $this->Main_model->insert_commen($data, $tablename);
                    $data_address['customer_id'] = $customer_id;
                    $data_address['name'] = $form_data->company_name;
                    $data_address['address1'] = $form_data->address1;
                    $data_address['address2'] = $form_data->address2;
                    $data_address['locality'] = $form_data->locality;
                    $data_address['phone'] = $form_data->phone;
                    $data_address['zone'] = $form_data->zone;
                    $data_address['city'] = $form_data->city;
                    $data_address['pincode'] = $form_data->pincode;
                    $data_address['state'] = $form_data->state;
                    $data_address['landmark'] = $form_data->landmark;
                    $data_address['status'] = $form_data->status;
                    $data_address['google_map_link'] = $form_data->google_map_link;
                    $route_id = 0;
                    $routeset = $this->Main_model->where_names('locality', 'id', $form_data->locality);
                    foreach ($routeset as $routesetval) {
                        $route_id = $routesetval->route_id;
                    }
                    $datass['get_id'] = $form_data->order_id;
                    $datass['count_id'] = $form_data->count_id;
                    $datass['customer_id'] = $customer_id;
                    $datass['sales_group'] = $data['sales_group'];
                    $datass['route_id'] = $route_id;
                    $datass['user_id'] = $this->userid;
                    $this->Main_model->update_commen($datass, $tablenamemain);
                    $addressid = $this->Main_model->insert_commen($data_address, 'customers_adddrss');
                    $data_addressid['get_id'] = $customer_id;
                    $data_addressid['address_id'] = $addressid;
                    $this->Main_model->update_commen($data_addressid, $tablename);
                    $array = array('error' => '2', 'massage' => 'Customer successfully Added..');
                    echo json_encode($array);
                }
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
    }
    public function customeradd_address() {
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->action == 'Save') {
            if ($form_data->phone != '' && $form_data->name != '' && $form_data->address1 != '') {
                $tablename = $form_data->tablename;
                $tablenamemain = $form_data->tablenamemain;
                $result = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
                if (count($result) > 0) {
                    foreach ($result as $cus) {
                        $customer_id = $cus->customer_id;
                        $sales_group = $cus->sales_group;
                    }
                    if ($customer_id != "") {
                        $data_address['customer_id'] = $customer_id;
                        $data_address['name'] = $form_data->name;
                        $data_address['address1'] = $form_data->address1;
                        $data_address['address2'] = $form_data->address2;
                        $data_address['locality'] = $form_data->locality;
                        $data_address['phone'] = $form_data->phone;
                        $data_address['zone'] = $form_data->zone;
                        $data_address['city'] = $form_data->city;
                        $data_address['pincode'] = $form_data->pincode;
                        $data_address['state'] = $form_data->state;
                        $data_address['landmark'] = $form_data->landmark;
                        $data_address['status'] = $form_data->status;
                        $data_address['google_map_link'] = $form_data->google_map_link;
                        $addressid = $this->Main_model->insert_commen($data_address, 'customers_adddrss');
                        $route_id = 0;
                        $routeset = $this->Main_model->where_names('locality', 'id', $form_data->locality);
                        foreach ($routeset as $routesetval) {
                            $route_id = $routesetval->route_id;
                        }
                        $datass['get_id'] = $form_data->order_id;
                        $datass['customer_address_id'] = $addressid;
                        $datass['route_id'] = $route_id;
                        $datass['sales_group'] = $sales_group;
                        $this->Main_model->update_commen($datass, $tablenamemain);
                        $array = array('error' => '2', 'massage' => 'Customer address successfully Added..');
                        echo json_encode($array);
                    } else {
                        $array = array('error' => '3', 'massage' => 'Please select Customer');
                        echo json_encode($array);
                    }
                } else {
                    $array = array('error' => '3', 'massage' => 'Please select Customer');
                    echo json_encode($array);
                }
            } else {
                $array = array('error' => '1');
                echo json_encode($array);
            }
        }
    }
    public function saveCompetitor()
    {
        
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename;
        $tablenamemain = $form_data->tablenamemain;
        $point['get_id'] = $form_data->order_id;
        $point['competitorname'] = $form_data->competitorname;
        $point['details'] = $form_data->details;
        $this->Main_model->update_commen($point, $tablenamemain);
        
        
        $customer_id=0;
        $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
        foreach ($result_order as $val) {
                
                $customer_id=$val->customer_id;
        }
        
        $cus['get_id'] = $customer_id;
        $cus['competitor'] = $form_data->competitorname;
        $this->Main_model->update_commen($cus, 'customers');
        
        
    }
    public function pointtodriver() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = 'driver';
        $this->db->query("UPDATE $tablename SET vehicle_id='0' WHERE vehicle_id='" . $form_data->vehicle_id . "'");
        $point['get_id'] = $form_data->driver_id;
        $point['vehicle_id'] = $form_data->vehicle_id;
        if ($form_data->driver_id != "" && $form_data->vehicle_id != "") {
            $this->Main_model->update_commen($point, $tablename);
        }
    }
    
     public function fetch_single_data_product_type() {
        $form_data = json_decode(file_get_contents("php://input"));
        $orderid= $form_data->orderid;
        $output=array();
        $resultpp = $this->db->query("SELECT * FROM order_product_list_process  WHERE order_id='" . $orderid . "' AND deleteid=0 GROUP BY categories_id");
        $result = $resultpp->result();
         $i=1;
        foreach ($result as $value) {
            
            $output[] = array('no'=>$i,'order_no'=>$value->order_no,'categories_name'=>$value->categories_name);
           $i++;
        }
        echo json_encode($output);
    }
    
    
    public function payment_collected() {
        date_default_timezone_set("Asia/Kolkata");
        //$date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        
        
        
        
        $order_id = $form_data->order_id;
        $collectamount = $form_data->collectamount;
        $date = $form_data->payment_date;
       
       
      
        
        $checkid = $form_data->checkid;
        if ($checkid == "") {
            $checkid = 0;
        }
        $drivercharge = $form_data->drivercharge;
        $driver_id = $form_data->driver_id;
        $customer_id = $form_data->customer_id;
        $fulltotal = $form_data->fulltotal;
        $driver_reference_no = $form_data->reference_no;
        $driver_payment_mode = $form_data->payment_mode;
        $difference = $form_data->difference;
        $bankaccount = $form_data->bankaccount;
        $customer_paid = $form_data->customer_paid;
        $bankaccount_customer = $form_data->bankaccount_customer;
        
        
        
    
        
        
        
        
        
        if ($collectamount != "" && $drivercharge != "")
        {
            
            $tablename = 'orders_process';
            $tablename_customer_ledger = 'all_ledgers';
            $tablename_driver_ledger = 'all_ledgers';
            
            
            $delivery_charge = 0;
            $trip_id = 0;
            $start_reading=0;
            $km_reading_end=0;
            $result_order = $this->Main_model->where_names($tablename, 'id', $order_id);
            foreach ($result_order as $val) {
                
                $payment_mode = $val->payment_mode;
                $trip_id = "Trip ID :" . $val->trip_id;
                $reference_no = $val->reference_no;
                $order_no = $val->order_no;
                $driver_id = $val->driver_id;
                $delivery_charge = $val->delivery_charge;
                $minisroundoff = $val->roundoff;
                $roundoffstatus = $val->roundoffstatus;
                $discount = $val->discount;
                
                 $full_delivery = $val->full_delivery;
                 
                   if($val->start_reading!='')
                   {
                       $start_reading = $val->start_reading;
                   }
                   
                    if($val->km_reading_end!='')
                   {
                        $km_reading_end = $val->km_reading_end;
                
                   }
                   
                  
                
                
            }
              
              $km_base_charge=0;
              $resbankaccount = $this->Main_model->where_names('driver', 'id', $driver_id);
              foreach ($resbankaccount as $valb) {
                        
                        $km_base_charge = $valb->km_base_charge;
                        
               }
            
            
            
        
            
            $totalamountval = 0;
            $resultpp = $this->db->query("SELECT amount as totalamount,id FROM order_product_list_process  WHERE order_id='" . $order_id . "' AND deleteid=0 AND driver_payment_status=0");
            $results = $resultpp->result();
            
            foreach ($results as $valuep)
            {
                
                
                    $totalamountval += $valuep->totalamount;
                    $this->db->query("UPDATE sales_load_products SET driver_payment_status='1' WHERE order_product_id='" . $valuep->id . "'");  
                    $this->db->query("UPDATE order_product_list_process SET driver_payment_status='1' WHERE id='" . $valuep->id . "'");  
                
                
            }
            
            
            
            $this->db->query("UPDATE denomination SET delivery_status=1 WHERE order_id='" . $order_id . "'");  
          
          
          
          
            $totalamount = $totalamountval + $delivery_charge;
            $Totalkm=$km_reading_end-$start_reading;
            $Tripendstatus=" Total KM : ".$Totalkm." Per KM Charge : ".$km_base_charge;
           
            
            
            if ($roundoffstatus == 1) {
                $totalamount = $totalamount - $discount + $minisroundoff;
            } else {
                $totalamount = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            $data_address['order_id'] = $order_id;
            $data_address['customer_id'] = $customer_id;
            $data_address['user_id'] = $this->userid;
            $data_address['notes'] = 'Order Payment ' . $trip_id;
            $data_address['payment_mode'] = $payment_mode;
            if ($payment_mode == 'Cash') {
                $data_address['order_no'] = 'Cash Payment';
                
            } else {
                $data_address['order_no'] = $reference_no;
            }
            $data_address['difference'] = $difference;
            $data_address['reference_no'] = $order_no;
            $data_address['amount'] = round($totalamount);
            $data_address['account_head_id'] = 68;
            $data_address['account_heads_id_2'] = 116;
            $data_address['order_trancation_status'] = 0;
            
            
            
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
            
            
            $balancetotal = 0;
            $debitsamount = 0;
            $creditsamount = 0;
            foreach ($res as $val) {
                $payid = $val->id;
                $customer_id = $val->customer_id;
                $amount = $val->amount;
                $debitsamount+= $val->debits;
                $creditsamount+= $val->credits;
                $balancetotal+= $val->balance;
            }
            
            $balancetotal=$creditsamount-$debitsamount;
            
            if ($payment_mode == 'Cash') {
                if ($customer_paid == 1) {
                    $data_address['paid_status'] = 1;
                    $data_address['credits'] = round($collectamount);
                    if ($balancetotal != '0') {
                        $data_address['balance'] = $balancetotal + $collectamount;
                    } else {
                        $data_address['balance'] = $collectamount;
                    }
                } else {
                    $data_address['debits'] = $collectamount;
                    $data_address['paid_status'] = 0;
                    $Totalbal = round($totalamount) + $balancetotal;
                    if ($balancetotal != '0') {
                        $data_address['balance'] = $balancetotal - $collectamount;
                    } else {
                        $data_address['balance'] = '-' . $collectamount;
                    }
                }
            } else {
                $data_address['paid_status'] = 0;
                $data_address['debits'] = round($totalamount);
                if ($balancetotal != '0') {
                    $data_address['balance'] = $balancetotal - $collectamount;
                } else {
                    $data_address['balance'] = '-' . $collectamount;
                }
            }
            $data_address['collected_amount'] = $collectamount;
            $data_address['payment_date'] = $date;
            $data_address['process_by'] = 'Order Reconciliation';
            $data_address['payment_time'] = $time;
            $data_address['party_type'] = 1;
            
            
            if($collectamount != 0)
            {
                
                if($data_address['paid_status']==1)
                {
                    
                    
                    
                    
                    
                    
                    
                    
                   $insertdataval=$this->Main_model->insert_commen($data_address, $tablename_customer_ledger);
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   $resbankaccount = $this->Main_model->where_names('bankaccount', 'id', 25);
                    foreach ($resbankaccount as $valb) {
                        $bid = $valb->id;
                        $bank_name = $valb->bank_name;
                        $account_no = $valb->account_no;
                    }
                    
                     $res =$this->Main_model->where_names_two_order_by('bankaccount_manage','bank_account_id',25,'deleteid','0','id','ASC');
                     $balancetotal=0;
                     $debitsamount=0;
                     $creditsamount=0;
                     foreach($res as $val)
                     {
                            $payid=$val->id;
                            $debitsamount+=$val->debit;
                            $creditsamount+=$val->credit;
                            $balancetotal=$val->balance;
                     }
                     $balancetotal=$creditsamount-$debitsamount;
                    
                    $data_bank1['bank_account_id'] = 25;
                    $data_bank1['ex_code'] = $trip_id . ' Ref : ' . $order_no;
                    $data_bank1['debit'] = 0;
                    $data_bank1['payment_status'] = 1;
                    $data_bank1['credit'] = $collectamount;
                    $data_bank1['name'] = 'Sales';
                    $data_bank1['create_date'] = $date;
                    $data_bank1['status_by'] = 'Order Cash Payment';
                    $data_bank1['balance']=$balancetotal+$collectamount;
                    $data_bank1['account_head_id'] = 105;
                    $data_bank1['deletemod'] = 'OY'.$insertdataval;
                    $data_bank1['account_heads_id_2'] = 105;
                    $data_bank1['party_type'] = 4;
                    $insertbank=$this->Main_model->insert_commen($data_bank1, 'bankaccount_manage');
                    
                    $this->db->query("UPDATE $tablename_customer_ledger SET deletemod='".$data_bank1['deletemod']."',bank_id='25' WHERE id='".$insertdataval."'");
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                 
                }
                
                
            }
           
           
           
           
           
  
           
           
           
           
           
           
           
           
           
            
            
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$driver_id,'party_type',2,'deleteid','0','id','ASC');
            
            
            $balancetotaldd = 0;
            $balancetotalddtotal = 0;
            $debitsdd = 0;
            $creditsdd = 0;
            foreach ($res as $val) {
                $payid = $val->id;
                $customer_id = $val->customer_id;
                $amount = $val->amount;
                $debitsdd+= $val->debits;
                $creditsdd+= $val->credits;
                $balancetotaldd+= $val->balance;
            }
            
            
            $balancetotaldd=$creditsdd-$debitsdd;
            

            $data_driver['user_id'] = $this->userid;
            $data_driver['notes'] = 'Driver ' . $trip_id.$Tripendstatus;
            $data_driver['customer_id'] = $driver_id;
            $data_driver['payment_mode'] = $driver_payment_mode;
            $data_driver['reference_no'] = $driver_reference_no;
            $data_driver['order_no'] = $order_no;
            $data_driver['amount'] = round($drivercharge);
            
           
                
                if ($checkid == 1)
                {
                    $data_driver['order_id'] = 0;
                    $data_driver['paid_status'] = 0;
                    $data_driver['debits'] = round($drivercharge);
                    $data_driver['credits'] = 0;
                    if ($balancetotaldd != '0') {
                        $data_driver['balance'] = $balancetotaldd + $drivercharge;
                    } else {
                        $data_driver['balance'] = $drivercharge;
                    }
                } else {
                    $data_driver['order_id'] = $order_id;
                    $data_driver['paid_status'] = 0;
                    $data_driver['credits'] = round($drivercharge);
                    $data_driver['debits'] = 0;
                    if ($balancetotaldd != '0') {
                        $data_driver['balance'] = $balancetotaldd - $drivercharge;
                    } else {
                        $data_driver['balance'] = $drivercharge;
                    }
                }
                
            
            if ($checkid == 1) {
                $data_driver['payout'] = $drivercharge;
                $data_driver['payin'] = 0;
                $data_driver['paid_status'] = '1';
            } else {
                $data_driver['payout'] = 0;
                $data_driver['payin'] = $drivercharge;
                $data_driver['paid_status'] = '0';
            }
            $data_driver['payment_date'] = $date;
            $data_driver['payment_time'] = $time;
            $data_driver['process_by'] = 'Driver Reconciliation';
            $data_driver['order_trancation_status'] = 2;
            $data_driver['party_type'] = 2;
            $data_driver['account_head_id'] = 52;
            $data_driver['account_heads_id_2'] = 104;
            $data_driver['bank_id'] = 0;


           
            if($drivercharge>0)
            {


            $insertdataval=$this->Main_model->insert_commen($data_driver, $tablename_driver_ledger);


            }
            
             
            
            
            
            
            if ($checkid == 1) {
                $res = $this->Main_model->where_names('admin_users', 'id', $driver_id);
                foreach ($res as $val) {
                    $company_name = $val->name;
                }
                $account_no = "";
                $bank_name = "";
                $bid = "";
                if ($bankaccount != '0') {
                    
                    
                    
                    $resbankaccount = $this->Main_model->where_names('bankaccount', 'id', $bankaccount);
                    foreach ($resbankaccount as $valb) {
                        $bid = $valb->id;
                        $bank_name = $valb->bank_name;
                        $account_no = $valb->account_no;
                    }
                    
                     $res =$this->Main_model->where_names_two_order_by('bankaccount_manage','bank_account_id',$bid,'deleteid','0','id','ASC');
                     $balancetotal=0;
                     $debitsamount=0;
                     $creditsamount=0;
                     foreach($res as $val)
                     {
                            $payid=$val->id;
                            $debitsamount+=$val->debit;
                            $creditsamount+=$val->credit;
                            $balancetotal=$val->balance;
                     }
                     $balancetotal=$creditsamount-$debitsamount;
                    
                    $data_bank['bank_account_id'] = $bid;
                    $data_bank['ex_code'] = $trip_id . ' Ref : ' . $driver_reference_no;
                    $data_bank['debit'] = $drivercharge;
                    $data_bank['payment_status'] = 1;
                    $data_bank['credit'] = 0;
                    $data_bank['name'] = $company_name;
                    $data_bank['create_date'] = $date;
                    $data_bank['status_by'] = 'Driver Payment';
                    $data_bank['balance']=$balancetotal-$drivercharge;
                  
                  
                                                                if($bid==24)
                                                                {
                                                                     $data_bank['account_head_id']=106;
                                                                     $data_bank['account_heads_id_2']=106;
                                                                }
                                                                elseif($bid==25)
                                                                {
                                                                     $data_bank['account_head_id']=105;
                                                                     $data_bank['account_heads_id_2']=105;
                                                                }
                                                                else
                                                                {
                                                                    
                                                                     $data_bank['account_head_id']=107;
                                                                     $data_bank['account_heads_id_2']=107;
                                                                    
                                                                }
                    
                  
                    
                    
                    $data_bank['deletemod'] = 'DO'.$insertdataval;
                    $data_bank['party_type'] = 4;

                    if($drivercharge>0)
                    {

                    $this->Main_model->insert_commen($data_bank, 'bankaccount_manage');
                    $this->db->query("UPDATE $tablename_driver_ledger SET deletemod='".$data_bank['deletemod']."',bank_id='".$bid."' WHERE id='".$insertdataval."'");
                   
                    }
                    
                    
                    
                    
                }
            }
            
            
            
            
            
            $point['get_id'] = $order_id;
            
            
            
            
            
            
            
            
             if ($payment_mode == 'Cash')
             {
                
                 $point['reason'] = 'Payment Recived ' . $trip_id;
                 $point['finance_status'] = 5;
            
             }
             else
             {
                 
                  $point['reason'] = 'Bank Payemnt Pending ' . $trip_id;
                  $point['finance_status'] = 6;
                 
             }
            
            
            
            
            
           
            $point['payment_recived_date'] = $date;
            $point['payment_recived_time'] = $time;
            $point['pending_amount'] = $difference;
            $point['collectamount'] = $drivercharge;
            
            if($full_delivery==1)
            {
                
                    $point['full_delivery'] = 0;
                    $point['delivery_mode'] = 'Full';
                    $point['paricel_mode'] = 0;
                    $ppa['get_id'] = $order_id;
                    $ppa['paricel_mode'] = 0;
                    $this->Main_model->update_commen_where($ppa, 'order_id', 'order_product_list_process');
                
            }
            
            
       
            
            
            $this->Main_model->update_commen($point, $tablename);
           
            
        }
    }
    
    
    
    
    
    
    
    
    
       public function payment_collected_self()
       {
           
           
           
        date_default_timezone_set("Asia/Kolkata");
        //$date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $date = $form_data->payment_date;
        $order_id = $form_data->order_id;
        $order_id=explode(',', $order_id);
        $order_id=implode("','", $order_id);
        $collectamount = $form_data->collectamount;
        $bankaccount_customer = $form_data->bankaccount_customer;
        $tablename = 'orders_process';
        $tablename_customer_ledger = 'all_ledgers';
        $tablename_driver_ledger = 'all_ledgers';
        
        if($collectamount != "") 
        {
            
            
            
             $this->db->query("UPDATE denomination SET delivery_status=1 WHERE order_id IN ('" . $order_id . "')");  
            
            
            
            $result_order = $this->db->query("SELECT * FROM $tablename  WHERE id IN ('" . $order_id . "') AND deleteid=0");
            $result_order=$result_order->result();
            foreach ($result_order as $val) 
            {
                
                
                
                $payment_mode = $val->payment_mode;
                $order_no = $val->order_no;
                $order_base_id = $val->id;
                $customer_id = $val->customer_id;
                $full_delivery = $val->full_delivery;
                
                $totalamount_bill_amount=0;
                $resultpp = $this->db->query("SELECT SUM(qty*rate) as totalamount FROM order_product_list_process  WHERE order_id='" . $order_base_id . "' AND deleteid=0");
                $results = $resultpp->result();
                foreach ($results as $valuep) {
                    $totalamount_bill_amount = round($valuep->totalamount);
                }
                
                
                $data_address['order_id'] = $order_base_id;
                $data_address['customer_id'] = $customer_id;
                $data_address['user_id'] = $this->userid;
                $data_address['notes'] = 'Retail Shop Reconciliation';
                $data_address['payment_mode'] = $payment_mode;
                if ($payment_mode == 'Cash') {
                    $data_address['order_no'] = 'Cash Payment';
                    
                } else {
                    $data_address['order_no'] = $reference_no;
                }
                $data_address['difference'] = $difference;
                $data_address['reference_no'] = $order_no;
                $data_address['amount'] = round($totalamount_bill_amount);
                $data_address['account_head_id'] = 68;
                $data_address['account_heads_id_2'] = 116;
                $data_address['order_trancation_status'] = 0;
                
                $data_address['collected_amount'] = $collectamount;
                $data_address['payment_date'] = $date;
                $data_address['process_by'] = 'Order Reconciliation';
                $data_address['payment_time'] = $time;
                $data_address['party_type'] = 1;
                
                
                
                 
                if($payment_mode=='Cash')
                {
                                $data_address['paid_status'] = 1;
                                $data_address['credits'] = round($totalamount_bill_amount);
                                $data_address['balance'] = 0;
                }
                else
                {
                                $data_address['paid_status'] = 0;
                                $data_address['credits'] = round($totalamount_bill_amount);
                                
                }
                
                
                if($payment_mode=='Cash')
                {  
                     $insertdataval=$this->Main_model->insert_commen($data_address, $tablename_customer_ledger);
                }
                
            
                $point['get_id'] = $order_base_id;
                if($payment_mode == 'Cash')
                {
                    
                     $point['reason'] = $payment_mode.' Payment Recived Retail Shop';
                     $point['finance_status'] = 5;
                
                }
                else
                {
                     
                      $point['reason'] = $payment_mode.' Pending Retail Shop';
                      $point['finance_status'] = 6;
                     
                 }
                
                
            
            
            
           
            $point['payment_recived_date'] = $date;
            $point['payment_recived_time'] = $time;
            $point['pending_amount'] = $difference;
            $point['collectamount'] = $collectamount;
            
            if($full_delivery==1)
            {
                
                    $point['full_delivery'] = 0;
                    $point['delivery_mode'] = 'Self Pickup';
                    $point['paricel_mode'] = 0;
                    $ppa['get_id'] = $order_base_id;
                    $ppa['loadstatus'] = 1;
                    $this->Main_model->update_commen_where($ppa, 'order_id', 'order_product_list_process');
                
            }
            
            
            $this->Main_model->update_commen($point, $tablename);
           
                
                
                
                
                
                
                
                
                
                
                
                
            }
            
            
            
        }
        
        
        
        
    
        
        
        
        
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    public function tripcomplete() {
        $form_data = json_decode(file_get_contents("php://input"));
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $otp = str_replace('|', '', $form_data->otp);
        if ($otp != "") {
            $order_id = $form_data->order_id;
            $paymentmode = $form_data->paymentmode;
            $reference_no = $form_data->reference_no;
            $rescheduling_delivery = $form_data->rescheduling_delivery;
            $rescheduling_date = $form_data->rescheduling_date;
            $rescheduling_remarks = $form_data->rescheduling_remarks;
            $km_reading_end = $form_data->km_reading_end;
            $return_excess = $form_data->return_excess;
            $return_excess1 = $form_data->return_excess1;
            $selectcollection_id_data = $form_data->selectcollection_id_data;
            
            
            
            
            $resultpending = $this->Main_model->where_names_two_order_by('orders_process', 'id', $order_id, 'otp', $otp, 'id', 'DESC');
            if (count($resultpending) == 1)
            {
                
                
                if($rescheduling_delivery!='Rescheduling')
                {
                    
                
                
                  $deliveryproduts= $this->Main_model->where_names_two_order_by('order_product_list_process', 'order_id', $order_id, 'deleteid', 0, 'id', 'DESC');
                  foreach ($deliveryproduts as $vl)
                  {
                     
                            $order_product_id=$vl->id;
                            $resultcheck = $this->Main_model->where_names('sales_load_products', 'order_product_id', $order_product_id);
                            if(count($resultcheck)>0)
                            { 
                                
                                  foreach($resultcheck as $vlset)
                                  {
                                           if($vlset->loadstatus==1)
                                           {
                                             $this->db->query("UPDATE sales_load_products SET delivered_products='1' WHERE order_product_id='" . $order_product_id . "'");  
                                             $this->db->query("UPDATE order_product_list_process SET delivery_status='1' WHERE id='" . $order_product_id . "'");  
                                           }
                                          
                                  }
                                 
                                 
                                
                            }
                            
                     
                     
                 }
                    
                
                
                
                
                
                
                $trim_id = "";
                foreach ($resultpending as $cv) {
                    $order_no = $cv->order_no;
                    $trim_id = "Trip ID : " . $cv->trip_id;
                }
                
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
               
                $result_order = $this->Main_model->where_names_two_order_by('denomination', 'order_id', $order_id, 'delivery_status', '0', 'id', 'ASC');
                if($paymentmode=='Cash')
                {
                    
               
                 
                        if (count($result_order) == 0) {
                            $data_address['order_id'] = $order_id;
                            $this->Main_model->insert_commen($data_address, 'denomination');
                        } else {
                            //$data_address['get_id'] = $order_id;
                            //$data_address['delivery_status'] = 0;
                            //$this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                             $data_address['order_id'] = $order_id;
                            $this->Main_model->insert_commen($data_address, 'denomination');
                            
                        }
                
                
                }
                
                }
                
                
                
                
                
                
                
                
                
                
                
                $point['payment_mode'] = $paymentmode;
                $point['reference_no'] = $reference_no;
                $point['rescheduling_delivery'] = $rescheduling_delivery;
                $point['rescheduling_date'] = $rescheduling_date;
                $point['rescheduling_remarks'] = $rescheduling_remarks;
                $point['km_reading_end'] = $km_reading_end;
                $point['return_excess'] = str_replace('-', '', $return_excess);
                $point['collecttion_id'] = $selectcollection_id_data;
                $point['get_id'] = $order_id;
                $point['trip_end_date'] = $date;
                $point['trip_end_time'] = $time;
                if($rescheduling_delivery == 'NO') 
                {
                    $point['assign_status'] = 3;
                    $point['finance_status'] = 4;
                    $point['reason'] = 'Trip Completed ' . $trim_id;
                } 
                elseif($rescheduling_delivery == 'YES') 
                {
                    $point['assign_status'] = 3;
                    $point['finance_status'] = 4;
                    $point['reason'] = 'Trip Completed ' . $trim_id;
                }
                else
                {
                    $point['assign_status'] = 8;
                    $point['finance_status'] = 3;
                    $point['reason'] = 'Resudule Trip ' . $rescheduling_date . ' ' . $rescheduling_remarks;
                }
                
                
                if($return_excess1>0)
                {
                     //$point['order_base'] = 24;
                     //$point['reason'] = 'Excess Payment Approval Amount :' . $return_excess1;
                }
                
               
                
                $this->Main_model->update_commen($point, 'orders_process');
            } else {
                $array = array('error' => '1', 'massage' => 'OTP Is Wrong');
                echo json_encode($array);
            }
        } else {
            $array = array('error' => '1', 'massage' => 'OTP Is required');
            echo json_encode($array);
        }
    }
    
    
    
    
    
       public function denominationsave() 
       {
          
          
                $form_data = json_decode(file_get_contents("php://input"));
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
           
                 $order_id = $form_data->order_id;
                $result_orderset = $this->Main_model->where_names('orders_process', 'move_id', $order_id);
                
              
                if(count($result_orderset)>0)
                {
                    
                    
                                foreach($result_orderset as $vl)
                                {
                                   $order_id =$vl->id;
                                   $order_no =$vl->order_no;
                                }
                          
          
                    
                }
                else
                {
                                 $order_id = $form_data->order_id;
                                 $order_no = $form_data->order_no;
                
                    
                }
               
              
                
                
                $paymentmode = $form_data->paymentmode;
            
            
            
            
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $result_order = $this->Main_model->where_names('denomination', 'order_id', $order_id);
                if (count($result_order) == 0) {
                    $data_address['order_id'] = $order_id;
                    $this->Main_model->insert_commen($data_address, 'denomination');
                } else {
                    $data_address['get_id'] = $order_id;
                    $this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                }
                
                
       
    }
   
    
    
    
    
    
        public function denominationsave_self() 
       {
          
          
                $form_data = json_decode(file_get_contents("php://input"));
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
           
                 $order_id = $form_data->order_id;
                 $order_no= $form_data->order_no;
               
              
                
                
                $paymentmode = $form_data->paymentmode;
            
                $this->db->query("UPDATE orders_process SET payment_mode='".$paymentmode."' WHERE id='".$order_id."'");
                                                            
            
            
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $result_order = $this->Main_model->where_names('denomination', 'order_id', $order_id);
                if (count($result_order) == 0) {
                    $data_address['order_id'] = $order_id;
                    $this->Main_model->insert_commen($data_address, 'denomination');
                } else {
                    $data_address['get_id'] = $order_id;
                    $this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                }
                
                
       
    }
   
    
    
      public function denominationsave_edit() 
       {
          
          
                $form_data = json_decode(file_get_contents("php://input"));
                date_default_timezone_set("Asia/Kolkata");
                $date = date('Y-m-d');
                $time = date('h:i A');
           
                 $order_id = $form_data->order_id;
                 $order_no= $form_data->order_no;
               
              
                
                
                $paymentmode = $form_data->paymentmode;
            
                $this->db->query("UPDATE orders_process SET payment_mode='".$paymentmode."',finance_status='5' WHERE id='".$order_id."'");
                                                            
            
            
                $data_address['c1rs'] = $form_data->c1_rs;
                $data_address['c2rs'] = $form_data->c2_rs;
                $data_address['c5rs'] = $form_data->c5_rs;
                $data_address['c10rs'] = $form_data->c10_rs;
                $data_address['c20rs'] = $form_data->c20_rs;
                $data_address['c50rs'] = $form_data->c50_rs;
                $data_address['c100rs'] = $form_data->c100_rs;
                $data_address['c200rs'] = $form_data->c200_rs;
                $data_address['c500rs'] = $form_data->c500_rs;
                $data_address['c2000rs'] = $form_data->c2000_rs;
                $data_address['order_no'] = $order_no;
                $result_order = $this->Main_model->where_names('denomination', 'order_id', $order_id);
                if (count($result_order) == 0) {
                    $data_address['order_id'] = $order_id;
                    $this->Main_model->insert_commen($data_address, 'denomination');
                } else {
                    $data_address['get_id'] = $order_id;
                    $this->Main_model->update_commen_where($data_address, 'order_id', 'denomination');
                }
                
                
       
    }
   
    
    
    public function addprice() {
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->name != '' && $form_data->price != '') {
            $data_address['product_id'] = $form_data->product_id;
            $data_address['vendor_name'] = $form_data->name;
            $data_address['price'] = $form_data->price;
            $data_address['sqft'] = $form_data->sqft;
            $data_address['updated_by'] = $this->username;
            $addressid = $this->Main_model->insert_commen($data_address, 'competitor_price_list');
            $array = array('error' => '2', 'massage' => 'Price successfully Added..');
            echo json_encode($array);
        } else {
            $array = array('error' => '1');
            echo json_encode($array);
        }
    }
    public function order_quotation_move() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = 1;
            if ($tablenamemain == 'orders') {
                $datassfirst['reason'] = 'Moved';
            }
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            
            
            
            if($oldtablename=='orders_process')
            {
                 $neworder_id = 1;
                 $order_last_count = $this->Main_model->order_last_count('orders_process');
                 foreach ($order_last_count as $r) {
                    $neworder_id = $r->id + 1;
                 }
                 $order_no_data_new = strtoupper(date('M') . '/' . $neworder_id);
                 
            }
            
             
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                
                
                if($oldtablename=='orders_process')
                {
                      $find['order_no'] = $order_no_data_new;
                }
                else
                {
                      $find['order_no'] = $orders->order_no;
                }
                
                
                $find['discount'] = $orders->discount;
                $find['customer_id'] = $orders->customer_id;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
                $find['customer_address_id'] = $orders->customer_address_id;
                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                $find['create_date'] = $orders->create_date;
                $find['create_time'] = $time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                
                if($oldtablename=='orders_process')
                {
                    $find['order_base'] = 1;
                    $find['finance_status'] = 2;
                    $find['delivery_status'] = 1;
                }
                else
                {
                    $find['order_base'] = 0;
                }
                
                
                $payment_mode = $orders->payment_mode;
                $delivery_charge = $orders->delivery_charge;
                $minisroundoff = $orders->roundoff;
                $roundoffstatus = $orders->roundoffstatus;
                $discount = $orders->discount;
                
                
                $find['commission_check'] = $orders->commission_check;
                $find['gst_check'] = $orders->gst_check;
                $find['delivery_charge'] = $orders->delivery_charge;
                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
                if (count($result_order) == 0) {
                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                } else {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = 0;
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                $totalamount=0;
                $order_no_new=$orders->order_no;
                $product_array=array();
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $orders->order_no;
                    $findp['product_name'] = $orders_product->product_name;
                    $totalamount+= $orders_product->rate * $orders_product->qty;
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    $product_array[]=$orders_product->id;
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['crimp'] = $orders_product->crimp;
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['uom'] = $orders_product->uom;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;
                    $findp['rate'] = $orders_product->rate;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        $this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $findp['qty'] = $orders_product->qty;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                    
                   
                }
                
                
                
                      
                      
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
                       
                   
                   
                   
                   
                   
                   
                   
                                        $product_get=implode("','", $product_array);
                                        $resultorder = $this->db->query("SELECT b.* FROM product_list as a JOIN  $tablename_sub as b ON a.id=b.product_id WHERE b.id IN ('".$product_get."') AND  a.link_to_purchase=1 AND a.deleteid=0 AND b.deleteid=0 ORDER BY a.id DESC");
                                        $resultorder = $resultorder->result();
                                        
                                       
                                        
                                        if(count($resultorder)>0)
                                        {
                                            
                                        
                                                
                                                $purchase_orders_process = 'purchase_orders_process';
                                                $basedata['count_id'] = 1;
                                                $basedata['create_date'] = $date;
                                                $basedata['create_time'] = $time;
                                                $basedata['user_id'] = $this->userid;
                                                $basedata['entry_user_id'] = $this->userid;
                                                $basedata['arrival_date'] = '';
                                                $basedata['price_details'] = '';
                                                $basedata['availability'] = '';
                                                $basedata['customer_id'] = $orders->customer_id;
                                                $neworder_quotation_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count_users($purchase_orders_process, $this->userid);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_quotation_id = $r->count_id + 1;
                                                }
                                                $neworder_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count($purchase_orders_process);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                
                                                $order_purchase_no = $neworder_id . '/PO' . $neworder_quotation_id . '/' . date('Y');
                                                $basedata['order_no'] = $order_purchase_no;
                                                $basedata['mark_request_to_sales'] = $order_no_new;
                                                $insertid_purchase = 0;
                                                $insertid_purchase = $this->Main_model->insert_commen($basedata, $purchase_orders_process);
                                                   
                                           
                                                foreach($resultorder as $p_value)
                                                {
                                                    
                                                     $order_product_id_p=$p_value->id;
                                                     $order_id_p=$p_value->order_id;
                                                     $product_id_p=$p_value->product_id;
                                                     $product_name_p=$p_value->product_name;
                                                     $categories_name_p=$p_value->categories_name;
                                                     $categories_id_p=$p_value->categories_id;
                                                     $qty_p=$p_value->qty;
                                                     $rate_p=$p_value->rate;
                                                     $unit_p=2;
                                                     $purchase_product_list_process = $this->Main_model->where_names_three_order_by('purchase_product_list_process', 'sale_purchase_op_id', $order_product_id_p, 'product_id', $product_id_p,'sale_purchase_o_no', $order_no_new, 'id', 'ASC');
                                                     if(count($purchase_product_list_process)==0)
                                                     {
                                                         
                                                         
                                                            $basedataproduct['sale_purchase_op_id'] = $order_product_id_p;
                                                            $basedataproduct['sale_purchase_o_no'] = $order_no_new;
                                                            $basedataproduct['order_no'] = $order_purchase_no;
                                                            $basedataproduct['order_id'] = $insertid_purchase;
                                                            $basedataproduct['product_id'] = $product_id_p;
                                                            $basedataproduct['product_name'] = $product_name_p;
                                                            $basedataproduct['categories_name'] = $categories_name_p;
                                                            $basedataproduct['categories_id'] = $categories_id_p;
                                                            
                                                            
                                                            
                                                             $resultc= $this->Main_model->where_names('categories','id',$categories_id_p);
                                         	                 foreach ($resultc as  $valuec)
                                         	                 {
                                         	                     $unit_p=$valuec->uom;
                                         	                     $basedataproduct['uom'] = $unit_p;
                                         	                     $basedataproduct['unit'] = $unit_p;
                                         	                 }
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            $basedataproduct['qty'] = $qty_p;
                                                            $basedataproduct['rate'] = 0;
                                                            $this->Main_model->insert_commen($basedataproduct, 'purchase_product_list_process');
                                                            
                                                            
                                                            $this->db->query("UPDATE  order_product_list SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$order_product_id_p."'");
                                                            $this->db->query("UPDATE  orders SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$form_data->order_id."'");
                                                            
                                                            
                                                            
                                                            $this->db->query("UPDATE order_product_list_quotation SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE order_id='".$insertid."' AND product_id='".$product_id_p."'");
                                                            $this->db->query("UPDATE orders_quotation SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$insertid."'");
                                                                             
                                                         
                                                     }
                                                    
                                                    
                                                }
                
            
                                        }
            
            
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                    
                if($oldtablename=='orders_process')
                {
                    
                   
                        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$orders->customer_id,'party_type',1,'deleteid','0','id','ASC');
                        
                        $balancetotal = 0;
                        $debitsamount = 0;
                        $creditsamount = 0;
                        foreach ($res as $val) {
                            $debitsamount+= $val->debits;
                            $creditsamount+= $val->credits;
                            $balancetotal+= $val->balance;
                        }
                    
                         $balancetotal=$creditsamount-$debitsamount;
                     
                         $balancetotal=$creditsamount-$debitsamount;
            
                        $data_address['order_id'] = $insertid;
                        $data_address['customer_id'] = $orders->customer_id;
                        $data_address['user_id'] = $this->userid;
                        $data_address['notes'] = 'Order Process ' . $find['order_no'];
                        $data_address['payment_mode'] = $payment_mode;
                        $data_address['order_no'] = $find['order_no'];
                        $data_address['difference'] = 0;
                        $data_address['reference_no'] = $find['order_no'];
                        $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
                        $data_address['amount'] = round($discountfulltotal + $delivery_charge);
                        $data_address['debits'] = round($discountfulltotal + $delivery_charge);
                        $data_address['paid_status'] = 0;
                        if ($balancetotal != '0') {
                            $data_address['balance'] = $balancetotal - round($discountfulltotal + $delivery_charge);
                        } else {
                            $data_address['balance'] = '-' . round($discountfulltotal + $delivery_charge);
                        }
                        $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge);
                        $data_address['payment_date'] = $date;
                        $data_address['payment_time'] = $time;
                        $data_address['party_type'] = 1;
                        $data_address['account_head_id'] = 68;
                        $data_address['account_heads_id_2'] = 116;
                         $data_address['order_trancation_status'] = 1;
                        
                        $data_address['party_type'] = 1;
                        
                        
                         if($payment_mode=='Cash')
                        {
                             $data_address['bank_id'] = 25;
                        }
                      
                      
                        $this->Main_model->insert_commen($data_address, 'all_ledgers');
                        
                                
                    
                }
                    
                  
                
                
                
                
                
                
                
                
            }
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['move_id'] = $form_data->order_id;
            if ($tablenamemain == 'orders') {
                $point['reason'] = "Moved";
            }
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    public function order_quotation_archive() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no_old;
        $order_no_new = $form_data->order_no_new;
        $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
        foreach ($result_order as $orders) {
            //$find['id']=$orders->id;
            $find['order_no'] = $order_no_new;
            $find['discount'] = $orders->discount;
            $find['customer_id'] = $orders->customer_id;
            $find['sales_group'] = $orders->sales_group;
            $find['roundoff'] = $orders->roundoff;
            $find['roundoffstatus'] = $orders->roundoffstatus;
            $find['move_id'] = $form_data->order_id;
            $find['archive_id'] = $order_id;
            $find['customer_address_id'] = $orders->customer_address_id;
            $find['route_id'] = $orders->route_id;
            $find['user_id'] = $orders->user_id;
            $find['entry_user_id'] = $this->userid;
            $find['create_date'] = $orders->create_date;
            $find['create_time'] = $time;
            $find['status'] = 1;
            $find['deleteid'] = 0;
            $find['order_base'] = - 3;
            $find['commission_check'] = $orders->commission_check;
            $find['gst_check'] = $orders->gst_check;
            $find['delivery_charge'] = $orders->delivery_charge;
            $find['delivery_status'] = $orders->delivery_status;
            $find['payment_mode'] = $orders->payment_mode;
            $find['delivery_mode'] = $orders_product->delivery_mode;
            $find['others'] = $orders->others;
            $find['print'] = $orders->print;
            $find['packaging'] = $orders->packaging;
            $find['competitorname'] = $orders->competitorname;
            $find['details'] = $orders->details;
            $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $order_no_new);
            if (count($result_order) == 0) {
                $insertid = $this->Main_model->insert_commen($find, $oldtablename);
            } else {
                foreach ($result_order as $orderst) {
                    $insertid = $orderst->id;
                }
                $datass['get_id'] = $order_no_new;
                $datass['order_base'] = - 3;
                $datass['deleteid'] = 0;
                $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
            }
            if ($orders->archive_id == "") {
                $order_idset = $form_data->order_id;
            } else {
                $order_idset = $orders->archive_id;
            }
            $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
            $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
            foreach ($result_order_product as $orders_product) {
                // $findp['id']=$orders_product->id;
                $findp['order_id'] = $insertid;
                $findp['order_no'] = $order_no_new;
                $findp['product_name'] = $orders_product->product_name;
                
                $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                
                $findp['product_id'] = $orders_product->product_id;
                $findp['tile_material_name'] = $orders_product->tile_material_name;
                $findp['tile_material_id'] = $orders_product->tile_material_id;
                $findp['categories_name'] = $orders_product->categories_name;
                $findp['dim_one'] = $orders_product->dim_one;
                $findp['dim_two'] = $orders_product->dim_two;
                $findp['dim_three'] = $orders_product->dim_three;
                $findp['base_id'] = $orders_product->base_id;
                $findp['image_length'] = $orders_product->image_length;
                $findp['gst'] = $orders_product->gst;
                $findp['gst_check'] = $orders_product->gst_check;
                $findp['categories_id'] = $orders_product->categories_id;
                $findp['profile'] = $orders_product->profile;
                $findp['commission'] = $orders_product->commission;
                $findp['address_id'] = $orders_product->address_id;
                $findp['address_id_mark'] = $orders_product->address_id_mark;
                $findp['payment_mode'] = $orders_product->payment_mode;
                $findp['crimp'] = $orders_product->crimp;
                $findp['extra_crimp'] = $orders_product->extra_crimp;
                $findp['back_crimp'] = $orders_product->back_crimp;
                $findp['uom'] = $orders_product->uom;
                $findp['billing_options'] = $orders_product->billing_options;
                $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                $findp['nos'] = $orders_product->nos;
                $findp['unit'] = $orders_product->unit;
                $findp['fact'] = $orders_product->fact;
                $findp['sort_id'] = $orders_product->sort_id;
                $findp['count_id'] = $orders_product->count_id;
                $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                foreach ($additional_information as $vl) {
                    $label_name = strtolower($vl->label_name);
                    $findp[$label_name] = $orders_product->$label_name;
                }
                $findp['section_lable'] = $orders_product->section_lable;
                $findp['section_value'] = $orders_product->section_value;
                $findp['degree'] = $orders_product->degree;
                $findp['sub_product_id'] = $orders_product->sub_product_id;
                $findp['value_id'] = $orders_product->value_id;
                $findp['reference_image'] = $orders_product->reference_image;
                $findp['rate'] = $orders_product->rate;
                $findp['qty'] = $orders_product->qty;
                $findp['amount'] = $orders_product->amount;
                $findp['deleteid'] = $orders_product->deleteid;
                $findp['create_date'] = $orders_product->create_date;
                $this->Main_model->insert_commen($findp, $oldtablename_sub);
            }
        }
    }
    public function order_quotation_move_finish() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        
        $selforder=0;
        if(isset($form_data->selforder))
        {
              $selforder = $form_data->selforder;
        }
        
        
        $deleteid = 0;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = 1;
            
            if ($tablenamemain == 'orders') {
                $datassfirst['reason'] = 'Move To Quotation';
            }
            if ($tablenamemain == 'orders_quotation') {
                 $datassfirst['reason'] = 'Moved To Order';
            }
           
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $order_no_new = strtoupper(date('M') . '/' . $neworder_id);
            
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                //$find['order_no']=$orders->order_no;
                $find['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
                
                $customer_id = $orders->customer_id;
                
                
              
                
                
                
                
                $find['customer_id'] = $orders->customer_id;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
                $find['customer_address_id'] = $orders->customer_address_id;
                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                $find['create_date'] = $orders->create_date;
                $find['create_time'] = $time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                
                // Once production completed change value 0
                
                
                 if($selforder==0)
                 {
                      $find['finance_status'] = 2;
                      $find['delivery_status'] = 1;
                      $find['selforder'] =0;
                 }
                 else
                 {
                      $find['finance_status'] = 4;
                      $find['assign_status'] =3;
                      $find['selforder'] =1;
                 }
                
               
                
                
                
                $find['commission_check'] = $orders->commission_check;
                $find['gst_check'] = $orders->gst_check;
                $find['delivery_charge'] = $orders->delivery_charge;
                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['paricel_mode'] = $orders->paricel_mode;
                
                if($orders->paricel_mode==1)
                {
                    $find['order_base'] = 1;
                    $find['reason'] = 'Order Created (Partial)';
                }
                elseif($orders->paricel_mode==2)
                {
                    $find['order_base'] = 1;
                    $find['reason'] = 'Self Pickup';
                }
                else
                {
                    $find['order_base'] = 1;
                    $find['reason'] = 'Order Created';
                }
                
                
                $find['discount'] = $orders->discount;
                
                
                
                
                
                
                if($orders->discount>0)
                {
                     $find['order_base'] = 20;
                     $find['reason'] = 'MD Approvel Request For Discount';
                }
                if($orders->commission_check==1)
                {
                     $find['order_base'] = 21;
                     $find['reason'] = 'MD Approvel Request For Commission';
                }
                
                
                
                
                
               
                
                
                $find['delivery_mode'] = $orders->delivery_mode;
                $payment_mode = $orders->payment_mode;
                $delivery_charge = $orders->delivery_charge;
                $minisroundoff = $orders->roundoff;
                $roundoffstatus = $orders->roundoffstatus;
                $discount = $orders->discount;
                
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
               
               
                if (count($result_order) == 0) {
                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                } else {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = 1;
                    $datass['finance_status'] = 2;
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                
                $product_array=array();
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                $totalamount = 0;
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    //$order_no=$orders->order_no;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $order_no_new;
                    $findp['product_name'] = $orders_product->product_name;
                    
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    
                    
                    if($orders->paricel_mode==2)
                    {
                        $findp['loadstatus'] = 1;
                    }
                    
                    $product_array[]=$orders_product->id;
                            
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['crimp'] = $orders_product->crimp;
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['uom'] = $orders_product->uom;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;
                    $findp['rate'] = $orders_product->rate;
                    $findp['qty'] = $orders_product->qty;
                    $findp['modify_qty'] = $orders_product->modify_qty;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    $totalamount+= $orders_product->rate * $orders_product->qty;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        $this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                }
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            
            
            
            
            
                                        $product_get=implode("','", $product_array);
                                        $resultorder = $this->db->query("SELECT b.* FROM product_list as a JOIN  $tablename_sub as b ON a.id=b.product_id WHERE b.id IN ('".$product_get."') AND  a.link_to_purchase=1 AND a.deleteid=0 AND b.deleteid=0 ORDER BY a.id DESC");
                                        $resultorder = $resultorder->result();
                                        
                                       
                                        
                                        if(count($resultorder)>0)
                                        {
                                            
                                        
                                                
                                                $purchase_orders_process = 'purchase_orders_process';
                                                $basedata['count_id'] = 1;
                                                $basedata['create_date'] = $date;
                                                $basedata['create_time'] = $time;
                                                $basedata['user_id'] = $this->userid;
                                                $basedata['entry_user_id'] = $this->userid;
                                                $basedata['arrival_date'] = '';
                                                $basedata['price_details'] = '';
                                                $basedata['availability'] = '';
                                                $basedata['customer_id'] = $customer_id;
                                                $neworder_quotation_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count_users($purchase_orders_process, $this->userid);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_quotation_id = $r->count_id + 1;
                                                }
                                                $neworder_id = 1;
                                                $order_last_count = $this->Main_model->order_last_count($purchase_orders_process);
                                                foreach ($order_last_count as $r) {
                                                    $neworder_id = $r->id + 1;
                                                }
                                                
                                                $order_purchase_no = $neworder_id . '/PO' . $neworder_quotation_id . '/' . date('Y');
                                                $basedata['order_no'] = $order_purchase_no;
                                                $basedata['mark_request_to_sales'] = $order_no_new;
                                                $insertid_purchase = 0;
                                                //$insertid_purchase = $this->Main_model->insert_commen($basedata, $purchase_orders_process);
                                                   
                                           
                                                foreach($resultorder as $p_value)
                                                {
                                                    
                                                     $order_product_id_p=$p_value->id;
                                                     $order_id_p=$p_value->order_id;
                                             	     $product_id_p=$p_value->product_id;
                                             	     $product_name_p=$p_value->product_name;
                                             	     $categories_name_p=$p_value->categories_name;
                                             	     $categories_id_p=$p_value->categories_id;
                                             	     $qty_p=$p_value->qty;
                                             	     $rate_p=$p_value->rate;
                                             	     $unit_p=2;
                                             	     $purchase_product_list_process = $this->Main_model->where_names_three_order_by('purchase_product_list_process', 'sale_purchase_op_id', $order_product_id_p, 'product_id', $product_id_p,'sale_purchase_o_no', $order_no_new, 'id', 'ASC');
                                                     if(count($purchase_product_list_process)==0)
                                                     {
                                                         
                                                         
                                                            $basedataproduct['sale_purchase_op_id'] = $order_product_id_p;
                                                            $basedataproduct['sale_purchase_o_no'] = $order_no_new;
                                                            $basedataproduct['order_no'] = $order_purchase_no;
                                                            $basedataproduct['order_id'] = $insertid_purchase;
                                                            $basedataproduct['product_id'] = $product_id_p;
                                                            $basedataproduct['product_name'] = $product_name_p;
                                                            $basedataproduct['categories_name'] = $categories_name_p;
                                                            $basedataproduct['categories_id'] = $categories_id_p;
                                                            
                                                             $resultc= $this->Main_model->where_names('categories','id',$categories_id_p);
                                         	                 foreach ($resultc as  $valuec)
                                         	                 {
                                         	                     $unit_p=$valuec->uom;
                                         	                     $basedataproduct['uom'] = $unit_p;
                                         	                     $basedataproduct['unit'] = $unit_p;
                                         	                 }
                                                            
                                                            $basedataproduct['qty'] = $qty_p;
                                                            $basedataproduct['rate'] = 0;
                                                            //$this->Main_model->insert_commen($basedataproduct, 'purchase_product_list_process');
                                                            
                                                            
                                                            //$this->db->query("UPDATE order_product_list_quotation SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE id='".$order_product_id_p."'");
                     	                                    //$this->db->query("UPDATE orders_quotation SET purchase_request=1,order_base=4,purchase_id='".$insertid_purchase."' WHERE id='".$form_data->order_id."'");
                     	                                    
                     	                                    
                     	                                    
                     	                                    //$this->db->query("UPDATE order_product_list_process SET purchase_request=1,purchase_id='".$insertid_purchase."' WHERE order_id='".$insertid."' AND product_id='".$product_id_p."'");
                     	                                    //$this->db->query("UPDATE orders_process SET purchase_request=1,order_base=4,purchase_id='".$insertid_purchase."' WHERE id='".$insertid."'");
                                                                             
                                                         
                                                     }
                                                    
                                                    
                                                }
                
            
                                        }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
           
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
            
            
            $balancetotal = 0;
            $debitsamount = 0;
            $creditsamount = 0;
            foreach ($res as $val) {
                $debitsamount+= $val->debits;
                $creditsamount+= $val->credits;
                $balancetotal+= $val->balance;
            }
            
             $balancetotal=$creditsamount-$debitsamount;
            
            $data_address['order_id'] = $insertid;
            $data_address['customer_id'] = $customer_id;
            $data_address['user_id'] = $this->userid;
            $data_address['notes'] = 'Order Process ' . $find['order_no'];
            $data_address['payment_mode'] = $payment_mode;
            $data_address['order_no'] = $find['order_no'];
            $data_address['difference'] = 0;
            $data_address['reference_no'] = $find['order_no'];
            $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
            $data_address['amount'] = round($discountfulltotal + $delivery_charge);
            $data_address['debits'] = round($discountfulltotal + $delivery_charge);
            $data_address['paid_status'] = 0;
            if ($balancetotal != '0') {
                $data_address['balance'] = $balancetotal - round($discountfulltotal + $delivery_charge);
            } else {
                $data_address['balance'] = '-' . round($discountfulltotal + $delivery_charge);
            }
            $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge);
            $data_address['payment_date'] = $date;
            $data_address['payment_time'] = $time;
            $data_address['party_type'] = 1;
            $data_address['account_head_id'] = 68;
            $data_address['account_heads_id_2'] = 116;
            $data_address['order_trancation_status'] = 1;
            
            $data_address['party_type'] = 1;
            
            
              
            if($payment_mode=='Cash')
            {
                             $data_address['bank_id'] = 25;
            }
            
            
            
            $this->Main_model->insert_commen($data_address, 'all_ledgers');
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['move_id'] = 'N';
            $point['finance_status'] = 0;
            if ($tablenamemain == 'orders') {
                $point['reason'] = "Null";
            }
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    
    
     public function order_quotation_move_finish_by_paricel() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        
      
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = 0;
        $datassfirst['get_id'] = $form_data->order_id;
        $datassfirst['order_base'] = 1;
        $datassfirst['finance_status'] = 2;
        $datassfirst['assign_status'] = 0;
        $datassfirst['vehicle_id'] = 0;
        $datassfirst['driver_id'] = 0;
        $datassfirst['full_delivery'] = 1;
        $datassfirst['reason'] = 'Order Created (Partial)';
        
        $this->Main_model->update_commen($datassfirst, $tablenamemain);
        
        
    }
    
    
    
    public function order_quotation_move_finish_by_deilvered() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        
        $self = $form_data->selforder;
        
        
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = 0;
        $datassfirst['get_id'] = $form_data->order_id;
        $datassfirst['order_base'] = 1;
        $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
        foreach ($result_order as $orders) {
            $order_no = $orders->order_no;
            $customer_id = $orders->customer_id;
            $payment_mode = $orders->payment_mode;
            $delivery_charge = $orders->delivery_charge;
            $minisroundoff = $orders->roundoff;
            $roundoffstatus = $orders->roundoffstatus;
            $discount = $orders->discount;
            $order_base = $orders->order_base;
            
            
            
            
            if($self==0)
            {
                
                 if ($order_base == 0) {
                    $datassfirst['finance_status'] = 2;
                    $datassfirst['selforder'] =0;
                 }
                 
            }
            else
            {
                
                    $datassfirst['finance_status'] = 4;
                    $datassfirst['selforder'] =1;
                    $datassfirst['assign_status'] =3;
                    
                
            }
            
           
            
            
            
            
        }
        
        
        
        
        $result_order_product = $this->Main_model->where_names_two_order_by('order_product_list_process', 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
        $totalamount = 0;
        foreach ($result_order_product as $orders_product) {
            $totalamount+= $orders_product->rate * $orders_product->qty;
        }
        if ($roundoffstatus == 1) {
            $discountfulltotal = $totalamount - $discount + $minisroundoff;
        } else {
            $discountfulltotal = $totalamount - $discount - $minisroundoff;
        }
        
        $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
        
        
        $balancetotal = 0;
        $debitsamount = 0;
        $creditsamount = 0;
        foreach ($res as $val) {
            $debitsamount+= $val->debits;
            $creditsamount+= $val->credits;
            $balancetotal+= $val->balance;
        }
        
          $balancetotal=$creditsamount-$debitsamount;
        
        $data_address['order_id'] = $form_data->order_id;
        $data_address['customer_id'] = $customer_id;
        $data_address['user_id'] = $this->userid;
        $data_address['notes'] = 'Order Process ' . $order_no;
        $data_address['payment_mode'] = $payment_mode;
        $data_address['order_no'] = $order_no;
        $data_address['difference'] = 0;
        $data_address['reference_no'] = $find['order_no'];
        $data_address['amount'] = round($discountfulltotal + $delivery_charge);
        $data_address['debits'] = round($discountfulltotal + $delivery_charge);
        $data_address['paid_status'] = 0;
        $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
        if ($balancetotal != '0') {
            $data_address['balance'] = $balancetotal - round($discountfulltotal + $delivery_charge);
        } else {
            $data_address['balance'] = '-' . round($discountfulltotal + $delivery_charge);
        }
        $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge);
        $data_address['payment_date'] = $date;
        $data_address['payment_time'] = $time;
        $data_address['party_type'] = 1;
        $data_address['account_head_id'] = 68;
        $data_address['account_heads_id_2'] = 116;
        $data_address['order_trancation_status'] = 1;
        
        
            if($payment_mode=='Cash')
            {
                             $data_address['bank_id'] = 25;
            }
            
        
        
        $result_order_product = $this->Main_model->where_names_three_order_by('all_ledgers', 'customer_id', $customer_id, 'order_id', $form_data->order_id,'party_type', 1, 'id', 'ASC');
        if(count($result_order_product) == 0) 
        {
            
            
            
            
            $this->Main_model->insert_commen($data_address, 'all_ledgers');
            
            
            
            
        }
        else
        {
            
            foreach($result_order_product as $vl)
            {
               $getid= $vl->id;
            }
            
            
            $reupdate_value['get_id'] = $getid;
            $reupdate_value['deleteid'] = 0;
            $reupdate_value['amount'] = round($discountfulltotal + $delivery_charge);
            $reupdate_value['debits'] = round($discountfulltotal + $delivery_charge);
            $this->Main_model->update_commen($reupdate_value, 'all_ledgers');
            
        }
        
        // Once production completed change value 0
        
            if($self==0)
            {
                 $datassfirst['reason'] = "Order Created";
            }
            else
            {
                    $datassfirst['reason'] = "Self Pickup";
                
                    $ppa['get_id'] = $form_data->order_id;
                    $ppa['loadstatus'] = 1;
                    $this->Main_model->update_commen_where($ppa, 'order_id', $tablename_sub);
                
            }
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
        
        
           $datassfirst1['get_id'] = $form_data->order_id;
           $datassfirst1['order_base']=1;
           $datassfirst1['reason'] = "Order Created";
          // $this->Main_model->update_commen($datassfirst1, 'orders_quotation');
        
        
        
        
    }
    
    
    
    
    public function order_quotation_move_status() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $orderstatus = $form_data->orderstatus;
        $namestatus = $form_data->namestatus;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = $orderstatus;
            $datassfirst['price_requerst_status'] = 3;
            $datassfirst['reason'] = $namestatus;
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                $find['order_no'] = $orders->order_no;
                $find['discount'] = $orders->discount;
                $find['customer_id'] = $orders->customer_id;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
                $find['customer_address_id'] = $orders->customer_address_id;
                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                $find['create_date'] = $orders->create_date;
                $find['create_time'] = $time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                $find['order_base'] = $orderstatus;
                $find['price_requerst_status'] = 3;
                $find['commission_check'] = $orders->commission_check;
                $find['gst_check'] = $orders->gst_check;
                $find['reason'] = $namestatus;
                $find['delivery_charge'] = $orders->delivery_charge;
                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['paricel_mode'] = $orders->paricel_mode;
                $find['delivery_mode'] = $orders->delivery_mode;
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
                if (count($result_order) == 0) {
                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                } else {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = $orderstatus;
                    $datass['price_requerst_status'] = 3;
                    $datass['reason'] = $namestatus;
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $orders->order_no;
                    $findp['product_name'] = $orders_product->product_name;
                    
                    
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['uom'] = $orders_product->uom;
                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                    $findp['modify_qty'] = $orders_product->modify_qty;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['crimp'] = $orders_product->crimp;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;
                    $findp['rate'] = $orders_product->rate;
                    $findp['qty'] = $orders_product->qty;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        $this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                }
            }
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['price_requerst_status'] = 3;
            $point['reason'] = $namestatus;
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $datass['reason'] = $namestatus;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    public function order_quotation_move_finish_sh() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = 0;
        if ($deleteid == 0) {
            $datassfirst['get_id'] = $form_data->order_id;
            $datassfirst['order_base'] = 1;
            $datassfirst['reason'] = "Sales Head Price Approved";
            $this->Main_model->update_commen($datassfirst, $tablenamemain);
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $result_order = $this->Main_model->where_names($tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order as $orders) {
                //$find['id']=$orders->id;
                $find['order_no'] = strtoupper(date('M') . '/' . $neworder_id);
                $find['discount'] = $orders->discount;
                $find['customer_id'] = $orders->customer_id;
                $customer_id = $orders->customer_id;
                $find['sales_group'] = $orders->sales_group;
                $find['roundoff'] = $orders->roundoff;
                $find['roundoffstatus'] = $orders->roundoffstatus;
                $find['move_id'] = $form_data->order_id;
                $find['customer_address_id'] = $orders->customer_address_id;
                $find['route_id'] = $orders->route_id;
                $find['user_id'] = $orders->user_id;
                $find['entry_user_id'] = $this->userid;
                $find['create_date'] = $orders->create_date;
                $find['create_time'] = $time;
                $find['status'] = 1;
                $find['deleteid'] = $deleteid;
                $find['order_base'] = 1;
                $find['reason'] = "Sales Head Price Approved";
                $payment_mode = $orders->payment_mode;
                $delivery_charge = $orders->delivery_charge;
                $minisroundoff = $orders->roundoff;
                $roundoffstatus = $orders->roundoffstatus;
                $discount = $orders->discount;
                // Once production completed change value 0
                $find['finance_status'] = 2;
                $find['commission_check'] = $orders->commission_check;
                $find['gst_check'] = $orders->gst_check;
                $find['paricel_mode'] = $orders->paricel_mode;
                $find['delivery_mode'] = $orders->delivery_mode;
                $find['delivery_charge'] = $orders->delivery_charge;
                $find['delivery_status'] = $orders->delivery_status;
                $find['payment_mode'] = $orders->payment_mode;
                $find['others'] = $orders->others;
                $find['print'] = $orders->print;
                $find['packaging'] = $orders->packaging;
                $find['competitorname'] = $orders->competitorname;
                $find['details'] = $orders->details;
                $result_order = $this->Main_model->where_names($oldtablename, 'order_no', $orders->order_no);
                if (count($result_order) == 0) {
                    $insertid = $this->Main_model->insert_commen($find, $oldtablename);
                } else {
                    foreach ($result_order as $orderst) {
                        $insertid = $orderst->id;
                    }
                    $datass['get_id'] = $form_data->order_no;
                    $datass['order_base'] = 1;
                    $datass['finance_status'] = 2;
                    $datass['reason'] = "Sales Head Price Approved";
                    $datass['deleteid'] = $deleteid;
                    $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
                }
                $this->Main_model->delete_where($oldtablename_sub, 'order_id', $insertid);
                $result_order_product = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $form_data->order_id, 'deleteid', '0', 'id', 'ASC');
                $totalamount = 0;
                foreach ($result_order_product as $orders_product) {
                    // $findp['id']=$orders_product->id;
                    $findp['order_id'] = $insertid;
                    $findp['order_no'] = $orders->order_no;
                    $findp['product_name'] = $orders_product->product_name;
                    
                    
                    $findp['loadstatus_by_cate'] = $orders_product->loadstatus_by_cate;
                    
                    $findp['product_id'] = $orders_product->product_id;
                    $findp['tile_material_name'] = $orders_product->tile_material_name;
                    $findp['tile_material_id'] = $orders_product->tile_material_id;
                    $findp['billing_options'] = $orders_product->billing_options;
                    $findp['uom'] = $orders_product->uom;
                    $findp['categories_name'] = $orders_product->categories_name;
                    $findp['categories_id'] = $orders_product->categories_id;
                    $findp['dim_one'] = $orders_product->dim_one;
                    $findp['dim_two'] = $orders_product->dim_two;
                    $findp['dim_three'] = $orders_product->dim_three;
                    $findp['base_id'] = $orders_product->base_id;
                    $findp['image_length'] = $orders_product->image_length;
                    $findp['gst'] = $orders_product->gst;
                    $findp['gst_check'] = $orders_product->gst_check;
                    $findp['profile'] = $orders_product->profile;
                    $findp['commission'] = $orders_product->commission;
                    $findp['address_id'] = $orders_product->address_id;
                    $findp['address_id_mark'] = $orders_product->address_id_mark;
                    $findp['paricel_mode'] = $orders_product->paricel_mode;
                    $findp['crimp'] = $orders_product->crimp;
                    $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
                    foreach ($additional_information as $vl) {
                        $label_name = strtolower($vl->label_name);
                        $findp[$label_name] = $orders_product->$label_name;
                    }
                    $findp['extra_crimp'] = $orders_product->extra_crimp;
                    $findp['back_crimp'] = $orders_product->back_crimp;
                    $findp['Meter_to_Sqr_feet'] = $orders_product->Meter_to_Sqr_feet;
                    $findp['Sqr_feet_to_Meter'] = $orders_product->Sqr_feet_to_Meter;
                    $findp['nos'] = $orders_product->nos;
                    $findp['unit'] = $orders_product->unit;
                    $findp['fact'] = $orders_product->fact;
                    $findp['section_lable'] = $orders_product->section_lable;
                    $findp['section_value'] = $orders_product->section_value;
                    $findp['degree'] = $orders_product->degree;
                    $findp['sub_product_id'] = $orders_product->sub_product_id;
                    $findp['value_id'] = $orders_product->value_id;
                    $findp['reference_image'] = $orders_product->reference_image;
                    $findp['rate'] = $orders_product->rate;
                    $findp['qty'] = $orders_product->qty;
                    $findp['modify_qty'] = $orders_product->modify_qty;
                    $findp['sort_id'] = $orders_product->sort_id;
                    $findp['count_id'] = $orders_product->count_id;
                    $findp['amount'] = $orders_product->amount;
                    $findp['deleteid'] = $orders_product->deleteid;
                    $findp['create_date'] = $orders_product->create_date;
                    $totalamount+= $orders_product->rate * $orders_product->qty;
                    if ($oldtablename_sub == 'order_product_list_process') {
                        
                        $dataval['stock_id'] = $orders->order_no;
                        $dataval['product_id'] = $orders_product->product_id;
                        $dataval['price'] = $orders_product->rate;
                        $dataval['customer_id'] = $orders->customer_id;
                        $dataval['inward_qty'] = $orders_product->qty;
                        $dataval['po_number'] = $orders->order_no;
                        $dataval['inward_date'] = date('Y-m-d');
                        $this->Main_model->insert_commen($dataval, 'stock_history');
                    }
                    $this->Main_model->insert_commen($findp, $oldtablename_sub);
                }
            }
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            
            $res =$this->Main_model->where_names_three_order_by('all_ledgers','customer_id',$customer_id,'party_type',1,'deleteid','0','id','ASC');
            
            $balancetotal = 0;
            $debitsamount = 0;
            $creditsamount = 0;
            foreach ($res as $val) {
                $debitsamount+= $val->debits;
                $creditsamount+= $val->credits;
                $balancetotal+= $val->balance;
            }
            
            
             $balancetotal=$creditsamount-$debitsamount;
            
            $data_address['order_id'] = $insertid;
            $data_address['customer_id'] = $customer_id;
            $data_address['user_id'] = $this->userid;
            $data_address['notes'] = 'Order Process ' . $find['order_no'];
            $data_address['payment_mode'] = $payment_mode;
            $data_address['order_no'] = $find['order_no'];
            $data_address['process_by'] = 'Order Processed order id '.$find['order_no'];
            $data_address['difference'] = 0;
            $data_address['reference_no'] = $find['order_no'];
            $data_address['amount'] = round($discountfulltotal + $delivery_charge);
            $data_address['debits'] = round($discountfulltotal + $delivery_charge);
            $data_address['paid_status'] = 0;
            if ($balancetotal != '0') {
                $data_address['balance'] = $balancetotal - round($discountfulltotal + $delivery_charge);
            } else {
                $data_address['balance'] = '-' . round($discountfulltotal + $delivery_charge);
            }
            $data_address['collected_amount'] = round($discountfulltotal + $delivery_charge);
            $data_address['payment_date'] = $date;
            $data_address['payment_time'] = $time;
            $data_address['party_type'] = 1;
            $data_address['account_head_id'] = 68;
            $data_address['account_heads_id_2'] = 116;
             $data_address['order_trancation_status'] = 1;
            if($payment_mode=='Cash')
            {
                 $data_address['bank_id'] = 25;
            }
           
            
            
            $this->Main_model->insert_commen($data_address, 'all_ledgers');
        } else {
            $point['get_id'] = $form_data->order_no;
            $point['order_base'] = 0;
            $point['move_id'] = 'N1';
            $point['finance_status'] = 0;
            if ($tablenamemain == 'orders') {
                $point['reason'] = "Null1";
            }
            $this->Main_model->update_commen_where($point, 'order_no', $tablenamemain);
            $datass['get_id'] = $form_data->order_no;
            $datass['deleteid'] = $deleteid;
            $this->Main_model->update_commen_where($datass, 'order_no', $oldtablename);
        }
    }
    public function order_price_request() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $datass['get_id'] = $form_data->order_id;
        $datass['order_base'] = $deleteid;
        $datass['price_requerst_status'] = $deleteid;
        if ($deleteid == '3') {
            $datass['reason'] = "Price Requested To TL";
        } else {
            $datass['reason'] = "";
        }
        $this->Main_model->update_commen($datass, $tablenamemain);
    }
    public function order_quotation_request() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $status = $form_data->status;
        $reason = $form_data->reason;
        $point['get_id'] = $form_data->order_id;
        $point['order_base'] = $status;
       
        if ($status == 3) {
            $point['reason'] = 'Sales Approval Requested';
        } else {
            $point['reason'] = $reason;
        }
        
        if ($tablenamemain == 'orders_process') {
           
            if ($deleteid == 1) {
                $point['finance_status'] = 2;
                $point['assign_status'] = 0;
            }
            
            
            
        }
        $this->Main_model->update_commen($point, $tablenamemain);
        if ($tablenamemain == 'orders_process') {
            $point['get_id'] = $form_data->order_no;
            $this->Main_model->update_commen_where($point, 'order_no', 'orders_quotation');
        }
    }
    
    
    
    
    public function order_md_approved() 
    {
        
        
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $status = $form_data->status;
        $mdstatus = $form_data->mdstatus;
        $reason = $form_data->reason;
        $point['get_id'] = $form_data->order_id;
        $point['order_base'] = $status;
        
        
        
        if($point['order_base']==-1)
        {
            
            
            
                               $results = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
                               foreach($results as $vl)
                               {
                                    $move_id=$vl->move_id;
                                     $move_id_order_no=$vl->order_no;
                               }
                               
                                $vv['get_id'] = $move_id;
                                $vv['reason'] = 'Order '.$move_id_order_no;
                                $vv['order_base'] = -1;
                                $this->Main_model->update_commen($vv, 'orders_quotation');
                               
                               
                               
                               $results1 = $this->Main_model->where_names('orders_quotation', 'id', $move_id);
                               foreach($results1 as $vl1)
                               {
                                    $move_id1=$vl1->move_id;
                                      $move_id_order_no1=$vl1->order_no;
                               }
                               
                                $vv1['get_id'] = $move_id1;
                                $vv1['reason'] = 'Order '.$move_id_order_no1;
                                $vv1['order_base'] = -1;
                                $this->Main_model->update_commen($vv1, 'orders');
            
            
            
        }
        
        
        
        
        
       
        if ($status == 3) {
            $point['reason'] = 'Sales Approval Requested';
        } else {
            $point['reason'] = $reason;
        }
        
        if($tablenamemain == 'orders_process') {
           
          
            $point['md_approved_status'] = $mdstatus;
            $point['approved_by_user'] = $this->userid;
            
        }
        $this->Main_model->update_commen($point, $tablenamemain);
        if ($tablenamemain == 'orders_process') {
            
            
            $point['get_id'] = $form_data->order_no;
            $this->Main_model->update_commen_where($point, 'order_no', 'orders_quotation');
            
            if($point['order_base']==-1)
            {
                 $this->db->query("UPDATE all_ledgers SET deleteid='1' WHERE order_id='".$order_id."' AND party_type=1");
            }
            
            
        }
        
        
        
    }
    
    
    
    
    
    
    
    public function order_quotation_request_finance() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $oldtablename_sub = $form_data->movetablename_sub;
        $oldtablename = $form_data->movetablename;
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $order_no = $form_data->order_no;
        $deleteid = $form_data->deleteid;
        $reason = $form_data->reason;
        $point['get_id'] = $form_data->order_id;
        $point['finance_status'] = $deleteid;
        $point['reason'] = $reason;
        $this->Main_model->update_commen($point, $tablenamemain);
    }
    public function fetchCustomerorcallbackhistroy() {
        $form_data = json_decode(file_get_contents("php://input"));
        $resultpending = $this->Main_model->where_names_order_by('call_history', 'order_no', $form_data->order_no, 'id', 'DESC');
        $i = 1;
        $array = array();
        foreach ($resultpending as $value) {
            if ($value->status_data == 'Call Back') {
                $value->status_data = $value->status_data . ' ' . date('d-m-Y', strtotime($value->call_back_date));
            }
            $array[] = array('no' => $i, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'user_id' => $value->user_id, 'status_data' => $value->status_data, 'remarks' => $value->remarks, 'call_back_date' => date('d-m-Y', strtotime($value->call_back_date)), 'audio' => $value->audio, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroy_driver() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $order_id = $form_data->order_id;
        $result_c = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
        foreach ($result_c as $orders_c) {
            $customer_id = $orders_c->customer_id;
        }
        $resultorder = $this->Main_model->where_names_order_by($tablenamemain, 'customer_id', $customer_id, 'id', 'DESC');
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $result_order_product = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($result_order_product as $orders_product) {
                $name = $orders_product->name;
            }
            if ($value->return_status != 0) {
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'user_name' => $name, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroyorderlist_driver() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_id = $form_data->order_id;
        $result_c = $this->Main_model->where_names($tablenamemain, 'id', $order_id);
        foreach ($result_c as $orders_c) {
            $customer_id = $orders_c->customer_id;
        }
        $resultorder = $this->db->query("SELECT a.* FROM $tablename_sub as a JOIN orders_process as b ON a.order_id=b.id  WHERE a.return_status!='0' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.id DESC");
        $resultorder = $resultorder->result();
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'imagestatus' => $imagestatus, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'product_name_tab' => $product_name, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => $value->profile, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $value->qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroy() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $order_no = $form_data->order_no;
        $customer_id = 'DR000';
        $result_c = $this->Main_model->where_names('orders', 'order_no', $order_no);
        if (count($result_c) == 0) {
            $result_c = $this->Main_model->where_names('orders_quotation', 'order_no', $order_no);
            if (count($result_c) == 0) {
                $result_c = $this->Main_model->where_names('orders_process', 'order_no', $order_no);
            }
        }
        if (count($result_c) > 0) {
            foreach ($result_c as $orders_c) {
                $customer_id = $orders_c->customer_id;
            }
        }
        if ($customer_id == '') {
            $customer_id = 'DR000';
        }
        
        
        $resultorder = $this->Main_model->where_names_order_by_limit($tablenamemain, 'customer_id', $customer_id, 'id', 'DESC');
         
        $i = 1;
        $array = array();
        $url = "";
        $lable = "";
        foreach ($resultorder as $value) {
           
            if ($tablenamemain == 'orders') {
                $url = base_url() . 'index.php/order/ordercreate_product?order_id=' . base64_encode($value->id);
                $lable = "Enquiry";
            }
            
            if ($tablenamemain == 'orders_quotation') {
                $url = base_url() . 'index.php/order/ordercreate_product_quotation?order_id=' . base64_encode($value->id);
                $lable = "Quotation";
            }
            
            if ($tablenamemain == 'orders_process') {
                $url = base_url() . 'index.php/order/ordercreate_product_process?order_id=' . base64_encode($value->id);
                $lable = "Order";
            }
            
            $result_order_product = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($result_order_product as $orders_product) {
               $name = $orders_product->name;
            }
            
            if ($value->order_no != $order_no) {
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'url' => $url, 'lable' => $lable, 'user_name' => $name, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroy_return() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $order_no = $form_data->order_no;
        $customer_id = 0;
        $result_c = $this->Main_model->where_names('orders', 'order_no', $order_no);
        if (count($result_c) == 0) {
            $result_c = $this->Main_model->where_names('orders_quotation', 'order_no', $order_no);
            if (count($result_c) == 0) {
                $result_c = $this->Main_model->where_names('orders_process', 'order_no', $order_no);
            }
        }
        if (count($result_c) > 0) {
            foreach ($result_c as $orders_c) {
                $customer_id = $orders_c->customer_id;
            }
        }
        if ($customer_id == '') {
            $customer_id = 0;
        }
        $resultorder = $this->Main_model->where_names_two_order_by_limit($tablenamemain, 'customer_id', $customer_id, 'assign_status', '8', 'id', 'DESC');
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $url = "";
            $lable = "";
            if ($tablenamemain == 'orders') {
                $url = base_url() . 'index.php/order/ordercreate_product?order_id=' . base64_encode($value->id);
                $lable = "Enquiry";
            }
            if ($tablenamemain == 'orders_quotation') {
                $url = base_url() . 'index.php/order/ordercreate_product_quotation?order_id=' . base64_encode($value->id);
                $lable = "Quotation";
            }
            if ($tablenamemain == 'orders_process') {
                $url = base_url() . 'index.php/order/ordercreate_product_process?order_id=' . base64_encode($value->id);
                $lable = "Order";
            }
            $result_order_product = $this->Main_model->where_names('admin_users', 'id', $value->user_id);
            foreach ($result_order_product as $orders_product) {
                $name = $orders_product->name;
            }
            if ($value->order_no != $order_no) {
                $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'url' => $url, 'lable' => $lable, 'user_name' => $name, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            }
            $i++;
        }
        echo json_encode($array);
    }
    public function fetchCustomerororderhistroyorderlist() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $tablename_sub = $form_data->tablename_sub;
        $order_no = $form_data->order_no;
        $result_c = $this->Main_model->where_names($tablenamemain, 'order_no', $order_no);
        foreach ($result_c as $orders_c) {
            $customer_id = $orders_c->customer_id;
        }
        $resultorder = $this->db->query("SELECT a.* FROM $tablename_sub as a JOIN orders_process as b ON a.order_id=b.id  WHERE b.order_no!='" . $order_no . "' AND b.customer_id='" . $customer_id . "' AND a.deleteid=0 ORDER BY a.id DESC");
        $resultorder = $resultorder->result();
        $i = 1;
        $array = array();
        foreach ($resultorder as $value) {
            $amountdata = $value->rate * $value->qty;
            $amount = $amountdata + $value->commission;
            $description = "";
            $product_name = "";
            $product_list = $this->Main_model->where_names('product_list', 'id', $value->product_id);
            foreach ($product_list as $csval) {
                $description = $csval->description;
                $product_name = $csval->product_name;
                $categories = $csval->categories;
                $categories_id = $csval->categories_id;
                $type = $csval->type;
                $gst = $csval->gst;
            }
            $imagestatus = 1;
            if ($value->reference_image == '') {
                $imagestatus = 0;
            }
            if ($value->gst == '') {
                $value->gst = $gst;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'order_id' => $value->order_id, 'order_no' => $value->order_no, 'product_name_tab' => $product_name, 'imagestatus' => $imagestatus, 'categories' => $categories, 'description' => $description, 'product_id' => $value->product_id, 'tile_material_name' => $value->tile_material_name, 'tile_material_id' => $value->tile_material_id, 'categories_id' => $value->categories_id, 'profile_tab' => $value->profile, 'crimp_tab' => $value->crimp, 'dim_two' => $value->dim_two, 'dim_one' => $value->dim_one, 'dim_three' => $value->dim_three, 'image_length' => $value->image_length, 'gst' => $value->gst, 'gst_check' => $value->gst_check, 'extra_crimp' => $value->extra_crimp, 'back_crimp' => $value->back_crimp, 'nos_tab' => $value->nos, 'unit_tab' => $value->unit, 'return_status' => $value->return_status, 'fact_tab' => $value->fact, 'uom' => $value->uom, 'billing_options' => $value->billing_options, 'commission_tab' => $value->commission, 'categories_id_get' => $categories_id, 'Meter_to_Sqr_feet' => round($value->Meter_to_Sqr_feet, 4), 'Sqr_feet_to_Meter' => round($value->Sqr_feet_to_Meter, 4), 'rate_tab' => $value->rate, 'qty_tab' => $value->qty, 'amount_tab' => round($amount, 4));
            $i++;
        }
        echo json_encode($array);
    }
    public function callbacksave() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        if ($form_data->call_status != '') {
            $findp['status_data'] = $form_data->call_status;
            $findp['call_back_date'] = $form_data->call_back_date;
            $findp['order_id'] = $form_data->order_id;
            $findp['order_no'] = $form_data->order_no;
            $findp['user_id'] = $this->sales_id;
            $findp['audio'] = $form_data->audiolink;
            $findp['remarks'] = $form_data->remarks;
            $findp['create_date'] = $date;
            $findp['create_time'] = $time;
            $customer_id = 0;
            $result_order_product = $this->Main_model->where_names($form_data->tablenamemain, 'id', $form_data->order_id);
            foreach ($result_order_product as $orders_product) {
                $customer_id = $orders_product->customer_id;
            }
            $findp['customer_id'] = $customer_id;
            $insert_id = $this->Main_model->insert_commen($findp, 'call_history');
            $array = array('error' => '2', 'insert_id' => $insert_id, 'massage' => 'Call Back submitted');
            echo json_encode($array);
        } else {
            $array = array('error' => '1');
            echo json_encode($array);
        }
    }
    public function fileuplaod() {
        if (!empty($_FILES)) {
            $path = array();
            $ticket_id = $_GET['id'];
            echo $path = 'uploads/' . time() . $_FILES['file']['name'];
              $imageFileType = strtolower(pathinfo($path,PATHINFO_EXTENSION));
                      
                         if($imageFileType!='exe')
                         {
                                if (move_uploaded_file($_FILES['file']['tmp_name'], $path)) {
                                    $point['get_id'] = $ticket_id;
                                    $point['audio'] = $path;
                                    $this->Main_model->update_commen($point, 'call_history');
                                }
            
                         }
            
        }
    }
    public function fileuplaodimage() {
        if (!empty($_FILES)) {
            $path = array();
            $ticket_id = $_GET['id'];
            echo $path = 'uploads/' . time() . $_FILES['file']['name'];
            
              $imageFileType = strtolower(pathinfo($path,PATHINFO_EXTENSION));
                      
                         if($imageFileType!='exe')
                         {
            
                                    if (move_uploaded_file($_FILES['file']['tmp_name'], $path)) {
                                        $point['product_id'] = $ticket_id;
                                        $point['product_image'] = $path;
                                        $this->Main_model->insert_commen($point, 'product_images');
                                    }
                         }
        }
    }
    public function payment_image() {
        if (!empty($_FILES)) {
            $path = array();
            $ticket_id = $_GET['id'];
            echo $path = 'uploads/' . time() . $_FILES['file']['name'];
            
              $imageFileType = strtolower(pathinfo($path,PATHINFO_EXTENSION));
              if($imageFileType!='exe')
              {
            
                                        if (move_uploaded_file($_FILES['file']['tmp_name'], $path)) {
                                            $point['get_id'] = $ticket_id;
                                            $point['payment_image'] = $path;
                                            $this->Main_model->update_commen($point, 'orders_process');
                                        }
            
             }
             
             
        }
    }
    
    
    
    
    public function group_gy_route_return() {
        $result = $this->Main_model->where_names('route', 'deleteid', '0');
        $data = array();
        $i = 1;
        foreach ($result as $value) {
            
            
            
            $query = $this->db->query("SELECT a.* FROM order_sales_return_complaints as a JOIN orders_process as b ON a.order_id=b.id  WHERE a.deleteid='0' AND b.route_id='".$value->id."' AND a.order_base=0");
            $resultset = $query->result();
            
            
            if (count($resultset) > 0) {
                $data[] = array('no' => $i, 'id' => $value->id, 'name' => $value->name, 'count' => count($resultset));
            }
            $i++;
            
            
        }
        echo json_encode($data);
    }
    
    
    
    
    
    
    
    
    public function group_gy_route() {
        $result = $this->Main_model->where_names('route', 'deleteid', '0');
        $data = array();
        $i = 1;
        foreach ($result as $value) {
            $result = $this->Main_model->where_names_five_order_by_new('orders_process', 'finance_status', '2', 'order_base', '1', 'route_id', $value->id, 'assign_status', '0', 'delivery_status', '1', 'id', 'DESC');
            if (count($result) > 0) {
                $data[] = array('no' => $i, 'id' => $value->id, 'name' => $value->name, 'count' => count($result));
            }
            $i++;
        }
        echo json_encode($data);
    }
    
    
    
    
    
    
    
    
    public function group_gy_route_own() {
        $result = $this->Main_model->where_names('route', 'deleteid', '0');
        $data = array();
        $i = 1;
        foreach ($result as $value) {
            $result = $this->Main_model->where_names_five_order_by_new('orders_process', 'finance_status', '2', 'order_base', '1', 'route_id', $value->id, 'assign_status', '0', 'delivery_status', '2', 'id', 'DESC');
            if (count($result) > 0) {
                $data[] = array('no' => $i, 'id' => $value->id, 'name' => $value->name, 'count' => count($result));
            }
            $i++;
        }
        echo json_encode($data);
    }
    
    
    
    
    
    
    public function orderassign() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $sortingInput_data = $form_data->sortingInput_data;
        $sortingInput_data = explode('|', $sortingInput_data);
        $orderid_data = $form_data->orderid_data;
        $orderid_data = explode('|', $orderid_data);
        $vehicle_id_data = $form_data->vehicle_id_data;
        // $vehicle_id_data= explode('|', $vehicle_id_data);
        for ($i = 0;$i < count($orderid_data);$i++) {
            $datass['get_id'] = $orderid_data[$i];
            $datass['vehicle_id'] = $vehicle_id_data;
            if ($vehicle_id_data != '') {
                $result = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id_data);
                foreach ($result as $value) {
                    $driver_id = $value->id;
                }
                $datass['driver_id'] = $driver_id;
                $datass['assign_status'] = 11;
                $datass['loading_status'] = 0;
                $datass['assign_date'] = $date;
                $datass['assign_time'] = $time;
                $datass['assign_date_time'] = date('Y-m-d g:i:s');
                $datass['finance_status'] = 3;
                $datass['reason'] = 'Ready for loading';
                $datass['otp'] = '1234';
                $datass['trip_id'] = substr(time(), 4);
                $datass['sort_id'] = $sortingInput_data[$i];
                $tablename = $form_data->tablenamemain;
                $this->Main_model->update_commen($datass, $tablename);
            }
        }
    }
    
    
    
     public function orderassign_return() {
        date_default_timezone_set("Asia/Kolkata");
        $date = date('Y-m-d');
        $time = date('h:i A');
        $form_data = json_decode(file_get_contents("php://input"));
        $sortingInput_data = $form_data->sortingInput_data;
        $sortingInput_data = explode('|', $sortingInput_data);
        $orderid_data = $form_data->orderid_data;
        $orderid_data = explode('|', $orderid_data);
        $vehicle_id_data = $form_data->vehicle_id_data;
        // $vehicle_id_data= explode('|', $vehicle_id_data);
        for ($i = 0;$i < count($orderid_data);$i++) {
            
            
            $datass['get_id'] = $orderid_data[$i];
            $datass['vehicle_id'] = $vehicle_id_data;
            if ($vehicle_id_data != '') 
            {
                $result = $this->Main_model->where_names('driver', 'vehicle_id', $vehicle_id_data);
                foreach ($result as $value) {
                    $driver_id = $value->id;
                    $driver_name = $value->name;
                }
                $results = $this->Main_model->where_names('order_sales_return_complaints', 'id', $datass['get_id']);
                foreach ($results as $values) {
                    $customer_id = $values->customer;
                   
                }
                
                $query = $this->db->query("SELECT b.route_id FROM customers as a  JOIN locality as b ON a.locality=b.id   WHERE a.deleteid='0' AND a.id='".$customer_id."'");
                $resultsc = $query->result();
                foreach ($resultsc as $valuesc) {
                    $route_id = $valuesc->route_id;
                   
                }
                
                $datass['driver_id'] = $driver_id;
                $datass['driver_assign'] = 1;
                $datass['assign_date'] = $date;
                $datass['assign_time'] = $time;
                $datass['order_base'] = 1;
                $datass['route_id'] = $route_id;
                $datass['otp'] = '1234';
                $datass['remarks'] = 'Assign To Driver '.$driver_name;
                $datass['vehicle_id'] = $vehicle_id_data;
                $datass['trip_id'] = substr(time(), 4);
                $datass['sort_id'] = $sortingInput_data[$i];
                $tablename = $form_data->tablenamemain;
                $this->Main_model->update_commen($datass, $tablename);
                
                
                
                
                
                
                $datassh['c_id'] = $datass['get_id'];
                $datassh['create_date'] = $date;
                $datassh['create_time'] = $time;
                $datassh['order_base'] = 1;
                $datassh['remarks'] = 'Assign To Driver '.$driver_name;
                $this->Main_model->insert_commen($datassh, 'sales_return_remarks');
                
                
                
                
            }
        }
    }
    
    
    
    public function save_content_by_overview()
    {
         $input_text = $_POST['input_text'];
         $order_id = $_POST['order_id'];
        
         $tablename = $_POST['tablename'];
         
         if($tablename=='orders_quotation')
         {
             $order_id='QC_'.$order_id;
         }
         else
         {
             $order_id='OR_'.$order_id;
         }
        
        $this->db->query("DELETE FROM overview_invoice_content_base_order  WHERE order_id='" . $order_id . "'");
        
        
        
        
        for ($i = 0;$i < count($input_text);$i++) {
            $datass['input_text'] = $input_text[$i];
            $datass['order_id'] = $order_id;
            $this->Main_model->insert_commen($datass, 'overview_invoice_content_base_order');
        }
        redirect($_SERVER['HTTP_REFERER']);
        
        
        
        
    }
    public function productimagesave() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        define('UPLOAD_DIR', 'uploads/');
        $img = $form_data->imgBase64;
        $img = str_replace('data:image/png;base64,', '', $img);
        $img = str_replace(' ', '+', $img);
        $data = base64_decode($img);
        $file = UPLOAD_DIR . uniqid() . '.png';
        $success = file_put_contents($file, $data);
        print $success ? $file : 'Unable to save the file.';
        $datass_val['get_id'] = $id;
        $datass_val['reference_image'] = $file;
        $this->Main_model->update_commen_where($datass_val, 'id', $tablename_sub);
        //$datass['product_id']=$product_id;
        //$datass['product_image']=$file;
        //$this->Main_model->insert_commen($datass,'product_images');
        
    }
    public function productimagesavechoose() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $id = $form_data->order_product_id;
        $image_id = $form_data->image_id;
        $result = $this->Main_model->where_names('product_images', 'id', $image_id);
        $file = "";
        foreach ($result as $value) {
            $file = $value->product_image;
        }
        $datass_val['get_id'] = $id;
        $datass_val['reference_image'] = $file;
        $this->Main_model->update_commen_where($datass_val, 'id', $tablename_sub);
    }
    public function checkValCommission() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['commission_check'] = $status;
        $this->Main_model->update_commen($datass_val, $tablenamemain);
        if ($status == 0) {
            $tablename_sub = $form_data->tablename_sub;
            $datass['get_id'] = $id;
            $datass['commission'] = 0;
            $this->Main_model->update_commen_where($datass, 'order_id', $tablename_sub);
        }
    }
    public function checkValGST() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablenamemain = $form_data->tablenamemain;
        $status = $form_data->status;
        $id = $form_data->order_id;
        $datass_val['get_id'] = $id;
        $datass_val['gst_check'] = $status;
        $this->Main_model->update_commen($datass_val, $tablenamemain);
        $tablename_sub = $form_data->tablename_sub;
        $datass['get_id'] = $id;
        $datass['gst_check'] = $status;
        $this->Main_model->update_commen_where($datass, 'order_id', $tablename_sub);
    }
    public function image_length_update() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename_sub = $form_data->tablename_sub;
        $datass['get_id'] = $form_data->order_product_id;
        $datass['image_length'] = $form_data->image_length;
        $datass['base_id'] = $form_data->base_no;
        $this->Main_model->update_commen_where($datass, 'id', $tablename_sub);
    }
    public function specificationFind() {
        $additional_information = $this->Main_model->where_names_two_order_by('additional_information', 'grouping', '2', 'deleteid', '0', 'id', 'ASC');
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $product_order_id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        $value_id = "";
        $output = array();
        $results = $this->Main_model->where_names($tablename, 'id', $product_order_id);
        foreach ($results as $values) {
            foreach ($additional_information as $vl) {
                $label_name = strtolower($vl->label_name);
                $output[$label_name] = $values->$label_name;
            }
            $output['product_name'] = $values->product_name;
        }
        echo json_encode($output);
    }
    public function fetch_data_size_options_values() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $product_order_id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        $value_id = "";
        $viewstatus = 1;
        $section_lable = array();
        $section_value = array();
        $degree_value = array();
        $array = array();
        $results = $this->Main_model->where_names($tablename, 'id', $product_order_id);
        foreach ($results as $values) {
            if ($values->categories_id == 32) {
                $viewstatus = 0;
                if ($values->section_lable != "") {
                    $section_lable = str_replace('|', '', $values->section_lable);
                    $section_value = str_replace('|', '', $values->section_value);
                    $degree_value = str_replace('|', '', $values->degree);
                }
            } else {
                $viewstatus = 1;
                if ($values->section_lable != "") {
                    $section_lable = explode('|', $values->section_lable);
                    $section_value = explode('|', $values->section_value);
                    $degree_value = explode('|', $values->degree);
                }
            }
        }
        if (count($section_lable) != 0) {
            if ($viewstatus == 0) {
                $array[] = array('viewstatus' => $viewstatus, 'section_lable' => $section_lable, 'section_value' => $section_value, 'degree_value' => $degree_value, 'lable' => $lable);
            } else {
                $lable = range('A', 'Z');
                for ($i = 0;$i < count($section_lable);$i++) {
                    $array[] = array('viewstatus' => $viewstatus, 'section_lable' => $section_lable[$i], 'section_value' => $section_value[$i], 'degree_value' => $degree_value[$i], 'lable' => $lable[$i]);
                }
            }
        }
        echo json_encode($array);
    }
    public function fetch_data_size_options_values_total() {
        $form_data = json_decode(file_get_contents("php://input"));
        $tablename = $form_data->tablename_sub;
        $product_order_id = $form_data->order_product_id;
        $product_id = $form_data->product_id;
        $value_id = "";
        $section_lable = array();
        $section_value = array();
        $degree_value = array();
        $array = array();
        $results = $this->Main_model->where_names($tablename, 'id', $product_order_id);
        foreach ($results as $values) {
            if ($values->section_lable != "") {
                $section_lable = explode('|', $values->section_lable);
                $section_value = explode('|', $values->section_value);
                $degree_value = explode('|', $values->degree);
            }
        }
        $sizetotal = 0;
        if (count($section_lable) != 0) {
            $lable = range('A', 'Z');
            for ($i = 0;$i < count($section_lable);$i++) {
                $sizetotal+= $section_lable[$i];
            }
            $array = array('sizetotal' => $sizetotal);
        }
        echo json_encode($array);
    }
    public function overall_list() {
        if (isset($this->session->userdata['logged_in'])) {
            $data['user_group'] = $this->Main_model->where_names('sales_group', 'deleteid', '0');
            $data['sales_team'] = $this->Main_model->where_names_two_order_by('admin_users', 'access', '12', 'deleteid', '0', 'id', 'ASC');
            $neworder_id = 1;
            $order_last_count = $this->Main_model->order_last_count('orders_process');
            foreach ($order_last_count as $r) {
                $neworder_id = $r->id + 1;
            }
            $data['neworder_id'] = base64_encode($neworder_id);
            $data['active_base'] = 'customer_1';
            $data['active'] = 'customer_1';
            $data['title'] = 'Order List';
            $data['top_nav'] = $this->load->view('commen/top_nav', $data, TRUE);
            $data['side_nav'] = $this->load->view('commen/side_nav', $data, TRUE);
            $data['footer_copy_rights'] = $this->load->view('commen/footer_copy_rights', $data, TRUE);
            $this->load->view('order/overall_list', $data);
        } else {
            $this->load->view('admin/index');
        }
    }
    public function fetch_data_table_date_waise() {
        $tablename = $_GET['tablename'];
        $order_base = $_GET['order_base'];
        $formdate = $_GET['formdate'];
        $todate = $_GET['todate'];
        $i = 1;
        $array = array();
        
        
        
         $search = $_GET['search'];
         if ($search != "") {
                     if($this->session->userdata['logged_in']['access']!=12)
                     {
                       $sales_search=" OR c.name LIKE '%" . $search . "%'";
                     }
                   
                     $where .= " AND a.order_no LIKE '%" . $search . "' OR b.company_name LIKE '%" . $search . "%' OR b.phone LIKE '%" . $search . "%'  $sales_search";
            
         }
        
        
        
        
        
        
        
        
        
        if ($this->session->userdata['logged_in']['access'] == '17')
        {
            
            
            $sales_team_id = array($this->userid);
            $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                    $sales_team_id[] = $point->id;
            }
                
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $sql = ' AND  a.entry_user_id IN (' . $sales_team_id . ')';
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'  $sql  $where ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
            
            
            
        } elseif ($this->session->userdata['logged_in']['access'] == '11' || $this->session->userdata['logged_in']['access'] == '12') {
           
           
             $sales_team_id = array($this->userid);
            $resultsales_team = $this->Main_model->where_in_names('sales_member_head','sales_head_id',$sales_team_id);
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->sales_member_id;
            }
            
             $poin_to_member = $this->Main_model->where_names('admin_users','mark_sales_member',$this->userid);
            foreach ($poin_to_member as $point) {
                $sales_team_id[] = $point->id;
            }
            

            
           $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.user_id IN (' . $sales_team_id . ')';
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'    $where $userslog  ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
            
      
        } elseif ($this->session->userdata['logged_in']['access'] == '16') {
           $sales_team_id = array($this->userid);
            $query = $this->db->query("SELECT id FROM `sales_group`  WHERE sales_group_head='" . $this->userid . "'");
            $resultsales_team = $query->result();
            foreach ($resultsales_team as $values) {
                $sales_team_id[] = $values->id;
            }
            $sales_team_id = "'" . implode("','", $sales_team_id) . "'";
            $userslog = ' AND  a.sales_group IN (' . $sales_team_id . ')';
            
             $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'    $where $userslog  ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
        }else{
            
            
            $query = $this->db->query("SELECT a.* FROM $tablename as a LEFT JOIN customers as b ON a.customer_id=b.id LEFT JOIN admin_users as c ON a.user_id=c.id  WHERE a.deleteid='0'    $where   ORDER BY a.id DESC LIMIT 0,10");
            $result = $query->result();
        }
        
        
        
        if ($tablename == 'orders') {
            $tablename_sub = "order_product_list";
        }
        if ($tablename == 'orders_quotation') {
            $tablename_sub = "order_product_list_quotation";
        }
        if ($tablename == 'orders_process') {
            $tablename_sub = "order_product_list_process";
        }
        foreach ($result as $value) {
            $totalamount = 0;
            $commission = 0;
            $resulttotal = $this->Main_model->where_names_two_order_by($tablename_sub, 'order_id', $value->id, 'paricel_mode', $value->paricel_mode, 'id', 'DESC');
            foreach ($resulttotal as $tot) {
                $totalamount+= $tot->amount + $tot->commission;
                $commission+= $tot->commission;
            }
            $order_by = "";
            $orderby = $this->Main_model->where_names_two_order_by('admin_users', 'id', $value->user_id, 'deleteid', '0', 'id', 'DESC');
            foreach ($orderby as $orderbyval) {
                $order_by = $orderbyval->name;
            }
            $company_name = "";
            $email = "";
            $phone = "";
            $address = "";
            $customers = $this->Main_model->where_names('customers', 'id', $value->customer_id);
            foreach ($customers as $csval) {
                $company_name = $csval->company_name;
                $email = $csval->email;
                $phone = $csval->phone;
                $address = $csval->address1 . ' ' . $csval->address2 . ' ' . $csval->landmark . ' ' . $csval->zone . ' ' . $csval->pincode. ' ' . $csval->state;
            }
            if ($value->reason == 1) {
                $value->reason = 'Moved';
            }
            if ($value->reason == '-2') {
                $value->reason = 'TL Re-Assigned';
            }
            $minisroundoff = $value->roundoff;
            $roundoffstatus = $value->roundoffstatus;
            $discount = $value->discount;
            if ($roundoffstatus == 1) {
                $discountfulltotal = $totalamount - $discount + $minisroundoff;
            } else {
                $discountfulltotal = $totalamount - $discount - $minisroundoff;
            }
            $array[] = array('no' => $i, 'id' => $value->id, 'base_id' => base64_encode($value->id), 'order_no' => $value->order_no, 'reason' => $value->reason, 'name' => $company_name, 'email' => $email, 'phone' => $phone, 'totalamount' => round($discountfulltotal), 'commission' => round($commission), 'delivery_charge' => $value->delivery_charge, 'address' => $address, 'order_by' => $order_by, 'order_base' => $value->order_base, 'create_date' => date('d-m-Y', strtotime($value->create_date)), 'create_time' => $value->create_time);
            $i++;
        }
        echo json_encode($array);
    }
    
    
    
    
    
    
    
    
    
    public function serach_by_datas()
    {  
        
        
         $form_data = json_decode(file_get_contents("php://input"));
                     
         $search =$form_data->search;
         $array=array();
         $query = $this->db->query("SELECT company_name as name FROM  customers WHERE  company_name LIKE '%".$search."%'  ORDER BY id DESC LIMIT 0, 15");
         $result = $query->result();
       
        if(count($result)>0)
        {
           
            foreach ($result as  $value) {
                                             	     
            $array[] = $value->name;
                                             	 	
            } 
           
        }
        else
        {
             $query = $this->db->query("SELECT phone as name FROM  customers WHERE   phone LIKE '%".$search."%' ORDER BY id DESC LIMIT 0, 15");
             $result = $query->result();
             if(count($result)>0)
             {
                     foreach ($result as  $value)
                     {
                                                     	     
                        $array[] = $value->name;
                                                     	 	
                     } 
             
             }
             else
             {
                 
                 $query = $this->db->query("SELECT order_no as name FROM  orders_process WHERE   order_no LIKE '%".$search."' ORDER BY id DESC LIMIT 0, 15");
                 $result = $query->result();
                 if(count($result)>0)
                 {
                      foreach ($result as  $value)
                      {
                                                     	     
                        $array[] = $value->name;
                                                     	 	
                      } 
                     
                 }
                 else
                 {
                     
                         $query = $this->db->query("SELECT vehicle_number as name FROM  vehicle WHERE   vehicle_number LIKE '%".$search."%' ORDER BY id DESC LIMIT 0, 15");
                         $result = $query->result();
                         if(count($result)>0)
                         {
                              foreach ($result as  $value)
                              {
                                                             	     
                                $array[] = $value->name;
                                                             	 	
                              } 
                             
                         }
                         else
                         {
                             
                             $query = $this->db->query("SELECT name as name FROM  driver WHERE   name LIKE '%".$search."%' ORDER BY id DESC LIMIT 0, 15");
                             $result = $query->result();
                             if(count($result)>0)
                             {
                                  foreach ($result as  $value)
                                  {
                                                                 	     
                                    $array[] = $value->name;
                                                                 	 	
                                  } 
                                 
                             }
                             
                         }
                     
                 }
                 
                 
             }
        }
       
       
      
        
        echo json_encode($array);
        
        
    }
    
    
    
    
    
    
    
    
    
}
